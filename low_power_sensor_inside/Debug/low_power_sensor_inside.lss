
low_power_sensor_inside.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000098  00800100  00002514  000025a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002514  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d8  00800198  00800198  00002640  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002640  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002670  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000640  00000000  00000000  000026b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b0e0  00000000  00000000  00002cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e4e  00000000  00000000  0000ddd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000387a  00000000  00000000  0000fc1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001610  00000000  00000000  00013498  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002969  00000000  00000000  00014aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007f2f  00000000  00000000  00017411  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000650  00000000  00000000  0001f340  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__ctors_end>
       4:	0c 94 81 0c 	jmp	0x1902	; 0x1902 <__vector_1>
       8:	0c 94 a8 0c 	jmp	0x1950	; 0x1950 <__vector_2>
       c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      10:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      14:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      18:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <__vector_6>
      1c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      20:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      24:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      28:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      2c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      30:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      34:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      38:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      3c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      40:	0c 94 cf 0c 	jmp	0x199e	; 0x199e <__vector_16>
      44:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      48:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      4c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      50:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      54:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      58:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      5c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      60:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      64:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	5e 01       	movw	r10, r28
      6a:	01 1f       	adc	r16, r17
      6c:	01 03       	mulsu	r16, r17
      6e:	03 01       	movw	r0, r6
      70:	00 8a       	std	Z+16, r0	; 0x10
      72:	02 01       	movw	r0, r4
      74:	0a 01       	movw	r0, r20
      76:	02 02       	muls	r16, r18
      78:	01 00       	.word	0x0001	; ????
      7a:	64 00       	.word	0x0064	; ????
      7c:	1e 47       	sbci	r17, 0x7E	; 126
      7e:	04 0b       	sbc	r16, r20
      80:	09 06       	cpc	r0, r25
      82:	00 7c       	andi	r16, 0xC0	; 192
      84:	01 01       	movw	r0, r2
      86:	06 01       	movw	r0, r12
      88:	03 03       	mulsu	r16, r19
      8a:	01 00       	.word	0x0001	; ????
      8c:	f4 01       	movw	r30, r8
      8e:	06 0e       	add	r0, r22
      90:	01 02       	muls	r16, r17
      92:	02 01       	movw	r0, r4
      94:	00 c2       	rjmp	.+1024   	; 0x496 <_Z8sendDatall+0x2a>
      96:	01 17       	cp	r16, r17
      98:	01 01       	movw	r0, r2
      9a:	02 02       	muls	r16, r18
      9c:	01 01       	movw	r0, r2

0000009e <digital_pin_to_timer_PGM>:
      9e:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      ae:	00 00 00 00                                         ....

000000b2 <digital_pin_to_bit_mask_PGM>:
      b2:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      c2:	04 08 10 20                                         ... 

000000c6 <digital_pin_to_port_PGM>:
      c6:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      d6:	03 03 03 03                                         ....

000000da <port_to_input_PGM>:
      da:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000e4 <port_to_output_PGM>:
      e4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ee <port_to_mode_PGM>:
      ee:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000f8 <__ctors_start>:
      f8:	58 05       	cpc	r21, r8

000000fa <__ctors_end>:
      fa:	11 24       	eor	r1, r1
      fc:	1f be       	out	0x3f, r1	; 63
      fe:	cf ef       	ldi	r28, 0xFF	; 255
     100:	d8 e0       	ldi	r29, 0x08	; 8
     102:	de bf       	out	0x3e, r29	; 62
     104:	cd bf       	out	0x3d, r28	; 61

00000106 <__do_copy_data>:
     106:	11 e0       	ldi	r17, 0x01	; 1
     108:	a0 e0       	ldi	r26, 0x00	; 0
     10a:	b1 e0       	ldi	r27, 0x01	; 1
     10c:	e4 e1       	ldi	r30, 0x14	; 20
     10e:	f5 e2       	ldi	r31, 0x25	; 37
     110:	02 c0       	rjmp	.+4      	; 0x116 <__do_copy_data+0x10>
     112:	05 90       	lpm	r0, Z+
     114:	0d 92       	st	X+, r0
     116:	a8 39       	cpi	r26, 0x98	; 152
     118:	b1 07       	cpc	r27, r17
     11a:	d9 f7       	brne	.-10     	; 0x112 <__do_copy_data+0xc>

0000011c <__do_clear_bss>:
     11c:	22 e0       	ldi	r18, 0x02	; 2
     11e:	a8 e9       	ldi	r26, 0x98	; 152
     120:	b1 e0       	ldi	r27, 0x01	; 1
     122:	01 c0       	rjmp	.+2      	; 0x126 <.do_clear_bss_start>

00000124 <.do_clear_bss_loop>:
     124:	1d 92       	st	X+, r1

00000126 <.do_clear_bss_start>:
     126:	a0 37       	cpi	r26, 0x70	; 112
     128:	b2 07       	cpc	r27, r18
     12a:	e1 f7       	brne	.-8      	; 0x124 <.do_clear_bss_loop>

0000012c <__do_global_ctors>:
     12c:	10 e0       	ldi	r17, 0x00	; 0
     12e:	cd e7       	ldi	r28, 0x7D	; 125
     130:	d0 e0       	ldi	r29, 0x00	; 0
     132:	04 c0       	rjmp	.+8      	; 0x13c <__do_global_ctors+0x10>
     134:	21 97       	sbiw	r28, 0x01	; 1
     136:	fe 01       	movw	r30, r28
     138:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <__tablejump2__>
     13c:	cc 37       	cpi	r28, 0x7C	; 124
     13e:	d1 07       	cpc	r29, r17
     140:	c9 f7       	brne	.-14     	; 0x134 <__do_global_ctors+0x8>
     142:	0e 94 3f 0c 	call	0x187e	; 0x187e <main>
     146:	0c 94 88 12 	jmp	0x2510	; 0x2510 <_exit>

0000014a <__bad_interrupt>:
     14a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014e <setup>:
  return result;
}


//trace function
void trc(String msg){
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	00 d0       	rcall	.+0      	; 0x156 <setup+0x8>
     156:	00 d0       	rcall	.+0      	; 0x158 <setup+0xa>
     158:	00 d0       	rcall	.+0      	; 0x15a <setup+0xc>
     15a:	cd b7       	in	r28, 0x3d	; 61
     15c:	de b7       	in	r29, 0x3e	; 62
     15e:	10 e0       	ldi	r17, 0x00	; 0
     160:	60 e0       	ldi	r22, 0x00	; 0
     162:	81 2f       	mov	r24, r17
     164:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <pinMode>
     168:	60 e0       	ldi	r22, 0x00	; 0
     16a:	81 2f       	mov	r24, r17
     16c:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <digitalWrite>
     170:	1f 5f       	subi	r17, 0xFF	; 255
     172:	14 31       	cpi	r17, 0x14	; 20
     174:	a9 f7       	brne	.-22     	; 0x160 <setup+0x12>
     176:	60 e0       	ldi	r22, 0x00	; 0
     178:	84 e0       	ldi	r24, 0x04	; 4
     17a:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <pinMode>
     17e:	60 e0       	ldi	r22, 0x00	; 0
     180:	87 e0       	ldi	r24, 0x07	; 7
     182:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <pinMode>
     186:	61 e0       	ldi	r22, 0x01	; 1
     188:	89 e0       	ldi	r24, 0x09	; 9
     18a:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <pinMode>
     18e:	61 e0       	ldi	r22, 0x01	; 1
     190:	89 e0       	ldi	r24, 0x09	; 9
     192:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <digitalWrite>
     196:	68 ec       	ldi	r22, 0xC8	; 200
     198:	70 e0       	ldi	r23, 0x00	; 0
     19a:	80 e0       	ldi	r24, 0x00	; 0
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <delay>
     1a2:	60 e0       	ldi	r22, 0x00	; 0
     1a4:	89 e0       	ldi	r24, 0x09	; 9
     1a6:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <digitalWrite>
     1aa:	60 e0       	ldi	r22, 0x00	; 0
     1ac:	89 e0       	ldi	r24, 0x09	; 9
     1ae:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <pinMode>
     1b2:	88 e5       	ldi	r24, 0x58	; 88
     1b4:	92 e0       	ldi	r25, 0x02	; 2
     1b6:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <SleepTimer+0x1>
     1ba:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <SleepTimer>
     1be:	6f e1       	ldi	r22, 0x1F	; 31
     1c0:	71 e0       	ldi	r23, 0x01	; 1
     1c2:	ce 01       	movw	r24, r28
     1c4:	01 96       	adiw	r24, 0x01	; 1
     1c6:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZN6StringC1EPKc>
     1ca:	ce 01       	movw	r24, r28
     1cc:	01 96       	adiw	r24, 0x01	; 1
     1ce:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <_ZN6StringD1Ev>
     1d2:	8c e0       	ldi	r24, 0x0C	; 12
     1d4:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <__data_end>
     1d8:	26 96       	adiw	r28, 0x06	; 6
     1da:	0f b6       	in	r0, 0x3f	; 63
     1dc:	f8 94       	cli
     1de:	de bf       	out	0x3e, r29	; 62
     1e0:	0f be       	out	0x3f, r0	; 63
     1e2:	cd bf       	out	0x3d, r28	; 61
     1e4:	df 91       	pop	r29
     1e6:	cf 91       	pop	r28
     1e8:	1f 91       	pop	r17
     1ea:	08 95       	ret

000001ec <_Z12sleepSecondsi>:
     1ec:	0f 93       	push	r16
     1ee:	1f 93       	push	r17
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
     1f4:	97 fd       	sbrc	r25, 7
     1f6:	07 96       	adiw	r24, 0x07	; 7
     1f8:	ec 01       	movw	r28, r24
     1fa:	83 e0       	ldi	r24, 0x03	; 3
     1fc:	d5 95       	asr	r29
     1fe:	c7 95       	ror	r28
     200:	8a 95       	dec	r24
     202:	e1 f7       	brne	.-8      	; 0x1fc <_Z12sleepSecondsi+0x10>
     204:	00 e0       	ldi	r16, 0x00	; 0
     206:	10 e0       	ldi	r17, 0x00	; 0
     208:	0c 17       	cp	r16, r28
     20a:	1d 07       	cpc	r17, r29
     20c:	54 f4       	brge	.+20     	; 0x222 <_Z12sleepSecondsi+0x36>
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	40 e0       	ldi	r20, 0x00	; 0
     212:	69 e0       	ldi	r22, 0x09	; 9
     214:	8a ec       	ldi	r24, 0xCA	; 202
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	0e 94 75 07 	call	0xeea	; 0xeea <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t>
     21c:	0f 5f       	subi	r16, 0xFF	; 255
     21e:	1f 4f       	sbci	r17, 0xFF	; 255
     220:	f3 cf       	rjmp	.-26     	; 0x208 <_Z12sleepSecondsi+0x1c>
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	1f 91       	pop	r17
     228:	0f 91       	pop	r16
     22a:	08 95       	ret

0000022c <_Z19checkForFreshEEpromv>:
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	0e 94 19 12 	call	0x2432	; 0x2432 <eeprom_read_byte>
     234:	9f ef       	ldi	r25, 0xFF	; 255
     236:	98 0f       	add	r25, r24
     238:	9e 3f       	cpi	r25, 0xFE	; 254
     23a:	58 f0       	brcs	.+22     	; 0x252 <_Z19checkForFreshEEpromv+0x26>
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <ee_address+0x1>
     244:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ee_address>
     248:	61 e0       	ldi	r22, 0x01	; 1
     24a:	80 e0       	ldi	r24, 0x00	; 0
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0c 94 43 12 	jmp	0x2486	; 0x2486 <eeprom_write_byte>
     252:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <__data_end>
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	01 97       	sbiw	r24, 0x01	; 1
     25c:	82 9f       	mul	r24, r18
     25e:	a0 01       	movw	r20, r0
     260:	83 9f       	mul	r24, r19
     262:	50 0d       	add	r21, r0
     264:	92 9f       	mul	r25, r18
     266:	50 0d       	add	r21, r0
     268:	11 24       	eor	r1, r1
     26a:	ca 01       	movw	r24, r20
     26c:	01 96       	adiw	r24, 0x01	; 1
     26e:	28 0f       	add	r18, r24
     270:	39 1f       	adc	r19, r25
     272:	21 15       	cp	r18, r1
     274:	34 40       	sbci	r19, 0x04	; 4
     276:	10 f0       	brcs	.+4      	; 0x27c <_Z19checkForFreshEEpromv+0x50>
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <ee_address+0x1>
     280:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ee_address>
     284:	08 95       	ret

00000286 <_Z10readEEDatav>:
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
     28a:	cd b7       	in	r28, 0x3d	; 61
     28c:	de b7       	in	r29, 0x3e	; 62
     28e:	2c 97       	sbiw	r28, 0x0c	; 12
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	f8 94       	cli
     294:	de bf       	out	0x3e, r29	; 62
     296:	0f be       	out	0x3f, r0	; 63
     298:	cd bf       	out	0x3d, r28	; 61
     29a:	0e 94 16 01 	call	0x22c	; 0x22c <_Z19checkForFreshEEpromv>
     29e:	4c e0       	ldi	r20, 0x0C	; 12
     2a0:	50 e0       	ldi	r21, 0x00	; 0
     2a2:	66 e0       	ldi	r22, 0x06	; 6
     2a4:	71 e0       	ldi	r23, 0x01	; 1
     2a6:	ce 01       	movw	r24, r28
     2a8:	01 96       	adiw	r24, 0x01	; 1
     2aa:	0e 94 09 12 	call	0x2412	; 0x2412 <eeprom_read_block>
     2ae:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <fresh_eeprom>
     2b2:	88 23       	and	r24, r24
     2b4:	81 f0       	breq	.+32     	; 0x2d6 <_Z10readEEDatav+0x50>
     2b6:	1a 82       	std	Y+2, r1	; 0x02
     2b8:	19 82       	std	Y+1, r1	; 0x01
     2ba:	1c 86       	std	Y+12, r1	; 0x0c
     2bc:	1b 86       	std	Y+11, r1	; 0x0b
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	a0 ec       	ldi	r26, 0xC0	; 192
     2c4:	bf e7       	ldi	r27, 0x7F	; 127
     2c6:	8b 83       	std	Y+3, r24	; 0x03
     2c8:	9c 83       	std	Y+4, r25	; 0x04
     2ca:	ad 83       	std	Y+5, r26	; 0x05
     2cc:	be 83       	std	Y+6, r27	; 0x06
     2ce:	8f 83       	std	Y+7, r24	; 0x07
     2d0:	98 87       	std	Y+8, r25	; 0x08
     2d2:	a9 87       	std	Y+9, r26	; 0x09
     2d4:	ba 87       	std	Y+10, r27	; 0x0a
     2d6:	8c e0       	ldi	r24, 0x0C	; 12
     2d8:	fe 01       	movw	r30, r28
     2da:	31 96       	adiw	r30, 0x01	; 1
     2dc:	a9 e9       	ldi	r26, 0x99	; 153
     2de:	b1 e0       	ldi	r27, 0x01	; 1
     2e0:	01 90       	ld	r0, Z+
     2e2:	0d 92       	st	X+, r0
     2e4:	8a 95       	dec	r24
     2e6:	e1 f7       	brne	.-8      	; 0x2e0 <_Z10readEEDatav+0x5a>
     2e8:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <ee_data+0x6>
     2ec:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <ee_data+0x7>
     2f0:	a0 91 a1 01 	lds	r26, 0x01A1	; 0x8001a1 <ee_data+0x8>
     2f4:	b0 91 a2 01 	lds	r27, 0x01A2	; 0x8001a2 <ee_data+0x9>
     2f8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <old_humidity>
     2fc:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <old_humidity+0x1>
     300:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <old_humidity+0x2>
     304:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <old_humidity+0x3>
     308:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <ee_data+0x2>
     30c:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <ee_data+0x3>
     310:	a0 91 9d 01 	lds	r26, 0x019D	; 0x80019d <ee_data+0x4>
     314:	b0 91 9e 01 	lds	r27, 0x019E	; 0x80019e <ee_data+0x5>
     318:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <old_temperature>
     31c:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <old_temperature+0x1>
     320:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <old_temperature+0x2>
     324:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <old_temperature+0x3>
     328:	2c 96       	adiw	r28, 0x0c	; 12
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	f8 94       	cli
     32e:	de bf       	out	0x3e, r29	; 62
     330:	0f be       	out	0x3f, r0	; 63
     332:	cd bf       	out	0x3d, r28	; 61
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	08 95       	ret

0000033a <_Z11writeEEDatab>:
     33a:	cf 93       	push	r28
     33c:	88 23       	and	r24, r24
     33e:	49 f0       	breq	.+18     	; 0x352 <_Z11writeEEDatab+0x18>
     340:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <ee_data+0xa>
     344:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <ee_data+0xb>
     348:	01 96       	adiw	r24, 0x01	; 1
     34a:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <ee_data+0xb>
     34e:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <ee_data+0xa>
     352:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <ee_data>
     356:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <ee_data+0x1>
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <ee_data+0x1>
     360:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <ee_data>
     364:	40 91 98 01 	lds	r20, 0x0198	; 0x800198 <__data_end>
     368:	50 e0       	ldi	r21, 0x00	; 0
     36a:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <ee_address>
     36e:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <ee_address+0x1>
     372:	89 e9       	ldi	r24, 0x99	; 153
     374:	91 e0       	ldi	r25, 0x01	; 1
     376:	0e 94 21 12 	call	0x2442	; 0x2442 <eeprom_update_block>
     37a:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <ee_data>
     37e:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <ee_data+0x1>
     382:	80 33       	cpi	r24, 0x30	; 48
     384:	95 47       	sbci	r25, 0x75	; 117
     386:	00 f1       	brcs	.+64     	; 0x3c8 <_Z11writeEEDatab+0x8e>
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 19 12 	call	0x2432	; 0x2432 <eeprom_read_byte>
     390:	c8 2f       	mov	r28, r24
     392:	68 2f       	mov	r22, r24
     394:	70 e0       	ldi	r23, 0x00	; 0
     396:	6f 5f       	subi	r22, 0xFF	; 255
     398:	7f 4f       	sbci	r23, 0xFF	; 255
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0e 94 31 12 	call	0x2462	; 0x2462 <eeprom_update_byte>
     3a2:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <__data_end>
     3a6:	c2 9f       	mul	r28, r18
     3a8:	c0 01       	movw	r24, r0
     3aa:	11 24       	eor	r1, r1
     3ac:	01 96       	adiw	r24, 0x01	; 1
     3ae:	ac 01       	movw	r20, r24
     3b0:	42 0f       	add	r20, r18
     3b2:	51 1d       	adc	r21, r1
     3b4:	9a 01       	movw	r18, r20
     3b6:	21 15       	cp	r18, r1
     3b8:	34 40       	sbci	r19, 0x04	; 4
     3ba:	10 f0       	brcs	.+4      	; 0x3c0 <_Z11writeEEDatab+0x86>
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <ee_address+0x1>
     3c4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ee_address>
     3c8:	cf 91       	pop	r28
     3ca:	08 95       	ret

000003cc <_Z17measureTempAndHumv>:
     3cc:	cf 92       	push	r12
     3ce:	df 92       	push	r13
     3d0:	ef 92       	push	r14
     3d2:	ff 92       	push	r15
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
     3d8:	64 ef       	ldi	r22, 0xF4	; 244
     3da:	71 e0       	ldi	r23, 0x01	; 1
     3dc:	80 e0       	ldi	r24, 0x00	; 0
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <delay>
     3e4:	c5 e0       	ldi	r28, 0x05	; 5
     3e6:	d0 e0       	ldi	r29, 0x00	; 0
     3e8:	60 e0       	ldi	r22, 0x00	; 0
     3ea:	87 ea       	ldi	r24, 0xA7	; 167
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	0e 94 31 07 	call	0xe62	; 0xe62 <_ZN3DHT12readHumidityEb>
     3f2:	60 93 15 01 	sts	0x0115, r22	; 0x800115 <humidity>
     3f6:	70 93 16 01 	sts	0x0116, r23	; 0x800116 <humidity+0x1>
     3fa:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <humidity+0x2>
     3fe:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <humidity+0x3>
     402:	40 e0       	ldi	r20, 0x00	; 0
     404:	60 e0       	ldi	r22, 0x00	; 0
     406:	87 ea       	ldi	r24, 0xA7	; 167
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN3DHT15readTemperatureEbb>
     40e:	6b 01       	movw	r12, r22
     410:	7c 01       	movw	r14, r24
     412:	60 93 11 01 	sts	0x0111, r22	; 0x800111 <temperature>
     416:	70 93 12 01 	sts	0x0112, r23	; 0x800112 <temperature+0x1>
     41a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <temperature+0x2>
     41e:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <temperature+0x3>
     422:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <humidity>
     426:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <humidity+0x1>
     42a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <humidity+0x2>
     42e:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <humidity+0x3>
     432:	9b 01       	movw	r18, r22
     434:	ac 01       	movw	r20, r24
     436:	0e 94 39 0c 	call	0x1872	; 0x1872 <__unordsf2>
     43a:	81 11       	cpse	r24, r1
     43c:	08 c0       	rjmp	.+16     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     43e:	a7 01       	movw	r20, r14
     440:	96 01       	movw	r18, r12
     442:	c7 01       	movw	r24, r14
     444:	b6 01       	movw	r22, r12
     446:	0e 94 39 0c 	call	0x1872	; 0x1872 <__unordsf2>
     44a:	88 23       	and	r24, r24
     44c:	41 f0       	breq	.+16     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     44e:	64 e3       	ldi	r22, 0x34	; 52
     450:	78 e0       	ldi	r23, 0x08	; 8
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <delay>
     45a:	21 97       	sbiw	r28, 0x01	; 1
     45c:	29 f6       	brne	.-118    	; 0x3e8 <_Z17measureTempAndHumv+0x1c>
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	ff 90       	pop	r15
     464:	ef 90       	pop	r14
     466:	df 90       	pop	r13
     468:	cf 90       	pop	r12
     46a:	08 95       	ret

0000046c <_Z8sendDatall>:
     46c:	4f 92       	push	r4
     46e:	5f 92       	push	r5
     470:	6f 92       	push	r6
     472:	7f 92       	push	r7
     474:	8f 92       	push	r8
     476:	9f 92       	push	r9
     478:	af 92       	push	r10
     47a:	bf 92       	push	r11
     47c:	cf 92       	push	r12
     47e:	df 92       	push	r13
     480:	ef 92       	push	r14
     482:	ff 92       	push	r15
     484:	cf 93       	push	r28
     486:	df 93       	push	r29
     488:	00 d0       	rcall	.+0      	; 0x48a <_Z8sendDatall+0x1e>
     48a:	00 d0       	rcall	.+0      	; 0x48c <_Z8sendDatall+0x20>
     48c:	00 d0       	rcall	.+0      	; 0x48e <_Z8sendDatall+0x22>
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	6b 01       	movw	r12, r22
     494:	7c 01       	movw	r14, r24
     496:	49 01       	movw	r8, r18
     498:	5a 01       	movw	r10, r20
     49a:	84 e3       	ldi	r24, 0x34	; 52
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	0e 94 68 11 	call	0x22d0	; 0x22d0 <atol>
     4a2:	2b 01       	movw	r4, r22
     4a4:	3c 01       	movw	r6, r24
     4a6:	6b e3       	ldi	r22, 0x3B	; 59
     4a8:	71 e0       	ldi	r23, 0x01	; 1
     4aa:	ce 01       	movw	r24, r28
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZN6StringC1EPKc>
     4b2:	ce 01       	movw	r24, r28
     4b4:	01 96       	adiw	r24, 0x01	; 1
     4b6:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <_ZN6StringD1Ev>
     4ba:	2a e0       	ldi	r18, 0x0A	; 10
     4bc:	b7 01       	movw	r22, r14
     4be:	a6 01       	movw	r20, r12
     4c0:	ce 01       	movw	r24, r28
     4c2:	01 96       	adiw	r24, 0x01	; 1
     4c4:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <_ZN6StringC1Elh>
     4c8:	ce 01       	movw	r24, r28
     4ca:	01 96       	adiw	r24, 0x01	; 1
     4cc:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <_ZN6StringD1Ev>
     4d0:	66 e4       	ldi	r22, 0x46	; 70
     4d2:	71 e0       	ldi	r23, 0x01	; 1
     4d4:	ce 01       	movw	r24, r28
     4d6:	01 96       	adiw	r24, 0x01	; 1
     4d8:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZN6StringC1EPKc>
     4dc:	ce 01       	movw	r24, r28
     4de:	01 96       	adiw	r24, 0x01	; 1
     4e0:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <_ZN6StringD1Ev>
     4e4:	2a e0       	ldi	r18, 0x0A	; 10
     4e6:	b5 01       	movw	r22, r10
     4e8:	a4 01       	movw	r20, r8
     4ea:	ce 01       	movw	r24, r28
     4ec:	01 96       	adiw	r24, 0x01	; 1
     4ee:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <_ZN6StringC1Elh>
     4f2:	ce 01       	movw	r24, r28
     4f4:	01 96       	adiw	r24, 0x01	; 1
     4f6:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <_ZN6StringD1Ev>
     4fa:	4c 14       	cp	r4, r12
     4fc:	5d 04       	cpc	r5, r13
     4fe:	6e 04       	cpc	r6, r14
     500:	7f 04       	cpc	r7, r15
     502:	21 f0       	breq	.+8      	; 0x50c <_Z8sendDatall+0xa0>
     504:	c8 0c       	add	r12, r8
     506:	d9 1c       	adc	r13, r9
     508:	ea 1c       	adc	r14, r10
     50a:	fb 1c       	adc	r15, r11
     50c:	6f e4       	ldi	r22, 0x4F	; 79
     50e:	71 e0       	ldi	r23, 0x01	; 1
     510:	ce 01       	movw	r24, r28
     512:	01 96       	adiw	r24, 0x01	; 1
     514:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZN6StringC1EPKc>
     518:	ce 01       	movw	r24, r28
     51a:	01 96       	adiw	r24, 0x01	; 1
     51c:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <_ZN6StringD1Ev>
     520:	2a e0       	ldi	r18, 0x0A	; 10
     522:	b7 01       	movw	r22, r14
     524:	a6 01       	movw	r20, r12
     526:	ce 01       	movw	r24, r28
     528:	01 96       	adiw	r24, 0x01	; 1
     52a:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <_ZN6StringC1Elh>
     52e:	ce 01       	movw	r24, r28
     530:	01 96       	adiw	r24, 0x01	; 1
     532:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <_ZN6StringD1Ev>
     536:	28 e1       	ldi	r18, 0x18	; 24
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	b7 01       	movw	r22, r14
     53c:	a6 01       	movw	r20, r12
     53e:	8b eb       	ldi	r24, 0xBB	; 187
     540:	91 e0       	ldi	r25, 0x01	; 1
     542:	0e 94 7d 08 	call	0x10fa	; 0x10fa <_ZN8RCSwitch4sendEmj>
     546:	26 96       	adiw	r28, 0x06	; 6
     548:	0f b6       	in	r0, 0x3f	; 63
     54a:	f8 94       	cli
     54c:	de bf       	out	0x3e, r29	; 62
     54e:	0f be       	out	0x3f, r0	; 63
     550:	cd bf       	out	0x3d, r28	; 61
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	ff 90       	pop	r15
     558:	ef 90       	pop	r14
     55a:	df 90       	pop	r13
     55c:	cf 90       	pop	r12
     55e:	bf 90       	pop	r11
     560:	af 90       	pop	r10
     562:	9f 90       	pop	r9
     564:	8f 90       	pop	r8
     566:	7f 90       	pop	r7
     568:	6f 90       	pop	r6
     56a:	5f 90       	pop	r5
     56c:	4f 90       	pop	r4
     56e:	08 95       	ret

00000570 <_Z10TempAndHumv>:
     570:	4f 92       	push	r4
     572:	5f 92       	push	r5
     574:	6f 92       	push	r6
     576:	7f 92       	push	r7
     578:	8f 92       	push	r8
     57a:	9f 92       	push	r9
     57c:	af 92       	push	r10
     57e:	bf 92       	push	r11
     580:	cf 92       	push	r12
     582:	df 92       	push	r13
     584:	ef 92       	push	r14
     586:	ff 92       	push	r15
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
     58c:	cd b7       	in	r28, 0x3d	; 61
     58e:	de b7       	in	r29, 0x3e	; 62
     590:	2a 97       	sbiw	r28, 0x0a	; 10
     592:	0f b6       	in	r0, 0x3f	; 63
     594:	f8 94       	cli
     596:	de bf       	out	0x3e, r29	; 62
     598:	0f be       	out	0x3f, r0	; 63
     59a:	cd bf       	out	0x3d, r28	; 61
     59c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <_Z17measureTempAndHumv>
     5a0:	c0 90 15 01 	lds	r12, 0x0115	; 0x800115 <humidity>
     5a4:	d0 90 16 01 	lds	r13, 0x0116	; 0x800116 <humidity+0x1>
     5a8:	e0 90 17 01 	lds	r14, 0x0117	; 0x800117 <humidity+0x2>
     5ac:	f0 90 18 01 	lds	r15, 0x0118	; 0x800118 <humidity+0x3>
     5b0:	a7 01       	movw	r20, r14
     5b2:	96 01       	movw	r18, r12
     5b4:	c7 01       	movw	r24, r14
     5b6:	b6 01       	movw	r22, r12
     5b8:	0e 94 39 0c 	call	0x1872	; 0x1872 <__unordsf2>
     5bc:	81 11       	cpse	r24, r1
     5be:	38 c0       	rjmp	.+112    	; 0x630 <_Z10TempAndHumv+0xc0>
     5c0:	80 90 11 01 	lds	r8, 0x0111	; 0x800111 <temperature>
     5c4:	90 90 12 01 	lds	r9, 0x0112	; 0x800112 <temperature+0x1>
     5c8:	a0 90 13 01 	lds	r10, 0x0113	; 0x800113 <temperature+0x2>
     5cc:	b0 90 14 01 	lds	r11, 0x0114	; 0x800114 <temperature+0x3>
     5d0:	a5 01       	movw	r20, r10
     5d2:	94 01       	movw	r18, r8
     5d4:	c5 01       	movw	r24, r10
     5d6:	b4 01       	movw	r22, r8
     5d8:	0e 94 39 0c 	call	0x1872	; 0x1872 <__unordsf2>
     5dc:	81 11       	cpse	r24, r1
     5de:	28 c0       	rjmp	.+80     	; 0x630 <_Z10TempAndHumv+0xc0>
     5e0:	40 90 9f 01 	lds	r4, 0x019F	; 0x80019f <ee_data+0x6>
     5e4:	50 90 a0 01 	lds	r5, 0x01A0	; 0x8001a0 <ee_data+0x7>
     5e8:	60 90 a1 01 	lds	r6, 0x01A1	; 0x8001a1 <ee_data+0x8>
     5ec:	70 90 a2 01 	lds	r7, 0x01A2	; 0x8001a2 <ee_data+0x9>
     5f0:	a3 01       	movw	r20, r6
     5f2:	92 01       	movw	r18, r4
     5f4:	c3 01       	movw	r24, r6
     5f6:	b2 01       	movw	r22, r4
     5f8:	0e 94 39 0c 	call	0x1872	; 0x1872 <__unordsf2>
     5fc:	20 91 9b 01 	lds	r18, 0x019B	; 0x80019b <ee_data+0x2>
     600:	30 91 9c 01 	lds	r19, 0x019C	; 0x80019c <ee_data+0x3>
     604:	40 91 9d 01 	lds	r20, 0x019D	; 0x80019d <ee_data+0x4>
     608:	50 91 9e 01 	lds	r21, 0x019E	; 0x80019e <ee_data+0x5>
     60c:	2f 83       	std	Y+7, r18	; 0x07
     60e:	38 87       	std	Y+8, r19	; 0x08
     610:	49 87       	std	Y+9, r20	; 0x09
     612:	5a 87       	std	Y+10, r21	; 0x0a
     614:	81 11       	cpse	r24, r1
     616:	2b c0       	rjmp	.+86     	; 0x66e <_Z10TempAndHumv+0xfe>
     618:	2f 81       	ldd	r18, Y+7	; 0x07
     61a:	38 85       	ldd	r19, Y+8	; 0x08
     61c:	49 85       	ldd	r20, Y+9	; 0x09
     61e:	5a 85       	ldd	r21, Y+10	; 0x0a
     620:	ca 01       	movw	r24, r20
     622:	b9 01       	movw	r22, r18
     624:	0e 94 39 0c 	call	0x1872	; 0x1872 <__unordsf2>
     628:	88 23       	and	r24, r24
     62a:	09 f4       	brne	.+2      	; 0x62e <_Z10TempAndHumv+0xbe>
     62c:	98 c0       	rjmp	.+304    	; 0x75e <_Z10TempAndHumv+0x1ee>
     62e:	1f c0       	rjmp	.+62     	; 0x66e <_Z10TempAndHumv+0xfe>
     630:	61 e6       	ldi	r22, 0x61	; 97
     632:	71 e0       	ldi	r23, 0x01	; 1
     634:	ce 01       	movw	r24, r28
     636:	01 96       	adiw	r24, 0x01	; 1
     638:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZN6StringC1EPKc>
     63c:	ce 01       	movw	r24, r28
     63e:	01 96       	adiw	r24, 0x01	; 1
     640:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <_ZN6StringD1Ev>
     644:	83 e5       	ldi	r24, 0x53	; 83
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	0e 94 68 11 	call	0x22d0	; 0x22d0 <atol>
     64c:	6b 01       	movw	r12, r22
     64e:	7c 01       	movw	r14, r24
     650:	84 e3       	ldi	r24, 0x34	; 52
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	0e 94 68 11 	call	0x22d0	; 0x22d0 <atol>
     658:	a7 01       	movw	r20, r14
     65a:	96 01       	movw	r18, r12
     65c:	0e 94 36 02 	call	0x46c	; 0x46c <_Z8sendDatall>
     660:	8c e3       	ldi	r24, 0x3C	; 60
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <SleepTimer+0x1>
     668:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <SleepTimer>
     66c:	4a c1       	rjmp	.+660    	; 0x902 <__stack+0x3>
     66e:	40 92 0d 01 	sts	0x010D, r4	; 0x80010d <old_humidity>
     672:	50 92 0e 01 	sts	0x010E, r5	; 0x80010e <old_humidity+0x1>
     676:	60 92 0f 01 	sts	0x010F, r6	; 0x80010f <old_humidity+0x2>
     67a:	70 92 10 01 	sts	0x0110, r7	; 0x800110 <old_humidity+0x3>
     67e:	8f 81       	ldd	r24, Y+7	; 0x07
     680:	98 85       	ldd	r25, Y+8	; 0x08
     682:	a9 85       	ldd	r26, Y+9	; 0x09
     684:	ba 85       	ldd	r27, Y+10	; 0x0a
     686:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <old_temperature>
     68a:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <old_temperature+0x1>
     68e:	a0 93 0b 01 	sts	0x010B, r26	; 0x80010b <old_temperature+0x2>
     692:	b0 93 0c 01 	sts	0x010C, r27	; 0x80010c <old_temperature+0x3>
     696:	83 e5       	ldi	r24, 0x53	; 83
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	0e 94 68 11 	call	0x22d0	; 0x22d0 <atol>
     69e:	4b 01       	movw	r8, r22
     6a0:	5c 01       	movw	r10, r24
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	40 e2       	ldi	r20, 0x20	; 32
     6a8:	51 e4       	ldi	r21, 0x41	; 65
     6aa:	c7 01       	movw	r24, r14
     6ac:	b6 01       	movw	r22, r12
     6ae:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__mulsf3>
     6b2:	0e 94 df 0a 	call	0x15be	; 0x15be <__fixsfsi>
     6b6:	07 2e       	mov	r0, r23
     6b8:	00 0c       	add	r0, r0
     6ba:	88 0b       	sbc	r24, r24
     6bc:	99 0b       	sbc	r25, r25
     6be:	a5 01       	movw	r20, r10
     6c0:	94 01       	movw	r18, r8
     6c2:	0e 94 36 02 	call	0x46c	; 0x46c <_Z8sendDatall>
     6c6:	8a e5       	ldi	r24, 0x5A	; 90
     6c8:	91 e0       	ldi	r25, 0x01	; 1
     6ca:	0e 94 68 11 	call	0x22d0	; 0x22d0 <atol>
     6ce:	6b 01       	movw	r12, r22
     6d0:	7c 01       	movw	r14, r24
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	40 e2       	ldi	r20, 0x20	; 32
     6d8:	51 e4       	ldi	r21, 0x41	; 65
     6da:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <temperature>
     6de:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <temperature+0x1>
     6e2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <temperature+0x2>
     6e6:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <temperature+0x3>
     6ea:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__mulsf3>
     6ee:	0e 94 df 0a 	call	0x15be	; 0x15be <__fixsfsi>
     6f2:	07 2e       	mov	r0, r23
     6f4:	00 0c       	add	r0, r0
     6f6:	88 0b       	sbc	r24, r24
     6f8:	99 0b       	sbc	r25, r25
     6fa:	a7 01       	movw	r20, r14
     6fc:	96 01       	movw	r18, r12
     6fe:	0e 94 36 02 	call	0x46c	; 0x46c <_Z8sendDatall>
     702:	88 e5       	ldi	r24, 0x58	; 88
     704:	92 e0       	ldi	r25, 0x02	; 2
     706:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <SleepTimer+0x1>
     70a:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <SleepTimer>
     70e:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <temp_short_sleep+0x1>
     712:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <temp_short_sleep>
     716:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <humidity>
     71a:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <humidity+0x1>
     71e:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <humidity+0x2>
     722:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <humidity+0x3>
     726:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <ee_data+0x6>
     72a:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <ee_data+0x7>
     72e:	a0 93 a1 01 	sts	0x01A1, r26	; 0x8001a1 <ee_data+0x8>
     732:	b0 93 a2 01 	sts	0x01A2, r27	; 0x8001a2 <ee_data+0x9>
     736:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <temperature>
     73a:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <temperature+0x1>
     73e:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <temperature+0x2>
     742:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <temperature+0x3>
     746:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <ee_data+0x2>
     74a:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <ee_data+0x3>
     74e:	a0 93 9d 01 	sts	0x019D, r26	; 0x80019d <ee_data+0x4>
     752:	b0 93 9e 01 	sts	0x019E, r27	; 0x80019e <ee_data+0x5>
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	0e 94 9d 01 	call	0x33a	; 0x33a <_Z11writeEEDatab>
     75c:	d2 c0       	rjmp	.+420    	; 0x902 <__stack+0x3>
     75e:	a5 01       	movw	r20, r10
     760:	94 01       	movw	r18, r8
     762:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <old_temperature>
     766:	70 91 0a 01 	lds	r23, 0x010A	; 0x80010a <old_temperature+0x1>
     76a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <old_temperature+0x2>
     76e:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <old_temperature+0x3>
     772:	0e 94 6d 0a 	call	0x14da	; 0x14da <__subsf3>
     776:	2b 01       	movw	r4, r22
     778:	3c 01       	movw	r6, r24
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	a9 01       	movw	r20, r18
     780:	0e 94 c7 0b 	call	0x178e	; 0x178e <__gesf2>
     784:	18 16       	cp	r1, r24
     786:	5c f4       	brge	.+22     	; 0x79e <_Z10TempAndHumv+0x22e>
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	40 e2       	ldi	r20, 0x20	; 32
     78e:	51 e4       	ldi	r21, 0x41	; 65
     790:	c3 01       	movw	r24, r6
     792:	b2 01       	movw	r22, r4
     794:	0e 94 c7 0b 	call	0x178e	; 0x178e <__gesf2>
     798:	18 16       	cp	r1, r24
     79a:	5c f0       	brlt	.+22     	; 0x7b2 <_Z10TempAndHumv+0x242>
     79c:	5d c0       	rjmp	.+186    	; 0x858 <_Z10TempAndHumv+0x2e8>
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	40 e2       	ldi	r20, 0x20	; 32
     7a4:	51 ec       	ldi	r21, 0xC1	; 193
     7a6:	c3 01       	movw	r24, r6
     7a8:	b2 01       	movw	r22, r4
     7aa:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__cmpsf2>
     7ae:	87 ff       	sbrs	r24, 7
     7b0:	53 c0       	rjmp	.+166    	; 0x858 <_Z10TempAndHumv+0x2e8>
     7b2:	a7 01       	movw	r20, r14
     7b4:	96 01       	movw	r18, r12
     7b6:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <old_humidity>
     7ba:	70 91 0e 01 	lds	r23, 0x010E	; 0x80010e <old_humidity+0x1>
     7be:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <old_humidity+0x2>
     7c2:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <old_humidity+0x3>
     7c6:	0e 94 6d 0a 	call	0x14da	; 0x14da <__subsf3>
     7ca:	2b 01       	movw	r4, r22
     7cc:	3c 01       	movw	r6, r24
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	a9 01       	movw	r20, r18
     7d4:	0e 94 c7 0b 	call	0x178e	; 0x178e <__gesf2>
     7d8:	18 16       	cp	r1, r24
     7da:	5c f4       	brge	.+22     	; 0x7f2 <_Z10TempAndHumv+0x282>
     7dc:	20 e0       	ldi	r18, 0x00	; 0
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	40 e2       	ldi	r20, 0x20	; 32
     7e2:	51 e4       	ldi	r21, 0x41	; 65
     7e4:	c3 01       	movw	r24, r6
     7e6:	b2 01       	movw	r22, r4
     7e8:	0e 94 c7 0b 	call	0x178e	; 0x178e <__gesf2>
     7ec:	18 16       	cp	r1, r24
     7ee:	5c f0       	brlt	.+22     	; 0x806 <_Z10TempAndHumv+0x296>
     7f0:	33 c0       	rjmp	.+102    	; 0x858 <_Z10TempAndHumv+0x2e8>
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e2       	ldi	r20, 0x20	; 32
     7f8:	51 ec       	ldi	r21, 0xC1	; 193
     7fa:	c3 01       	movw	r24, r6
     7fc:	b2 01       	movw	r22, r4
     7fe:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__cmpsf2>
     802:	87 ff       	sbrs	r24, 7
     804:	29 c0       	rjmp	.+82     	; 0x858 <_Z10TempAndHumv+0x2e8>
     806:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <temp_short_sleep>
     80a:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <temp_short_sleep+0x1>
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	91 05       	cpc	r25, r1
     812:	64 f4       	brge	.+24     	; 0x82c <_Z10TempAndHumv+0x2bc>
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <temp_short_sleep+0x1>
     81a:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <temp_short_sleep>
     81e:	8c e3       	ldi	r24, 0x3C	; 60
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <SleepTimer+0x1>
     826:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <SleepTimer>
     82a:	6b c0       	rjmp	.+214    	; 0x902 <__stack+0x3>
     82c:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <temp_short_sleep+0x1>
     830:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <temp_short_sleep>
     834:	c0 92 9f 01 	sts	0x019F, r12	; 0x80019f <ee_data+0x6>
     838:	d0 92 a0 01 	sts	0x01A0, r13	; 0x8001a0 <ee_data+0x7>
     83c:	e0 92 a1 01 	sts	0x01A1, r14	; 0x8001a1 <ee_data+0x8>
     840:	f0 92 a2 01 	sts	0x01A2, r15	; 0x8001a2 <ee_data+0x9>
     844:	80 92 9b 01 	sts	0x019B, r8	; 0x80019b <ee_data+0x2>
     848:	90 92 9c 01 	sts	0x019C, r9	; 0x80019c <ee_data+0x3>
     84c:	a0 92 9d 01 	sts	0x019D, r10	; 0x80019d <ee_data+0x4>
     850:	b0 92 9e 01 	sts	0x019E, r11	; 0x80019e <ee_data+0x5>
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	11 c0       	rjmp	.+34     	; 0x87a <_Z10TempAndHumv+0x30a>
     858:	c0 92 9f 01 	sts	0x019F, r12	; 0x80019f <ee_data+0x6>
     85c:	d0 92 a0 01 	sts	0x01A0, r13	; 0x8001a0 <ee_data+0x7>
     860:	e0 92 a1 01 	sts	0x01A1, r14	; 0x8001a1 <ee_data+0x8>
     864:	f0 92 a2 01 	sts	0x01A2, r15	; 0x8001a2 <ee_data+0x9>
     868:	80 92 9b 01 	sts	0x019B, r8	; 0x80019b <ee_data+0x2>
     86c:	90 92 9c 01 	sts	0x019C, r9	; 0x80019c <ee_data+0x3>
     870:	a0 92 9d 01 	sts	0x019D, r10	; 0x80019d <ee_data+0x4>
     874:	b0 92 9e 01 	sts	0x019E, r11	; 0x80019e <ee_data+0x5>
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	0e 94 9d 01 	call	0x33a	; 0x33a <_Z11writeEEDatab>
     87e:	83 e5       	ldi	r24, 0x53	; 83
     880:	91 e0       	ldi	r25, 0x01	; 1
     882:	0e 94 68 11 	call	0x22d0	; 0x22d0 <atol>
     886:	6b 01       	movw	r12, r22
     888:	7c 01       	movw	r14, r24
     88a:	20 e0       	ldi	r18, 0x00	; 0
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	40 e2       	ldi	r20, 0x20	; 32
     890:	51 e4       	ldi	r21, 0x41	; 65
     892:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <humidity>
     896:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <humidity+0x1>
     89a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <humidity+0x2>
     89e:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <humidity+0x3>
     8a2:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__mulsf3>
     8a6:	0e 94 df 0a 	call	0x15be	; 0x15be <__fixsfsi>
     8aa:	07 2e       	mov	r0, r23
     8ac:	00 0c       	add	r0, r0
     8ae:	88 0b       	sbc	r24, r24
     8b0:	99 0b       	sbc	r25, r25
     8b2:	a7 01       	movw	r20, r14
     8b4:	96 01       	movw	r18, r12
     8b6:	0e 94 36 02 	call	0x46c	; 0x46c <_Z8sendDatall>
     8ba:	8a e5       	ldi	r24, 0x5A	; 90
     8bc:	91 e0       	ldi	r25, 0x01	; 1
     8be:	0e 94 68 11 	call	0x22d0	; 0x22d0 <atol>
     8c2:	6b 01       	movw	r12, r22
     8c4:	7c 01       	movw	r14, r24
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	40 e2       	ldi	r20, 0x20	; 32
     8cc:	51 e4       	ldi	r21, 0x41	; 65
     8ce:	60 91 11 01 	lds	r22, 0x0111	; 0x800111 <temperature>
     8d2:	70 91 12 01 	lds	r23, 0x0112	; 0x800112 <temperature+0x1>
     8d6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <temperature+0x2>
     8da:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <temperature+0x3>
     8de:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__mulsf3>
     8e2:	0e 94 df 0a 	call	0x15be	; 0x15be <__fixsfsi>
     8e6:	07 2e       	mov	r0, r23
     8e8:	00 0c       	add	r0, r0
     8ea:	88 0b       	sbc	r24, r24
     8ec:	99 0b       	sbc	r25, r25
     8ee:	a7 01       	movw	r20, r14
     8f0:	96 01       	movw	r18, r12
     8f2:	0e 94 36 02 	call	0x46c	; 0x46c <_Z8sendDatall>
     8f6:	88 e5       	ldi	r24, 0x58	; 88
     8f8:	92 e0       	ldi	r25, 0x02	; 2
     8fa:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <SleepTimer+0x1>
     8fe:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <SleepTimer>
     902:	2a 96       	adiw	r28, 0x0a	; 10
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	f8 94       	cli
     908:	de bf       	out	0x3e, r29	; 62
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	cd bf       	out	0x3d, r28	; 61
     90e:	df 91       	pop	r29
     910:	cf 91       	pop	r28
     912:	ff 90       	pop	r15
     914:	ef 90       	pop	r14
     916:	df 90       	pop	r13
     918:	cf 90       	pop	r12
     91a:	bf 90       	pop	r11
     91c:	af 90       	pop	r10
     91e:	9f 90       	pop	r9
     920:	8f 90       	pop	r8
     922:	7f 90       	pop	r7
     924:	6f 90       	pop	r6
     926:	5f 90       	pop	r5
     928:	4f 90       	pop	r4
     92a:	08 95       	ret

0000092c <_Z10vccVoltagev>:
     92c:	8e e4       	ldi	r24, 0x4E	; 78
     92e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     932:	6a e0       	ldi	r22, 0x0A	; 10
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <delay>
     93e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     942:	80 64       	ori	r24, 0x40	; 64
     944:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     948:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     94c:	86 fd       	sbrc	r24, 6
     94e:	fc cf       	rjmp	.-8      	; 0x948 <_Z10vccVoltagev+0x1c>
     950:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     954:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	32 2f       	mov	r19, r18
     95c:	22 27       	eor	r18, r18
     95e:	a9 01       	movw	r20, r18
     960:	33 0f       	add	r19, r19
     962:	66 0b       	sbc	r22, r22
     964:	77 0b       	sbc	r23, r23
     966:	9a 01       	movw	r18, r20
     968:	ab 01       	movw	r20, r22
     96a:	28 2b       	or	r18, r24
     96c:	60 e0       	ldi	r22, 0x00	; 0
     96e:	70 e3       	ldi	r23, 0x30	; 48
     970:	81 e1       	ldi	r24, 0x11	; 17
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <__divmodsi4>
     978:	ca 01       	movw	r24, r20
     97a:	b9 01       	movw	r22, r18
     97c:	08 95       	ret

0000097e <loop>:
     97e:	cf 92       	push	r12
     980:	df 92       	push	r13
     982:	ef 92       	push	r14
     984:	ff 92       	push	r15
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	00 d0       	rcall	.+0      	; 0x98c <loop+0xe>
     98c:	00 d0       	rcall	.+0      	; 0x98e <loop+0x10>
     98e:	00 d0       	rcall	.+0      	; 0x990 <loop+0x12>
     990:	cd b7       	in	r28, 0x3d	; 61
     992:	de b7       	in	r29, 0x3e	; 62
     994:	61 e0       	ldi	r22, 0x01	; 1
     996:	87 e0       	ldi	r24, 0x07	; 7
     998:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <pinMode>
     99c:	61 e0       	ldi	r22, 0x01	; 1
     99e:	87 e0       	ldi	r24, 0x07	; 7
     9a0:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <digitalWrite>
     9a4:	66 e0       	ldi	r22, 0x06	; 6
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	8b eb       	ldi	r24, 0xBB	; 187
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	0e 94 19 08 	call	0x1032	; 0x1032 <_ZN8RCSwitch14enableTransmitEi>
     9b0:	6f e0       	ldi	r22, 0x0F	; 15
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	8b eb       	ldi	r24, 0xBB	; 187
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	0e 94 15 08 	call	0x102a	; 0x102a <_ZN8RCSwitch17setRepeatTransmitEi>
     9bc:	61 e8       	ldi	r22, 0x81	; 129
     9be:	71 e0       	ldi	r23, 0x01	; 1
     9c0:	ce 01       	movw	r24, r28
     9c2:	01 96       	adiw	r24, 0x01	; 1
     9c4:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZN6StringC1EPKc>
     9c8:	ce 01       	movw	r24, r28
     9ca:	01 96       	adiw	r24, 0x01	; 1
     9cc:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <_ZN6StringD1Ev>
     9d0:	0e 94 96 04 	call	0x92c	; 0x92c <_Z10vccVoltagev>
     9d4:	ab 01       	movw	r20, r22
     9d6:	bc 01       	movw	r22, r24
     9d8:	2a e0       	ldi	r18, 0x0A	; 10
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <_ZN6StringC1Elh>
     9e2:	ce 01       	movw	r24, r28
     9e4:	01 96       	adiw	r24, 0x01	; 1
     9e6:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <_ZN6StringD1Ev>
     9ea:	8b e8       	ldi	r24, 0x8B	; 139
     9ec:	91 e0       	ldi	r25, 0x01	; 1
     9ee:	0e 94 68 11 	call	0x22d0	; 0x22d0 <atol>
     9f2:	6b 01       	movw	r12, r22
     9f4:	7c 01       	movw	r14, r24
     9f6:	0e 94 96 04 	call	0x92c	; 0x92c <_Z10vccVoltagev>
     9fa:	a7 01       	movw	r20, r14
     9fc:	96 01       	movw	r18, r12
     9fe:	0e 94 36 02 	call	0x46c	; 0x46c <_Z8sendDatall>
     a02:	0e 94 43 01 	call	0x286	; 0x286 <_Z10readEEDatav>
     a06:	61 e0       	ldi	r22, 0x01	; 1
     a08:	84 e0       	ldi	r24, 0x04	; 4
     a0a:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <pinMode>
     a0e:	61 e0       	ldi	r22, 0x01	; 1
     a10:	84 e0       	ldi	r24, 0x04	; 4
     a12:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <digitalWrite>
     a16:	87 ea       	ldi	r24, 0xA7	; 167
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	0e 94 84 05 	call	0xb08	; 0xb08 <_ZN3DHT5beginEv>
     a1e:	64 e6       	ldi	r22, 0x64	; 100
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <delay>
     a2a:	0e 94 b8 02 	call	0x570	; 0x570 <_Z10TempAndHumv>
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	84 e0       	ldi	r24, 0x04	; 4
     a32:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <digitalWrite>
     a36:	60 e0       	ldi	r22, 0x00	; 0
     a38:	83 e0       	ldi	r24, 0x03	; 3
     a3a:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <pinMode>
     a3e:	60 e0       	ldi	r22, 0x00	; 0
     a40:	83 e0       	ldi	r24, 0x03	; 3
     a42:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <digitalWrite>
     a46:	60 e0       	ldi	r22, 0x00	; 0
     a48:	84 e0       	ldi	r24, 0x04	; 4
     a4a:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <pinMode>
     a4e:	8b eb       	ldi	r24, 0xBB	; 187
     a50:	91 e0       	ldi	r25, 0x01	; 1
     a52:	0e 94 20 08 	call	0x1040	; 0x1040 <_ZN8RCSwitch15disableTransmitEv>
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	87 e0       	ldi	r24, 0x07	; 7
     a5a:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <pinMode>
     a5e:	60 e0       	ldi	r22, 0x00	; 0
     a60:	87 e0       	ldi	r24, 0x07	; 7
     a62:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <digitalWrite>
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	86 e0       	ldi	r24, 0x06	; 6
     a6a:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <pinMode>
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	86 e0       	ldi	r24, 0x06	; 6
     a72:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <digitalWrite>
     a76:	62 e9       	ldi	r22, 0x92	; 146
     a78:	71 e0       	ldi	r23, 0x01	; 1
     a7a:	ce 01       	movw	r24, r28
     a7c:	01 96       	adiw	r24, 0x01	; 1
     a7e:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZN6StringC1EPKc>
     a82:	ce 01       	movw	r24, r28
     a84:	01 96       	adiw	r24, 0x01	; 1
     a86:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <_ZN6StringD1Ev>
     a8a:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <SleepTimer>
     a8e:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <SleepTimer+0x1>
     a92:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_Z12sleepSecondsi>
     a96:	26 96       	adiw	r28, 0x06	; 6
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	f8 94       	cli
     a9c:	de bf       	out	0x3e, r29	; 62
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	cd bf       	out	0x3d, r28	; 61
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	df 90       	pop	r13
     aac:	cf 90       	pop	r12
     aae:	08 95       	ret

00000ab0 <_GLOBAL__sub_I_mySwitch>:
#define DHTTYPE DHT22
#define Sensor_Bath // Config Code for Sensor Bath?
//#define Sensor_Balcony // Config Code for Sensor Balcony?
//#define Sensor_MasterBed // Config Code for Sensor MasterBedroom?
    
RCSwitch mySwitch = RCSwitch();
     ab0:	8b eb       	ldi	r24, 0xBB	; 187
     ab2:	91 e0       	ldi	r25, 0x01	; 1
     ab4:	0e 94 ee 07 	call	0xfdc	; 0xfdc <_ZN8RCSwitchC1Ev>
// SleepTimer: Time to deepsleep, adapted to error situation:
// No error during measurement: Sleep for TimeToSleep 
// Error during measurement: Sleep for TimeToSleepError!
int SleepTimer; 

DHT dht(DhtPin,DHTTYPE);
     ab8:	26 e0       	ldi	r18, 0x06	; 6
     aba:	46 e1       	ldi	r20, 0x16	; 22
     abc:	63 e0       	ldi	r22, 0x03	; 3
     abe:	87 ea       	ldi	r24, 0xA7	; 167
     ac0:	91 e0       	ldi	r25, 0x01	; 1
     ac2:	0c 94 63 05 	jmp	0xac6	; 0xac6 <_ZN3DHTC1Ehhh>

00000ac6 <_ZN3DHTC1Ehhh>:
    else if((percentHumidity > 85.0) && (temperature >= 80.0) && (temperature <= 87.0))
      hi += ((percentHumidity - 85.0) * 0.1) * ((87.0 - temperature) * 0.2);
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}
     ac6:	dc 01       	movw	r26, r24
     ac8:	15 96       	adiw	r26, 0x05	; 5
     aca:	6c 93       	st	X, r22
     acc:	15 97       	sbiw	r26, 0x05	; 5
     ace:	16 96       	adiw	r26, 0x06	; 6
     ad0:	4c 93       	st	X, r20
     ad2:	16 97       	sbiw	r26, 0x06	; 6
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	fb 01       	movw	r30, r22
     ad8:	ee 54       	subi	r30, 0x4E	; 78
     ada:	ff 4f       	sbci	r31, 0xFF	; 255
     adc:	e4 91       	lpm	r30, Z
     ade:	17 96       	adiw	r26, 0x07	; 7
     ae0:	ec 93       	st	X, r30
     ae2:	17 97       	sbiw	r26, 0x07	; 7
     ae4:	fb 01       	movw	r30, r22
     ae6:	ea 53       	subi	r30, 0x3A	; 58
     ae8:	ff 4f       	sbci	r31, 0xFF	; 255
     aea:	64 91       	lpm	r22, Z
     aec:	18 96       	adiw	r26, 0x08	; 8
     aee:	6c 93       	st	X, r22
     af0:	18 97       	sbiw	r26, 0x08	; 8
     af2:	40 e4       	ldi	r20, 0x40	; 64
     af4:	5f e1       	ldi	r21, 0x1F	; 31
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	1d 96       	adiw	r26, 0x0d	; 13
     afc:	4d 93       	st	X+, r20
     afe:	5d 93       	st	X+, r21
     b00:	6d 93       	st	X+, r22
     b02:	7c 93       	st	X, r23
     b04:	50 97       	sbiw	r26, 0x10	; 16
     b06:	08 95       	ret

00000b08 <_ZN3DHT5beginEv>:
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	ec 01       	movw	r28, r24
     b0e:	62 e0       	ldi	r22, 0x02	; 2
     b10:	8d 81       	ldd	r24, Y+5	; 0x05
     b12:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <pinMode>
     b16:	80 e3       	ldi	r24, 0x30	; 48
     b18:	98 ef       	ldi	r25, 0xF8	; 248
     b1a:	af ef       	ldi	r26, 0xFF	; 255
     b1c:	bf ef       	ldi	r27, 0xFF	; 255
     b1e:	89 87       	std	Y+9, r24	; 0x09
     b20:	9a 87       	std	Y+10, r25	; 0x0a
     b22:	ab 87       	std	Y+11, r26	; 0x0b
     b24:	bc 87       	std	Y+12, r27	; 0x0c
     b26:	df 91       	pop	r29
     b28:	cf 91       	pop	r28
     b2a:	08 95       	ret

00000b2c <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
     b2c:	8f 92       	push	r8
     b2e:	9f 92       	push	r9
     b30:	af 92       	push	r10
     b32:	bf 92       	push	r11
     b34:	cf 92       	push	r12
     b36:	df 92       	push	r13
     b38:	ef 92       	push	r14
     b3a:	ff 92       	push	r15
     b3c:	cf 93       	push	r28
     b3e:	dc 01       	movw	r26, r24
     b40:	17 96       	adiw	r26, 0x07	; 7
     b42:	cc 91       	ld	r28, X
     b44:	17 97       	sbiw	r26, 0x07	; 7
  uint32_t count = 0;
  // On AVR platforms use direct GPIO port access as it's much faster and better
  // for catching pulses that are 10's of microseconds in length:
  #ifdef __AVR
    uint8_t portState = level ? _bit : 0;
     b46:	66 23       	and	r22, r22
     b48:	11 f0       	breq	.+4      	; 0xb4e <_ZN3DHT11expectPulseEb+0x22>
     b4a:	9c 2f       	mov	r25, r28
     b4c:	01 c0       	rjmp	.+2      	; 0xb50 <_ZN3DHT11expectPulseEb+0x24>
     b4e:	90 e0       	ldi	r25, 0x00	; 0
    while ((*portInputRegister(_port) & _bit) == portState) {
     b50:	18 96       	adiw	r26, 0x08	; 8
     b52:	2c 91       	ld	r18, X
     b54:	18 97       	sbiw	r26, 0x08	; 8
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	22 0f       	add	r18, r18
     b5a:	33 1f       	adc	r19, r19
     b5c:	26 52       	subi	r18, 0x26	; 38
     b5e:	3f 4f       	sbci	r19, 0xFF	; 255
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
  uint32_t count = 0;
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	50 e0       	ldi	r21, 0x00	; 0
     b64:	ba 01       	movw	r22, r20
  // On AVR platforms use direct GPIO port access as it's much faster and better
  // for catching pulses that are 10's of microseconds in length:
  #ifdef __AVR
    uint8_t portState = level ? _bit : 0;
    while ((*portInputRegister(_port) & _bit) == portState) {
     b66:	f9 01       	movw	r30, r18
     b68:	e5 90       	lpm	r14, Z+
     b6a:	f4 90       	lpm	r15, Z
     b6c:	f7 01       	movw	r30, r14
     b6e:	80 81       	ld	r24, Z
     b70:	8c 23       	and	r24, r28
     b72:	98 13       	cpse	r25, r24
     b74:	1a c0       	rjmp	.+52     	; 0xbaa <_ZN3DHT11expectPulseEb+0x7e>
      if (count++ >= _maxcycles) {
     b76:	4a 01       	movw	r8, r20
     b78:	5b 01       	movw	r10, r22
     b7a:	ff ef       	ldi	r31, 0xFF	; 255
     b7c:	8f 1a       	sub	r8, r31
     b7e:	9f 0a       	sbc	r9, r31
     b80:	af 0a       	sbc	r10, r31
     b82:	bf 0a       	sbc	r11, r31
     b84:	1d 96       	adiw	r26, 0x0d	; 13
     b86:	cd 90       	ld	r12, X+
     b88:	dd 90       	ld	r13, X+
     b8a:	ed 90       	ld	r14, X+
     b8c:	fc 90       	ld	r15, X
     b8e:	50 97       	sbiw	r26, 0x10	; 16
     b90:	4c 15       	cp	r20, r12
     b92:	5d 05       	cpc	r21, r13
     b94:	6e 05       	cpc	r22, r14
     b96:	7f 05       	cpc	r23, r15
     b98:	18 f4       	brcc	.+6      	; 0xba0 <_ZN3DHT11expectPulseEb+0x74>
     b9a:	b5 01       	movw	r22, r10
     b9c:	a4 01       	movw	r20, r8
     b9e:	e3 cf       	rjmp	.-58     	; 0xb66 <_ZN3DHT11expectPulseEb+0x3a>
        return 0; // Exceeded timeout, fail.
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	03 c0       	rjmp	.+6      	; 0xbb0 <_ZN3DHT11expectPulseEb+0x84>
     baa:	34 2f       	mov	r19, r20
     bac:	25 2f       	mov	r18, r21
     bae:	cb 01       	movw	r24, r22
      }
    }
  #endif

  return count;
}
     bb0:	63 2f       	mov	r22, r19
     bb2:	72 2f       	mov	r23, r18
     bb4:	cf 91       	pop	r28
     bb6:	ff 90       	pop	r15
     bb8:	ef 90       	pop	r14
     bba:	df 90       	pop	r13
     bbc:	cf 90       	pop	r12
     bbe:	bf 90       	pop	r11
     bc0:	af 90       	pop	r10
     bc2:	9f 90       	pop	r9
     bc4:	8f 90       	pop	r8
     bc6:	08 95       	ret

00000bc8 <_ZN3DHT4readEb>:
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}

boolean DHT::read(bool force) {
     bc8:	8f 92       	push	r8
     bca:	9f 92       	push	r9
     bcc:	af 92       	push	r10
     bce:	bf 92       	push	r11
     bd0:	cf 92       	push	r12
     bd2:	df 92       	push	r13
     bd4:	ef 92       	push	r14
     bd6:	ff 92       	push	r15
     bd8:	0f 93       	push	r16
     bda:	1f 93       	push	r17
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	c0 54       	subi	r28, 0x40	; 64
     be6:	d1 40       	sbci	r29, 0x01	; 1
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	de bf       	out	0x3e, r29	; 62
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	cd bf       	out	0x3d, r28	; 61
     bf2:	8c 01       	movw	r16, r24
     bf4:	f6 2e       	mov	r15, r22
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  uint32_t currenttime = millis();
     bf6:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <millis>
  if (!force && ((currenttime - _lastreadtime) < 2000)) {
     bfa:	f1 10       	cpse	r15, r1
     bfc:	16 c0       	rjmp	.+44     	; 0xc2a <_ZN3DHT4readEb+0x62>
     bfe:	f8 01       	movw	r30, r16
     c00:	c1 84       	ldd	r12, Z+9	; 0x09
     c02:	d2 84       	ldd	r13, Z+10	; 0x0a
     c04:	e3 84       	ldd	r14, Z+11	; 0x0b
     c06:	f4 84       	ldd	r15, Z+12	; 0x0c
     c08:	9b 01       	movw	r18, r22
     c0a:	ac 01       	movw	r20, r24
     c0c:	2c 19       	sub	r18, r12
     c0e:	3d 09       	sbc	r19, r13
     c10:	4e 09       	sbc	r20, r14
     c12:	5f 09       	sbc	r21, r15
     c14:	69 01       	movw	r12, r18
     c16:	7a 01       	movw	r14, r20
     c18:	30 ed       	ldi	r19, 0xD0	; 208
     c1a:	c3 16       	cp	r12, r19
     c1c:	37 e0       	ldi	r19, 0x07	; 7
     c1e:	d3 06       	cpc	r13, r19
     c20:	e1 04       	cpc	r14, r1
     c22:	f1 04       	cpc	r15, r1
     c24:	10 f4       	brcc	.+4      	; 0xc2a <_ZN3DHT4readEb+0x62>
    return _lastresult; // return last correct measurement
     c26:	81 89       	ldd	r24, Z+17	; 0x11
     c28:	ab c0       	rjmp	.+342    	; 0xd80 <_ZN3DHT4readEb+0x1b8>
  }
  _lastreadtime = currenttime;
     c2a:	f8 01       	movw	r30, r16
     c2c:	61 87       	std	Z+9, r22	; 0x09
     c2e:	72 87       	std	Z+10, r23	; 0x0a
     c30:	83 87       	std	Z+11, r24	; 0x0b
     c32:	94 87       	std	Z+12, r25	; 0x0c

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
     c34:	14 82       	std	Z+4, r1	; 0x04
     c36:	13 82       	std	Z+3, r1	; 0x03
     c38:	12 82       	std	Z+2, r1	; 0x02
     c3a:	11 82       	std	Z+1, r1	; 0x01
     c3c:	10 82       	st	Z, r1
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedance state to let pull-up raise data line level and
  // start the reading process.
  digitalWrite(_pin, HIGH);
     c3e:	61 e0       	ldi	r22, 0x01	; 1
     c40:	85 81       	ldd	r24, Z+5	; 0x05
     c42:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <digitalWrite>
  delay(250);
     c46:	6a ef       	ldi	r22, 0xFA	; 250
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <delay>

  // First set data line low for 20 milliseconds.
  pinMode(_pin, OUTPUT);
     c52:	61 e0       	ldi	r22, 0x01	; 1
     c54:	f8 01       	movw	r30, r16
     c56:	85 81       	ldd	r24, Z+5	; 0x05
     c58:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <pinMode>
  digitalWrite(_pin, LOW);
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	f8 01       	movw	r30, r16
     c60:	85 81       	ldd	r24, Z+5	; 0x05
     c62:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <digitalWrite>
  delay(20);
     c66:	64 e1       	ldi	r22, 0x14	; 20
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <delay>
};

class InterruptLock {
  public:
   InterruptLock() {
    noInterrupts();
     c72:	f8 94       	cli
    // End the start signal by setting data line high for 40 microseconds.
    //digitalWrite(_pin, HIGH); // Commented out by Marc R. reason see https://github.com/adafruit/DHT-sensor-library/issues/48
    //delayMicroseconds(40);  // Commented out by Marc R.

    // Now start reading the data line to get the value from the DHT sensor.
    pinMode(_pin, INPUT_PULLUP);
     c74:	62 e0       	ldi	r22, 0x02	; 2
     c76:	f8 01       	movw	r30, r16
     c78:	85 81       	ldd	r24, Z+5	; 0x05
     c7a:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <pinMode>
    delayMicroseconds(50);  // Delay a bit to let sensor pull data line low.
     c7e:	82 e3       	ldi	r24, 0x32	; 50
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <delayMicroseconds>

    // First expect a low signal for ~80 microseconds followed by a high signal
    // for ~80 microseconds again.
    if (expectPulse(LOW) == 0) {
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	c8 01       	movw	r24, r16
     c8a:	0e 94 96 05 	call	0xb2c	; 0xb2c <_ZN3DHT11expectPulseEb>
     c8e:	67 2b       	or	r22, r23
     c90:	68 2b       	or	r22, r24
     c92:	69 2b       	or	r22, r25
     c94:	21 f4       	brne	.+8      	; 0xc9e <_ZN3DHT4readEb+0xd6>
      DEBUG_PRINTLN(F("Timeout waiting for start signal low pulse."));
      _lastresult = false;
     c96:	f8 01       	movw	r30, r16
     c98:	11 8a       	std	Z+17, r1	; 0x11
   }
   ~InterruptLock() {
    interrupts();
     c9a:	78 94       	sei
     c9c:	42 c0       	rjmp	.+132    	; 0xd22 <_ZN3DHT4readEb+0x15a>
      return _lastresult;
    }
    if (expectPulse(HIGH) == 0) {
     c9e:	61 e0       	ldi	r22, 0x01	; 1
     ca0:	c8 01       	movw	r24, r16
     ca2:	0e 94 96 05 	call	0xb2c	; 0xb2c <_ZN3DHT11expectPulseEb>
     ca6:	67 2b       	or	r22, r23
     ca8:	68 2b       	or	r22, r24
     caa:	69 2b       	or	r22, r25
     cac:	a1 f3       	breq	.-24     	; 0xc96 <_ZN3DHT4readEb+0xce>
     cae:	9e 01       	movw	r18, r28
     cb0:	2f 5f       	subi	r18, 0xFF	; 255
     cb2:	3f 4f       	sbci	r19, 0xFF	; 255
     cb4:	79 01       	movw	r14, r18
     cb6:	5e 01       	movw	r10, r28
     cb8:	3f eb       	ldi	r19, 0xBF	; 191
     cba:	a3 1a       	sub	r10, r19
     cbc:	3e ef       	ldi	r19, 0xFE	; 254
     cbe:	b3 0a       	sbc	r11, r19
     cc0:	67 01       	movw	r12, r14
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed all
    // the pulses are read into a array and then examined in a later step.
    for (int i=0; i<80; i+=2) {
      cycles[i]   = expectPulse(LOW);
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	c8 01       	movw	r24, r16
     cc6:	0e 94 96 05 	call	0xb2c	; 0xb2c <_ZN3DHT11expectPulseEb>
     cca:	f6 01       	movw	r30, r12
     ccc:	60 83       	st	Z, r22
     cce:	71 83       	std	Z+1, r23	; 0x01
     cd0:	82 83       	std	Z+2, r24	; 0x02
     cd2:	93 83       	std	Z+3, r25	; 0x03
      cycles[i+1] = expectPulse(HIGH);
     cd4:	61 e0       	ldi	r22, 0x01	; 1
     cd6:	c8 01       	movw	r24, r16
     cd8:	0e 94 96 05 	call	0xb2c	; 0xb2c <_ZN3DHT11expectPulseEb>
     cdc:	f6 01       	movw	r30, r12
     cde:	64 83       	std	Z+4, r22	; 0x04
     ce0:	75 83       	std	Z+5, r23	; 0x05
     ce2:	86 83       	std	Z+6, r24	; 0x06
     ce4:	97 83       	std	Z+7, r25	; 0x07
     ce6:	f8 e0       	ldi	r31, 0x08	; 8
     ce8:	cf 0e       	add	r12, r31
     cea:	d1 1c       	adc	r13, r1
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed all
    // the pulses are read into a array and then examined in a later step.
    for (int i=0; i<80; i+=2) {
     cec:	ca 14       	cp	r12, r10
     cee:	db 04       	cpc	r13, r11
     cf0:	41 f7       	brne	.-48     	; 0xcc2 <_ZN3DHT4readEb+0xfa>
     cf2:	78 94       	sei
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i=0; i<40; ++i) {
     cf4:	20 e0       	ldi	r18, 0x00	; 0
     cf6:	30 e0       	ldi	r19, 0x00	; 0
    uint32_t lowCycles  = cycles[2*i];
     cf8:	f7 01       	movw	r30, r14
     cfa:	80 80       	ld	r8, Z
     cfc:	91 80       	ldd	r9, Z+1	; 0x01
     cfe:	a2 80       	ldd	r10, Z+2	; 0x02
     d00:	b3 80       	ldd	r11, Z+3	; 0x03
    uint32_t highCycles = cycles[2*i+1];
     d02:	44 81       	ldd	r20, Z+4	; 0x04
     d04:	55 81       	ldd	r21, Z+5	; 0x05
     d06:	66 81       	ldd	r22, Z+6	; 0x06
     d08:	77 81       	ldd	r23, Z+7	; 0x07
    if ((lowCycles == 0) || (highCycles == 0)) {
     d0a:	81 14       	cp	r8, r1
     d0c:	91 04       	cpc	r9, r1
     d0e:	a1 04       	cpc	r10, r1
     d10:	b1 04       	cpc	r11, r1
     d12:	29 f0       	breq	.+10     	; 0xd1e <_ZN3DHT4readEb+0x156>
     d14:	41 15       	cp	r20, r1
     d16:	51 05       	cpc	r21, r1
     d18:	61 05       	cpc	r22, r1
     d1a:	71 05       	cpc	r23, r1
     d1c:	21 f4       	brne	.+8      	; 0xd26 <_ZN3DHT4readEb+0x15e>
      DEBUG_PRINTLN(F("Timeout waiting for pulse."));
      _lastresult = false;
     d1e:	f8 01       	movw	r30, r16
     d20:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	2d c0       	rjmp	.+90     	; 0xd80 <_ZN3DHT4readEb+0x1b8>
    }
    data[i/8] <<= 1;
     d26:	f9 01       	movw	r30, r18
     d28:	83 e0       	ldi	r24, 0x03	; 3
     d2a:	f5 95       	asr	r31
     d2c:	e7 95       	ror	r30
     d2e:	8a 95       	dec	r24
     d30:	e1 f7       	brne	.-8      	; 0xd2a <_ZN3DHT4readEb+0x162>
     d32:	e0 0f       	add	r30, r16
     d34:	f1 1f       	adc	r31, r17
     d36:	80 81       	ld	r24, Z
     d38:	88 0f       	add	r24, r24
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
     d3a:	84 16       	cp	r8, r20
     d3c:	95 06       	cpc	r9, r21
     d3e:	a6 06       	cpc	r10, r22
     d40:	b7 06       	cpc	r11, r23
     d42:	08 f4       	brcc	.+2      	; 0xd46 <_ZN3DHT4readEb+0x17e>
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i/8] |= 1;
     d44:	81 60       	ori	r24, 0x01	; 1
     d46:	80 83       	st	Z, r24
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i=0; i<40; ++i) {
     d48:	2f 5f       	subi	r18, 0xFF	; 255
     d4a:	3f 4f       	sbci	r19, 0xFF	; 255
     d4c:	f8 e0       	ldi	r31, 0x08	; 8
     d4e:	ef 0e       	add	r14, r31
     d50:	f1 1c       	adc	r15, r1
     d52:	28 32       	cpi	r18, 0x28	; 40
     d54:	31 05       	cpc	r19, r1
     d56:	81 f6       	brne	.-96     	; 0xcf8 <_ZN3DHT4readEb+0x130>
  DEBUG_PRINT(data[3], HEX); DEBUG_PRINT(F(", "));
  DEBUG_PRINT(data[4], HEX); DEBUG_PRINT(F(" =? "));
  DEBUG_PRINTLN((data[0] + data[1] + data[2] + data[3]) & 0xFF, HEX);

  // Check we read 40 bits and that the checksum matches.
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
     d58:	f8 01       	movw	r30, r16
     d5a:	24 81       	ldd	r18, Z+4	; 0x04
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	40 81       	ld	r20, Z
     d60:	81 81       	ldd	r24, Z+1	; 0x01
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	84 0f       	add	r24, r20
     d66:	91 1d       	adc	r25, r1
     d68:	42 81       	ldd	r20, Z+2	; 0x02
     d6a:	84 0f       	add	r24, r20
     d6c:	91 1d       	adc	r25, r1
     d6e:	43 81       	ldd	r20, Z+3	; 0x03
     d70:	84 0f       	add	r24, r20
     d72:	91 1d       	adc	r25, r1
     d74:	99 27       	eor	r25, r25
     d76:	28 17       	cp	r18, r24
     d78:	39 07       	cpc	r19, r25
     d7a:	89 f6       	brne	.-94     	; 0xd1e <_ZN3DHT4readEb+0x156>
    _lastresult = true;
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	81 8b       	std	Z+17, r24	; 0x11
  else {
    DEBUG_PRINTLN(F("Checksum failure!"));
    _lastresult = false;
    return _lastresult;
  }
}
     d80:	c0 5c       	subi	r28, 0xC0	; 192
     d82:	de 4f       	sbci	r29, 0xFE	; 254
     d84:	0f b6       	in	r0, 0x3f	; 63
     d86:	f8 94       	cli
     d88:	de bf       	out	0x3e, r29	; 62
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	cd bf       	out	0x3d, r28	; 61
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	1f 91       	pop	r17
     d94:	0f 91       	pop	r16
     d96:	ff 90       	pop	r15
     d98:	ef 90       	pop	r14
     d9a:	df 90       	pop	r13
     d9c:	cf 90       	pop	r12
     d9e:	bf 90       	pop	r11
     da0:	af 90       	pop	r10
     da2:	9f 90       	pop	r9
     da4:	8f 90       	pop	r8
     da6:	08 95       	ret

00000da8 <_ZN3DHT15readTemperatureEbb>:
  _lastreadtime = -MIN_INTERVAL;
  DEBUG_PRINT("Max clock cycles: "); DEBUG_PRINTLN(_maxcycles, DEC);
}

//boolean S == Scale.  True == Fahrenheit; False == Celcius
float DHT::readTemperature(bool S, bool force) {
     da8:	cf 92       	push	r12
     daa:	df 92       	push	r13
     dac:	ef 92       	push	r14
     dae:	ff 92       	push	r15
     db0:	0f 93       	push	r16
     db2:	1f 93       	push	r17
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	ec 01       	movw	r28, r24
     dba:	16 2f       	mov	r17, r22
  float f = NAN;

  if (read(force)) {
     dbc:	64 2f       	mov	r22, r20
     dbe:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN3DHT4readEb>
     dc2:	88 23       	and	r24, r24
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <_ZN3DHT15readTemperatureEbb+0x20>
     dc6:	40 c0       	rjmp	.+128    	; 0xe48 <_ZN3DHT15readTemperatureEbb+0xa0>
    switch (_type) {
     dc8:	8e 81       	ldd	r24, Y+6	; 0x06
     dca:	8b 30       	cpi	r24, 0x0B	; 11
     dcc:	29 f0       	breq	.+10     	; 0xdd8 <_ZN3DHT15readTemperatureEbb+0x30>
     dce:	e0 f1       	brcs	.+120    	; 0xe48 <_ZN3DHT15readTemperatureEbb+0xa0>
     dd0:	85 51       	subi	r24, 0x15	; 21
     dd2:	82 30       	cpi	r24, 0x02	; 2
     dd4:	40 f0       	brcs	.+16     	; 0xde6 <_ZN3DHT15readTemperatureEbb+0x3e>
     dd6:	38 c0       	rjmp	.+112    	; 0xe48 <_ZN3DHT15readTemperatureEbb+0xa0>
    case DHT11:
      f = data[2];
     dd8:	6a 81       	ldd	r22, Y+2	; 0x02
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 15 0b 	call	0x162a	; 0x162a <__floatunsisf>
     de4:	22 c0       	rjmp	.+68     	; 0xe2a <_ZN3DHT15readTemperatureEbb+0x82>
        f = convertCtoF(f);
      }
      break;
    case DHT22:
    case DHT21:
      f = data[2] & 0x7F;
     de6:	0a 81       	ldd	r16, Y+2	; 0x02
     de8:	60 2f       	mov	r22, r16
     dea:	6f 77       	andi	r22, 0x7F	; 127
     dec:	70 e0       	ldi	r23, 0x00	; 0
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	0e 94 17 0b 	call	0x162e	; 0x162e <__floatsisf>
      f *= 256;
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	40 e8       	ldi	r20, 0x80	; 128
     dfc:	53 e4       	ldi	r21, 0x43	; 67
     dfe:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__mulsf3>
     e02:	6b 01       	movw	r12, r22
     e04:	7c 01       	movw	r14, r24
      f += data[3];
     e06:	6b 81       	ldd	r22, Y+3	; 0x03
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 17 0b 	call	0x162e	; 0x162e <__floatsisf>
     e12:	a7 01       	movw	r20, r14
     e14:	96 01       	movw	r18, r12
     e16:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <__addsf3>
      f *= 0.1;
     e1a:	2d ec       	ldi	r18, 0xCD	; 205
     e1c:	3c ec       	ldi	r19, 0xCC	; 204
     e1e:	4c ec       	ldi	r20, 0xCC	; 204
     e20:	5d e3       	ldi	r21, 0x3D	; 61
     e22:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__mulsf3>
      if (data[2] & 0x80) {
     e26:	07 fd       	sbrc	r16, 7
        f *= -1;
     e28:	90 58       	subi	r25, 0x80	; 128
      }
      if(S) {
     e2a:	11 23       	and	r17, r17
     e2c:	89 f0       	breq	.+34     	; 0xe50 <_ZN3DHT15readTemperatureEbb+0xa8>
  }
  return f;
}

float DHT::convertCtoF(float c) {
  return c * 1.8 + 32;
     e2e:	26 e6       	ldi	r18, 0x66	; 102
     e30:	36 e6       	ldi	r19, 0x66	; 102
     e32:	46 ee       	ldi	r20, 0xE6	; 230
     e34:	5f e3       	ldi	r21, 0x3F	; 63
     e36:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__mulsf3>
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	40 e0       	ldi	r20, 0x00	; 0
     e40:	52 e4       	ldi	r21, 0x42	; 66
     e42:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <__addsf3>
     e46:	04 c0       	rjmp	.+8      	; 0xe50 <_ZN3DHT15readTemperatureEbb+0xa8>
  DEBUG_PRINT("Max clock cycles: "); DEBUG_PRINTLN(_maxcycles, DEC);
}

//boolean S == Scale.  True == Fahrenheit; False == Celcius
float DHT::readTemperature(bool S, bool force) {
  float f = NAN;
     e48:	60 e0       	ldi	r22, 0x00	; 0
     e4a:	70 e0       	ldi	r23, 0x00	; 0
     e4c:	80 ec       	ldi	r24, 0xC0	; 192
     e4e:	9f e7       	ldi	r25, 0x7F	; 127
      }
      break;
    }
  }
  return f;
}
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	1f 91       	pop	r17
     e56:	0f 91       	pop	r16
     e58:	ff 90       	pop	r15
     e5a:	ef 90       	pop	r14
     e5c:	df 90       	pop	r13
     e5e:	cf 90       	pop	r12
     e60:	08 95       	ret

00000e62 <_ZN3DHT12readHumidityEb>:

float DHT::convertFtoC(float f) {
  return (f - 32) * 0.55555;
}

float DHT::readHumidity(bool force) {
     e62:	cf 92       	push	r12
     e64:	df 92       	push	r13
     e66:	ef 92       	push	r14
     e68:	ff 92       	push	r15
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	ec 01       	movw	r28, r24
  float f = NAN;
  if (read()) {
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN3DHT4readEb>
     e76:	88 23       	and	r24, r24
     e78:	69 f1       	breq	.+90     	; 0xed4 <_ZN3DHT12readHumidityEb+0x72>
    switch (_type) {
     e7a:	8e 81       	ldd	r24, Y+6	; 0x06
     e7c:	8b 30       	cpi	r24, 0x0B	; 11
     e7e:	19 f1       	breq	.+70     	; 0xec6 <_ZN3DHT12readHumidityEb+0x64>
     e80:	48 f1       	brcs	.+82     	; 0xed4 <_ZN3DHT12readHumidityEb+0x72>
     e82:	85 51       	subi	r24, 0x15	; 21
     e84:	82 30       	cpi	r24, 0x02	; 2
     e86:	30 f5       	brcc	.+76     	; 0xed4 <_ZN3DHT12readHumidityEb+0x72>
    case DHT11:
      f = data[0];
      break;
    case DHT22:
    case DHT21:
      f = data[0];
     e88:	68 81       	ld	r22, Y
     e8a:	70 e0       	ldi	r23, 0x00	; 0
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 94 15 0b 	call	0x162a	; 0x162a <__floatunsisf>
      f *= 256;
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	40 e8       	ldi	r20, 0x80	; 128
     e9a:	53 e4       	ldi	r21, 0x43	; 67
     e9c:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__mulsf3>
     ea0:	6b 01       	movw	r12, r22
     ea2:	7c 01       	movw	r14, r24
      f += data[1];
     ea4:	69 81       	ldd	r22, Y+1	; 0x01
     ea6:	70 e0       	ldi	r23, 0x00	; 0
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	0e 94 17 0b 	call	0x162e	; 0x162e <__floatsisf>
     eb0:	a7 01       	movw	r20, r14
     eb2:	96 01       	movw	r18, r12
     eb4:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <__addsf3>
      f *= 0.1;
     eb8:	2d ec       	ldi	r18, 0xCD	; 205
     eba:	3c ec       	ldi	r19, 0xCC	; 204
     ebc:	4c ec       	ldi	r20, 0xCC	; 204
     ebe:	5d e3       	ldi	r21, 0x3D	; 61
     ec0:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__mulsf3>
      break;
     ec4:	0b c0       	rjmp	.+22     	; 0xedc <_ZN3DHT12readHumidityEb+0x7a>
float DHT::readHumidity(bool force) {
  float f = NAN;
  if (read()) {
    switch (_type) {
    case DHT11:
      f = data[0];
     ec6:	68 81       	ld	r22, Y
     ec8:	70 e0       	ldi	r23, 0x00	; 0
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	0e 94 15 0b 	call	0x162a	; 0x162a <__floatunsisf>
      break;
     ed2:	04 c0       	rjmp	.+8      	; 0xedc <_ZN3DHT12readHumidityEb+0x7a>
float DHT::convertFtoC(float f) {
  return (f - 32) * 0.55555;
}

float DHT::readHumidity(bool force) {
  float f = NAN;
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	80 ec       	ldi	r24, 0xC0	; 192
     eda:	9f e7       	ldi	r25, 0x7F	; 127
      f *= 0.1;
      break;
    }
  }
  return f;
}
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	ff 90       	pop	r15
     ee2:	ef 90       	pop	r14
     ee4:	df 90       	pop	r13
     ee6:	cf 90       	pop	r12
     ee8:	08 95       	ret

00000eea <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t>:
		if (clockSource & CS22) TCCR2B |= (1 << CS22);
		if (clockSource & CS21) TCCR2B |= (1 << CS21);
		if (clockSource & CS20) TCCR2B |= (1 << CS20);	
	}
	#endif
}
     eea:	41 11       	cpse	r20, r1
     eec:	05 c0       	rjmp	.+10     	; 0xef8 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0xe>
     eee:	ea e7       	ldi	r30, 0x7A	; 122
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	8f 77       	andi	r24, 0x7F	; 127
     ef6:	80 83       	st	Z, r24
     ef8:	6a 30       	cpi	r22, 0x0A	; 10
     efa:	a9 f0       	breq	.+42     	; 0xf26 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x3c>
     efc:	63 fd       	sbrc	r22, 3
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x1a>
     f00:	88 e0       	ldi	r24, 0x08	; 8
     f02:	01 c0       	rjmp	.+2      	; 0xf06 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x1c>
     f04:	88 e2       	ldi	r24, 0x28	; 40
     f06:	67 70       	andi	r22, 0x07	; 7
     f08:	68 2b       	or	r22, r24
     f0a:	88 e1       	ldi	r24, 0x18	; 24
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	a8 95       	wdr
     f12:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     f1c:	e0 e6       	ldi	r30, 0x60	; 96
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	80 64       	ori	r24, 0x40	; 64
     f24:	80 83       	st	Z, r24
     f26:	21 11       	cpse	r18, r1
     f28:	14 c0       	rjmp	.+40     	; 0xf52 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x68>
     f2a:	83 b7       	in	r24, 0x33	; 51
     f2c:	81 7f       	andi	r24, 0xF1	; 241
     f2e:	84 60       	ori	r24, 0x04	; 4
     f30:	83 bf       	out	0x33, r24	; 51
     f32:	f8 94       	cli
     f34:	83 b7       	in	r24, 0x33	; 51
     f36:	81 60       	ori	r24, 0x01	; 1
     f38:	83 bf       	out	0x33, r24	; 51
     f3a:	85 b7       	in	r24, 0x35	; 53
     f3c:	80 66       	ori	r24, 0x60	; 96
     f3e:	85 bf       	out	0x35, r24	; 53
     f40:	8f 7d       	andi	r24, 0xDF	; 223
     f42:	85 bf       	out	0x35, r24	; 53
     f44:	78 94       	sei
     f46:	88 95       	sleep
     f48:	83 b7       	in	r24, 0x33	; 51
     f4a:	8e 7f       	andi	r24, 0xFE	; 254
     f4c:	83 bf       	out	0x33, r24	; 51
     f4e:	78 94       	sei
     f50:	0e c0       	rjmp	.+28     	; 0xf6e <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x84>
     f52:	83 b7       	in	r24, 0x33	; 51
     f54:	81 7f       	andi	r24, 0xF1	; 241
     f56:	84 60       	ori	r24, 0x04	; 4
     f58:	83 bf       	out	0x33, r24	; 51
     f5a:	f8 94       	cli
     f5c:	83 b7       	in	r24, 0x33	; 51
     f5e:	81 60       	ori	r24, 0x01	; 1
     f60:	83 bf       	out	0x33, r24	; 51
     f62:	78 94       	sei
     f64:	88 95       	sleep
     f66:	83 b7       	in	r24, 0x33	; 51
     f68:	8e 7f       	andi	r24, 0xFE	; 254
     f6a:	83 bf       	out	0x33, r24	; 51
     f6c:	78 94       	sei
     f6e:	41 11       	cpse	r20, r1
     f70:	05 c0       	rjmp	.+10     	; 0xf7c <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x92>
     f72:	ea e7       	ldi	r30, 0x7A	; 122
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	80 68       	ori	r24, 0x80	; 128
     f7a:	80 83       	st	Z, r24
     f7c:	08 95       	ret

00000f7e <__vector_6>:
*		       required to allow automatic WDIF and WDIE bit clearance in 
*			   hardware.
*
*******************************************************************************/
ISR (WDT_vect)
{
     f7e:	1f 92       	push	r1
     f80:	0f 92       	push	r0
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	0f 92       	push	r0
     f86:	11 24       	eor	r1, r1
     f88:	8f 93       	push	r24
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "n"  (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	a8 95       	wdr
     f90:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     f94:	88 61       	ori	r24, 0x18	; 24
     f96:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     f9a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     f9e:	0f be       	out	0x3f, r0	; 63
	// WDIE & WDIF is cleared in hardware upon entering this ISR
	wdt_disable();
}
     fa0:	8f 91       	pop	r24
     fa2:	0f 90       	pop	r0
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	0f 90       	pop	r0
     fa8:	1f 90       	pop	r1
     faa:	18 95       	reti

00000fac <_ZN8RCSwitch11setProtocolEi>:
  return RCSwitch::nReceivedProtocol;
}

unsigned int* RCSwitch::getReceivedRawdata() {
  return RCSwitch::timings;
}
     fac:	9b 01       	movw	r18, r22
     fae:	21 50       	subi	r18, 0x01	; 1
     fb0:	31 09       	sbc	r19, r1
     fb2:	26 30       	cpi	r18, 0x06	; 6
     fb4:	31 05       	cpc	r19, r1
     fb6:	10 f0       	brcs	.+4      	; 0xfbc <_ZN8RCSwitch11setProtocolEi+0x10>
     fb8:	61 e0       	ldi	r22, 0x01	; 1
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	61 50       	subi	r22, 0x01	; 1
     fbe:	71 09       	sbc	r23, r1
     fc0:	49 e0       	ldi	r20, 0x09	; 9
     fc2:	46 9f       	mul	r20, r22
     fc4:	90 01       	movw	r18, r0
     fc6:	47 9f       	mul	r20, r23
     fc8:	30 0d       	add	r19, r0
     fca:	11 24       	eor	r1, r1
     fcc:	b9 01       	movw	r22, r18
     fce:	68 59       	subi	r22, 0x98	; 152
     fd0:	7f 4f       	sbci	r23, 0xFF	; 255
     fd2:	49 e0       	ldi	r20, 0x09	; 9
     fd4:	50 e0       	ldi	r21, 0x00	; 0
     fd6:	06 96       	adiw	r24, 0x06	; 6
     fd8:	0c 94 8f 11 	jmp	0x231e	; 0x231e <memcpy_P>

00000fdc <_ZN8RCSwitchC1Ev>:
     fdc:	0f 93       	push	r16
     fde:	1f 93       	push	r17
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	ec 01       	movw	r28, r24
     fe6:	0f ef       	ldi	r16, 0xFF	; 255
     fe8:	1f ef       	ldi	r17, 0xFF	; 255
     fea:	1b 83       	std	Y+3, r17	; 0x03
     fec:	0a 83       	std	Y+2, r16	; 0x02
     fee:	8a e0       	ldi	r24, 0x0A	; 10
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	9d 83       	std	Y+5, r25	; 0x05
     ff4:	8c 83       	std	Y+4, r24	; 0x04
     ff6:	61 e0       	ldi	r22, 0x01	; 1
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	ce 01       	movw	r24, r28
     ffc:	0e 94 d6 07 	call	0xfac	; 0xfac <_ZN8RCSwitch11setProtocolEi>
    1000:	19 83       	std	Y+1, r17	; 0x01
    1002:	08 83       	st	Y, r16
    1004:	8c e3       	ldi	r24, 0x3C	; 60
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <_ZN8RCSwitch17nReceiveToleranceE+0x1>
    100c:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <_ZN8RCSwitch17nReceiveToleranceE>
    1010:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <_ZN8RCSwitch14nReceivedValueE>
    1014:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <_ZN8RCSwitch14nReceivedValueE+0x1>
    1018:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <_ZN8RCSwitch14nReceivedValueE+0x2>
    101c:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <_ZN8RCSwitch14nReceivedValueE+0x3>
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	08 95       	ret

0000102a <_ZN8RCSwitch17setRepeatTransmitEi>:
    102a:	fc 01       	movw	r30, r24
    102c:	75 83       	std	Z+5, r23	; 0x05
    102e:	64 83       	std	Z+4, r22	; 0x04
    1030:	08 95       	ret

00001032 <_ZN8RCSwitch14enableTransmitEi>:
    1032:	fc 01       	movw	r30, r24
    1034:	86 2f       	mov	r24, r22
    1036:	62 83       	std	Z+2, r22	; 0x02
    1038:	73 83       	std	Z+3, r23	; 0x03
    103a:	61 e0       	ldi	r22, 0x01	; 1
    103c:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <pinMode>

00001040 <_ZN8RCSwitch15disableTransmitEv>:
    1040:	2f ef       	ldi	r18, 0xFF	; 255
    1042:	3f ef       	ldi	r19, 0xFF	; 255
    1044:	fc 01       	movw	r30, r24
    1046:	33 83       	std	Z+3, r19	; 0x03
    1048:	22 83       	std	Z+2, r18	; 0x02
    104a:	08 95       	ret

0000104c <_ZN8RCSwitch8transmitENS_7HighLowE>:
    104c:	ff 92       	push	r15
    104e:	0f 93       	push	r16
    1050:	1f 93       	push	r17
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	ec 01       	movw	r28, r24
    1058:	f6 2e       	mov	r15, r22
    105a:	07 2f       	mov	r16, r23
    105c:	8e 85       	ldd	r24, Y+14	; 0x0e
    105e:	88 23       	and	r24, r24
    1060:	19 f0       	breq	.+6      	; 0x1068 <_ZN8RCSwitch8transmitENS_7HighLowE+0x1c>
    1062:	60 e0       	ldi	r22, 0x00	; 0
    1064:	11 e0       	ldi	r17, 0x01	; 1
    1066:	02 c0       	rjmp	.+4      	; 0x106c <_ZN8RCSwitch8transmitENS_7HighLowE+0x20>
    1068:	61 e0       	ldi	r22, 0x01	; 1
    106a:	10 e0       	ldi	r17, 0x00	; 0
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <digitalWrite>
    1072:	8e 81       	ldd	r24, Y+6	; 0x06
    1074:	9f 81       	ldd	r25, Y+7	; 0x07
    1076:	9c 01       	movw	r18, r24
    1078:	f2 9e       	mul	r15, r18
    107a:	c0 01       	movw	r24, r0
    107c:	f3 9e       	mul	r15, r19
    107e:	90 0d       	add	r25, r0
    1080:	11 24       	eor	r1, r1
    1082:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <delayMicroseconds>
    1086:	61 2f       	mov	r22, r17
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <digitalWrite>
    108e:	8e 81       	ldd	r24, Y+6	; 0x06
    1090:	9f 81       	ldd	r25, Y+7	; 0x07
    1092:	9c 01       	movw	r18, r24
    1094:	02 9f       	mul	r16, r18
    1096:	c0 01       	movw	r24, r0
    1098:	03 9f       	mul	r16, r19
    109a:	90 0d       	add	r25, r0
    109c:	11 24       	eor	r1, r1
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	1f 91       	pop	r17
    10a4:	0f 91       	pop	r16
    10a6:	ff 90       	pop	r15
    10a8:	0c 94 86 0d 	jmp	0x1b0c	; 0x1b0c <delayMicroseconds>

000010ac <_ZN8RCSwitch13enableReceiveEv>:
    10ac:	fc 01       	movw	r30, r24
    10ae:	80 81       	ld	r24, Z
    10b0:	91 81       	ldd	r25, Z+1	; 0x01
    10b2:	8f 3f       	cpi	r24, 0xFF	; 255
    10b4:	ff ef       	ldi	r31, 0xFF	; 255
    10b6:	9f 07       	cpc	r25, r31
    10b8:	91 f0       	breq	.+36     	; 0x10de <_ZN8RCSwitch13enableReceiveEv+0x32>
    10ba:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <_ZN8RCSwitch14nReceivedValueE>
    10be:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <_ZN8RCSwitch14nReceivedValueE+0x1>
    10c2:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <_ZN8RCSwitch14nReceivedValueE+0x2>
    10c6:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <_ZN8RCSwitch14nReceivedValueE+0x3>
    10ca:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <_ZN8RCSwitch18nReceivedBitlengthE+0x1>
    10ce:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <_ZN8RCSwitch18nReceivedBitlengthE>
    10d2:	41 e0       	ldi	r20, 0x01	; 1
    10d4:	50 e0       	ldi	r21, 0x00	; 0
    10d6:	62 ef       	ldi	r22, 0xF2	; 242
    10d8:	79 e0       	ldi	r23, 0x09	; 9
    10da:	0c 94 4f 0c 	jmp	0x189e	; 0x189e <attachInterrupt>
    10de:	08 95       	ret

000010e0 <_ZN8RCSwitch14disableReceiveEv>:
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	ec 01       	movw	r28, r24
    10e6:	88 81       	ld	r24, Y
    10e8:	0e 94 6f 0c 	call	0x18de	; 0x18de <detachInterrupt>
    10ec:	8f ef       	ldi	r24, 0xFF	; 255
    10ee:	9f ef       	ldi	r25, 0xFF	; 255
    10f0:	99 83       	std	Y+1, r25	; 0x01
    10f2:	88 83       	st	Y, r24
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	08 95       	ret

000010fa <_ZN8RCSwitch4sendEmj>:
    10fa:	2f 92       	push	r2
    10fc:	3f 92       	push	r3
    10fe:	4f 92       	push	r4
    1100:	5f 92       	push	r5
    1102:	6f 92       	push	r6
    1104:	7f 92       	push	r7
    1106:	8f 92       	push	r8
    1108:	9f 92       	push	r9
    110a:	af 92       	push	r10
    110c:	bf 92       	push	r11
    110e:	cf 92       	push	r12
    1110:	df 92       	push	r13
    1112:	ef 92       	push	r14
    1114:	ff 92       	push	r15
    1116:	0f 93       	push	r16
    1118:	1f 93       	push	r17
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	dc 01       	movw	r26, r24
    1120:	12 96       	adiw	r26, 0x02	; 2
    1122:	ed 91       	ld	r30, X+
    1124:	fc 91       	ld	r31, X
    1126:	13 97       	sbiw	r26, 0x03	; 3
    1128:	31 96       	adiw	r30, 0x01	; 1
    112a:	09 f4       	brne	.+2      	; 0x112e <_ZN8RCSwitch4sendEmj+0x34>
    112c:	5c c0       	rjmp	.+184    	; 0x11e6 <_ZN8RCSwitch4sendEmj+0xec>
    112e:	19 01       	movw	r2, r18
    1130:	6a 01       	movw	r12, r20
    1132:	7b 01       	movw	r14, r22
    1134:	ec 01       	movw	r28, r24
    1136:	48 80       	ld	r4, Y
    1138:	59 80       	ldd	r5, Y+1	; 0x01
    113a:	8f ef       	ldi	r24, 0xFF	; 255
    113c:	48 16       	cp	r4, r24
    113e:	58 06       	cpc	r5, r24
    1140:	19 f0       	breq	.+6      	; 0x1148 <_ZN8RCSwitch4sendEmj+0x4e>
    1142:	ce 01       	movw	r24, r28
    1144:	0e 94 70 08 	call	0x10e0	; 0x10e0 <_ZN8RCSwitch14disableReceiveEv>
    1148:	61 2c       	mov	r6, r1
    114a:	71 2c       	mov	r7, r1
    114c:	81 2c       	mov	r8, r1
    114e:	91 2c       	mov	r9, r1
    1150:	54 01       	movw	r10, r8
    1152:	83 94       	inc	r8
    1154:	8c 81       	ldd	r24, Y+4	; 0x04
    1156:	9d 81       	ldd	r25, Y+5	; 0x05
    1158:	68 16       	cp	r6, r24
    115a:	79 06       	cpc	r7, r25
    115c:	4c f5       	brge	.+82     	; 0x11b0 <_ZN8RCSwitch4sendEmj+0xb6>
    115e:	81 01       	movw	r16, r2
    1160:	01 50       	subi	r16, 0x01	; 1
    1162:	11 09       	sbc	r17, r1
    1164:	17 fd       	sbrc	r17, 7
    1166:	1b c0       	rjmp	.+54     	; 0x119e <_ZN8RCSwitch4sendEmj+0xa4>
    1168:	d5 01       	movw	r26, r10
    116a:	c4 01       	movw	r24, r8
    116c:	00 2e       	mov	r0, r16
    116e:	04 c0       	rjmp	.+8      	; 0x1178 <_ZN8RCSwitch4sendEmj+0x7e>
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	aa 1f       	adc	r26, r26
    1176:	bb 1f       	adc	r27, r27
    1178:	0a 94       	dec	r0
    117a:	d2 f7       	brpl	.-12     	; 0x1170 <_ZN8RCSwitch4sendEmj+0x76>
    117c:	8c 21       	and	r24, r12
    117e:	9d 21       	and	r25, r13
    1180:	ae 21       	and	r26, r14
    1182:	bf 21       	and	r27, r15
    1184:	89 2b       	or	r24, r25
    1186:	8a 2b       	or	r24, r26
    1188:	8b 2b       	or	r24, r27
    118a:	19 f0       	breq	.+6      	; 0x1192 <_ZN8RCSwitch4sendEmj+0x98>
    118c:	6c 85       	ldd	r22, Y+12	; 0x0c
    118e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <_ZN8RCSwitch4sendEmj+0x9c>
    1192:	6a 85       	ldd	r22, Y+10	; 0x0a
    1194:	7b 85       	ldd	r23, Y+11	; 0x0b
    1196:	ce 01       	movw	r24, r28
    1198:	0e 94 26 08 	call	0x104c	; 0x104c <_ZN8RCSwitch8transmitENS_7HighLowE>
    119c:	e1 cf       	rjmp	.-62     	; 0x1160 <_ZN8RCSwitch4sendEmj+0x66>
    119e:	68 85       	ldd	r22, Y+8	; 0x08
    11a0:	79 85       	ldd	r23, Y+9	; 0x09
    11a2:	ce 01       	movw	r24, r28
    11a4:	0e 94 26 08 	call	0x104c	; 0x104c <_ZN8RCSwitch8transmitENS_7HighLowE>
    11a8:	af ef       	ldi	r26, 0xFF	; 255
    11aa:	6a 1a       	sub	r6, r26
    11ac:	7a 0a       	sbc	r7, r26
    11ae:	d2 cf       	rjmp	.-92     	; 0x1154 <_ZN8RCSwitch4sendEmj+0x5a>
    11b0:	bf ef       	ldi	r27, 0xFF	; 255
    11b2:	4b 16       	cp	r4, r27
    11b4:	5b 06       	cpc	r5, r27
    11b6:	b9 f0       	breq	.+46     	; 0x11e6 <_ZN8RCSwitch4sendEmj+0xec>
    11b8:	59 82       	std	Y+1, r5	; 0x01
    11ba:	48 82       	st	Y, r4
    11bc:	ce 01       	movw	r24, r28
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	1f 91       	pop	r17
    11c4:	0f 91       	pop	r16
    11c6:	ff 90       	pop	r15
    11c8:	ef 90       	pop	r14
    11ca:	df 90       	pop	r13
    11cc:	cf 90       	pop	r12
    11ce:	bf 90       	pop	r11
    11d0:	af 90       	pop	r10
    11d2:	9f 90       	pop	r9
    11d4:	8f 90       	pop	r8
    11d6:	7f 90       	pop	r7
    11d8:	6f 90       	pop	r6
    11da:	5f 90       	pop	r5
    11dc:	4f 90       	pop	r4
    11de:	3f 90       	pop	r3
    11e0:	2f 90       	pop	r2
    11e2:	0c 94 56 08 	jmp	0x10ac	; 0x10ac <_ZN8RCSwitch13enableReceiveEv>
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	1f 91       	pop	r17
    11ec:	0f 91       	pop	r16
    11ee:	ff 90       	pop	r15
    11f0:	ef 90       	pop	r14
    11f2:	df 90       	pop	r13
    11f4:	cf 90       	pop	r12
    11f6:	bf 90       	pop	r11
    11f8:	af 90       	pop	r10
    11fa:	9f 90       	pop	r9
    11fc:	8f 90       	pop	r8
    11fe:	7f 90       	pop	r7
    1200:	6f 90       	pop	r6
    1202:	5f 90       	pop	r5
    1204:	4f 90       	pop	r4
    1206:	3f 90       	pop	r3
    1208:	2f 90       	pop	r2
    120a:	08 95       	ret

0000120c <_ZN8RCSwitch15receiveProtocolEij>:
}

/**
 *
 */
bool RECEIVE_ATTR RCSwitch::receiveProtocol(const int p, unsigned int changeCount) {
    120c:	2f 92       	push	r2
    120e:	3f 92       	push	r3
    1210:	4f 92       	push	r4
    1212:	5f 92       	push	r5
    1214:	6f 92       	push	r6
    1216:	7f 92       	push	r7
    1218:	8f 92       	push	r8
    121a:	9f 92       	push	r9
    121c:	af 92       	push	r10
    121e:	bf 92       	push	r11
    1220:	cf 92       	push	r12
    1222:	df 92       	push	r13
    1224:	ef 92       	push	r14
    1226:	ff 92       	push	r15
    1228:	0f 93       	push	r16
    122a:	1f 93       	push	r17
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	2d 97       	sbiw	r28, 0x0d	; 13
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	cd bf       	out	0x3d, r28	; 61
    1240:	8c 01       	movw	r16, r24
    1242:	7b 01       	movw	r14, r22
#ifdef ESP8266
    const Protocol &pro = proto[p-1];
#else
    Protocol pro;
    memcpy_P(&pro, &proto[p-1], sizeof(Protocol));
    1244:	01 97       	sbiw	r24, 0x01	; 1
    1246:	29 e0       	ldi	r18, 0x09	; 9
    1248:	28 9f       	mul	r18, r24
    124a:	b0 01       	movw	r22, r0
    124c:	29 9f       	mul	r18, r25
    124e:	70 0d       	add	r23, r0
    1250:	11 24       	eor	r1, r1
    1252:	68 59       	subi	r22, 0x98	; 152
    1254:	7f 4f       	sbci	r23, 0xFF	; 255
    1256:	49 e0       	ldi	r20, 0x09	; 9
    1258:	50 e0       	ldi	r21, 0x00	; 0
    125a:	ce 01       	movw	r24, r28
    125c:	01 96       	adiw	r24, 0x01	; 1
    125e:	0e 94 8f 11 	call	0x231e	; 0x231e <memcpy_P>
#endif

    unsigned long code = 0;
    //Assuming the longer pulse length is the pulse captured in timings[0]
    const unsigned int syncLengthInPulses =  ((pro.syncFactor.low) > (pro.syncFactor.high)) ? (pro.syncFactor.low) : (pro.syncFactor.high);
    const unsigned int delay = RCSwitch::timings[0] / syncLengthInPulses;
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	6c 81       	ldd	r22, Y+4	; 0x04
    1266:	68 17       	cp	r22, r24
    1268:	08 f4       	brcc	.+2      	; 0x126c <_ZN8RCSwitch15receiveProtocolEij+0x60>
    126a:	68 2f       	mov	r22, r24
    126c:	70 e0       	ldi	r23, 0x00	; 0
    126e:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <_ZN8RCSwitch7timingsE>
    1272:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <_ZN8RCSwitch7timingsE+0x1>
    1276:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <__udivmodhi4>
    127a:	9b 01       	movw	r18, r22
    const unsigned int delayTolerance = delay * RCSwitch::nReceiveTolerance / 100;
    127c:	40 91 19 01 	lds	r20, 0x0119	; 0x800119 <_ZN8RCSwitch17nReceiveToleranceE>
    1280:	50 91 1a 01 	lds	r21, 0x011A	; 0x80011a <_ZN8RCSwitch17nReceiveToleranceE+0x1>
    1284:	64 9f       	mul	r22, r20
    1286:	c0 01       	movw	r24, r0
    1288:	65 9f       	mul	r22, r21
    128a:	90 0d       	add	r25, r0
    128c:	74 9f       	mul	r23, r20
    128e:	90 0d       	add	r25, r0
    1290:	11 24       	eor	r1, r1
    1292:	64 e6       	ldi	r22, 0x64	; 100
    1294:	70 e0       	ldi	r23, 0x00	; 0
    1296:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <__udivmodhi4>
     *
     * |-filtered out-|--1st dur--|--Start data--|
     *
     * The 2nd saved duration starts the data
     */
    const unsigned int firstDataTiming = (pro.invertedSignal) ? (2) : (1);
    129a:	89 85       	ldd	r24, Y+9	; 0x09
    129c:	81 11       	cpse	r24, r1
    129e:	03 c0       	rjmp	.+6      	; 0x12a6 <_ZN8RCSwitch15receiveProtocolEij+0x9a>
    12a0:	a1 e0       	ldi	r26, 0x01	; 1
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <_ZN8RCSwitch15receiveProtocolEij+0x9e>
    12a6:	a2 e0       	ldi	r26, 0x02	; 2
    12a8:	b0 e0       	ldi	r27, 0x00	; 0

    for (unsigned int i = firstDataTiming; i < changeCount - 1; i += 2) {
        code <<= 1;
        if (diff(RCSwitch::timings[i], delay * pro.zero.high) < delayTolerance &&
    12aa:	8d 81       	ldd	r24, Y+5	; 0x05
    12ac:	82 9f       	mul	r24, r18
    12ae:	30 01       	movw	r6, r0
    12b0:	83 9f       	mul	r24, r19
    12b2:	70 0c       	add	r7, r0
    12b4:	11 24       	eor	r1, r1
    12b6:	7b 86       	std	Y+11, r7	; 0x0b
    12b8:	6a 86       	std	Y+10, r6	; 0x0a
            diff(RCSwitch::timings[i + 1], delay * pro.zero.low) < delayTolerance) {
    12ba:	8e 81       	ldd	r24, Y+6	; 0x06
    12bc:	82 9f       	mul	r24, r18
    12be:	10 01       	movw	r2, r0
    12c0:	83 9f       	mul	r24, r19
    12c2:	30 0c       	add	r3, r0
    12c4:	11 24       	eor	r1, r1
            // zero
        } else if (diff(RCSwitch::timings[i], delay * pro.one.high) < delayTolerance &&
    12c6:	8f 81       	ldd	r24, Y+7	; 0x07
    12c8:	82 9f       	mul	r24, r18
    12ca:	20 01       	movw	r4, r0
    12cc:	83 9f       	mul	r24, r19
    12ce:	50 0c       	add	r5, r0
    12d0:	11 24       	eor	r1, r1
                   diff(RCSwitch::timings[i + 1], delay * pro.one.low) < delayTolerance) {
    12d2:	88 85       	ldd	r24, Y+8	; 0x08
    12d4:	82 9f       	mul	r24, r18
    12d6:	a0 01       	movw	r20, r0
    12d8:	83 9f       	mul	r24, r19
    12da:	50 0d       	add	r21, r0
    12dc:	11 24       	eor	r1, r1
    12de:	5d 87       	std	Y+13, r21	; 0x0d
    12e0:	4c 87       	std	Y+12, r20	; 0x0c
    12e2:	fd 01       	movw	r30, r26
    12e4:	ee 0f       	add	r30, r30
    12e6:	ff 1f       	adc	r31, r31
    12e8:	ed 52       	subi	r30, 0x2D	; 45
    12ea:	fe 4f       	sbci	r31, 0xFE	; 254
    12ec:	81 2c       	mov	r8, r1
    12ee:	91 2c       	mov	r9, r1
    12f0:	54 01       	movw	r10, r8
     *
     * The 2nd saved duration starts the data
     */
    const unsigned int firstDataTiming = (pro.invertedSignal) ? (2) : (1);

    for (unsigned int i = firstDataTiming; i < changeCount - 1; i += 2) {
    12f2:	67 01       	movw	r12, r14
    12f4:	51 e0       	ldi	r21, 0x01	; 1
    12f6:	c5 1a       	sub	r12, r21
    12f8:	d1 08       	sbc	r13, r1
    12fa:	ac 15       	cp	r26, r12
    12fc:	bd 05       	cpc	r27, r13
    12fe:	e0 f5       	brcc	.+120    	; 0x1378 <_ZN8RCSwitch15receiveProtocolEij+0x16c>
        code <<= 1;
    1300:	88 0c       	add	r8, r8
    1302:	99 1c       	adc	r9, r9
    1304:	aa 1c       	adc	r10, r10
    1306:	bb 1c       	adc	r11, r11
        if (diff(RCSwitch::timings[i], delay * pro.zero.high) < delayTolerance &&
    1308:	80 81       	ld	r24, Z
    130a:	91 81       	ldd	r25, Z+1	; 0x01
    130c:	ac 01       	movw	r20, r24
    130e:	6a 84       	ldd	r6, Y+10	; 0x0a
    1310:	7b 84       	ldd	r7, Y+11	; 0x0b
    1312:	46 19       	sub	r20, r6
    1314:	57 09       	sbc	r21, r7
    1316:	57 ff       	sbrs	r21, 7
    1318:	03 c0       	rjmp	.+6      	; 0x1320 <_ZN8RCSwitch15receiveProtocolEij+0x114>
    131a:	51 95       	neg	r21
    131c:	41 95       	neg	r20
    131e:	51 09       	sbc	r21, r1
    1320:	46 17       	cp	r20, r22
    1322:	57 07       	cpc	r21, r23
    1324:	60 f4       	brcc	.+24     	; 0x133e <_ZN8RCSwitch15receiveProtocolEij+0x132>
    1326:	42 81       	ldd	r20, Z+2	; 0x02
    1328:	53 81       	ldd	r21, Z+3	; 0x03
    132a:	42 19       	sub	r20, r2
    132c:	53 09       	sbc	r21, r3
    132e:	57 ff       	sbrs	r21, 7
    1330:	03 c0       	rjmp	.+6      	; 0x1338 <_ZN8RCSwitch15receiveProtocolEij+0x12c>
    1332:	51 95       	neg	r21
    1334:	41 95       	neg	r20
    1336:	51 09       	sbc	r21, r1
    1338:	46 17       	cp	r20, r22
    133a:	57 07       	cpc	r21, r23
    133c:	d0 f0       	brcs	.+52     	; 0x1372 <_ZN8RCSwitch15receiveProtocolEij+0x166>
            diff(RCSwitch::timings[i + 1], delay * pro.zero.low) < delayTolerance) {
            // zero
        } else if (diff(RCSwitch::timings[i], delay * pro.one.high) < delayTolerance &&
    133e:	84 19       	sub	r24, r4
    1340:	95 09       	sbc	r25, r5
    1342:	97 ff       	sbrs	r25, 7
    1344:	03 c0       	rjmp	.+6      	; 0x134c <_ZN8RCSwitch15receiveProtocolEij+0x140>
    1346:	91 95       	neg	r25
    1348:	81 95       	neg	r24
    134a:	91 09       	sbc	r25, r1
    134c:	86 17       	cp	r24, r22
    134e:	97 07       	cpc	r25, r23
    1350:	78 f5       	brcc	.+94     	; 0x13b0 <_ZN8RCSwitch15receiveProtocolEij+0x1a4>
    1352:	82 81       	ldd	r24, Z+2	; 0x02
    1354:	93 81       	ldd	r25, Z+3	; 0x03
    1356:	4c 85       	ldd	r20, Y+12	; 0x0c
    1358:	5d 85       	ldd	r21, Y+13	; 0x0d
    135a:	84 1b       	sub	r24, r20
    135c:	95 0b       	sbc	r25, r21
    135e:	97 ff       	sbrs	r25, 7
    1360:	03 c0       	rjmp	.+6      	; 0x1368 <_ZN8RCSwitch15receiveProtocolEij+0x15c>
    1362:	91 95       	neg	r25
    1364:	81 95       	neg	r24
    1366:	91 09       	sbc	r25, r1
    1368:	86 17       	cp	r24, r22
    136a:	97 07       	cpc	r25, r23
    136c:	08 f5       	brcc	.+66     	; 0x13b0 <_ZN8RCSwitch15receiveProtocolEij+0x1a4>
                   diff(RCSwitch::timings[i + 1], delay * pro.one.low) < delayTolerance) {
            // one
            code |= 1;
    136e:	68 94       	set
    1370:	80 f8       	bld	r8, 0
     *
     * The 2nd saved duration starts the data
     */
    const unsigned int firstDataTiming = (pro.invertedSignal) ? (2) : (1);

    for (unsigned int i = firstDataTiming; i < changeCount - 1; i += 2) {
    1372:	12 96       	adiw	r26, 0x02	; 2
    1374:	34 96       	adiw	r30, 0x04	; 4
    1376:	c1 cf       	rjmp	.-126    	; 0x12fa <_ZN8RCSwitch15receiveProtocolEij+0xee>
            // Failed
            return false;
        }
    }

    if (changeCount > 7) {    // ignore very short transmissions: no device sends them, so this must be noise
    1378:	58 e0       	ldi	r21, 0x08	; 8
    137a:	e5 16       	cp	r14, r21
    137c:	f1 04       	cpc	r15, r1
    137e:	c0 f0       	brcs	.+48     	; 0x13b0 <_ZN8RCSwitch15receiveProtocolEij+0x1a4>
        RCSwitch::nReceivedValue = code;
    1380:	80 92 5f 02 	sts	0x025F, r8	; 0x80025f <_ZN8RCSwitch14nReceivedValueE>
    1384:	90 92 60 02 	sts	0x0260, r9	; 0x800260 <_ZN8RCSwitch14nReceivedValueE+0x1>
    1388:	a0 92 61 02 	sts	0x0261, r10	; 0x800261 <_ZN8RCSwitch14nReceivedValueE+0x2>
    138c:	b0 92 62 02 	sts	0x0262, r11	; 0x800262 <_ZN8RCSwitch14nReceivedValueE+0x3>
        RCSwitch::nReceivedBitlength = (changeCount - 1) / 2;
    1390:	d6 94       	lsr	r13
    1392:	c7 94       	ror	r12
    1394:	d0 92 5e 02 	sts	0x025E, r13	; 0x80025e <_ZN8RCSwitch18nReceivedBitlengthE+0x1>
    1398:	c0 92 5d 02 	sts	0x025D, r12	; 0x80025d <_ZN8RCSwitch18nReceivedBitlengthE>
        RCSwitch::nReceivedDelay = delay;
    139c:	30 93 5c 02 	sts	0x025C, r19	; 0x80025c <_ZN8RCSwitch14nReceivedDelayE+0x1>
    13a0:	20 93 5b 02 	sts	0x025B, r18	; 0x80025b <_ZN8RCSwitch14nReceivedDelayE>
        RCSwitch::nReceivedProtocol = p;
    13a4:	10 93 5a 02 	sts	0x025A, r17	; 0x80025a <_ZN8RCSwitch17nReceivedProtocolE+0x1>
    13a8:	00 93 59 02 	sts	0x0259, r16	; 0x800259 <_ZN8RCSwitch17nReceivedProtocolE>
        return true;
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	01 c0       	rjmp	.+2      	; 0x13b2 <_ZN8RCSwitch15receiveProtocolEij+0x1a6>
                   diff(RCSwitch::timings[i + 1], delay * pro.one.low) < delayTolerance) {
            // one
            code |= 1;
        } else {
            // Failed
            return false;
    13b0:	80 e0       	ldi	r24, 0x00	; 0
        RCSwitch::nReceivedProtocol = p;
        return true;
    }

    return false;
}
    13b2:	2d 96       	adiw	r28, 0x0d	; 13
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	f8 94       	cli
    13b8:	de bf       	out	0x3e, r29	; 62
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	cd bf       	out	0x3d, r28	; 61
    13be:	df 91       	pop	r29
    13c0:	cf 91       	pop	r28
    13c2:	1f 91       	pop	r17
    13c4:	0f 91       	pop	r16
    13c6:	ff 90       	pop	r15
    13c8:	ef 90       	pop	r14
    13ca:	df 90       	pop	r13
    13cc:	cf 90       	pop	r12
    13ce:	bf 90       	pop	r11
    13d0:	af 90       	pop	r10
    13d2:	9f 90       	pop	r9
    13d4:	8f 90       	pop	r8
    13d6:	7f 90       	pop	r7
    13d8:	6f 90       	pop	r6
    13da:	5f 90       	pop	r5
    13dc:	4f 90       	pop	r4
    13de:	3f 90       	pop	r3
    13e0:	2f 90       	pop	r2
    13e2:	08 95       	ret

000013e4 <_ZN8RCSwitch15handleInterruptEv>:

void RECEIVE_ATTR RCSwitch::handleInterrupt() {
    13e4:	cf 92       	push	r12
    13e6:	df 92       	push	r13
    13e8:	ef 92       	push	r14
    13ea:	ff 92       	push	r15
    13ec:	0f 93       	push	r16
    13ee:	1f 93       	push	r17
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29

  static unsigned int changeCount = 0;
  static unsigned long lastTime = 0;
  static unsigned int repeatCount = 0;

  const long time = micros();
    13f4:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <micros>
    13f8:	6b 01       	movw	r12, r22
    13fa:	7c 01       	movw	r14, r24
  const unsigned int duration = time - lastTime;
    13fc:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <_ZZN8RCSwitch15handleInterruptEvE8lastTime>
    1400:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <_ZZN8RCSwitch15handleInterruptEvE8lastTime+0x1>
    1404:	86 01       	movw	r16, r12
    1406:	08 1b       	sub	r16, r24
    1408:	19 0b       	sbc	r17, r25

  if (duration > RCSwitch::nSeparationLimit) {
    140a:	0d 3c       	cpi	r16, 0xCD	; 205
    140c:	20 e1       	ldi	r18, 0x10	; 16
    140e:	12 07       	cpc	r17, r18
    1410:	90 f1       	brcs	.+100    	; 0x1476 <_ZN8RCSwitch15handleInterruptEv+0x92>
    // A long stretch without signal level change occurred. This could
    // be the gap between two transmission.
    if (diff(duration, RCSwitch::timings[0]) < 200) {
    1412:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <_ZN8RCSwitch7timingsE>
    1416:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <_ZN8RCSwitch7timingsE+0x1>
    141a:	98 01       	movw	r18, r16
    141c:	28 1b       	sub	r18, r24
    141e:	39 0b       	sbc	r19, r25
    1420:	c9 01       	movw	r24, r18
    1422:	37 ff       	sbrs	r19, 7
    1424:	03 c0       	rjmp	.+6      	; 0x142c <_ZN8RCSwitch15handleInterruptEv+0x48>
    1426:	91 95       	neg	r25
    1428:	81 95       	neg	r24
    142a:	91 09       	sbc	r25, r1
    142c:	88 3c       	cpi	r24, 0xC8	; 200
    142e:	91 05       	cpc	r25, r1
    1430:	f4 f4       	brge	.+60     	; 0x146e <_ZN8RCSwitch15handleInterruptEv+0x8a>
      // This long signal is close in length to the long signal which
      // started the previously recorded timings; this suggests that
      // it may indeed by a a gap between two transmissions (we assume
      // here that a sender will send the signal multiple times,
      // with roughly the same gap between them).
      repeatCount++;
    1432:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <_ZZN8RCSwitch15handleInterruptEvE11repeatCount>
    1436:	90 91 ce 01 	lds	r25, 0x01CE	; 0x8001ce <_ZZN8RCSwitch15handleInterruptEvE11repeatCount+0x1>
    143a:	01 96       	adiw	r24, 0x01	; 1
    143c:	90 93 ce 01 	sts	0x01CE, r25	; 0x8001ce <_ZZN8RCSwitch15handleInterruptEvE11repeatCount+0x1>
    1440:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <_ZZN8RCSwitch15handleInterruptEvE11repeatCount>
      if (repeatCount == 2) {
    1444:	02 97       	sbiw	r24, 0x02	; 2
    1446:	99 f4       	brne	.+38     	; 0x146e <_ZN8RCSwitch15handleInterruptEv+0x8a>
    1448:	c1 e0       	ldi	r28, 0x01	; 1
    144a:	d0 e0       	ldi	r29, 0x00	; 0
        for(unsigned int i = 1; i <= numProto; i++) {
          if (receiveProtocol(i, changeCount)) {
    144c:	60 91 cb 01 	lds	r22, 0x01CB	; 0x8001cb <_ZZN8RCSwitch15handleInterruptEvE11changeCount>
    1450:	70 91 cc 01 	lds	r23, 0x01CC	; 0x8001cc <_ZZN8RCSwitch15handleInterruptEvE11changeCount+0x1>
    1454:	ce 01       	movw	r24, r28
    1456:	0e 94 06 09 	call	0x120c	; 0x120c <_ZN8RCSwitch15receiveProtocolEij>
    145a:	81 11       	cpse	r24, r1
    145c:	04 c0       	rjmp	.+8      	; 0x1466 <_ZN8RCSwitch15handleInterruptEv+0x82>
      // it may indeed by a a gap between two transmissions (we assume
      // here that a sender will send the signal multiple times,
      // with roughly the same gap between them).
      repeatCount++;
      if (repeatCount == 2) {
        for(unsigned int i = 1; i <= numProto; i++) {
    145e:	21 96       	adiw	r28, 0x01	; 1
    1460:	c7 30       	cpi	r28, 0x07	; 7
    1462:	d1 05       	cpc	r29, r1
    1464:	99 f7       	brne	.-26     	; 0x144c <_ZN8RCSwitch15handleInterruptEv+0x68>
          if (receiveProtocol(i, changeCount)) {
            // receive succeeded for protocol i
            break;
          }
        }
        repeatCount = 0;
    1466:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <_ZZN8RCSwitch15handleInterruptEvE11repeatCount+0x1>
    146a:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <_ZZN8RCSwitch15handleInterruptEvE11repeatCount>
      }
    }
    changeCount = 0;
    146e:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <_ZZN8RCSwitch15handleInterruptEvE11changeCount+0x1>
    1472:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <_ZZN8RCSwitch15handleInterruptEvE11changeCount>
  }
 
  // detect overflow
  if (changeCount >= RCSWITCH_MAX_CHANGES) {
    1476:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <_ZZN8RCSwitch15handleInterruptEvE11changeCount>
    147a:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <_ZZN8RCSwitch15handleInterruptEvE11changeCount+0x1>
    147e:	83 34       	cpi	r24, 0x43	; 67
    1480:	91 05       	cpc	r25, r1
    1482:	40 f0       	brcs	.+16     	; 0x1494 <_ZN8RCSwitch15handleInterruptEv+0xb0>
    changeCount = 0;
    1484:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <_ZZN8RCSwitch15handleInterruptEvE11changeCount+0x1>
    1488:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <_ZZN8RCSwitch15handleInterruptEvE11changeCount>
    repeatCount = 0;
    148c:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <_ZZN8RCSwitch15handleInterruptEvE11repeatCount+0x1>
    1490:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <_ZZN8RCSwitch15handleInterruptEvE11repeatCount>
  }

  RCSwitch::timings[changeCount++] = duration;
    1494:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <_ZZN8RCSwitch15handleInterruptEvE11changeCount>
    1498:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <_ZZN8RCSwitch15handleInterruptEvE11changeCount+0x1>
    149c:	9c 01       	movw	r18, r24
    149e:	2f 5f       	subi	r18, 0xFF	; 255
    14a0:	3f 4f       	sbci	r19, 0xFF	; 255
    14a2:	30 93 cc 01 	sts	0x01CC, r19	; 0x8001cc <_ZZN8RCSwitch15handleInterruptEvE11changeCount+0x1>
    14a6:	20 93 cb 01 	sts	0x01CB, r18	; 0x8001cb <_ZZN8RCSwitch15handleInterruptEvE11changeCount>
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	fc 01       	movw	r30, r24
    14b0:	ed 52       	subi	r30, 0x2D	; 45
    14b2:	fe 4f       	sbci	r31, 0xFE	; 254
    14b4:	11 83       	std	Z+1, r17	; 0x01
    14b6:	00 83       	st	Z, r16
  lastTime = time;  
    14b8:	c0 92 cf 01 	sts	0x01CF, r12	; 0x8001cf <_ZZN8RCSwitch15handleInterruptEvE8lastTime>
    14bc:	d0 92 d0 01 	sts	0x01D0, r13	; 0x8001d0 <_ZZN8RCSwitch15handleInterruptEvE8lastTime+0x1>
    14c0:	e0 92 d1 01 	sts	0x01D1, r14	; 0x8001d1 <_ZZN8RCSwitch15handleInterruptEvE8lastTime+0x2>
    14c4:	f0 92 d2 01 	sts	0x01D2, r15	; 0x8001d2 <_ZZN8RCSwitch15handleInterruptEvE8lastTime+0x3>
}
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	1f 91       	pop	r17
    14ce:	0f 91       	pop	r16
    14d0:	ff 90       	pop	r15
    14d2:	ef 90       	pop	r14
    14d4:	df 90       	pop	r13
    14d6:	cf 90       	pop	r12
    14d8:	08 95       	ret

000014da <__subsf3>:
    14da:	50 58       	subi	r21, 0x80	; 128

000014dc <__addsf3>:
    14dc:	bb 27       	eor	r27, r27
    14de:	aa 27       	eor	r26, r26
    14e0:	0e 94 85 0a 	call	0x150a	; 0x150a <__addsf3x>
    14e4:	0c 94 8d 0b 	jmp	0x171a	; 0x171a <__fp_round>
    14e8:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__fp_pscA>
    14ec:	38 f0       	brcs	.+14     	; 0x14fc <__addsf3+0x20>
    14ee:	0e 94 86 0b 	call	0x170c	; 0x170c <__fp_pscB>
    14f2:	20 f0       	brcs	.+8      	; 0x14fc <__addsf3+0x20>
    14f4:	39 f4       	brne	.+14     	; 0x1504 <__addsf3+0x28>
    14f6:	9f 3f       	cpi	r25, 0xFF	; 255
    14f8:	19 f4       	brne	.+6      	; 0x1500 <__addsf3+0x24>
    14fa:	26 f4       	brtc	.+8      	; 0x1504 <__addsf3+0x28>
    14fc:	0c 94 7c 0b 	jmp	0x16f8	; 0x16f8 <__fp_nan>
    1500:	0e f4       	brtc	.+2      	; 0x1504 <__addsf3+0x28>
    1502:	e0 95       	com	r30
    1504:	e7 fb       	bst	r30, 7
    1506:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <__fp_inf>

0000150a <__addsf3x>:
    150a:	e9 2f       	mov	r30, r25
    150c:	0e 94 9e 0b 	call	0x173c	; 0x173c <__fp_split3>
    1510:	58 f3       	brcs	.-42     	; 0x14e8 <__addsf3+0xc>
    1512:	ba 17       	cp	r27, r26
    1514:	62 07       	cpc	r22, r18
    1516:	73 07       	cpc	r23, r19
    1518:	84 07       	cpc	r24, r20
    151a:	95 07       	cpc	r25, r21
    151c:	20 f0       	brcs	.+8      	; 0x1526 <__addsf3x+0x1c>
    151e:	79 f4       	brne	.+30     	; 0x153e <__addsf3x+0x34>
    1520:	a6 f5       	brtc	.+104    	; 0x158a <__addsf3x+0x80>
    1522:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__fp_zero>
    1526:	0e f4       	brtc	.+2      	; 0x152a <__addsf3x+0x20>
    1528:	e0 95       	com	r30
    152a:	0b 2e       	mov	r0, r27
    152c:	ba 2f       	mov	r27, r26
    152e:	a0 2d       	mov	r26, r0
    1530:	0b 01       	movw	r0, r22
    1532:	b9 01       	movw	r22, r18
    1534:	90 01       	movw	r18, r0
    1536:	0c 01       	movw	r0, r24
    1538:	ca 01       	movw	r24, r20
    153a:	a0 01       	movw	r20, r0
    153c:	11 24       	eor	r1, r1
    153e:	ff 27       	eor	r31, r31
    1540:	59 1b       	sub	r21, r25
    1542:	99 f0       	breq	.+38     	; 0x156a <__addsf3x+0x60>
    1544:	59 3f       	cpi	r21, 0xF9	; 249
    1546:	50 f4       	brcc	.+20     	; 0x155c <__addsf3x+0x52>
    1548:	50 3e       	cpi	r21, 0xE0	; 224
    154a:	68 f1       	brcs	.+90     	; 0x15a6 <__addsf3x+0x9c>
    154c:	1a 16       	cp	r1, r26
    154e:	f0 40       	sbci	r31, 0x00	; 0
    1550:	a2 2f       	mov	r26, r18
    1552:	23 2f       	mov	r18, r19
    1554:	34 2f       	mov	r19, r20
    1556:	44 27       	eor	r20, r20
    1558:	58 5f       	subi	r21, 0xF8	; 248
    155a:	f3 cf       	rjmp	.-26     	; 0x1542 <__addsf3x+0x38>
    155c:	46 95       	lsr	r20
    155e:	37 95       	ror	r19
    1560:	27 95       	ror	r18
    1562:	a7 95       	ror	r26
    1564:	f0 40       	sbci	r31, 0x00	; 0
    1566:	53 95       	inc	r21
    1568:	c9 f7       	brne	.-14     	; 0x155c <__addsf3x+0x52>
    156a:	7e f4       	brtc	.+30     	; 0x158a <__addsf3x+0x80>
    156c:	1f 16       	cp	r1, r31
    156e:	ba 0b       	sbc	r27, r26
    1570:	62 0b       	sbc	r22, r18
    1572:	73 0b       	sbc	r23, r19
    1574:	84 0b       	sbc	r24, r20
    1576:	ba f0       	brmi	.+46     	; 0x15a6 <__addsf3x+0x9c>
    1578:	91 50       	subi	r25, 0x01	; 1
    157a:	a1 f0       	breq	.+40     	; 0x15a4 <__addsf3x+0x9a>
    157c:	ff 0f       	add	r31, r31
    157e:	bb 1f       	adc	r27, r27
    1580:	66 1f       	adc	r22, r22
    1582:	77 1f       	adc	r23, r23
    1584:	88 1f       	adc	r24, r24
    1586:	c2 f7       	brpl	.-16     	; 0x1578 <__addsf3x+0x6e>
    1588:	0e c0       	rjmp	.+28     	; 0x15a6 <__addsf3x+0x9c>
    158a:	ba 0f       	add	r27, r26
    158c:	62 1f       	adc	r22, r18
    158e:	73 1f       	adc	r23, r19
    1590:	84 1f       	adc	r24, r20
    1592:	48 f4       	brcc	.+18     	; 0x15a6 <__addsf3x+0x9c>
    1594:	87 95       	ror	r24
    1596:	77 95       	ror	r23
    1598:	67 95       	ror	r22
    159a:	b7 95       	ror	r27
    159c:	f7 95       	ror	r31
    159e:	9e 3f       	cpi	r25, 0xFE	; 254
    15a0:	08 f0       	brcs	.+2      	; 0x15a4 <__addsf3x+0x9a>
    15a2:	b0 cf       	rjmp	.-160    	; 0x1504 <__addsf3+0x28>
    15a4:	93 95       	inc	r25
    15a6:	88 0f       	add	r24, r24
    15a8:	08 f0       	brcs	.+2      	; 0x15ac <__addsf3x+0xa2>
    15aa:	99 27       	eor	r25, r25
    15ac:	ee 0f       	add	r30, r30
    15ae:	97 95       	ror	r25
    15b0:	87 95       	ror	r24
    15b2:	08 95       	ret

000015b4 <__cmpsf2>:
    15b4:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__fp_cmp>
    15b8:	08 f4       	brcc	.+2      	; 0x15bc <__cmpsf2+0x8>
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	08 95       	ret

000015be <__fixsfsi>:
    15be:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__fixunssfsi>
    15c2:	68 94       	set
    15c4:	b1 11       	cpse	r27, r1
    15c6:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__fp_szero>
    15ca:	08 95       	ret

000015cc <__fixunssfsi>:
    15cc:	0e 94 a6 0b 	call	0x174c	; 0x174c <__fp_splitA>
    15d0:	88 f0       	brcs	.+34     	; 0x15f4 <__fixunssfsi+0x28>
    15d2:	9f 57       	subi	r25, 0x7F	; 127
    15d4:	98 f0       	brcs	.+38     	; 0x15fc <__fixunssfsi+0x30>
    15d6:	b9 2f       	mov	r27, r25
    15d8:	99 27       	eor	r25, r25
    15da:	b7 51       	subi	r27, 0x17	; 23
    15dc:	b0 f0       	brcs	.+44     	; 0x160a <__fixunssfsi+0x3e>
    15de:	e1 f0       	breq	.+56     	; 0x1618 <__fixunssfsi+0x4c>
    15e0:	66 0f       	add	r22, r22
    15e2:	77 1f       	adc	r23, r23
    15e4:	88 1f       	adc	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	1a f0       	brmi	.+6      	; 0x15f0 <__fixunssfsi+0x24>
    15ea:	ba 95       	dec	r27
    15ec:	c9 f7       	brne	.-14     	; 0x15e0 <__fixunssfsi+0x14>
    15ee:	14 c0       	rjmp	.+40     	; 0x1618 <__fixunssfsi+0x4c>
    15f0:	b1 30       	cpi	r27, 0x01	; 1
    15f2:	91 f0       	breq	.+36     	; 0x1618 <__fixunssfsi+0x4c>
    15f4:	0e 94 c0 0b 	call	0x1780	; 0x1780 <__fp_zero>
    15f8:	b1 e0       	ldi	r27, 0x01	; 1
    15fa:	08 95       	ret
    15fc:	0c 94 c0 0b 	jmp	0x1780	; 0x1780 <__fp_zero>
    1600:	67 2f       	mov	r22, r23
    1602:	78 2f       	mov	r23, r24
    1604:	88 27       	eor	r24, r24
    1606:	b8 5f       	subi	r27, 0xF8	; 248
    1608:	39 f0       	breq	.+14     	; 0x1618 <__fixunssfsi+0x4c>
    160a:	b9 3f       	cpi	r27, 0xF9	; 249
    160c:	cc f3       	brlt	.-14     	; 0x1600 <__fixunssfsi+0x34>
    160e:	86 95       	lsr	r24
    1610:	77 95       	ror	r23
    1612:	67 95       	ror	r22
    1614:	b3 95       	inc	r27
    1616:	d9 f7       	brne	.-10     	; 0x160e <__fixunssfsi+0x42>
    1618:	3e f4       	brtc	.+14     	; 0x1628 <__fixunssfsi+0x5c>
    161a:	90 95       	com	r25
    161c:	80 95       	com	r24
    161e:	70 95       	com	r23
    1620:	61 95       	neg	r22
    1622:	7f 4f       	sbci	r23, 0xFF	; 255
    1624:	8f 4f       	sbci	r24, 0xFF	; 255
    1626:	9f 4f       	sbci	r25, 0xFF	; 255
    1628:	08 95       	ret

0000162a <__floatunsisf>:
    162a:	e8 94       	clt
    162c:	09 c0       	rjmp	.+18     	; 0x1640 <__floatsisf+0x12>

0000162e <__floatsisf>:
    162e:	97 fb       	bst	r25, 7
    1630:	3e f4       	brtc	.+14     	; 0x1640 <__floatsisf+0x12>
    1632:	90 95       	com	r25
    1634:	80 95       	com	r24
    1636:	70 95       	com	r23
    1638:	61 95       	neg	r22
    163a:	7f 4f       	sbci	r23, 0xFF	; 255
    163c:	8f 4f       	sbci	r24, 0xFF	; 255
    163e:	9f 4f       	sbci	r25, 0xFF	; 255
    1640:	99 23       	and	r25, r25
    1642:	a9 f0       	breq	.+42     	; 0x166e <__floatsisf+0x40>
    1644:	f9 2f       	mov	r31, r25
    1646:	96 e9       	ldi	r25, 0x96	; 150
    1648:	bb 27       	eor	r27, r27
    164a:	93 95       	inc	r25
    164c:	f6 95       	lsr	r31
    164e:	87 95       	ror	r24
    1650:	77 95       	ror	r23
    1652:	67 95       	ror	r22
    1654:	b7 95       	ror	r27
    1656:	f1 11       	cpse	r31, r1
    1658:	f8 cf       	rjmp	.-16     	; 0x164a <__floatsisf+0x1c>
    165a:	fa f4       	brpl	.+62     	; 0x169a <__floatsisf+0x6c>
    165c:	bb 0f       	add	r27, r27
    165e:	11 f4       	brne	.+4      	; 0x1664 <__floatsisf+0x36>
    1660:	60 ff       	sbrs	r22, 0
    1662:	1b c0       	rjmp	.+54     	; 0x169a <__floatsisf+0x6c>
    1664:	6f 5f       	subi	r22, 0xFF	; 255
    1666:	7f 4f       	sbci	r23, 0xFF	; 255
    1668:	8f 4f       	sbci	r24, 0xFF	; 255
    166a:	9f 4f       	sbci	r25, 0xFF	; 255
    166c:	16 c0       	rjmp	.+44     	; 0x169a <__floatsisf+0x6c>
    166e:	88 23       	and	r24, r24
    1670:	11 f0       	breq	.+4      	; 0x1676 <__floatsisf+0x48>
    1672:	96 e9       	ldi	r25, 0x96	; 150
    1674:	11 c0       	rjmp	.+34     	; 0x1698 <__floatsisf+0x6a>
    1676:	77 23       	and	r23, r23
    1678:	21 f0       	breq	.+8      	; 0x1682 <__floatsisf+0x54>
    167a:	9e e8       	ldi	r25, 0x8E	; 142
    167c:	87 2f       	mov	r24, r23
    167e:	76 2f       	mov	r23, r22
    1680:	05 c0       	rjmp	.+10     	; 0x168c <__floatsisf+0x5e>
    1682:	66 23       	and	r22, r22
    1684:	71 f0       	breq	.+28     	; 0x16a2 <__floatsisf+0x74>
    1686:	96 e8       	ldi	r25, 0x86	; 134
    1688:	86 2f       	mov	r24, r22
    168a:	70 e0       	ldi	r23, 0x00	; 0
    168c:	60 e0       	ldi	r22, 0x00	; 0
    168e:	2a f0       	brmi	.+10     	; 0x169a <__floatsisf+0x6c>
    1690:	9a 95       	dec	r25
    1692:	66 0f       	add	r22, r22
    1694:	77 1f       	adc	r23, r23
    1696:	88 1f       	adc	r24, r24
    1698:	da f7       	brpl	.-10     	; 0x1690 <__floatsisf+0x62>
    169a:	88 0f       	add	r24, r24
    169c:	96 95       	lsr	r25
    169e:	87 95       	ror	r24
    16a0:	97 f9       	bld	r25, 7
    16a2:	08 95       	ret

000016a4 <__fp_cmp>:
    16a4:	99 0f       	add	r25, r25
    16a6:	00 08       	sbc	r0, r0
    16a8:	55 0f       	add	r21, r21
    16aa:	aa 0b       	sbc	r26, r26
    16ac:	e0 e8       	ldi	r30, 0x80	; 128
    16ae:	fe ef       	ldi	r31, 0xFE	; 254
    16b0:	16 16       	cp	r1, r22
    16b2:	17 06       	cpc	r1, r23
    16b4:	e8 07       	cpc	r30, r24
    16b6:	f9 07       	cpc	r31, r25
    16b8:	c0 f0       	brcs	.+48     	; 0x16ea <__fp_cmp+0x46>
    16ba:	12 16       	cp	r1, r18
    16bc:	13 06       	cpc	r1, r19
    16be:	e4 07       	cpc	r30, r20
    16c0:	f5 07       	cpc	r31, r21
    16c2:	98 f0       	brcs	.+38     	; 0x16ea <__fp_cmp+0x46>
    16c4:	62 1b       	sub	r22, r18
    16c6:	73 0b       	sbc	r23, r19
    16c8:	84 0b       	sbc	r24, r20
    16ca:	95 0b       	sbc	r25, r21
    16cc:	39 f4       	brne	.+14     	; 0x16dc <__fp_cmp+0x38>
    16ce:	0a 26       	eor	r0, r26
    16d0:	61 f0       	breq	.+24     	; 0x16ea <__fp_cmp+0x46>
    16d2:	23 2b       	or	r18, r19
    16d4:	24 2b       	or	r18, r20
    16d6:	25 2b       	or	r18, r21
    16d8:	21 f4       	brne	.+8      	; 0x16e2 <__fp_cmp+0x3e>
    16da:	08 95       	ret
    16dc:	0a 26       	eor	r0, r26
    16de:	09 f4       	brne	.+2      	; 0x16e2 <__fp_cmp+0x3e>
    16e0:	a1 40       	sbci	r26, 0x01	; 1
    16e2:	a6 95       	lsr	r26
    16e4:	8f ef       	ldi	r24, 0xFF	; 255
    16e6:	81 1d       	adc	r24, r1
    16e8:	81 1d       	adc	r24, r1
    16ea:	08 95       	ret

000016ec <__fp_inf>:
    16ec:	97 f9       	bld	r25, 7
    16ee:	9f 67       	ori	r25, 0x7F	; 127
    16f0:	80 e8       	ldi	r24, 0x80	; 128
    16f2:	70 e0       	ldi	r23, 0x00	; 0
    16f4:	60 e0       	ldi	r22, 0x00	; 0
    16f6:	08 95       	ret

000016f8 <__fp_nan>:
    16f8:	9f ef       	ldi	r25, 0xFF	; 255
    16fa:	80 ec       	ldi	r24, 0xC0	; 192
    16fc:	08 95       	ret

000016fe <__fp_pscA>:
    16fe:	00 24       	eor	r0, r0
    1700:	0a 94       	dec	r0
    1702:	16 16       	cp	r1, r22
    1704:	17 06       	cpc	r1, r23
    1706:	18 06       	cpc	r1, r24
    1708:	09 06       	cpc	r0, r25
    170a:	08 95       	ret

0000170c <__fp_pscB>:
    170c:	00 24       	eor	r0, r0
    170e:	0a 94       	dec	r0
    1710:	12 16       	cp	r1, r18
    1712:	13 06       	cpc	r1, r19
    1714:	14 06       	cpc	r1, r20
    1716:	05 06       	cpc	r0, r21
    1718:	08 95       	ret

0000171a <__fp_round>:
    171a:	09 2e       	mov	r0, r25
    171c:	03 94       	inc	r0
    171e:	00 0c       	add	r0, r0
    1720:	11 f4       	brne	.+4      	; 0x1726 <__fp_round+0xc>
    1722:	88 23       	and	r24, r24
    1724:	52 f0       	brmi	.+20     	; 0x173a <__fp_round+0x20>
    1726:	bb 0f       	add	r27, r27
    1728:	40 f4       	brcc	.+16     	; 0x173a <__fp_round+0x20>
    172a:	bf 2b       	or	r27, r31
    172c:	11 f4       	brne	.+4      	; 0x1732 <__fp_round+0x18>
    172e:	60 ff       	sbrs	r22, 0
    1730:	04 c0       	rjmp	.+8      	; 0x173a <__fp_round+0x20>
    1732:	6f 5f       	subi	r22, 0xFF	; 255
    1734:	7f 4f       	sbci	r23, 0xFF	; 255
    1736:	8f 4f       	sbci	r24, 0xFF	; 255
    1738:	9f 4f       	sbci	r25, 0xFF	; 255
    173a:	08 95       	ret

0000173c <__fp_split3>:
    173c:	57 fd       	sbrc	r21, 7
    173e:	90 58       	subi	r25, 0x80	; 128
    1740:	44 0f       	add	r20, r20
    1742:	55 1f       	adc	r21, r21
    1744:	59 f0       	breq	.+22     	; 0x175c <__fp_splitA+0x10>
    1746:	5f 3f       	cpi	r21, 0xFF	; 255
    1748:	71 f0       	breq	.+28     	; 0x1766 <__fp_splitA+0x1a>
    174a:	47 95       	ror	r20

0000174c <__fp_splitA>:
    174c:	88 0f       	add	r24, r24
    174e:	97 fb       	bst	r25, 7
    1750:	99 1f       	adc	r25, r25
    1752:	61 f0       	breq	.+24     	; 0x176c <__fp_splitA+0x20>
    1754:	9f 3f       	cpi	r25, 0xFF	; 255
    1756:	79 f0       	breq	.+30     	; 0x1776 <__fp_splitA+0x2a>
    1758:	87 95       	ror	r24
    175a:	08 95       	ret
    175c:	12 16       	cp	r1, r18
    175e:	13 06       	cpc	r1, r19
    1760:	14 06       	cpc	r1, r20
    1762:	55 1f       	adc	r21, r21
    1764:	f2 cf       	rjmp	.-28     	; 0x174a <__fp_split3+0xe>
    1766:	46 95       	lsr	r20
    1768:	f1 df       	rcall	.-30     	; 0x174c <__fp_splitA>
    176a:	08 c0       	rjmp	.+16     	; 0x177c <__fp_splitA+0x30>
    176c:	16 16       	cp	r1, r22
    176e:	17 06       	cpc	r1, r23
    1770:	18 06       	cpc	r1, r24
    1772:	99 1f       	adc	r25, r25
    1774:	f1 cf       	rjmp	.-30     	; 0x1758 <__fp_splitA+0xc>
    1776:	86 95       	lsr	r24
    1778:	71 05       	cpc	r23, r1
    177a:	61 05       	cpc	r22, r1
    177c:	08 94       	sec
    177e:	08 95       	ret

00001780 <__fp_zero>:
    1780:	e8 94       	clt

00001782 <__fp_szero>:
    1782:	bb 27       	eor	r27, r27
    1784:	66 27       	eor	r22, r22
    1786:	77 27       	eor	r23, r23
    1788:	cb 01       	movw	r24, r22
    178a:	97 f9       	bld	r25, 7
    178c:	08 95       	ret

0000178e <__gesf2>:
    178e:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__fp_cmp>
    1792:	08 f4       	brcc	.+2      	; 0x1796 <__gesf2+0x8>
    1794:	8f ef       	ldi	r24, 0xFF	; 255
    1796:	08 95       	ret

00001798 <__mulsf3>:
    1798:	0e 94 df 0b 	call	0x17be	; 0x17be <__mulsf3x>
    179c:	0c 94 8d 0b 	jmp	0x171a	; 0x171a <__fp_round>
    17a0:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__fp_pscA>
    17a4:	38 f0       	brcs	.+14     	; 0x17b4 <__mulsf3+0x1c>
    17a6:	0e 94 86 0b 	call	0x170c	; 0x170c <__fp_pscB>
    17aa:	20 f0       	brcs	.+8      	; 0x17b4 <__mulsf3+0x1c>
    17ac:	95 23       	and	r25, r21
    17ae:	11 f0       	breq	.+4      	; 0x17b4 <__mulsf3+0x1c>
    17b0:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <__fp_inf>
    17b4:	0c 94 7c 0b 	jmp	0x16f8	; 0x16f8 <__fp_nan>
    17b8:	11 24       	eor	r1, r1
    17ba:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__fp_szero>

000017be <__mulsf3x>:
    17be:	0e 94 9e 0b 	call	0x173c	; 0x173c <__fp_split3>
    17c2:	70 f3       	brcs	.-36     	; 0x17a0 <__mulsf3+0x8>

000017c4 <__mulsf3_pse>:
    17c4:	95 9f       	mul	r25, r21
    17c6:	c1 f3       	breq	.-16     	; 0x17b8 <__mulsf3+0x20>
    17c8:	95 0f       	add	r25, r21
    17ca:	50 e0       	ldi	r21, 0x00	; 0
    17cc:	55 1f       	adc	r21, r21
    17ce:	62 9f       	mul	r22, r18
    17d0:	f0 01       	movw	r30, r0
    17d2:	72 9f       	mul	r23, r18
    17d4:	bb 27       	eor	r27, r27
    17d6:	f0 0d       	add	r31, r0
    17d8:	b1 1d       	adc	r27, r1
    17da:	63 9f       	mul	r22, r19
    17dc:	aa 27       	eor	r26, r26
    17de:	f0 0d       	add	r31, r0
    17e0:	b1 1d       	adc	r27, r1
    17e2:	aa 1f       	adc	r26, r26
    17e4:	64 9f       	mul	r22, r20
    17e6:	66 27       	eor	r22, r22
    17e8:	b0 0d       	add	r27, r0
    17ea:	a1 1d       	adc	r26, r1
    17ec:	66 1f       	adc	r22, r22
    17ee:	82 9f       	mul	r24, r18
    17f0:	22 27       	eor	r18, r18
    17f2:	b0 0d       	add	r27, r0
    17f4:	a1 1d       	adc	r26, r1
    17f6:	62 1f       	adc	r22, r18
    17f8:	73 9f       	mul	r23, r19
    17fa:	b0 0d       	add	r27, r0
    17fc:	a1 1d       	adc	r26, r1
    17fe:	62 1f       	adc	r22, r18
    1800:	83 9f       	mul	r24, r19
    1802:	a0 0d       	add	r26, r0
    1804:	61 1d       	adc	r22, r1
    1806:	22 1f       	adc	r18, r18
    1808:	74 9f       	mul	r23, r20
    180a:	33 27       	eor	r19, r19
    180c:	a0 0d       	add	r26, r0
    180e:	61 1d       	adc	r22, r1
    1810:	23 1f       	adc	r18, r19
    1812:	84 9f       	mul	r24, r20
    1814:	60 0d       	add	r22, r0
    1816:	21 1d       	adc	r18, r1
    1818:	82 2f       	mov	r24, r18
    181a:	76 2f       	mov	r23, r22
    181c:	6a 2f       	mov	r22, r26
    181e:	11 24       	eor	r1, r1
    1820:	9f 57       	subi	r25, 0x7F	; 127
    1822:	50 40       	sbci	r21, 0x00	; 0
    1824:	9a f0       	brmi	.+38     	; 0x184c <__mulsf3_pse+0x88>
    1826:	f1 f0       	breq	.+60     	; 0x1864 <__mulsf3_pse+0xa0>
    1828:	88 23       	and	r24, r24
    182a:	4a f0       	brmi	.+18     	; 0x183e <__mulsf3_pse+0x7a>
    182c:	ee 0f       	add	r30, r30
    182e:	ff 1f       	adc	r31, r31
    1830:	bb 1f       	adc	r27, r27
    1832:	66 1f       	adc	r22, r22
    1834:	77 1f       	adc	r23, r23
    1836:	88 1f       	adc	r24, r24
    1838:	91 50       	subi	r25, 0x01	; 1
    183a:	50 40       	sbci	r21, 0x00	; 0
    183c:	a9 f7       	brne	.-22     	; 0x1828 <__mulsf3_pse+0x64>
    183e:	9e 3f       	cpi	r25, 0xFE	; 254
    1840:	51 05       	cpc	r21, r1
    1842:	80 f0       	brcs	.+32     	; 0x1864 <__mulsf3_pse+0xa0>
    1844:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <__fp_inf>
    1848:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__fp_szero>
    184c:	5f 3f       	cpi	r21, 0xFF	; 255
    184e:	e4 f3       	brlt	.-8      	; 0x1848 <__mulsf3_pse+0x84>
    1850:	98 3e       	cpi	r25, 0xE8	; 232
    1852:	d4 f3       	brlt	.-12     	; 0x1848 <__mulsf3_pse+0x84>
    1854:	86 95       	lsr	r24
    1856:	77 95       	ror	r23
    1858:	67 95       	ror	r22
    185a:	b7 95       	ror	r27
    185c:	f7 95       	ror	r31
    185e:	e7 95       	ror	r30
    1860:	9f 5f       	subi	r25, 0xFF	; 255
    1862:	c1 f7       	brne	.-16     	; 0x1854 <__mulsf3_pse+0x90>
    1864:	fe 2b       	or	r31, r30
    1866:	88 0f       	add	r24, r24
    1868:	91 1d       	adc	r25, r1
    186a:	96 95       	lsr	r25
    186c:	87 95       	ror	r24
    186e:	97 f9       	bld	r25, 7
    1870:	08 95       	ret

00001872 <__unordsf2>:
    1872:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__fp_cmp>
    1876:	88 0b       	sbc	r24, r24
    1878:	99 0b       	sbc	r25, r25
    187a:	08 95       	ret

0000187c <initVariant>:
    187c:	08 95       	ret

0000187e <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    187e:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <init>

	initVariant();
    1882:	0e 94 3e 0c 	call	0x187c	; 0x187c <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1886:	0e 94 a7 00 	call	0x14e	; 0x14e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    188a:	c0 e0       	ldi	r28, 0x00	; 0
    188c:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    188e:	0e 94 bf 04 	call	0x97e	; 0x97e <loop>
		if (serialEventRun) serialEventRun();
    1892:	20 97       	sbiw	r28, 0x00	; 0
    1894:	e1 f3       	breq	.-8      	; 0x188e <main+0x10>
    1896:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    189a:	f9 cf       	rjmp	.-14     	; 0x188e <main+0x10>

0000189c <nothing>:
#include <avr/pgmspace.h>
#include <stdio.h>

#include "wiring_private.h"

static void nothing(void) {
    189c:	08 95       	ret

0000189e <attachInterrupt>:
#endif
};
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    189e:	82 30       	cpi	r24, 0x02	; 2
    18a0:	e8 f4       	brcc	.+58     	; 0x18dc <attachInterrupt+0x3e>
    intFunc[interruptNum] = userFunc;
    18a2:	e8 2f       	mov	r30, r24
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	ee 0f       	add	r30, r30
    18a8:	ff 1f       	adc	r31, r31
    18aa:	e5 5e       	subi	r30, 0xE5	; 229
    18ac:	fe 4f       	sbci	r31, 0xFE	; 254
    18ae:	71 83       	std	Z+1, r23	; 0x01
    18b0:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    18b2:	81 30       	cpi	r24, 0x01	; 1
    18b4:	41 f0       	breq	.+16     	; 0x18c6 <attachInterrupt+0x28>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    18b6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    18ba:	8c 7f       	andi	r24, 0xFC	; 252
    18bc:	48 2b       	or	r20, r24
    18be:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
      EIMSK |= (1 << INT0);
    18c2:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
    18c4:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    18c6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    18ca:	83 7f       	andi	r24, 0xF3	; 243
    18cc:	44 0f       	add	r20, r20
    18ce:	55 1f       	adc	r21, r21
    18d0:	44 0f       	add	r20, r20
    18d2:	55 1f       	adc	r21, r21
    18d4:	48 2b       	or	r20, r24
    18d6:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
      EIMSK |= (1 << INT1);
    18da:	e9 9a       	sbi	0x1d, 1	; 29
    18dc:	08 95       	ret

000018de <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    18de:	82 30       	cpi	r24, 0x02	; 2
    18e0:	78 f4       	brcc	.+30     	; 0x1900 <detachInterrupt+0x22>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    18e2:	81 30       	cpi	r24, 0x01	; 1
    18e4:	11 f0       	breq	.+4      	; 0x18ea <detachInterrupt+0xc>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
    18e6:	e8 98       	cbi	0x1d, 0	; 29
    #elif defined(GIMSK) && defined(INT0)
      GIMSK &= ~(1 << INT0);
    #else
      #error detachInterrupt not finished for this cpu
    #endif
      break;
    18e8:	01 c0       	rjmp	.+2      	; 0x18ec <detachInterrupt+0xe>

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
    18ea:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    18ec:	e8 2f       	mov	r30, r24
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	ee 0f       	add	r30, r30
    18f2:	ff 1f       	adc	r31, r31
    18f4:	e5 5e       	subi	r30, 0xE5	; 229
    18f6:	fe 4f       	sbci	r31, 0xFE	; 254
    18f8:	8e e4       	ldi	r24, 0x4E	; 78
    18fa:	9c e0       	ldi	r25, 0x0C	; 12
    18fc:	91 83       	std	Z+1, r25	; 0x01
    18fe:	80 83       	st	Z, r24
    1900:	08 95       	ret

00001902 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    1902:	1f 92       	push	r1
    1904:	0f 92       	push	r0
    1906:	0f b6       	in	r0, 0x3f	; 63
    1908:	0f 92       	push	r0
    190a:	11 24       	eor	r1, r1
    190c:	2f 93       	push	r18
    190e:	3f 93       	push	r19
    1910:	4f 93       	push	r20
    1912:	5f 93       	push	r21
    1914:	6f 93       	push	r22
    1916:	7f 93       	push	r23
    1918:	8f 93       	push	r24
    191a:	9f 93       	push	r25
    191c:	af 93       	push	r26
    191e:	bf 93       	push	r27
    1920:	ef 93       	push	r30
    1922:	ff 93       	push	r31
    1924:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <intFunc>
    1928:	f0 91 1c 01 	lds	r31, 0x011C	; 0x80011c <intFunc+0x1>
    192c:	09 95       	icall
    192e:	ff 91       	pop	r31
    1930:	ef 91       	pop	r30
    1932:	bf 91       	pop	r27
    1934:	af 91       	pop	r26
    1936:	9f 91       	pop	r25
    1938:	8f 91       	pop	r24
    193a:	7f 91       	pop	r23
    193c:	6f 91       	pop	r22
    193e:	5f 91       	pop	r21
    1940:	4f 91       	pop	r20
    1942:	3f 91       	pop	r19
    1944:	2f 91       	pop	r18
    1946:	0f 90       	pop	r0
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	0f 90       	pop	r0
    194c:	1f 90       	pop	r1
    194e:	18 95       	reti

00001950 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    1950:	1f 92       	push	r1
    1952:	0f 92       	push	r0
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	0f 92       	push	r0
    1958:	11 24       	eor	r1, r1
    195a:	2f 93       	push	r18
    195c:	3f 93       	push	r19
    195e:	4f 93       	push	r20
    1960:	5f 93       	push	r21
    1962:	6f 93       	push	r22
    1964:	7f 93       	push	r23
    1966:	8f 93       	push	r24
    1968:	9f 93       	push	r25
    196a:	af 93       	push	r26
    196c:	bf 93       	push	r27
    196e:	ef 93       	push	r30
    1970:	ff 93       	push	r31
    1972:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <intFunc+0x2>
    1976:	f0 91 1e 01 	lds	r31, 0x011E	; 0x80011e <intFunc+0x3>
    197a:	09 95       	icall
    197c:	ff 91       	pop	r31
    197e:	ef 91       	pop	r30
    1980:	bf 91       	pop	r27
    1982:	af 91       	pop	r26
    1984:	9f 91       	pop	r25
    1986:	8f 91       	pop	r24
    1988:	7f 91       	pop	r23
    198a:	6f 91       	pop	r22
    198c:	5f 91       	pop	r21
    198e:	4f 91       	pop	r20
    1990:	3f 91       	pop	r19
    1992:	2f 91       	pop	r18
    1994:	0f 90       	pop	r0
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	0f 90       	pop	r0
    199a:	1f 90       	pop	r1
    199c:	18 95       	reti

0000199e <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    199e:	1f 92       	push	r1
    19a0:	0f 92       	push	r0
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	0f 92       	push	r0
    19a6:	11 24       	eor	r1, r1
    19a8:	2f 93       	push	r18
    19aa:	3f 93       	push	r19
    19ac:	8f 93       	push	r24
    19ae:	9f 93       	push	r25
    19b0:	af 93       	push	r26
    19b2:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    19b4:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <timer0_millis>
    19b8:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <timer0_millis+0x1>
    19bc:	a0 91 66 02 	lds	r26, 0x0266	; 0x800266 <timer0_millis+0x2>
    19c0:	b0 91 67 02 	lds	r27, 0x0267	; 0x800267 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    19c4:	30 91 63 02 	lds	r19, 0x0263	; 0x800263 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    19c8:	26 e0       	ldi	r18, 0x06	; 6
    19ca:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    19cc:	2d 37       	cpi	r18, 0x7D	; 125
    19ce:	20 f4       	brcc	.+8      	; 0x19d8 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    19d0:	02 96       	adiw	r24, 0x02	; 2
    19d2:	a1 1d       	adc	r26, r1
    19d4:	b1 1d       	adc	r27, r1
    19d6:	05 c0       	rjmp	.+10     	; 0x19e2 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    19d8:	29 e8       	ldi	r18, 0x89	; 137
    19da:	23 0f       	add	r18, r19
		m += 1;
    19dc:	03 96       	adiw	r24, 0x03	; 3
    19de:	a1 1d       	adc	r26, r1
    19e0:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    19e2:	20 93 63 02 	sts	0x0263, r18	; 0x800263 <timer0_fract>
	timer0_millis = m;
    19e6:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <timer0_millis>
    19ea:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <timer0_millis+0x1>
    19ee:	a0 93 66 02 	sts	0x0266, r26	; 0x800266 <timer0_millis+0x2>
    19f2:	b0 93 67 02 	sts	0x0267, r27	; 0x800267 <timer0_millis+0x3>
	timer0_overflow_count++;
    19f6:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <timer0_overflow_count>
    19fa:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <timer0_overflow_count+0x1>
    19fe:	a0 91 6a 02 	lds	r26, 0x026A	; 0x80026a <timer0_overflow_count+0x2>
    1a02:	b0 91 6b 02 	lds	r27, 0x026B	; 0x80026b <timer0_overflow_count+0x3>
    1a06:	01 96       	adiw	r24, 0x01	; 1
    1a08:	a1 1d       	adc	r26, r1
    1a0a:	b1 1d       	adc	r27, r1
    1a0c:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <timer0_overflow_count>
    1a10:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <timer0_overflow_count+0x1>
    1a14:	a0 93 6a 02 	sts	0x026A, r26	; 0x80026a <timer0_overflow_count+0x2>
    1a18:	b0 93 6b 02 	sts	0x026B, r27	; 0x80026b <timer0_overflow_count+0x3>
}
    1a1c:	bf 91       	pop	r27
    1a1e:	af 91       	pop	r26
    1a20:	9f 91       	pop	r25
    1a22:	8f 91       	pop	r24
    1a24:	3f 91       	pop	r19
    1a26:	2f 91       	pop	r18
    1a28:	0f 90       	pop	r0
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	0f 90       	pop	r0
    1a2e:	1f 90       	pop	r1
    1a30:	18 95       	reti

00001a32 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    1a32:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1a34:	f8 94       	cli
	m = timer0_millis;
    1a36:	60 91 64 02 	lds	r22, 0x0264	; 0x800264 <timer0_millis>
    1a3a:	70 91 65 02 	lds	r23, 0x0265	; 0x800265 <timer0_millis+0x1>
    1a3e:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <timer0_millis+0x2>
    1a42:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <timer0_millis+0x3>
	SREG = oldSREG;
    1a46:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    1a48:	08 95       	ret

00001a4a <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1a4a:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    1a4c:	f8 94       	cli
	m = timer0_overflow_count;
    1a4e:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <timer0_overflow_count>
    1a52:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <timer0_overflow_count+0x1>
    1a56:	a0 91 6a 02 	lds	r26, 0x026A	; 0x80026a <timer0_overflow_count+0x2>
    1a5a:	b0 91 6b 02 	lds	r27, 0x026B	; 0x80026b <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    1a5e:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1a60:	a8 9b       	sbis	0x15, 0	; 21
    1a62:	05 c0       	rjmp	.+10     	; 0x1a6e <micros+0x24>
    1a64:	2f 3f       	cpi	r18, 0xFF	; 255
    1a66:	19 f0       	breq	.+6      	; 0x1a6e <micros+0x24>
		m++;
    1a68:	01 96       	adiw	r24, 0x01	; 1
    1a6a:	a1 1d       	adc	r26, r1
    1a6c:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1a6e:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1a70:	ba 2f       	mov	r27, r26
    1a72:	a9 2f       	mov	r26, r25
    1a74:	98 2f       	mov	r25, r24
    1a76:	88 27       	eor	r24, r24
    1a78:	82 0f       	add	r24, r18
    1a7a:	91 1d       	adc	r25, r1
    1a7c:	a1 1d       	adc	r26, r1
    1a7e:	b1 1d       	adc	r27, r1
    1a80:	bc 01       	movw	r22, r24
    1a82:	cd 01       	movw	r24, r26
    1a84:	43 e0       	ldi	r20, 0x03	; 3
    1a86:	66 0f       	add	r22, r22
    1a88:	77 1f       	adc	r23, r23
    1a8a:	88 1f       	adc	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	4a 95       	dec	r20
    1a90:	d1 f7       	brne	.-12     	; 0x1a86 <micros+0x3c>
}
    1a92:	08 95       	ret

00001a94 <delay>:

void delay(unsigned long ms)
{
    1a94:	8f 92       	push	r8
    1a96:	9f 92       	push	r9
    1a98:	af 92       	push	r10
    1a9a:	bf 92       	push	r11
    1a9c:	cf 92       	push	r12
    1a9e:	df 92       	push	r13
    1aa0:	ef 92       	push	r14
    1aa2:	ff 92       	push	r15
    1aa4:	6b 01       	movw	r12, r22
    1aa6:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    1aa8:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <micros>
    1aac:	4b 01       	movw	r8, r22
    1aae:	5c 01       	movw	r10, r24

	while (ms > 0) {
    1ab0:	c1 14       	cp	r12, r1
    1ab2:	d1 04       	cpc	r13, r1
    1ab4:	e1 04       	cpc	r14, r1
    1ab6:	f1 04       	cpc	r15, r1
    1ab8:	01 f1       	breq	.+64     	; 0x1afa <delay+0x66>
		yield();
    1aba:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    1abe:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <micros>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	88 19       	sub	r24, r8
    1ac8:	99 09       	sbc	r25, r9
    1aca:	aa 09       	sbc	r26, r10
    1acc:	bb 09       	sbc	r27, r11
    1ace:	88 3e       	cpi	r24, 0xE8	; 232
    1ad0:	93 40       	sbci	r25, 0x03	; 3
    1ad2:	a1 05       	cpc	r26, r1
    1ad4:	b1 05       	cpc	r27, r1
    1ad6:	60 f3       	brcs	.-40     	; 0x1ab0 <delay+0x1c>
			ms--;
    1ad8:	21 e0       	ldi	r18, 0x01	; 1
    1ada:	c2 1a       	sub	r12, r18
    1adc:	d1 08       	sbc	r13, r1
    1ade:	e1 08       	sbc	r14, r1
    1ae0:	f1 08       	sbc	r15, r1
			start += 1000;
    1ae2:	88 ee       	ldi	r24, 0xE8	; 232
    1ae4:	88 0e       	add	r8, r24
    1ae6:	83 e0       	ldi	r24, 0x03	; 3
    1ae8:	98 1e       	adc	r9, r24
    1aea:	a1 1c       	adc	r10, r1
    1aec:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    1aee:	c1 14       	cp	r12, r1
    1af0:	d1 04       	cpc	r13, r1
    1af2:	e1 04       	cpc	r14, r1
    1af4:	f1 04       	cpc	r15, r1
    1af6:	19 f7       	brne	.-58     	; 0x1abe <delay+0x2a>
    1af8:	db cf       	rjmp	.-74     	; 0x1ab0 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    1afa:	ff 90       	pop	r15
    1afc:	ef 90       	pop	r14
    1afe:	df 90       	pop	r13
    1b00:	cf 90       	pop	r12
    1b02:	bf 90       	pop	r11
    1b04:	af 90       	pop	r10
    1b06:	9f 90       	pop	r9
    1b08:	8f 90       	pop	r8
    1b0a:	08 95       	ret

00001b0c <delayMicroseconds>:
#elif F_CPU >= 8000000L
	// for the 8 MHz internal clock

	// for a 1 and 2 microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 2us
	if (us <= 2) return; //  = 3 cycles, (4 when true)
    1b0c:	83 30       	cpi	r24, 0x03	; 3
    1b0e:	91 05       	cpc	r25, r1
    1b10:	28 f0       	brcs	.+10     	; 0x1b1c <delayMicroseconds+0x10>

	// the following loop takes 1/2 of a microsecond (4 cycles)
	// per iteration, so execute it twice for each microsecond of
	// delay requested.
	us <<= 1; //x2 us, = 2 cycles
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 17 (19) cycles above, remove 4, (4*4=16)
	// us is at least 6 so we can substract 4
	us -= 4; // = 2 cycles
    1b16:	04 97       	sbiw	r24, 0x04	; 4
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <delayMicroseconds+0xc>
    1b1c:	08 95       	ret

00001b1e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1b1e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1b20:	84 b5       	in	r24, 0x24	; 36
    1b22:	82 60       	ori	r24, 0x02	; 2
    1b24:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1b26:	84 b5       	in	r24, 0x24	; 36
    1b28:	81 60       	ori	r24, 0x01	; 1
    1b2a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1b2c:	85 b5       	in	r24, 0x25	; 37
    1b2e:	82 60       	ori	r24, 0x02	; 2
    1b30:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1b32:	85 b5       	in	r24, 0x25	; 37
    1b34:	81 60       	ori	r24, 0x01	; 1
    1b36:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1b38:	ee e6       	ldi	r30, 0x6E	; 110
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	81 60       	ori	r24, 0x01	; 1
    1b40:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1b42:	e1 e8       	ldi	r30, 0x81	; 129
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1b48:	80 81       	ld	r24, Z
    1b4a:	82 60       	ori	r24, 0x02	; 2
    1b4c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1b4e:	80 81       	ld	r24, Z
    1b50:	81 60       	ori	r24, 0x01	; 1
    1b52:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1b54:	e0 e8       	ldi	r30, 0x80	; 128
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	81 60       	ori	r24, 0x01	; 1
    1b5c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1b5e:	e1 eb       	ldi	r30, 0xB1	; 177
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	84 60       	ori	r24, 0x04	; 4
    1b66:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1b68:	e0 eb       	ldi	r30, 0xB0	; 176
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	81 60       	ori	r24, 0x01	; 1
    1b70:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1b72:	ea e7       	ldi	r30, 0x7A	; 122
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	84 60       	ori	r24, 0x04	; 4
    1b7a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1b7c:	80 81       	ld	r24, Z
    1b7e:	82 60       	ori	r24, 0x02	; 2
    1b80:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS0);
    1b82:	80 81       	ld	r24, Z
    1b84:	8e 7f       	andi	r24, 0xFE	; 254
    1b86:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1b88:	80 81       	ld	r24, Z
    1b8a:	80 68       	ori	r24, 0x80	; 128
    1b8c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1b8e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1b92:	08 95       	ret

00001b94 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1b94:	83 30       	cpi	r24, 0x03	; 3
    1b96:	81 f0       	breq	.+32     	; 0x1bb8 <turnOffPWM+0x24>
    1b98:	28 f4       	brcc	.+10     	; 0x1ba4 <turnOffPWM+0x10>
    1b9a:	81 30       	cpi	r24, 0x01	; 1
    1b9c:	99 f0       	breq	.+38     	; 0x1bc4 <turnOffPWM+0x30>
    1b9e:	82 30       	cpi	r24, 0x02	; 2
    1ba0:	a1 f0       	breq	.+40     	; 0x1bca <turnOffPWM+0x36>
    1ba2:	08 95       	ret
    1ba4:	87 30       	cpi	r24, 0x07	; 7
    1ba6:	a9 f0       	breq	.+42     	; 0x1bd2 <turnOffPWM+0x3e>
    1ba8:	88 30       	cpi	r24, 0x08	; 8
    1baa:	b9 f0       	breq	.+46     	; 0x1bda <turnOffPWM+0x46>
    1bac:	84 30       	cpi	r24, 0x04	; 4
    1bae:	d1 f4       	brne	.+52     	; 0x1be4 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1bb0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1bb4:	8f 7d       	andi	r24, 0xDF	; 223
    1bb6:	03 c0       	rjmp	.+6      	; 0x1bbe <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1bb8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1bbc:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1bbe:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1bc2:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1bc4:	84 b5       	in	r24, 0x24	; 36
    1bc6:	8f 77       	andi	r24, 0x7F	; 127
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1bca:	84 b5       	in	r24, 0x24	; 36
    1bcc:	8f 7d       	andi	r24, 0xDF	; 223
    1bce:	84 bd       	out	0x24, r24	; 36
    1bd0:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1bd2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1bd6:	8f 77       	andi	r24, 0x7F	; 127
    1bd8:	03 c0       	rjmp	.+6      	; 0x1be0 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1bda:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1bde:	8f 7d       	andi	r24, 0xDF	; 223
    1be0:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1be4:	08 95       	ret

00001be6 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1be6:	cf 93       	push	r28
    1be8:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	fc 01       	movw	r30, r24
    1bee:	ee 54       	subi	r30, 0x4E	; 78
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1bf4:	fc 01       	movw	r30, r24
    1bf6:	ea 53       	subi	r30, 0x3A	; 58
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1bfc:	88 23       	and	r24, r24
    1bfe:	61 f1       	breq	.+88     	; 0x1c58 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	fc 01       	movw	r30, r24
    1c08:	e2 51       	subi	r30, 0x12	; 18
    1c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0c:	c5 91       	lpm	r28, Z+
    1c0e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1c10:	fc 01       	movw	r30, r24
    1c12:	ec 51       	subi	r30, 0x1C	; 28
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	a5 91       	lpm	r26, Z+
    1c18:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1c1a:	61 11       	cpse	r22, r1
    1c1c:	09 c0       	rjmp	.+18     	; 0x1c30 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1c1e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1c20:	f8 94       	cli
		*reg &= ~bit;
    1c22:	88 81       	ld	r24, Y
    1c24:	20 95       	com	r18
    1c26:	82 23       	and	r24, r18
    1c28:	88 83       	st	Y, r24
		*out &= ~bit;
    1c2a:	ec 91       	ld	r30, X
    1c2c:	2e 23       	and	r18, r30
    1c2e:	0b c0       	rjmp	.+22     	; 0x1c46 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1c30:	62 30       	cpi	r22, 0x02	; 2
    1c32:	61 f4       	brne	.+24     	; 0x1c4c <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1c34:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1c36:	f8 94       	cli
		*reg &= ~bit;
    1c38:	88 81       	ld	r24, Y
    1c3a:	32 2f       	mov	r19, r18
    1c3c:	30 95       	com	r19
    1c3e:	83 23       	and	r24, r19
    1c40:	88 83       	st	Y, r24
		*out |= bit;
    1c42:	ec 91       	ld	r30, X
    1c44:	2e 2b       	or	r18, r30
    1c46:	2c 93       	st	X, r18
		SREG = oldSREG;
    1c48:	9f bf       	out	0x3f, r25	; 63
    1c4a:	06 c0       	rjmp	.+12     	; 0x1c58 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1c4c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1c4e:	f8 94       	cli
		*reg |= bit;
    1c50:	e8 81       	ld	r30, Y
    1c52:	2e 2b       	or	r18, r30
    1c54:	28 83       	st	Y, r18
		SREG = oldSREG;
    1c56:	8f bf       	out	0x3f, r24	; 63
	}
}
    1c58:	df 91       	pop	r29
    1c5a:	cf 91       	pop	r28
    1c5c:	08 95       	ret

00001c5e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1c5e:	1f 93       	push	r17
    1c60:	cf 93       	push	r28
    1c62:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	f9 01       	movw	r30, r18
    1c6a:	e2 56       	subi	r30, 0x62	; 98
    1c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1c70:	f9 01       	movw	r30, r18
    1c72:	ee 54       	subi	r30, 0x4E	; 78
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1c78:	f9 01       	movw	r30, r18
    1c7a:	ea 53       	subi	r30, 0x3A	; 58
    1c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1c80:	cc 23       	and	r28, r28
    1c82:	c1 f0       	breq	.+48     	; 0x1cb4 <digitalWrite+0x56>
    1c84:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1c86:	81 11       	cpse	r24, r1
    1c88:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <turnOffPWM>

	out = portOutputRegister(port);
    1c8c:	ec 2f       	mov	r30, r28
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	ee 0f       	add	r30, r30
    1c92:	ff 1f       	adc	r31, r31
    1c94:	ec 51       	subi	r30, 0x1C	; 28
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	a5 91       	lpm	r26, Z+
    1c9a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1c9c:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1c9e:	f8 94       	cli

	if (val == LOW) {
    1ca0:	11 11       	cpse	r17, r1
    1ca2:	04 c0       	rjmp	.+8      	; 0x1cac <digitalWrite+0x4e>
		*out &= ~bit;
    1ca4:	8c 91       	ld	r24, X
    1ca6:	d0 95       	com	r29
    1ca8:	d8 23       	and	r29, r24
    1caa:	02 c0       	rjmp	.+4      	; 0x1cb0 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1cac:	ec 91       	ld	r30, X
    1cae:	de 2b       	or	r29, r30
    1cb0:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1cb2:	9f bf       	out	0x3f, r25	; 63
}
    1cb4:	df 91       	pop	r29
    1cb6:	cf 91       	pop	r28
    1cb8:	1f 91       	pop	r17
    1cba:	08 95       	ret

00001cbc <_ZN6StringD1Ev>:
{
	init();
	char buf[1 + 8 * sizeof(unsigned int)];
	utoa(value, buf, base);
	*this = buf;
}
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	80 81       	ld	r24, Z
    1cc0:	91 81       	ldd	r25, Z+1	; 0x01
    1cc2:	0c 94 19 10 	jmp	0x2032	; 0x2032 <free>

00001cc6 <_ZN6String10invalidateEv>:
    1cc6:	cf 93       	push	r28
    1cc8:	df 93       	push	r29
    1cca:	ec 01       	movw	r28, r24
    1ccc:	88 81       	ld	r24, Y
    1cce:	99 81       	ldd	r25, Y+1	; 0x01
    1cd0:	00 97       	sbiw	r24, 0x00	; 0
    1cd2:	11 f0       	breq	.+4      	; 0x1cd8 <_ZN6String10invalidateEv+0x12>
    1cd4:	0e 94 19 10 	call	0x2032	; 0x2032 <free>
    1cd8:	19 82       	std	Y+1, r1	; 0x01
    1cda:	18 82       	st	Y, r1
    1cdc:	1d 82       	std	Y+5, r1	; 0x05
    1cde:	1c 82       	std	Y+4, r1	; 0x04
    1ce0:	1b 82       	std	Y+3, r1	; 0x03
    1ce2:	1a 82       	std	Y+2, r1	; 0x02
    1ce4:	df 91       	pop	r29
    1ce6:	cf 91       	pop	r28
    1ce8:	08 95       	ret

00001cea <_ZN6String12changeBufferEj>:
    1cea:	0f 93       	push	r16
    1cec:	1f 93       	push	r17
    1cee:	cf 93       	push	r28
    1cf0:	df 93       	push	r29
    1cf2:	ec 01       	movw	r28, r24
    1cf4:	8b 01       	movw	r16, r22
    1cf6:	6f 5f       	subi	r22, 0xFF	; 255
    1cf8:	7f 4f       	sbci	r23, 0xFF	; 255
    1cfa:	88 81       	ld	r24, Y
    1cfc:	99 81       	ldd	r25, Y+1	; 0x01
    1cfe:	0e 94 a2 10 	call	0x2144	; 0x2144 <realloc>
    1d02:	00 97       	sbiw	r24, 0x00	; 0
    1d04:	31 f0       	breq	.+12     	; 0x1d12 <_ZN6String12changeBufferEj+0x28>
    1d06:	99 83       	std	Y+1, r25	; 0x01
    1d08:	88 83       	st	Y, r24
    1d0a:	1b 83       	std	Y+3, r17	; 0x03
    1d0c:	0a 83       	std	Y+2, r16	; 0x02
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	01 c0       	rjmp	.+2      	; 0x1d14 <_ZN6String12changeBufferEj+0x2a>
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	df 91       	pop	r29
    1d16:	cf 91       	pop	r28
    1d18:	1f 91       	pop	r17
    1d1a:	0f 91       	pop	r16
    1d1c:	08 95       	ret

00001d1e <_ZN6String7reserveEj>:
    1d1e:	cf 93       	push	r28
    1d20:	df 93       	push	r29
    1d22:	ec 01       	movw	r28, r24
    1d24:	88 81       	ld	r24, Y
    1d26:	99 81       	ldd	r25, Y+1	; 0x01
    1d28:	89 2b       	or	r24, r25
    1d2a:	29 f0       	breq	.+10     	; 0x1d36 <_ZN6String7reserveEj+0x18>
    1d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d30:	86 17       	cp	r24, r22
    1d32:	97 07       	cpc	r25, r23
    1d34:	60 f4       	brcc	.+24     	; 0x1d4e <_ZN6String7reserveEj+0x30>
    1d36:	ce 01       	movw	r24, r28
    1d38:	0e 94 75 0e 	call	0x1cea	; 0x1cea <_ZN6String12changeBufferEj>
    1d3c:	88 23       	and	r24, r24
    1d3e:	41 f0       	breq	.+16     	; 0x1d50 <_ZN6String7reserveEj+0x32>
    1d40:	8c 81       	ldd	r24, Y+4	; 0x04
    1d42:	9d 81       	ldd	r25, Y+5	; 0x05
    1d44:	89 2b       	or	r24, r25
    1d46:	19 f4       	brne	.+6      	; 0x1d4e <_ZN6String7reserveEj+0x30>
    1d48:	e8 81       	ld	r30, Y
    1d4a:	f9 81       	ldd	r31, Y+1	; 0x01
    1d4c:	10 82       	st	Z, r1
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	df 91       	pop	r29
    1d52:	cf 91       	pop	r28
    1d54:	08 95       	ret

00001d56 <_ZN6String4copyEPKcj>:
    1d56:	ef 92       	push	r14
    1d58:	ff 92       	push	r15
    1d5a:	0f 93       	push	r16
    1d5c:	1f 93       	push	r17
    1d5e:	cf 93       	push	r28
    1d60:	df 93       	push	r29
    1d62:	ec 01       	movw	r28, r24
    1d64:	7b 01       	movw	r14, r22
    1d66:	8a 01       	movw	r16, r20
    1d68:	ba 01       	movw	r22, r20
    1d6a:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <_ZN6String7reserveEj>
    1d6e:	81 11       	cpse	r24, r1
    1d70:	04 c0       	rjmp	.+8      	; 0x1d7a <_ZN6String4copyEPKcj+0x24>
    1d72:	ce 01       	movw	r24, r28
    1d74:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_ZN6String10invalidateEv>
    1d78:	07 c0       	rjmp	.+14     	; 0x1d88 <_ZN6String4copyEPKcj+0x32>
    1d7a:	1d 83       	std	Y+5, r17	; 0x05
    1d7c:	0c 83       	std	Y+4, r16	; 0x04
    1d7e:	b7 01       	movw	r22, r14
    1d80:	88 81       	ld	r24, Y
    1d82:	99 81       	ldd	r25, Y+1	; 0x01
    1d84:	0e 94 a1 11 	call	0x2342	; 0x2342 <strcpy>
    1d88:	ce 01       	movw	r24, r28
    1d8a:	df 91       	pop	r29
    1d8c:	cf 91       	pop	r28
    1d8e:	1f 91       	pop	r17
    1d90:	0f 91       	pop	r16
    1d92:	ff 90       	pop	r15
    1d94:	ef 90       	pop	r14
    1d96:	08 95       	ret

00001d98 <_ZN6StringC1EPKc>:
    1d98:	fc 01       	movw	r30, r24
    1d9a:	11 82       	std	Z+1, r1	; 0x01
    1d9c:	10 82       	st	Z, r1
    1d9e:	13 82       	std	Z+3, r1	; 0x03
    1da0:	12 82       	std	Z+2, r1	; 0x02
    1da2:	15 82       	std	Z+5, r1	; 0x05
    1da4:	14 82       	std	Z+4, r1	; 0x04
    1da6:	61 15       	cp	r22, r1
    1da8:	71 05       	cpc	r23, r1
    1daa:	51 f0       	breq	.+20     	; 0x1dc0 <_ZN6StringC1EPKc+0x28>
    1dac:	fb 01       	movw	r30, r22
    1dae:	01 90       	ld	r0, Z+
    1db0:	00 20       	and	r0, r0
    1db2:	e9 f7       	brne	.-6      	; 0x1dae <_ZN6StringC1EPKc+0x16>
    1db4:	31 97       	sbiw	r30, 0x01	; 1
    1db6:	af 01       	movw	r20, r30
    1db8:	46 1b       	sub	r20, r22
    1dba:	57 0b       	sbc	r21, r23
    1dbc:	0c 94 ab 0e 	jmp	0x1d56	; 0x1d56 <_ZN6String4copyEPKcj>
    1dc0:	08 95       	ret

00001dc2 <_ZN6StringaSEPKc>:
    1dc2:	cf 93       	push	r28
    1dc4:	df 93       	push	r29
    1dc6:	ec 01       	movw	r28, r24
    1dc8:	61 15       	cp	r22, r1
    1dca:	71 05       	cpc	r23, r1
    1dcc:	59 f0       	breq	.+22     	; 0x1de4 <_ZN6StringaSEPKc+0x22>
    1dce:	fb 01       	movw	r30, r22
    1dd0:	01 90       	ld	r0, Z+
    1dd2:	00 20       	and	r0, r0
    1dd4:	e9 f7       	brne	.-6      	; 0x1dd0 <_ZN6StringaSEPKc+0xe>
    1dd6:	31 97       	sbiw	r30, 0x01	; 1
    1dd8:	af 01       	movw	r20, r30
    1dda:	46 1b       	sub	r20, r22
    1ddc:	57 0b       	sbc	r21, r23
    1dde:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <_ZN6String4copyEPKcj>
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <_ZN6StringaSEPKc+0x26>
    1de4:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <_ZN6String10invalidateEv>
    1de8:	ce 01       	movw	r24, r28
    1dea:	df 91       	pop	r29
    1dec:	cf 91       	pop	r28
    1dee:	08 95       	ret

00001df0 <_ZN6StringC1Elh>:

String::String(long value, unsigned char base)
    1df0:	0f 93       	push	r16
    1df2:	1f 93       	push	r17
    1df4:	cf 93       	push	r28
    1df6:	df 93       	push	r29
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
    1dfc:	a2 97       	sbiw	r28, 0x22	; 34
    1dfe:	0f b6       	in	r0, 0x3f	; 63
    1e00:	f8 94       	cli
    1e02:	de bf       	out	0x3e, r29	; 62
    1e04:	0f be       	out	0x3f, r0	; 63
    1e06:	cd bf       	out	0x3d, r28	; 61
    1e08:	8c 01       	movw	r16, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	ba 01       	movw	r22, r20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    1e0e:	f8 01       	movw	r30, r16
    1e10:	11 82       	std	Z+1, r1	; 0x01
    1e12:	10 82       	st	Z, r1
	capacity = 0;
    1e14:	13 82       	std	Z+3, r1	; 0x03
    1e16:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    1e18:	15 82       	std	Z+5, r1	; 0x05
    1e1a:	14 82       	std	Z+4, r1	; 0x04
extern __inline__ __ATTR_GNU_INLINE__
char *ltoa (long __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__ltoa (long, char *, int);
	return __ltoa (__val, __s, __radix);
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	ae 01       	movw	r20, r28
    1e20:	4f 5f       	subi	r20, 0xFF	; 255
    1e22:	5f 4f       	sbci	r21, 0xFF	; 255
    1e24:	0e 94 a8 11 	call	0x2350	; 0x2350 <ltoa>
String::String(long value, unsigned char base)
{
	init();
	char buf[2 + 8 * sizeof(long)];
	ltoa(value, buf, base);
	*this = buf;
    1e28:	be 01       	movw	r22, r28
    1e2a:	6f 5f       	subi	r22, 0xFF	; 255
    1e2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e2e:	c8 01       	movw	r24, r16
    1e30:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <_ZN6StringaSEPKc>
}
    1e34:	a2 96       	adiw	r28, 0x22	; 34
    1e36:	0f b6       	in	r0, 0x3f	; 63
    1e38:	f8 94       	cli
    1e3a:	de bf       	out	0x3e, r29	; 62
    1e3c:	0f be       	out	0x3f, r0	; 63
    1e3e:	cd bf       	out	0x3d, r28	; 61
    1e40:	df 91       	pop	r29
    1e42:	cf 91       	pop	r28
    1e44:	1f 91       	pop	r17
    1e46:	0f 91       	pop	r16
    1e48:	08 95       	ret

00001e4a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1e4a:	08 95       	ret

00001e4c <__udivmodhi4>:
    1e4c:	aa 1b       	sub	r26, r26
    1e4e:	bb 1b       	sub	r27, r27
    1e50:	51 e1       	ldi	r21, 0x11	; 17
    1e52:	07 c0       	rjmp	.+14     	; 0x1e62 <__udivmodhi4_ep>

00001e54 <__udivmodhi4_loop>:
    1e54:	aa 1f       	adc	r26, r26
    1e56:	bb 1f       	adc	r27, r27
    1e58:	a6 17       	cp	r26, r22
    1e5a:	b7 07       	cpc	r27, r23
    1e5c:	10 f0       	brcs	.+4      	; 0x1e62 <__udivmodhi4_ep>
    1e5e:	a6 1b       	sub	r26, r22
    1e60:	b7 0b       	sbc	r27, r23

00001e62 <__udivmodhi4_ep>:
    1e62:	88 1f       	adc	r24, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	5a 95       	dec	r21
    1e68:	a9 f7       	brne	.-22     	; 0x1e54 <__udivmodhi4_loop>
    1e6a:	80 95       	com	r24
    1e6c:	90 95       	com	r25
    1e6e:	bc 01       	movw	r22, r24
    1e70:	cd 01       	movw	r24, r26
    1e72:	08 95       	ret

00001e74 <__divmodsi4>:
    1e74:	05 2e       	mov	r0, r21
    1e76:	97 fb       	bst	r25, 7
    1e78:	1e f4       	brtc	.+6      	; 0x1e80 <__divmodsi4+0xc>
    1e7a:	00 94       	com	r0
    1e7c:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <__negsi2>
    1e80:	57 fd       	sbrc	r21, 7
    1e82:	07 d0       	rcall	.+14     	; 0x1e92 <__divmodsi4_neg2>
    1e84:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <__udivmodsi4>
    1e88:	07 fc       	sbrc	r0, 7
    1e8a:	03 d0       	rcall	.+6      	; 0x1e92 <__divmodsi4_neg2>
    1e8c:	4e f4       	brtc	.+18     	; 0x1ea0 <__divmodsi4_exit>
    1e8e:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <__negsi2>

00001e92 <__divmodsi4_neg2>:
    1e92:	50 95       	com	r21
    1e94:	40 95       	com	r20
    1e96:	30 95       	com	r19
    1e98:	21 95       	neg	r18
    1e9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e9c:	4f 4f       	sbci	r20, 0xFF	; 255
    1e9e:	5f 4f       	sbci	r21, 0xFF	; 255

00001ea0 <__divmodsi4_exit>:
    1ea0:	08 95       	ret

00001ea2 <__negsi2>:
    1ea2:	90 95       	com	r25
    1ea4:	80 95       	com	r24
    1ea6:	70 95       	com	r23
    1ea8:	61 95       	neg	r22
    1eaa:	7f 4f       	sbci	r23, 0xFF	; 255
    1eac:	8f 4f       	sbci	r24, 0xFF	; 255
    1eae:	9f 4f       	sbci	r25, 0xFF	; 255
    1eb0:	08 95       	ret

00001eb2 <__udivmodsi4>:
    1eb2:	a1 e2       	ldi	r26, 0x21	; 33
    1eb4:	1a 2e       	mov	r1, r26
    1eb6:	aa 1b       	sub	r26, r26
    1eb8:	bb 1b       	sub	r27, r27
    1eba:	fd 01       	movw	r30, r26
    1ebc:	0d c0       	rjmp	.+26     	; 0x1ed8 <__udivmodsi4_ep>

00001ebe <__udivmodsi4_loop>:
    1ebe:	aa 1f       	adc	r26, r26
    1ec0:	bb 1f       	adc	r27, r27
    1ec2:	ee 1f       	adc	r30, r30
    1ec4:	ff 1f       	adc	r31, r31
    1ec6:	a2 17       	cp	r26, r18
    1ec8:	b3 07       	cpc	r27, r19
    1eca:	e4 07       	cpc	r30, r20
    1ecc:	f5 07       	cpc	r31, r21
    1ece:	20 f0       	brcs	.+8      	; 0x1ed8 <__udivmodsi4_ep>
    1ed0:	a2 1b       	sub	r26, r18
    1ed2:	b3 0b       	sbc	r27, r19
    1ed4:	e4 0b       	sbc	r30, r20
    1ed6:	f5 0b       	sbc	r31, r21

00001ed8 <__udivmodsi4_ep>:
    1ed8:	66 1f       	adc	r22, r22
    1eda:	77 1f       	adc	r23, r23
    1edc:	88 1f       	adc	r24, r24
    1ede:	99 1f       	adc	r25, r25
    1ee0:	1a 94       	dec	r1
    1ee2:	69 f7       	brne	.-38     	; 0x1ebe <__udivmodsi4_loop>
    1ee4:	60 95       	com	r22
    1ee6:	70 95       	com	r23
    1ee8:	80 95       	com	r24
    1eea:	90 95       	com	r25
    1eec:	9b 01       	movw	r18, r22
    1eee:	ac 01       	movw	r20, r24
    1ef0:	bd 01       	movw	r22, r26
    1ef2:	cf 01       	movw	r24, r30
    1ef4:	08 95       	ret

00001ef6 <__tablejump2__>:
    1ef6:	ee 0f       	add	r30, r30
    1ef8:	ff 1f       	adc	r31, r31
    1efa:	05 90       	lpm	r0, Z+
    1efc:	f4 91       	lpm	r31, Z
    1efe:	e0 2d       	mov	r30, r0
    1f00:	09 94       	ijmp

00001f02 <malloc>:
    1f02:	0f 93       	push	r16
    1f04:	1f 93       	push	r17
    1f06:	cf 93       	push	r28
    1f08:	df 93       	push	r29
    1f0a:	82 30       	cpi	r24, 0x02	; 2
    1f0c:	91 05       	cpc	r25, r1
    1f0e:	10 f4       	brcc	.+4      	; 0x1f14 <malloc+0x12>
    1f10:	82 e0       	ldi	r24, 0x02	; 2
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	e0 91 6e 02 	lds	r30, 0x026E	; 0x80026e <__flp>
    1f18:	f0 91 6f 02 	lds	r31, 0x026F	; 0x80026f <__flp+0x1>
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	a0 e0       	ldi	r26, 0x00	; 0
    1f22:	b0 e0       	ldi	r27, 0x00	; 0
    1f24:	30 97       	sbiw	r30, 0x00	; 0
    1f26:	19 f1       	breq	.+70     	; 0x1f6e <malloc+0x6c>
    1f28:	40 81       	ld	r20, Z
    1f2a:	51 81       	ldd	r21, Z+1	; 0x01
    1f2c:	02 81       	ldd	r16, Z+2	; 0x02
    1f2e:	13 81       	ldd	r17, Z+3	; 0x03
    1f30:	48 17       	cp	r20, r24
    1f32:	59 07       	cpc	r21, r25
    1f34:	c8 f0       	brcs	.+50     	; 0x1f68 <malloc+0x66>
    1f36:	84 17       	cp	r24, r20
    1f38:	95 07       	cpc	r25, r21
    1f3a:	69 f4       	brne	.+26     	; 0x1f56 <malloc+0x54>
    1f3c:	10 97       	sbiw	r26, 0x00	; 0
    1f3e:	31 f0       	breq	.+12     	; 0x1f4c <malloc+0x4a>
    1f40:	12 96       	adiw	r26, 0x02	; 2
    1f42:	0c 93       	st	X, r16
    1f44:	12 97       	sbiw	r26, 0x02	; 2
    1f46:	13 96       	adiw	r26, 0x03	; 3
    1f48:	1c 93       	st	X, r17
    1f4a:	27 c0       	rjmp	.+78     	; 0x1f9a <malloc+0x98>
    1f4c:	00 93 6e 02 	sts	0x026E, r16	; 0x80026e <__flp>
    1f50:	10 93 6f 02 	sts	0x026F, r17	; 0x80026f <__flp+0x1>
    1f54:	22 c0       	rjmp	.+68     	; 0x1f9a <malloc+0x98>
    1f56:	21 15       	cp	r18, r1
    1f58:	31 05       	cpc	r19, r1
    1f5a:	19 f0       	breq	.+6      	; 0x1f62 <malloc+0x60>
    1f5c:	42 17       	cp	r20, r18
    1f5e:	53 07       	cpc	r21, r19
    1f60:	18 f4       	brcc	.+6      	; 0x1f68 <malloc+0x66>
    1f62:	9a 01       	movw	r18, r20
    1f64:	bd 01       	movw	r22, r26
    1f66:	ef 01       	movw	r28, r30
    1f68:	df 01       	movw	r26, r30
    1f6a:	f8 01       	movw	r30, r16
    1f6c:	db cf       	rjmp	.-74     	; 0x1f24 <malloc+0x22>
    1f6e:	21 15       	cp	r18, r1
    1f70:	31 05       	cpc	r19, r1
    1f72:	f9 f0       	breq	.+62     	; 0x1fb2 <malloc+0xb0>
    1f74:	28 1b       	sub	r18, r24
    1f76:	39 0b       	sbc	r19, r25
    1f78:	24 30       	cpi	r18, 0x04	; 4
    1f7a:	31 05       	cpc	r19, r1
    1f7c:	80 f4       	brcc	.+32     	; 0x1f9e <malloc+0x9c>
    1f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f80:	9b 81       	ldd	r25, Y+3	; 0x03
    1f82:	61 15       	cp	r22, r1
    1f84:	71 05       	cpc	r23, r1
    1f86:	21 f0       	breq	.+8      	; 0x1f90 <malloc+0x8e>
    1f88:	fb 01       	movw	r30, r22
    1f8a:	93 83       	std	Z+3, r25	; 0x03
    1f8c:	82 83       	std	Z+2, r24	; 0x02
    1f8e:	04 c0       	rjmp	.+8      	; 0x1f98 <malloc+0x96>
    1f90:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <__flp+0x1>
    1f94:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <__flp>
    1f98:	fe 01       	movw	r30, r28
    1f9a:	32 96       	adiw	r30, 0x02	; 2
    1f9c:	44 c0       	rjmp	.+136    	; 0x2026 <malloc+0x124>
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	e2 0f       	add	r30, r18
    1fa2:	f3 1f       	adc	r31, r19
    1fa4:	81 93       	st	Z+, r24
    1fa6:	91 93       	st	Z+, r25
    1fa8:	22 50       	subi	r18, 0x02	; 2
    1faa:	31 09       	sbc	r19, r1
    1fac:	39 83       	std	Y+1, r19	; 0x01
    1fae:	28 83       	st	Y, r18
    1fb0:	3a c0       	rjmp	.+116    	; 0x2026 <malloc+0x124>
    1fb2:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <__brkval>
    1fb6:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <__brkval+0x1>
    1fba:	23 2b       	or	r18, r19
    1fbc:	41 f4       	brne	.+16     	; 0x1fce <malloc+0xcc>
    1fbe:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1fc2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1fc6:	30 93 6d 02 	sts	0x026D, r19	; 0x80026d <__brkval+0x1>
    1fca:	20 93 6c 02 	sts	0x026C, r18	; 0x80026c <__brkval>
    1fce:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1fd2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1fd6:	21 15       	cp	r18, r1
    1fd8:	31 05       	cpc	r19, r1
    1fda:	41 f4       	brne	.+16     	; 0x1fec <malloc+0xea>
    1fdc:	2d b7       	in	r18, 0x3d	; 61
    1fde:	3e b7       	in	r19, 0x3e	; 62
    1fe0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1fe4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1fe8:	24 1b       	sub	r18, r20
    1fea:	35 0b       	sbc	r19, r21
    1fec:	e0 91 6c 02 	lds	r30, 0x026C	; 0x80026c <__brkval>
    1ff0:	f0 91 6d 02 	lds	r31, 0x026D	; 0x80026d <__brkval+0x1>
    1ff4:	e2 17       	cp	r30, r18
    1ff6:	f3 07       	cpc	r31, r19
    1ff8:	a0 f4       	brcc	.+40     	; 0x2022 <malloc+0x120>
    1ffa:	2e 1b       	sub	r18, r30
    1ffc:	3f 0b       	sbc	r19, r31
    1ffe:	28 17       	cp	r18, r24
    2000:	39 07       	cpc	r19, r25
    2002:	78 f0       	brcs	.+30     	; 0x2022 <malloc+0x120>
    2004:	ac 01       	movw	r20, r24
    2006:	4e 5f       	subi	r20, 0xFE	; 254
    2008:	5f 4f       	sbci	r21, 0xFF	; 255
    200a:	24 17       	cp	r18, r20
    200c:	35 07       	cpc	r19, r21
    200e:	48 f0       	brcs	.+18     	; 0x2022 <malloc+0x120>
    2010:	4e 0f       	add	r20, r30
    2012:	5f 1f       	adc	r21, r31
    2014:	50 93 6d 02 	sts	0x026D, r21	; 0x80026d <__brkval+0x1>
    2018:	40 93 6c 02 	sts	0x026C, r20	; 0x80026c <__brkval>
    201c:	81 93       	st	Z+, r24
    201e:	91 93       	st	Z+, r25
    2020:	02 c0       	rjmp	.+4      	; 0x2026 <malloc+0x124>
    2022:	e0 e0       	ldi	r30, 0x00	; 0
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	cf 01       	movw	r24, r30
    2028:	df 91       	pop	r29
    202a:	cf 91       	pop	r28
    202c:	1f 91       	pop	r17
    202e:	0f 91       	pop	r16
    2030:	08 95       	ret

00002032 <free>:
    2032:	cf 93       	push	r28
    2034:	df 93       	push	r29
    2036:	00 97       	sbiw	r24, 0x00	; 0
    2038:	09 f4       	brne	.+2      	; 0x203c <free+0xa>
    203a:	81 c0       	rjmp	.+258    	; 0x213e <free+0x10c>
    203c:	fc 01       	movw	r30, r24
    203e:	32 97       	sbiw	r30, 0x02	; 2
    2040:	13 82       	std	Z+3, r1	; 0x03
    2042:	12 82       	std	Z+2, r1	; 0x02
    2044:	a0 91 6e 02 	lds	r26, 0x026E	; 0x80026e <__flp>
    2048:	b0 91 6f 02 	lds	r27, 0x026F	; 0x80026f <__flp+0x1>
    204c:	10 97       	sbiw	r26, 0x00	; 0
    204e:	81 f4       	brne	.+32     	; 0x2070 <free+0x3e>
    2050:	20 81       	ld	r18, Z
    2052:	31 81       	ldd	r19, Z+1	; 0x01
    2054:	82 0f       	add	r24, r18
    2056:	93 1f       	adc	r25, r19
    2058:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <__brkval>
    205c:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <__brkval+0x1>
    2060:	28 17       	cp	r18, r24
    2062:	39 07       	cpc	r19, r25
    2064:	51 f5       	brne	.+84     	; 0x20ba <free+0x88>
    2066:	f0 93 6d 02 	sts	0x026D, r31	; 0x80026d <__brkval+0x1>
    206a:	e0 93 6c 02 	sts	0x026C, r30	; 0x80026c <__brkval>
    206e:	67 c0       	rjmp	.+206    	; 0x213e <free+0x10c>
    2070:	ed 01       	movw	r28, r26
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	ce 17       	cp	r28, r30
    2078:	df 07       	cpc	r29, r31
    207a:	40 f4       	brcc	.+16     	; 0x208c <free+0x5a>
    207c:	4a 81       	ldd	r20, Y+2	; 0x02
    207e:	5b 81       	ldd	r21, Y+3	; 0x03
    2080:	9e 01       	movw	r18, r28
    2082:	41 15       	cp	r20, r1
    2084:	51 05       	cpc	r21, r1
    2086:	f1 f0       	breq	.+60     	; 0x20c4 <free+0x92>
    2088:	ea 01       	movw	r28, r20
    208a:	f5 cf       	rjmp	.-22     	; 0x2076 <free+0x44>
    208c:	d3 83       	std	Z+3, r29	; 0x03
    208e:	c2 83       	std	Z+2, r28	; 0x02
    2090:	40 81       	ld	r20, Z
    2092:	51 81       	ldd	r21, Z+1	; 0x01
    2094:	84 0f       	add	r24, r20
    2096:	95 1f       	adc	r25, r21
    2098:	c8 17       	cp	r28, r24
    209a:	d9 07       	cpc	r29, r25
    209c:	59 f4       	brne	.+22     	; 0x20b4 <free+0x82>
    209e:	88 81       	ld	r24, Y
    20a0:	99 81       	ldd	r25, Y+1	; 0x01
    20a2:	84 0f       	add	r24, r20
    20a4:	95 1f       	adc	r25, r21
    20a6:	02 96       	adiw	r24, 0x02	; 2
    20a8:	91 83       	std	Z+1, r25	; 0x01
    20aa:	80 83       	st	Z, r24
    20ac:	8a 81       	ldd	r24, Y+2	; 0x02
    20ae:	9b 81       	ldd	r25, Y+3	; 0x03
    20b0:	93 83       	std	Z+3, r25	; 0x03
    20b2:	82 83       	std	Z+2, r24	; 0x02
    20b4:	21 15       	cp	r18, r1
    20b6:	31 05       	cpc	r19, r1
    20b8:	29 f4       	brne	.+10     	; 0x20c4 <free+0x92>
    20ba:	f0 93 6f 02 	sts	0x026F, r31	; 0x80026f <__flp+0x1>
    20be:	e0 93 6e 02 	sts	0x026E, r30	; 0x80026e <__flp>
    20c2:	3d c0       	rjmp	.+122    	; 0x213e <free+0x10c>
    20c4:	e9 01       	movw	r28, r18
    20c6:	fb 83       	std	Y+3, r31	; 0x03
    20c8:	ea 83       	std	Y+2, r30	; 0x02
    20ca:	49 91       	ld	r20, Y+
    20cc:	59 91       	ld	r21, Y+
    20ce:	c4 0f       	add	r28, r20
    20d0:	d5 1f       	adc	r29, r21
    20d2:	ec 17       	cp	r30, r28
    20d4:	fd 07       	cpc	r31, r29
    20d6:	61 f4       	brne	.+24     	; 0x20f0 <free+0xbe>
    20d8:	80 81       	ld	r24, Z
    20da:	91 81       	ldd	r25, Z+1	; 0x01
    20dc:	84 0f       	add	r24, r20
    20de:	95 1f       	adc	r25, r21
    20e0:	02 96       	adiw	r24, 0x02	; 2
    20e2:	e9 01       	movw	r28, r18
    20e4:	99 83       	std	Y+1, r25	; 0x01
    20e6:	88 83       	st	Y, r24
    20e8:	82 81       	ldd	r24, Z+2	; 0x02
    20ea:	93 81       	ldd	r25, Z+3	; 0x03
    20ec:	9b 83       	std	Y+3, r25	; 0x03
    20ee:	8a 83       	std	Y+2, r24	; 0x02
    20f0:	e0 e0       	ldi	r30, 0x00	; 0
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	12 96       	adiw	r26, 0x02	; 2
    20f6:	8d 91       	ld	r24, X+
    20f8:	9c 91       	ld	r25, X
    20fa:	13 97       	sbiw	r26, 0x03	; 3
    20fc:	00 97       	sbiw	r24, 0x00	; 0
    20fe:	19 f0       	breq	.+6      	; 0x2106 <free+0xd4>
    2100:	fd 01       	movw	r30, r26
    2102:	dc 01       	movw	r26, r24
    2104:	f7 cf       	rjmp	.-18     	; 0x20f4 <free+0xc2>
    2106:	8d 91       	ld	r24, X+
    2108:	9c 91       	ld	r25, X
    210a:	11 97       	sbiw	r26, 0x01	; 1
    210c:	9d 01       	movw	r18, r26
    210e:	2e 5f       	subi	r18, 0xFE	; 254
    2110:	3f 4f       	sbci	r19, 0xFF	; 255
    2112:	82 0f       	add	r24, r18
    2114:	93 1f       	adc	r25, r19
    2116:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <__brkval>
    211a:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <__brkval+0x1>
    211e:	28 17       	cp	r18, r24
    2120:	39 07       	cpc	r19, r25
    2122:	69 f4       	brne	.+26     	; 0x213e <free+0x10c>
    2124:	30 97       	sbiw	r30, 0x00	; 0
    2126:	29 f4       	brne	.+10     	; 0x2132 <free+0x100>
    2128:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <__flp+0x1>
    212c:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <__flp>
    2130:	02 c0       	rjmp	.+4      	; 0x2136 <free+0x104>
    2132:	13 82       	std	Z+3, r1	; 0x03
    2134:	12 82       	std	Z+2, r1	; 0x02
    2136:	b0 93 6d 02 	sts	0x026D, r27	; 0x80026d <__brkval+0x1>
    213a:	a0 93 6c 02 	sts	0x026C, r26	; 0x80026c <__brkval>
    213e:	df 91       	pop	r29
    2140:	cf 91       	pop	r28
    2142:	08 95       	ret

00002144 <realloc>:
    2144:	a0 e0       	ldi	r26, 0x00	; 0
    2146:	b0 e0       	ldi	r27, 0x00	; 0
    2148:	e8 ea       	ldi	r30, 0xA8	; 168
    214a:	f0 e1       	ldi	r31, 0x10	; 16
    214c:	0c 94 55 12 	jmp	0x24aa	; 0x24aa <__prologue_saves__+0x8>
    2150:	ec 01       	movw	r28, r24
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	21 f4       	brne	.+8      	; 0x215e <realloc+0x1a>
    2156:	cb 01       	movw	r24, r22
    2158:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <malloc>
    215c:	b4 c0       	rjmp	.+360    	; 0x22c6 <realloc+0x182>
    215e:	fc 01       	movw	r30, r24
    2160:	e6 0f       	add	r30, r22
    2162:	f7 1f       	adc	r31, r23
    2164:	9c 01       	movw	r18, r24
    2166:	22 50       	subi	r18, 0x02	; 2
    2168:	31 09       	sbc	r19, r1
    216a:	e2 17       	cp	r30, r18
    216c:	f3 07       	cpc	r31, r19
    216e:	08 f4       	brcc	.+2      	; 0x2172 <realloc+0x2e>
    2170:	a8 c0       	rjmp	.+336    	; 0x22c2 <realloc+0x17e>
    2172:	d9 01       	movw	r26, r18
    2174:	0d 91       	ld	r16, X+
    2176:	1c 91       	ld	r17, X
    2178:	11 97       	sbiw	r26, 0x01	; 1
    217a:	06 17       	cp	r16, r22
    217c:	17 07       	cpc	r17, r23
    217e:	b0 f0       	brcs	.+44     	; 0x21ac <realloc+0x68>
    2180:	05 30       	cpi	r16, 0x05	; 5
    2182:	11 05       	cpc	r17, r1
    2184:	08 f4       	brcc	.+2      	; 0x2188 <realloc+0x44>
    2186:	9b c0       	rjmp	.+310    	; 0x22be <realloc+0x17a>
    2188:	c8 01       	movw	r24, r16
    218a:	04 97       	sbiw	r24, 0x04	; 4
    218c:	86 17       	cp	r24, r22
    218e:	97 07       	cpc	r25, r23
    2190:	08 f4       	brcc	.+2      	; 0x2194 <realloc+0x50>
    2192:	95 c0       	rjmp	.+298    	; 0x22be <realloc+0x17a>
    2194:	02 50       	subi	r16, 0x02	; 2
    2196:	11 09       	sbc	r17, r1
    2198:	06 1b       	sub	r16, r22
    219a:	17 0b       	sbc	r17, r23
    219c:	01 93       	st	Z+, r16
    219e:	11 93       	st	Z+, r17
    21a0:	6d 93       	st	X+, r22
    21a2:	7c 93       	st	X, r23
    21a4:	cf 01       	movw	r24, r30
    21a6:	0e 94 19 10 	call	0x2032	; 0x2032 <free>
    21aa:	89 c0       	rjmp	.+274    	; 0x22be <realloc+0x17a>
    21ac:	5b 01       	movw	r10, r22
    21ae:	a0 1a       	sub	r10, r16
    21b0:	b1 0a       	sbc	r11, r17
    21b2:	4c 01       	movw	r8, r24
    21b4:	80 0e       	add	r8, r16
    21b6:	91 1e       	adc	r9, r17
    21b8:	a0 91 6e 02 	lds	r26, 0x026E	; 0x80026e <__flp>
    21bc:	b0 91 6f 02 	lds	r27, 0x026F	; 0x80026f <__flp+0x1>
    21c0:	61 2c       	mov	r6, r1
    21c2:	71 2c       	mov	r7, r1
    21c4:	e1 2c       	mov	r14, r1
    21c6:	f1 2c       	mov	r15, r1
    21c8:	10 97       	sbiw	r26, 0x00	; 0
    21ca:	09 f4       	brne	.+2      	; 0x21ce <realloc+0x8a>
    21cc:	46 c0       	rjmp	.+140    	; 0x225a <realloc+0x116>
    21ce:	8d 91       	ld	r24, X+
    21d0:	9c 91       	ld	r25, X
    21d2:	11 97       	sbiw	r26, 0x01	; 1
    21d4:	a8 15       	cp	r26, r8
    21d6:	b9 05       	cpc	r27, r9
    21d8:	b1 f5       	brne	.+108    	; 0x2246 <realloc+0x102>
    21da:	6c 01       	movw	r12, r24
    21dc:	42 e0       	ldi	r20, 0x02	; 2
    21de:	c4 0e       	add	r12, r20
    21e0:	d1 1c       	adc	r13, r1
    21e2:	ca 14       	cp	r12, r10
    21e4:	db 04       	cpc	r13, r11
    21e6:	78 f1       	brcs	.+94     	; 0x2246 <realloc+0x102>
    21e8:	4c 01       	movw	r8, r24
    21ea:	8a 18       	sub	r8, r10
    21ec:	9b 08       	sbc	r9, r11
    21ee:	64 01       	movw	r12, r8
    21f0:	42 e0       	ldi	r20, 0x02	; 2
    21f2:	c4 0e       	add	r12, r20
    21f4:	d1 1c       	adc	r13, r1
    21f6:	12 96       	adiw	r26, 0x02	; 2
    21f8:	bc 90       	ld	r11, X
    21fa:	12 97       	sbiw	r26, 0x02	; 2
    21fc:	13 96       	adiw	r26, 0x03	; 3
    21fe:	ac 91       	ld	r26, X
    2200:	b5 e0       	ldi	r27, 0x05	; 5
    2202:	cb 16       	cp	r12, r27
    2204:	d1 04       	cpc	r13, r1
    2206:	40 f0       	brcs	.+16     	; 0x2218 <realloc+0xd4>
    2208:	b2 82       	std	Z+2, r11	; 0x02
    220a:	a3 83       	std	Z+3, r26	; 0x03
    220c:	91 82       	std	Z+1, r9	; 0x01
    220e:	80 82       	st	Z, r8
    2210:	d9 01       	movw	r26, r18
    2212:	6d 93       	st	X+, r22
    2214:	7c 93       	st	X, r23
    2216:	09 c0       	rjmp	.+18     	; 0x222a <realloc+0xe6>
    2218:	0e 5f       	subi	r16, 0xFE	; 254
    221a:	1f 4f       	sbci	r17, 0xFF	; 255
    221c:	80 0f       	add	r24, r16
    221e:	91 1f       	adc	r25, r17
    2220:	f9 01       	movw	r30, r18
    2222:	91 83       	std	Z+1, r25	; 0x01
    2224:	80 83       	st	Z, r24
    2226:	eb 2d       	mov	r30, r11
    2228:	fa 2f       	mov	r31, r26
    222a:	e1 14       	cp	r14, r1
    222c:	f1 04       	cpc	r15, r1
    222e:	31 f0       	breq	.+12     	; 0x223c <realloc+0xf8>
    2230:	d7 01       	movw	r26, r14
    2232:	13 96       	adiw	r26, 0x03	; 3
    2234:	fc 93       	st	X, r31
    2236:	ee 93       	st	-X, r30
    2238:	12 97       	sbiw	r26, 0x02	; 2
    223a:	41 c0       	rjmp	.+130    	; 0x22be <realloc+0x17a>
    223c:	f0 93 6f 02 	sts	0x026F, r31	; 0x80026f <__flp+0x1>
    2240:	e0 93 6e 02 	sts	0x026E, r30	; 0x80026e <__flp>
    2244:	3c c0       	rjmp	.+120    	; 0x22be <realloc+0x17a>
    2246:	68 16       	cp	r6, r24
    2248:	79 06       	cpc	r7, r25
    224a:	08 f4       	brcc	.+2      	; 0x224e <realloc+0x10a>
    224c:	3c 01       	movw	r6, r24
    224e:	7d 01       	movw	r14, r26
    2250:	12 96       	adiw	r26, 0x02	; 2
    2252:	0d 90       	ld	r0, X+
    2254:	bc 91       	ld	r27, X
    2256:	a0 2d       	mov	r26, r0
    2258:	b7 cf       	rjmp	.-146    	; 0x21c8 <realloc+0x84>
    225a:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <__brkval>
    225e:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <__brkval+0x1>
    2262:	88 16       	cp	r8, r24
    2264:	99 06       	cpc	r9, r25
    2266:	e1 f4       	brne	.+56     	; 0x22a0 <realloc+0x15c>
    2268:	66 16       	cp	r6, r22
    226a:	77 06       	cpc	r7, r23
    226c:	c8 f4       	brcc	.+50     	; 0x22a0 <realloc+0x15c>
    226e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2272:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    2276:	00 97       	sbiw	r24, 0x00	; 0
    2278:	41 f4       	brne	.+16     	; 0x228a <realloc+0x146>
    227a:	8d b7       	in	r24, 0x3d	; 61
    227c:	9e b7       	in	r25, 0x3e	; 62
    227e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2282:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2286:	84 1b       	sub	r24, r20
    2288:	95 0b       	sbc	r25, r21
    228a:	e8 17       	cp	r30, r24
    228c:	f9 07       	cpc	r31, r25
    228e:	c8 f4       	brcc	.+50     	; 0x22c2 <realloc+0x17e>
    2290:	f0 93 6d 02 	sts	0x026D, r31	; 0x80026d <__brkval+0x1>
    2294:	e0 93 6c 02 	sts	0x026C, r30	; 0x80026c <__brkval>
    2298:	f9 01       	movw	r30, r18
    229a:	71 83       	std	Z+1, r23	; 0x01
    229c:	60 83       	st	Z, r22
    229e:	0f c0       	rjmp	.+30     	; 0x22be <realloc+0x17a>
    22a0:	cb 01       	movw	r24, r22
    22a2:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <malloc>
    22a6:	7c 01       	movw	r14, r24
    22a8:	00 97       	sbiw	r24, 0x00	; 0
    22aa:	59 f0       	breq	.+22     	; 0x22c2 <realloc+0x17e>
    22ac:	a8 01       	movw	r20, r16
    22ae:	be 01       	movw	r22, r28
    22b0:	0e 94 98 11 	call	0x2330	; 0x2330 <memcpy>
    22b4:	ce 01       	movw	r24, r28
    22b6:	0e 94 19 10 	call	0x2032	; 0x2032 <free>
    22ba:	c7 01       	movw	r24, r14
    22bc:	04 c0       	rjmp	.+8      	; 0x22c6 <realloc+0x182>
    22be:	ce 01       	movw	r24, r28
    22c0:	02 c0       	rjmp	.+4      	; 0x22c6 <realloc+0x182>
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
    22ca:	ee e0       	ldi	r30, 0x0E	; 14
    22cc:	0c 94 71 12 	jmp	0x24e2	; 0x24e2 <__epilogue_restores__+0x8>

000022d0 <atol>:
    22d0:	1f 93       	push	r17
    22d2:	fc 01       	movw	r30, r24
    22d4:	99 27       	eor	r25, r25
    22d6:	88 27       	eor	r24, r24
    22d8:	bc 01       	movw	r22, r24
    22da:	e8 94       	clt
    22dc:	11 91       	ld	r17, Z+
    22de:	10 32       	cpi	r17, 0x20	; 32
    22e0:	e9 f3       	breq	.-6      	; 0x22dc <atol+0xc>
    22e2:	19 30       	cpi	r17, 0x09	; 9
    22e4:	10 f0       	brcs	.+4      	; 0x22ea <atol+0x1a>
    22e6:	1e 30       	cpi	r17, 0x0E	; 14
    22e8:	c8 f3       	brcs	.-14     	; 0x22dc <atol+0xc>
    22ea:	1b 32       	cpi	r17, 0x2B	; 43
    22ec:	51 f0       	breq	.+20     	; 0x2302 <atol+0x32>
    22ee:	1d 32       	cpi	r17, 0x2D	; 45
    22f0:	49 f4       	brne	.+18     	; 0x2304 <atol+0x34>
    22f2:	68 94       	set
    22f4:	06 c0       	rjmp	.+12     	; 0x2302 <atol+0x32>
    22f6:	0e 94 c2 11 	call	0x2384	; 0x2384 <__mulsi_const_10>
    22fa:	61 0f       	add	r22, r17
    22fc:	71 1d       	adc	r23, r1
    22fe:	81 1d       	adc	r24, r1
    2300:	91 1d       	adc	r25, r1
    2302:	11 91       	ld	r17, Z+
    2304:	10 53       	subi	r17, 0x30	; 48
    2306:	1a 30       	cpi	r17, 0x0A	; 10
    2308:	b0 f3       	brcs	.-20     	; 0x22f6 <atol+0x26>
    230a:	3e f4       	brtc	.+14     	; 0x231a <atol+0x4a>
    230c:	90 95       	com	r25
    230e:	80 95       	com	r24
    2310:	70 95       	com	r23
    2312:	61 95       	neg	r22
    2314:	7f 4f       	sbci	r23, 0xFF	; 255
    2316:	8f 4f       	sbci	r24, 0xFF	; 255
    2318:	9f 4f       	sbci	r25, 0xFF	; 255
    231a:	1f 91       	pop	r17
    231c:	08 95       	ret

0000231e <memcpy_P>:
    231e:	fb 01       	movw	r30, r22
    2320:	dc 01       	movw	r26, r24
    2322:	02 c0       	rjmp	.+4      	; 0x2328 <memcpy_P+0xa>
    2324:	05 90       	lpm	r0, Z+
    2326:	0d 92       	st	X+, r0
    2328:	41 50       	subi	r20, 0x01	; 1
    232a:	50 40       	sbci	r21, 0x00	; 0
    232c:	d8 f7       	brcc	.-10     	; 0x2324 <memcpy_P+0x6>
    232e:	08 95       	ret

00002330 <memcpy>:
    2330:	fb 01       	movw	r30, r22
    2332:	dc 01       	movw	r26, r24
    2334:	02 c0       	rjmp	.+4      	; 0x233a <memcpy+0xa>
    2336:	01 90       	ld	r0, Z+
    2338:	0d 92       	st	X+, r0
    233a:	41 50       	subi	r20, 0x01	; 1
    233c:	50 40       	sbci	r21, 0x00	; 0
    233e:	d8 f7       	brcc	.-10     	; 0x2336 <memcpy+0x6>
    2340:	08 95       	ret

00002342 <strcpy>:
    2342:	fb 01       	movw	r30, r22
    2344:	dc 01       	movw	r26, r24
    2346:	01 90       	ld	r0, Z+
    2348:	0d 92       	st	X+, r0
    234a:	00 20       	and	r0, r0
    234c:	e1 f7       	brne	.-8      	; 0x2346 <strcpy+0x4>
    234e:	08 95       	ret

00002350 <ltoa>:
    2350:	25 32       	cpi	r18, 0x25	; 37
    2352:	31 05       	cpc	r19, r1
    2354:	20 f4       	brcc	.+8      	; 0x235e <ltoa+0xe>
    2356:	22 30       	cpi	r18, 0x02	; 2
    2358:	10 f0       	brcs	.+4      	; 0x235e <ltoa+0xe>
    235a:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__ltoa_ncheck>
    235e:	fa 01       	movw	r30, r20
    2360:	10 82       	st	Z, r1
    2362:	ca 01       	movw	r24, r20
    2364:	08 95       	ret

00002366 <__ltoa_ncheck>:
    2366:	bb 27       	eor	r27, r27
    2368:	2a 30       	cpi	r18, 0x0A	; 10
    236a:	51 f4       	brne	.+20     	; 0x2380 <__ltoa_ncheck+0x1a>
    236c:	99 23       	and	r25, r25
    236e:	42 f4       	brpl	.+16     	; 0x2380 <__ltoa_ncheck+0x1a>
    2370:	bd e2       	ldi	r27, 0x2D	; 45
    2372:	90 95       	com	r25
    2374:	80 95       	com	r24
    2376:	70 95       	com	r23
    2378:	61 95       	neg	r22
    237a:	7f 4f       	sbci	r23, 0xFF	; 255
    237c:	8f 4f       	sbci	r24, 0xFF	; 255
    237e:	9f 4f       	sbci	r25, 0xFF	; 255
    2380:	0c 94 d8 11 	jmp	0x23b0	; 0x23b0 <__ultoa_common>

00002384 <__mulsi_const_10>:
    2384:	59 2f       	mov	r21, r25
    2386:	48 2f       	mov	r20, r24
    2388:	37 2f       	mov	r19, r23
    238a:	26 2f       	mov	r18, r22
    238c:	66 0f       	add	r22, r22
    238e:	77 1f       	adc	r23, r23
    2390:	88 1f       	adc	r24, r24
    2392:	99 1f       	adc	r25, r25
    2394:	66 0f       	add	r22, r22
    2396:	77 1f       	adc	r23, r23
    2398:	88 1f       	adc	r24, r24
    239a:	99 1f       	adc	r25, r25
    239c:	62 0f       	add	r22, r18
    239e:	73 1f       	adc	r23, r19
    23a0:	84 1f       	adc	r24, r20
    23a2:	95 1f       	adc	r25, r21
    23a4:	66 0f       	add	r22, r22
    23a6:	77 1f       	adc	r23, r23
    23a8:	88 1f       	adc	r24, r24
    23aa:	99 1f       	adc	r25, r25
    23ac:	08 95       	ret

000023ae <__ultoa_ncheck>:
    23ae:	bb 27       	eor	r27, r27

000023b0 <__ultoa_common>:
    23b0:	fa 01       	movw	r30, r20
    23b2:	a6 2f       	mov	r26, r22
    23b4:	62 17       	cp	r22, r18
    23b6:	71 05       	cpc	r23, r1
    23b8:	81 05       	cpc	r24, r1
    23ba:	91 05       	cpc	r25, r1
    23bc:	33 0b       	sbc	r19, r19
    23be:	30 fb       	bst	r19, 0
    23c0:	66 f0       	brts	.+24     	; 0x23da <__ultoa_common+0x2a>
    23c2:	aa 27       	eor	r26, r26
    23c4:	66 0f       	add	r22, r22
    23c6:	77 1f       	adc	r23, r23
    23c8:	88 1f       	adc	r24, r24
    23ca:	99 1f       	adc	r25, r25
    23cc:	aa 1f       	adc	r26, r26
    23ce:	a2 17       	cp	r26, r18
    23d0:	10 f0       	brcs	.+4      	; 0x23d6 <__ultoa_common+0x26>
    23d2:	a2 1b       	sub	r26, r18
    23d4:	63 95       	inc	r22
    23d6:	38 50       	subi	r19, 0x08	; 8
    23d8:	a9 f7       	brne	.-22     	; 0x23c4 <__ultoa_common+0x14>
    23da:	a0 5d       	subi	r26, 0xD0	; 208
    23dc:	aa 33       	cpi	r26, 0x3A	; 58
    23de:	08 f0       	brcs	.+2      	; 0x23e2 <__ultoa_common+0x32>
    23e0:	a9 5d       	subi	r26, 0xD9	; 217
    23e2:	a1 93       	st	Z+, r26
    23e4:	36 f7       	brtc	.-52     	; 0x23b2 <__ultoa_common+0x2>
    23e6:	b1 11       	cpse	r27, r1
    23e8:	b1 93       	st	Z+, r27
    23ea:	10 82       	st	Z, r1
    23ec:	ca 01       	movw	r24, r20
    23ee:	0c 94 f9 11 	jmp	0x23f2	; 0x23f2 <strrev>

000023f2 <strrev>:
    23f2:	dc 01       	movw	r26, r24
    23f4:	fc 01       	movw	r30, r24
    23f6:	67 2f       	mov	r22, r23
    23f8:	71 91       	ld	r23, Z+
    23fa:	77 23       	and	r23, r23
    23fc:	e1 f7       	brne	.-8      	; 0x23f6 <strrev+0x4>
    23fe:	32 97       	sbiw	r30, 0x02	; 2
    2400:	04 c0       	rjmp	.+8      	; 0x240a <strrev+0x18>
    2402:	7c 91       	ld	r23, X
    2404:	6d 93       	st	X+, r22
    2406:	70 83       	st	Z, r23
    2408:	62 91       	ld	r22, -Z
    240a:	ae 17       	cp	r26, r30
    240c:	bf 07       	cpc	r27, r31
    240e:	c8 f3       	brcs	.-14     	; 0x2402 <strrev+0x10>
    2410:	08 95       	ret

00002412 <eeprom_read_block>:
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22

00002416 <eeprom_read_blraw>:
    2416:	fc 01       	movw	r30, r24
    2418:	f9 99       	sbic	0x1f, 1	; 31
    241a:	fe cf       	rjmp	.-4      	; 0x2418 <eeprom_read_blraw+0x2>
    241c:	06 c0       	rjmp	.+12     	; 0x242a <eeprom_read_blraw+0x14>
    241e:	f2 bd       	out	0x22, r31	; 34
    2420:	e1 bd       	out	0x21, r30	; 33
    2422:	f8 9a       	sbi	0x1f, 0	; 31
    2424:	31 96       	adiw	r30, 0x01	; 1
    2426:	00 b4       	in	r0, 0x20	; 32
    2428:	0d 92       	st	X+, r0
    242a:	41 50       	subi	r20, 0x01	; 1
    242c:	50 40       	sbci	r21, 0x00	; 0
    242e:	b8 f7       	brcc	.-18     	; 0x241e <eeprom_read_blraw+0x8>
    2430:	08 95       	ret

00002432 <eeprom_read_byte>:
    2432:	f9 99       	sbic	0x1f, 1	; 31
    2434:	fe cf       	rjmp	.-4      	; 0x2432 <eeprom_read_byte>
    2436:	92 bd       	out	0x22, r25	; 34
    2438:	81 bd       	out	0x21, r24	; 33
    243a:	f8 9a       	sbi	0x1f, 0	; 31
    243c:	99 27       	eor	r25, r25
    243e:	80 b5       	in	r24, 0x20	; 32
    2440:	08 95       	ret

00002442 <eeprom_update_block>:
    2442:	dc 01       	movw	r26, r24
    2444:	a4 0f       	add	r26, r20
    2446:	b5 1f       	adc	r27, r21
    2448:	41 50       	subi	r20, 0x01	; 1
    244a:	50 40       	sbci	r21, 0x00	; 0
    244c:	48 f0       	brcs	.+18     	; 0x2460 <eeprom_update_block+0x1e>
    244e:	cb 01       	movw	r24, r22
    2450:	84 0f       	add	r24, r20
    2452:	95 1f       	adc	r25, r21
    2454:	2e 91       	ld	r18, -X
    2456:	0e 94 32 12 	call	0x2464	; 0x2464 <eeprom_update_r18>
    245a:	41 50       	subi	r20, 0x01	; 1
    245c:	50 40       	sbci	r21, 0x00	; 0
    245e:	d0 f7       	brcc	.-12     	; 0x2454 <eeprom_update_block+0x12>
    2460:	08 95       	ret

00002462 <eeprom_update_byte>:
    2462:	26 2f       	mov	r18, r22

00002464 <eeprom_update_r18>:
    2464:	f9 99       	sbic	0x1f, 1	; 31
    2466:	fe cf       	rjmp	.-4      	; 0x2464 <eeprom_update_r18>
    2468:	92 bd       	out	0x22, r25	; 34
    246a:	81 bd       	out	0x21, r24	; 33
    246c:	f8 9a       	sbi	0x1f, 0	; 31
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	00 b4       	in	r0, 0x20	; 32
    2472:	02 16       	cp	r0, r18
    2474:	39 f0       	breq	.+14     	; 0x2484 <eeprom_update_r18+0x20>
    2476:	1f ba       	out	0x1f, r1	; 31
    2478:	20 bd       	out	0x20, r18	; 32
    247a:	0f b6       	in	r0, 0x3f	; 63
    247c:	f8 94       	cli
    247e:	fa 9a       	sbi	0x1f, 2	; 31
    2480:	f9 9a       	sbi	0x1f, 1	; 31
    2482:	0f be       	out	0x3f, r0	; 63
    2484:	08 95       	ret

00002486 <eeprom_write_byte>:
    2486:	26 2f       	mov	r18, r22

00002488 <eeprom_write_r18>:
    2488:	f9 99       	sbic	0x1f, 1	; 31
    248a:	fe cf       	rjmp	.-4      	; 0x2488 <eeprom_write_r18>
    248c:	1f ba       	out	0x1f, r1	; 31
    248e:	92 bd       	out	0x22, r25	; 34
    2490:	81 bd       	out	0x21, r24	; 33
    2492:	20 bd       	out	0x20, r18	; 32
    2494:	0f b6       	in	r0, 0x3f	; 63
    2496:	f8 94       	cli
    2498:	fa 9a       	sbi	0x1f, 2	; 31
    249a:	f9 9a       	sbi	0x1f, 1	; 31
    249c:	0f be       	out	0x3f, r0	; 63
    249e:	01 96       	adiw	r24, 0x01	; 1
    24a0:	08 95       	ret

000024a2 <__prologue_saves__>:
    24a2:	2f 92       	push	r2
    24a4:	3f 92       	push	r3
    24a6:	4f 92       	push	r4
    24a8:	5f 92       	push	r5
    24aa:	6f 92       	push	r6
    24ac:	7f 92       	push	r7
    24ae:	8f 92       	push	r8
    24b0:	9f 92       	push	r9
    24b2:	af 92       	push	r10
    24b4:	bf 92       	push	r11
    24b6:	cf 92       	push	r12
    24b8:	df 92       	push	r13
    24ba:	ef 92       	push	r14
    24bc:	ff 92       	push	r15
    24be:	0f 93       	push	r16
    24c0:	1f 93       	push	r17
    24c2:	cf 93       	push	r28
    24c4:	df 93       	push	r29
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	ca 1b       	sub	r28, r26
    24cc:	db 0b       	sbc	r29, r27
    24ce:	0f b6       	in	r0, 0x3f	; 63
    24d0:	f8 94       	cli
    24d2:	de bf       	out	0x3e, r29	; 62
    24d4:	0f be       	out	0x3f, r0	; 63
    24d6:	cd bf       	out	0x3d, r28	; 61
    24d8:	09 94       	ijmp

000024da <__epilogue_restores__>:
    24da:	2a 88       	ldd	r2, Y+18	; 0x12
    24dc:	39 88       	ldd	r3, Y+17	; 0x11
    24de:	48 88       	ldd	r4, Y+16	; 0x10
    24e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    24e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    24e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    24e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    24e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    24ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    24ec:	b9 84       	ldd	r11, Y+9	; 0x09
    24ee:	c8 84       	ldd	r12, Y+8	; 0x08
    24f0:	df 80       	ldd	r13, Y+7	; 0x07
    24f2:	ee 80       	ldd	r14, Y+6	; 0x06
    24f4:	fd 80       	ldd	r15, Y+5	; 0x05
    24f6:	0c 81       	ldd	r16, Y+4	; 0x04
    24f8:	1b 81       	ldd	r17, Y+3	; 0x03
    24fa:	aa 81       	ldd	r26, Y+2	; 0x02
    24fc:	b9 81       	ldd	r27, Y+1	; 0x01
    24fe:	ce 0f       	add	r28, r30
    2500:	d1 1d       	adc	r29, r1
    2502:	0f b6       	in	r0, 0x3f	; 63
    2504:	f8 94       	cli
    2506:	de bf       	out	0x3e, r29	; 62
    2508:	0f be       	out	0x3f, r0	; 63
    250a:	cd bf       	out	0x3d, r28	; 61
    250c:	ed 01       	movw	r28, r26
    250e:	08 95       	ret

00002510 <_exit>:
    2510:	f8 94       	cli

00002512 <__stop_program>:
    2512:	ff cf       	rjmp	.-2      	; 0x2512 <__stop_program>
