
low_power_sensor_inside.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800100  00002454  000024e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002454  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d7  00800190  00800190  00002578  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002578  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000025a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000640  00000000  00000000  000025e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b0bc  00000000  00000000  00002c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e4e  00000000  00000000  0000dce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000384a  00000000  00000000  0000fb32  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001610  00000000  00000000  0001337c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000294c  00000000  00000000  0001498c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007f3f  00000000  00000000  000172d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000650  00000000  00000000  0001f217  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__ctors_end>
       4:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <__vector_1>
       8:	0c 94 48 0c 	jmp	0x1890	; 0x1890 <__vector_2>
       c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      10:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      14:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      18:	0c 94 5f 07 	jmp	0xebe	; 0xebe <__vector_6>
      1c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      20:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      24:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      28:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      2c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      30:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      34:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      38:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      3c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      40:	0c 94 6f 0c 	jmp	0x18de	; 0x18de <__vector_16>
      44:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      48:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      4c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      50:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      54:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      58:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      5c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      60:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      64:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	5e 01       	movw	r10, r28
      6a:	01 1f       	adc	r16, r17
      6c:	01 03       	mulsu	r16, r17
      6e:	03 01       	movw	r0, r6
      70:	00 8a       	std	Z+16, r0	; 0x10
      72:	02 01       	movw	r0, r4
      74:	0a 01       	movw	r0, r20
      76:	02 02       	muls	r16, r18
      78:	01 00       	.word	0x0001	; ????
      7a:	64 00       	.word	0x0064	; ????
      7c:	1e 47       	sbci	r17, 0x7E	; 126
      7e:	04 0b       	sbc	r16, r20
      80:	09 06       	cpc	r0, r25
      82:	00 7c       	andi	r16, 0xC0	; 192
      84:	01 01       	movw	r0, r2
      86:	06 01       	movw	r0, r12
      88:	03 03       	mulsu	r16, r19
      8a:	01 00       	.word	0x0001	; ????
      8c:	f4 01       	movw	r30, r8
      8e:	06 0e       	add	r0, r22
      90:	01 02       	muls	r16, r17
      92:	02 01       	movw	r0, r4
      94:	00 c2       	rjmp	.+1024   	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
      96:	01 17       	cp	r16, r17
      98:	01 01       	movw	r0, r2
      9a:	02 02       	muls	r16, r18
      9c:	01 01       	movw	r0, r2

0000009e <digital_pin_to_timer_PGM>:
      9e:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      ae:	00 00 00 00                                         ....

000000b2 <digital_pin_to_bit_mask_PGM>:
      b2:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      c2:	04 08 10 20                                         ... 

000000c6 <digital_pin_to_port_PGM>:
      c6:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      d6:	03 03 03 03                                         ....

000000da <port_to_input_PGM>:
      da:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000e4 <port_to_output_PGM>:
      e4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ee <port_to_mode_PGM>:
      ee:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000f8 <__ctors_start>:
      f8:	f8 04       	cpc	r15, r8

000000fa <__ctors_end>:
      fa:	11 24       	eor	r1, r1
      fc:	1f be       	out	0x3f, r1	; 63
      fe:	cf ef       	ldi	r28, 0xFF	; 255
     100:	d8 e0       	ldi	r29, 0x08	; 8
     102:	de bf       	out	0x3e, r29	; 62
     104:	cd bf       	out	0x3d, r28	; 61

00000106 <__do_copy_data>:
     106:	11 e0       	ldi	r17, 0x01	; 1
     108:	a0 e0       	ldi	r26, 0x00	; 0
     10a:	b1 e0       	ldi	r27, 0x01	; 1
     10c:	e4 e5       	ldi	r30, 0x54	; 84
     10e:	f4 e2       	ldi	r31, 0x24	; 36
     110:	02 c0       	rjmp	.+4      	; 0x116 <__do_copy_data+0x10>
     112:	05 90       	lpm	r0, Z+
     114:	0d 92       	st	X+, r0
     116:	a0 39       	cpi	r26, 0x90	; 144
     118:	b1 07       	cpc	r27, r17
     11a:	d9 f7       	brne	.-10     	; 0x112 <__do_copy_data+0xc>

0000011c <__do_clear_bss>:
     11c:	22 e0       	ldi	r18, 0x02	; 2
     11e:	a0 e9       	ldi	r26, 0x90	; 144
     120:	b1 e0       	ldi	r27, 0x01	; 1
     122:	01 c0       	rjmp	.+2      	; 0x126 <.do_clear_bss_start>

00000124 <.do_clear_bss_loop>:
     124:	1d 92       	st	X+, r1

00000126 <.do_clear_bss_start>:
     126:	a7 36       	cpi	r26, 0x67	; 103
     128:	b2 07       	cpc	r27, r18
     12a:	e1 f7       	brne	.-8      	; 0x124 <.do_clear_bss_loop>

0000012c <__do_global_ctors>:
     12c:	10 e0       	ldi	r17, 0x00	; 0
     12e:	cd e7       	ldi	r28, 0x7D	; 125
     130:	d0 e0       	ldi	r29, 0x00	; 0
     132:	04 c0       	rjmp	.+8      	; 0x13c <__do_global_ctors+0x10>
     134:	21 97       	sbiw	r28, 0x01	; 1
     136:	fe 01       	movw	r30, r28
     138:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__tablejump2__>
     13c:	cc 37       	cpi	r28, 0x7C	; 124
     13e:	d1 07       	cpc	r29, r17
     140:	c9 f7       	brne	.-14     	; 0x134 <__do_global_ctors+0x8>
     142:	0e 94 df 0b 	call	0x17be	; 0x17be <main>
     146:	0c 94 28 12 	jmp	0x2450	; 0x2450 <_exit>

0000014a <__bad_interrupt>:
     14a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014e <setup>:
	return result;
}


//trace function
void trc(String msg){
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	00 d0       	rcall	.+0      	; 0x156 <setup+0x8>
     156:	00 d0       	rcall	.+0      	; 0x158 <setup+0xa>
     158:	00 d0       	rcall	.+0      	; 0x15a <setup+0xc>
     15a:	cd b7       	in	r28, 0x3d	; 61
     15c:	de b7       	in	r29, 0x3e	; 62
     15e:	10 e0       	ldi	r17, 0x00	; 0
     160:	60 e0       	ldi	r22, 0x00	; 0
     162:	81 2f       	mov	r24, r17
     164:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <pinMode>
     168:	60 e0       	ldi	r22, 0x00	; 0
     16a:	81 2f       	mov	r24, r17
     16c:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <digitalWrite>
     170:	1f 5f       	subi	r17, 0xFF	; 255
     172:	14 31       	cpi	r17, 0x14	; 20
     174:	a9 f7       	brne	.-22     	; 0x160 <setup+0x12>
     176:	60 e0       	ldi	r22, 0x00	; 0
     178:	84 e0       	ldi	r24, 0x04	; 4
     17a:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <pinMode>
     17e:	60 e0       	ldi	r22, 0x00	; 0
     180:	87 e0       	ldi	r24, 0x07	; 7
     182:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <pinMode>
     186:	61 e0       	ldi	r22, 0x01	; 1
     188:	89 e0       	ldi	r24, 0x09	; 9
     18a:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <pinMode>
     18e:	61 e0       	ldi	r22, 0x01	; 1
     190:	89 e0       	ldi	r24, 0x09	; 9
     192:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <digitalWrite>
     196:	68 ec       	ldi	r22, 0xC8	; 200
     198:	70 e0       	ldi	r23, 0x00	; 0
     19a:	80 e0       	ldi	r24, 0x00	; 0
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <delay>
     1a2:	60 e0       	ldi	r22, 0x00	; 0
     1a4:	89 e0       	ldi	r24, 0x09	; 9
     1a6:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <digitalWrite>
     1aa:	60 e0       	ldi	r22, 0x00	; 0
     1ac:	89 e0       	ldi	r24, 0x09	; 9
     1ae:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <pinMode>
     1b2:	88 e5       	ldi	r24, 0x58	; 88
     1b4:	92 e0       	ldi	r25, 0x02	; 2
     1b6:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <SleepTimer+0x1>
     1ba:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <SleepTimer>
     1be:	66 e1       	ldi	r22, 0x16	; 22
     1c0:	71 e0       	ldi	r23, 0x01	; 1
     1c2:	ce 01       	movw	r24, r28
     1c4:	01 96       	adiw	r24, 0x01	; 1
     1c6:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <_ZN6StringC1EPKc>
     1ca:	ce 01       	movw	r24, r28
     1cc:	01 96       	adiw	r24, 0x01	; 1
     1ce:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <_ZN6StringD1Ev>
     1d2:	8c e0       	ldi	r24, 0x0C	; 12
     1d4:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <__data_end>
     1d8:	26 96       	adiw	r28, 0x06	; 6
     1da:	0f b6       	in	r0, 0x3f	; 63
     1dc:	f8 94       	cli
     1de:	de bf       	out	0x3e, r29	; 62
     1e0:	0f be       	out	0x3f, r0	; 63
     1e2:	cd bf       	out	0x3d, r28	; 61
     1e4:	df 91       	pop	r29
     1e6:	cf 91       	pop	r28
     1e8:	1f 91       	pop	r17
     1ea:	08 95       	ret

000001ec <_Z12sleepSecondsi>:
     1ec:	0f 93       	push	r16
     1ee:	1f 93       	push	r17
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
     1f4:	97 fd       	sbrc	r25, 7
     1f6:	07 96       	adiw	r24, 0x07	; 7
     1f8:	ec 01       	movw	r28, r24
     1fa:	83 e0       	ldi	r24, 0x03	; 3
     1fc:	d5 95       	asr	r29
     1fe:	c7 95       	ror	r28
     200:	8a 95       	dec	r24
     202:	e1 f7       	brne	.-8      	; 0x1fc <_Z12sleepSecondsi+0x10>
     204:	00 e0       	ldi	r16, 0x00	; 0
     206:	10 e0       	ldi	r17, 0x00	; 0
     208:	0c 17       	cp	r16, r28
     20a:	1d 07       	cpc	r17, r29
     20c:	54 f4       	brge	.+20     	; 0x222 <_Z12sleepSecondsi+0x36>
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	40 e0       	ldi	r20, 0x00	; 0
     212:	69 e0       	ldi	r22, 0x09	; 9
     214:	81 ec       	ldi	r24, 0xC1	; 193
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	0e 94 15 07 	call	0xe2a	; 0xe2a <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t>
     21c:	0f 5f       	subi	r16, 0xFF	; 255
     21e:	1f 4f       	sbci	r17, 0xFF	; 255
     220:	f3 cf       	rjmp	.-26     	; 0x208 <_Z12sleepSecondsi+0x1c>
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	1f 91       	pop	r17
     228:	0f 91       	pop	r16
     22a:	08 95       	ret

0000022c <_Z19checkForFreshEEpromv>:
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	0e 94 b9 11 	call	0x2372	; 0x2372 <eeprom_read_byte>
     234:	9f ef       	ldi	r25, 0xFF	; 255
     236:	98 0f       	add	r25, r24
     238:	9e 3f       	cpi	r25, 0xFE	; 254
     23a:	40 f0       	brcs	.+16     	; 0x24c <_Z19checkForFreshEEpromv+0x20>
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ee_address>
     242:	61 e0       	ldi	r22, 0x01	; 1
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <eeprom_write_byte>
     24c:	81 50       	subi	r24, 0x01	; 1
     24e:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <__data_end>
     252:	89 9f       	mul	r24, r25
     254:	80 2d       	mov	r24, r0
     256:	11 24       	eor	r1, r1
     258:	8f 5f       	subi	r24, 0xFF	; 255
     25a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ee_address>
     25e:	08 95       	ret

00000260 <_Z10readEEDatav>:
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	cd b7       	in	r28, 0x3d	; 61
     266:	de b7       	in	r29, 0x3e	; 62
     268:	2c 97       	sbiw	r28, 0x0c	; 12
     26a:	0f b6       	in	r0, 0x3f	; 63
     26c:	f8 94       	cli
     26e:	de bf       	out	0x3e, r29	; 62
     270:	0f be       	out	0x3f, r0	; 63
     272:	cd bf       	out	0x3d, r28	; 61
     274:	0e 94 16 01 	call	0x22c	; 0x22c <_Z19checkForFreshEEpromv>
     278:	4c e0       	ldi	r20, 0x0C	; 12
     27a:	50 e0       	ldi	r21, 0x00	; 0
     27c:	66 e0       	ldi	r22, 0x06	; 6
     27e:	71 e0       	ldi	r23, 0x01	; 1
     280:	ce 01       	movw	r24, r28
     282:	01 96       	adiw	r24, 0x01	; 1
     284:	0e 94 a9 11 	call	0x2352	; 0x2352 <eeprom_read_block>
     288:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <fresh_eeprom>
     28c:	88 23       	and	r24, r24
     28e:	81 f0       	breq	.+32     	; 0x2b0 <_Z10readEEDatav+0x50>
     290:	1a 82       	std	Y+2, r1	; 0x02
     292:	19 82       	std	Y+1, r1	; 0x01
     294:	1c 86       	std	Y+12, r1	; 0x0c
     296:	1b 86       	std	Y+11, r1	; 0x0b
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	a0 ec       	ldi	r26, 0xC0	; 192
     29e:	bf e7       	ldi	r27, 0x7F	; 127
     2a0:	8b 83       	std	Y+3, r24	; 0x03
     2a2:	9c 83       	std	Y+4, r25	; 0x04
     2a4:	ad 83       	std	Y+5, r26	; 0x05
     2a6:	be 83       	std	Y+6, r27	; 0x06
     2a8:	8f 83       	std	Y+7, r24	; 0x07
     2aa:	98 87       	std	Y+8, r25	; 0x08
     2ac:	a9 87       	std	Y+9, r26	; 0x09
     2ae:	ba 87       	std	Y+10, r27	; 0x0a
     2b0:	8c e0       	ldi	r24, 0x0C	; 12
     2b2:	fe 01       	movw	r30, r28
     2b4:	31 96       	adiw	r30, 0x01	; 1
     2b6:	a1 e9       	ldi	r26, 0x91	; 145
     2b8:	b1 e0       	ldi	r27, 0x01	; 1
     2ba:	01 90       	ld	r0, Z+
     2bc:	0d 92       	st	X+, r0
     2be:	8a 95       	dec	r24
     2c0:	e1 f7       	brne	.-8      	; 0x2ba <_Z10readEEDatav+0x5a>
     2c2:	2c 96       	adiw	r28, 0x0c	; 12
     2c4:	0f b6       	in	r0, 0x3f	; 63
     2c6:	f8 94       	cli
     2c8:	de bf       	out	0x3e, r29	; 62
     2ca:	0f be       	out	0x3f, r0	; 63
     2cc:	cd bf       	out	0x3d, r28	; 61
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	08 95       	ret

000002d4 <_Z11writeEEDatab>:
     2d4:	cf 93       	push	r28
     2d6:	88 23       	and	r24, r24
     2d8:	49 f0       	breq	.+18     	; 0x2ec <_Z11writeEEDatab+0x18>
     2da:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <ee_data+0xa>
     2de:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <ee_data+0xb>
     2e2:	01 96       	adiw	r24, 0x01	; 1
     2e4:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <ee_data+0xb>
     2e8:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <ee_data+0xa>
     2ec:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <ee_data>
     2f0:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <ee_data+0x1>
     2f4:	01 96       	adiw	r24, 0x01	; 1
     2f6:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <ee_data+0x1>
     2fa:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <ee_data>
     2fe:	40 91 90 01 	lds	r20, 0x0190	; 0x800190 <__data_end>
     302:	50 e0       	ldi	r21, 0x00	; 0
     304:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <ee_address>
     308:	70 e0       	ldi	r23, 0x00	; 0
     30a:	81 e9       	ldi	r24, 0x91	; 145
     30c:	91 e0       	ldi	r25, 0x01	; 1
     30e:	0e 94 c1 11 	call	0x2382	; 0x2382 <eeprom_update_block>
     312:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <ee_data>
     316:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <ee_data+0x1>
     31a:	80 33       	cpi	r24, 0x30	; 48
     31c:	95 47       	sbci	r25, 0x75	; 117
     31e:	a8 f0       	brcs	.+42     	; 0x34a <_Z11writeEEDatab+0x76>
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 b9 11 	call	0x2372	; 0x2372 <eeprom_read_byte>
     328:	c8 2f       	mov	r28, r24
     32a:	68 2f       	mov	r22, r24
     32c:	70 e0       	ldi	r23, 0x00	; 0
     32e:	6f 5f       	subi	r22, 0xFF	; 255
     330:	7f 4f       	sbci	r23, 0xFF	; 255
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <eeprom_update_byte>
     33a:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <__data_end>
     33e:	c8 9f       	mul	r28, r24
     340:	c0 2d       	mov	r28, r0
     342:	11 24       	eor	r1, r1
     344:	cf 5f       	subi	r28, 0xFF	; 255
     346:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <ee_address>
     34a:	cf 91       	pop	r28
     34c:	08 95       	ret

0000034e <_Z17measureTempAndHumv>:
     34e:	cf 92       	push	r12
     350:	df 92       	push	r13
     352:	ef 92       	push	r14
     354:	ff 92       	push	r15
     356:	cf 93       	push	r28
     358:	df 93       	push	r29
     35a:	64 ef       	ldi	r22, 0xF4	; 244
     35c:	71 e0       	ldi	r23, 0x01	; 1
     35e:	80 e0       	ldi	r24, 0x00	; 0
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <delay>
     366:	c5 e0       	ldi	r28, 0x05	; 5
     368:	d0 e0       	ldi	r29, 0x00	; 0
     36a:	60 e0       	ldi	r22, 0x00	; 0
     36c:	8e e9       	ldi	r24, 0x9E	; 158
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	0e 94 d1 06 	call	0xda2	; 0xda2 <_ZN3DHT12readHumidityEb>
     374:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <humidity>
     378:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <humidity+0x1>
     37c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <humidity+0x2>
     380:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <humidity+0x3>
     384:	40 e0       	ldi	r20, 0x00	; 0
     386:	60 e0       	ldi	r22, 0x00	; 0
     388:	8e e9       	ldi	r24, 0x9E	; 158
     38a:	91 e0       	ldi	r25, 0x01	; 1
     38c:	0e 94 74 06 	call	0xce8	; 0xce8 <_ZN3DHT15readTemperatureEbb>
     390:	6b 01       	movw	r12, r22
     392:	7c 01       	movw	r14, r24
     394:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <temperature>
     398:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <temperature+0x1>
     39c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <temperature+0x2>
     3a0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <temperature+0x3>
     3a4:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <humidity>
     3a8:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <humidity+0x1>
     3ac:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <humidity+0x2>
     3b0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <humidity+0x3>
     3b4:	9b 01       	movw	r18, r22
     3b6:	ac 01       	movw	r20, r24
     3b8:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__unordsf2>
     3bc:	81 11       	cpse	r24, r1
     3be:	08 c0       	rjmp	.+16     	; 0x3d0 <_Z17measureTempAndHumv+0x82>
     3c0:	a7 01       	movw	r20, r14
     3c2:	96 01       	movw	r18, r12
     3c4:	c7 01       	movw	r24, r14
     3c6:	b6 01       	movw	r22, r12
     3c8:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__unordsf2>
     3cc:	88 23       	and	r24, r24
     3ce:	41 f0       	breq	.+16     	; 0x3e0 <_Z17measureTempAndHumv+0x92>
     3d0:	64 e3       	ldi	r22, 0x34	; 52
     3d2:	78 e0       	ldi	r23, 0x08	; 8
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <delay>
     3dc:	21 97       	sbiw	r28, 0x01	; 1
     3de:	29 f6       	brne	.-118    	; 0x36a <_Z17measureTempAndHumv+0x1c>
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	ff 90       	pop	r15
     3e6:	ef 90       	pop	r14
     3e8:	df 90       	pop	r13
     3ea:	cf 90       	pop	r12
     3ec:	08 95       	ret

000003ee <_Z8sendDatall>:
     3ee:	4f 92       	push	r4
     3f0:	5f 92       	push	r5
     3f2:	6f 92       	push	r6
     3f4:	7f 92       	push	r7
     3f6:	8f 92       	push	r8
     3f8:	9f 92       	push	r9
     3fa:	af 92       	push	r10
     3fc:	bf 92       	push	r11
     3fe:	cf 92       	push	r12
     400:	df 92       	push	r13
     402:	ef 92       	push	r14
     404:	ff 92       	push	r15
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	00 d0       	rcall	.+0      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     40c:	00 d0       	rcall	.+0      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40e:	00 d0       	rcall	.+0      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
     414:	6b 01       	movw	r12, r22
     416:	7c 01       	movw	r14, r24
     418:	49 01       	movw	r8, r18
     41a:	5a 01       	movw	r10, r20
     41c:	8b e2       	ldi	r24, 0x2B	; 43
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	0e 94 08 11 	call	0x2210	; 0x2210 <atol>
     424:	2b 01       	movw	r4, r22
     426:	3c 01       	movw	r6, r24
     428:	62 e3       	ldi	r22, 0x32	; 50
     42a:	71 e0       	ldi	r23, 0x01	; 1
     42c:	ce 01       	movw	r24, r28
     42e:	01 96       	adiw	r24, 0x01	; 1
     430:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <_ZN6StringC1EPKc>
     434:	ce 01       	movw	r24, r28
     436:	01 96       	adiw	r24, 0x01	; 1
     438:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <_ZN6StringD1Ev>
     43c:	2a e0       	ldi	r18, 0x0A	; 10
     43e:	b7 01       	movw	r22, r14
     440:	a6 01       	movw	r20, r12
     442:	ce 01       	movw	r24, r28
     444:	01 96       	adiw	r24, 0x01	; 1
     446:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <_ZN6StringC1Elh>
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <_ZN6StringD1Ev>
     452:	6d e3       	ldi	r22, 0x3D	; 61
     454:	71 e0       	ldi	r23, 0x01	; 1
     456:	ce 01       	movw	r24, r28
     458:	01 96       	adiw	r24, 0x01	; 1
     45a:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <_ZN6StringC1EPKc>
     45e:	ce 01       	movw	r24, r28
     460:	01 96       	adiw	r24, 0x01	; 1
     462:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <_ZN6StringD1Ev>
     466:	2a e0       	ldi	r18, 0x0A	; 10
     468:	b5 01       	movw	r22, r10
     46a:	a4 01       	movw	r20, r8
     46c:	ce 01       	movw	r24, r28
     46e:	01 96       	adiw	r24, 0x01	; 1
     470:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <_ZN6StringC1Elh>
     474:	ce 01       	movw	r24, r28
     476:	01 96       	adiw	r24, 0x01	; 1
     478:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <_ZN6StringD1Ev>
     47c:	4c 14       	cp	r4, r12
     47e:	5d 04       	cpc	r5, r13
     480:	6e 04       	cpc	r6, r14
     482:	7f 04       	cpc	r7, r15
     484:	21 f0       	breq	.+8      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     486:	c8 0c       	add	r12, r8
     488:	d9 1c       	adc	r13, r9
     48a:	ea 1c       	adc	r14, r10
     48c:	fb 1c       	adc	r15, r11
     48e:	66 e4       	ldi	r22, 0x46	; 70
     490:	71 e0       	ldi	r23, 0x01	; 1
     492:	ce 01       	movw	r24, r28
     494:	01 96       	adiw	r24, 0x01	; 1
     496:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <_ZN6StringC1EPKc>
     49a:	ce 01       	movw	r24, r28
     49c:	01 96       	adiw	r24, 0x01	; 1
     49e:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <_ZN6StringD1Ev>
     4a2:	2a e0       	ldi	r18, 0x0A	; 10
     4a4:	b7 01       	movw	r22, r14
     4a6:	a6 01       	movw	r20, r12
     4a8:	ce 01       	movw	r24, r28
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <_ZN6StringC1Elh>
     4b0:	ce 01       	movw	r24, r28
     4b2:	01 96       	adiw	r24, 0x01	; 1
     4b4:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <_ZN6StringD1Ev>
     4b8:	28 e1       	ldi	r18, 0x18	; 24
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	b7 01       	movw	r22, r14
     4be:	a6 01       	movw	r20, r12
     4c0:	82 eb       	ldi	r24, 0xB2	; 178
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	0e 94 1d 08 	call	0x103a	; 0x103a <_ZN8RCSwitch4sendEmj>
     4c8:	26 96       	adiw	r28, 0x06	; 6
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	de bf       	out	0x3e, r29	; 62
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	cd bf       	out	0x3d, r28	; 61
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	ff 90       	pop	r15
     4da:	ef 90       	pop	r14
     4dc:	df 90       	pop	r13
     4de:	cf 90       	pop	r12
     4e0:	bf 90       	pop	r11
     4e2:	af 90       	pop	r10
     4e4:	9f 90       	pop	r9
     4e6:	8f 90       	pop	r8
     4e8:	7f 90       	pop	r7
     4ea:	6f 90       	pop	r6
     4ec:	5f 90       	pop	r5
     4ee:	4f 90       	pop	r4
     4f0:	08 95       	ret

000004f2 <_Z10TempAndHumv>:
     4f2:	4f 92       	push	r4
     4f4:	5f 92       	push	r5
     4f6:	6f 92       	push	r6
     4f8:	7f 92       	push	r7
     4fa:	8f 92       	push	r8
     4fc:	9f 92       	push	r9
     4fe:	af 92       	push	r10
     500:	bf 92       	push	r11
     502:	cf 92       	push	r12
     504:	df 92       	push	r13
     506:	ef 92       	push	r14
     508:	ff 92       	push	r15
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	cd b7       	in	r28, 0x3d	; 61
     510:	de b7       	in	r29, 0x3e	; 62
     512:	2a 97       	sbiw	r28, 0x0a	; 10
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	f8 94       	cli
     518:	de bf       	out	0x3e, r29	; 62
     51a:	0f be       	out	0x3f, r0	; 63
     51c:	cd bf       	out	0x3d, r28	; 61
     51e:	0e 94 a7 01 	call	0x34e	; 0x34e <_Z17measureTempAndHumv>
     522:	c0 90 0c 01 	lds	r12, 0x010C	; 0x80010c <humidity>
     526:	d0 90 0d 01 	lds	r13, 0x010D	; 0x80010d <humidity+0x1>
     52a:	e0 90 0e 01 	lds	r14, 0x010E	; 0x80010e <humidity+0x2>
     52e:	f0 90 0f 01 	lds	r15, 0x010F	; 0x80010f <humidity+0x3>
     532:	a7 01       	movw	r20, r14
     534:	96 01       	movw	r18, r12
     536:	c7 01       	movw	r24, r14
     538:	b6 01       	movw	r22, r12
     53a:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__unordsf2>
     53e:	81 11       	cpse	r24, r1
     540:	36 c0       	rjmp	.+108    	; 0x5ae <_Z10TempAndHumv+0xbc>
     542:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <temperature>
     546:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <temperature+0x1>
     54a:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <temperature+0x2>
     54e:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <temperature+0x3>
     552:	8f 83       	std	Y+7, r24	; 0x07
     554:	98 87       	std	Y+8, r25	; 0x08
     556:	a9 87       	std	Y+9, r26	; 0x09
     558:	ba 87       	std	Y+10, r27	; 0x0a
     55a:	9c 01       	movw	r18, r24
     55c:	ad 01       	movw	r20, r26
     55e:	bc 01       	movw	r22, r24
     560:	cd 01       	movw	r24, r26
     562:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__unordsf2>
     566:	81 11       	cpse	r24, r1
     568:	22 c0       	rjmp	.+68     	; 0x5ae <_Z10TempAndHumv+0xbc>
     56a:	80 90 97 01 	lds	r8, 0x0197	; 0x800197 <ee_data+0x6>
     56e:	90 90 98 01 	lds	r9, 0x0198	; 0x800198 <ee_data+0x7>
     572:	a0 90 99 01 	lds	r10, 0x0199	; 0x800199 <ee_data+0x8>
     576:	b0 90 9a 01 	lds	r11, 0x019A	; 0x80019a <ee_data+0x9>
     57a:	a5 01       	movw	r20, r10
     57c:	94 01       	movw	r18, r8
     57e:	c5 01       	movw	r24, r10
     580:	b4 01       	movw	r22, r8
     582:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__unordsf2>
     586:	81 11       	cpse	r24, r1
     588:	31 c0       	rjmp	.+98     	; 0x5ec <_Z10TempAndHumv+0xfa>
     58a:	40 90 93 01 	lds	r4, 0x0193	; 0x800193 <ee_data+0x2>
     58e:	50 90 94 01 	lds	r5, 0x0194	; 0x800194 <ee_data+0x3>
     592:	60 90 95 01 	lds	r6, 0x0195	; 0x800195 <ee_data+0x4>
     596:	70 90 96 01 	lds	r7, 0x0196	; 0x800196 <ee_data+0x5>
     59a:	a3 01       	movw	r20, r6
     59c:	92 01       	movw	r18, r4
     59e:	c3 01       	movw	r24, r6
     5a0:	b2 01       	movw	r22, r4
     5a2:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__unordsf2>
     5a6:	88 23       	and	r24, r24
     5a8:	09 f4       	brne	.+2      	; 0x5ac <_Z10TempAndHumv+0xba>
     5aa:	82 c0       	rjmp	.+260    	; 0x6b0 <_Z10TempAndHumv+0x1be>
     5ac:	1f c0       	rjmp	.+62     	; 0x5ec <_Z10TempAndHumv+0xfa>
     5ae:	68 e5       	ldi	r22, 0x58	; 88
     5b0:	71 e0       	ldi	r23, 0x01	; 1
     5b2:	ce 01       	movw	r24, r28
     5b4:	01 96       	adiw	r24, 0x01	; 1
     5b6:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <_ZN6StringC1EPKc>
     5ba:	ce 01       	movw	r24, r28
     5bc:	01 96       	adiw	r24, 0x01	; 1
     5be:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <_ZN6StringD1Ev>
     5c2:	8a e4       	ldi	r24, 0x4A	; 74
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	0e 94 08 11 	call	0x2210	; 0x2210 <atol>
     5ca:	6b 01       	movw	r12, r22
     5cc:	7c 01       	movw	r14, r24
     5ce:	8b e2       	ldi	r24, 0x2B	; 43
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	0e 94 08 11 	call	0x2210	; 0x2210 <atol>
     5d6:	a7 01       	movw	r20, r14
     5d8:	96 01       	movw	r18, r12
     5da:	0e 94 f7 01 	call	0x3ee	; 0x3ee <_Z8sendDatall>
     5de:	8c e3       	ldi	r24, 0x3C	; 60
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <SleepTimer+0x1>
     5e6:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <SleepTimer>
     5ea:	2b c1       	rjmp	.+598    	; 0x842 <_Z10TempAndHumv+0x350>
     5ec:	8a e4       	ldi	r24, 0x4A	; 74
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	0e 94 08 11 	call	0x2210	; 0x2210 <atol>
     5f4:	4b 01       	movw	r8, r22
     5f6:	5c 01       	movw	r10, r24
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	40 e2       	ldi	r20, 0x20	; 32
     5fe:	51 e4       	ldi	r21, 0x41	; 65
     600:	c7 01       	movw	r24, r14
     602:	b6 01       	movw	r22, r12
     604:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__mulsf3>
     608:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__fixsfsi>
     60c:	07 2e       	mov	r0, r23
     60e:	00 0c       	add	r0, r0
     610:	88 0b       	sbc	r24, r24
     612:	99 0b       	sbc	r25, r25
     614:	a5 01       	movw	r20, r10
     616:	94 01       	movw	r18, r8
     618:	0e 94 f7 01 	call	0x3ee	; 0x3ee <_Z8sendDatall>
     61c:	81 e5       	ldi	r24, 0x51	; 81
     61e:	91 e0       	ldi	r25, 0x01	; 1
     620:	0e 94 08 11 	call	0x2210	; 0x2210 <atol>
     624:	6b 01       	movw	r12, r22
     626:	7c 01       	movw	r14, r24
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	40 e2       	ldi	r20, 0x20	; 32
     62e:	51 e4       	ldi	r21, 0x41	; 65
     630:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <temperature>
     634:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <temperature+0x1>
     638:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <temperature+0x2>
     63c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <temperature+0x3>
     640:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__mulsf3>
     644:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__fixsfsi>
     648:	07 2e       	mov	r0, r23
     64a:	00 0c       	add	r0, r0
     64c:	88 0b       	sbc	r24, r24
     64e:	99 0b       	sbc	r25, r25
     650:	a7 01       	movw	r20, r14
     652:	96 01       	movw	r18, r12
     654:	0e 94 f7 01 	call	0x3ee	; 0x3ee <_Z8sendDatall>
     658:	88 e5       	ldi	r24, 0x58	; 88
     65a:	92 e0       	ldi	r25, 0x02	; 2
     65c:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <SleepTimer+0x1>
     660:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <SleepTimer>
     664:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <temp_short_sleep>
     668:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <humidity>
     66c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <humidity+0x1>
     670:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <humidity+0x2>
     674:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <humidity+0x3>
     678:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <ee_data+0x6>
     67c:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <ee_data+0x7>
     680:	a0 93 99 01 	sts	0x0199, r26	; 0x800199 <ee_data+0x8>
     684:	b0 93 9a 01 	sts	0x019A, r27	; 0x80019a <ee_data+0x9>
     688:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <temperature>
     68c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <temperature+0x1>
     690:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <temperature+0x2>
     694:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <temperature+0x3>
     698:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <ee_data+0x2>
     69c:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <ee_data+0x3>
     6a0:	a0 93 95 01 	sts	0x0195, r26	; 0x800195 <ee_data+0x4>
     6a4:	b0 93 96 01 	sts	0x0196, r27	; 0x800196 <ee_data+0x5>
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <_Z11writeEEDatab>
     6ae:	c9 c0       	rjmp	.+402    	; 0x842 <_Z10TempAndHumv+0x350>
     6b0:	2f 81       	ldd	r18, Y+7	; 0x07
     6b2:	38 85       	ldd	r19, Y+8	; 0x08
     6b4:	49 85       	ldd	r20, Y+9	; 0x09
     6b6:	5a 85       	ldd	r21, Y+10	; 0x0a
     6b8:	c3 01       	movw	r24, r6
     6ba:	b2 01       	movw	r22, r4
     6bc:	0e 94 0d 0a 	call	0x141a	; 0x141a <__subsf3>
     6c0:	2b 01       	movw	r4, r22
     6c2:	3c 01       	movw	r6, r24
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	a9 01       	movw	r20, r18
     6ca:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__gesf2>
     6ce:	18 16       	cp	r1, r24
     6d0:	5c f4       	brge	.+22     	; 0x6e8 <_Z10TempAndHumv+0x1f6>
     6d2:	20 e0       	ldi	r18, 0x00	; 0
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	40 e2       	ldi	r20, 0x20	; 32
     6d8:	51 e4       	ldi	r21, 0x41	; 65
     6da:	c3 01       	movw	r24, r6
     6dc:	b2 01       	movw	r22, r4
     6de:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__gesf2>
     6e2:	18 16       	cp	r1, r24
     6e4:	5c f0       	brlt	.+22     	; 0x6fc <_Z10TempAndHumv+0x20a>
     6e6:	54 c0       	rjmp	.+168    	; 0x790 <_Z10TempAndHumv+0x29e>
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e2       	ldi	r20, 0x20	; 32
     6ee:	51 ec       	ldi	r21, 0xC1	; 193
     6f0:	c3 01       	movw	r24, r6
     6f2:	b2 01       	movw	r22, r4
     6f4:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <__cmpsf2>
     6f8:	87 ff       	sbrs	r24, 7
     6fa:	4a c0       	rjmp	.+148    	; 0x790 <_Z10TempAndHumv+0x29e>
     6fc:	a7 01       	movw	r20, r14
     6fe:	96 01       	movw	r18, r12
     700:	c5 01       	movw	r24, r10
     702:	b4 01       	movw	r22, r8
     704:	0e 94 0d 0a 	call	0x141a	; 0x141a <__subsf3>
     708:	4b 01       	movw	r8, r22
     70a:	5c 01       	movw	r10, r24
     70c:	20 e0       	ldi	r18, 0x00	; 0
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	a9 01       	movw	r20, r18
     712:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__gesf2>
     716:	18 16       	cp	r1, r24
     718:	5c f4       	brge	.+22     	; 0x730 <_Z10TempAndHumv+0x23e>
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	40 e2       	ldi	r20, 0x20	; 32
     720:	51 e4       	ldi	r21, 0x41	; 65
     722:	c5 01       	movw	r24, r10
     724:	b4 01       	movw	r22, r8
     726:	0e 94 67 0b 	call	0x16ce	; 0x16ce <__gesf2>
     72a:	18 16       	cp	r1, r24
     72c:	5c f0       	brlt	.+22     	; 0x744 <_Z10TempAndHumv+0x252>
     72e:	30 c0       	rjmp	.+96     	; 0x790 <_Z10TempAndHumv+0x29e>
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	40 e2       	ldi	r20, 0x20	; 32
     736:	51 ec       	ldi	r21, 0xC1	; 193
     738:	c5 01       	movw	r24, r10
     73a:	b4 01       	movw	r22, r8
     73c:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <__cmpsf2>
     740:	87 ff       	sbrs	r24, 7
     742:	26 c0       	rjmp	.+76     	; 0x790 <_Z10TempAndHumv+0x29e>
     744:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <temp_short_sleep>
     748:	82 30       	cpi	r24, 0x02	; 2
     74a:	50 f4       	brcc	.+20     	; 0x760 <_Z10TempAndHumv+0x26e>
     74c:	8f 5f       	subi	r24, 0xFF	; 255
     74e:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <temp_short_sleep>
     752:	8c e3       	ldi	r24, 0x3C	; 60
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <SleepTimer+0x1>
     75a:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <SleepTimer>
     75e:	71 c0       	rjmp	.+226    	; 0x842 <_Z10TempAndHumv+0x350>
     760:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <temp_short_sleep>
     764:	c0 92 97 01 	sts	0x0197, r12	; 0x800197 <ee_data+0x6>
     768:	d0 92 98 01 	sts	0x0198, r13	; 0x800198 <ee_data+0x7>
     76c:	e0 92 99 01 	sts	0x0199, r14	; 0x800199 <ee_data+0x8>
     770:	f0 92 9a 01 	sts	0x019A, r15	; 0x80019a <ee_data+0x9>
     774:	8f 81       	ldd	r24, Y+7	; 0x07
     776:	98 85       	ldd	r25, Y+8	; 0x08
     778:	a9 85       	ldd	r26, Y+9	; 0x09
     77a:	ba 85       	ldd	r27, Y+10	; 0x0a
     77c:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <ee_data+0x2>
     780:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <ee_data+0x3>
     784:	a0 93 95 01 	sts	0x0195, r26	; 0x800195 <ee_data+0x4>
     788:	b0 93 96 01 	sts	0x0196, r27	; 0x800196 <ee_data+0x5>
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	15 c0       	rjmp	.+42     	; 0x7ba <_Z10TempAndHumv+0x2c8>
     790:	c0 92 97 01 	sts	0x0197, r12	; 0x800197 <ee_data+0x6>
     794:	d0 92 98 01 	sts	0x0198, r13	; 0x800198 <ee_data+0x7>
     798:	e0 92 99 01 	sts	0x0199, r14	; 0x800199 <ee_data+0x8>
     79c:	f0 92 9a 01 	sts	0x019A, r15	; 0x80019a <ee_data+0x9>
     7a0:	8f 81       	ldd	r24, Y+7	; 0x07
     7a2:	98 85       	ldd	r25, Y+8	; 0x08
     7a4:	a9 85       	ldd	r26, Y+9	; 0x09
     7a6:	ba 85       	ldd	r27, Y+10	; 0x0a
     7a8:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <ee_data+0x2>
     7ac:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <ee_data+0x3>
     7b0:	a0 93 95 01 	sts	0x0195, r26	; 0x800195 <ee_data+0x4>
     7b4:	b0 93 96 01 	sts	0x0196, r27	; 0x800196 <ee_data+0x5>
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <_Z11writeEEDatab>
     7be:	8a e4       	ldi	r24, 0x4A	; 74
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	0e 94 08 11 	call	0x2210	; 0x2210 <atol>
     7c6:	6b 01       	movw	r12, r22
     7c8:	7c 01       	movw	r14, r24
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	40 e2       	ldi	r20, 0x20	; 32
     7d0:	51 e4       	ldi	r21, 0x41	; 65
     7d2:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <humidity>
     7d6:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <humidity+0x1>
     7da:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <humidity+0x2>
     7de:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <humidity+0x3>
     7e2:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__mulsf3>
     7e6:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__fixsfsi>
     7ea:	07 2e       	mov	r0, r23
     7ec:	00 0c       	add	r0, r0
     7ee:	88 0b       	sbc	r24, r24
     7f0:	99 0b       	sbc	r25, r25
     7f2:	a7 01       	movw	r20, r14
     7f4:	96 01       	movw	r18, r12
     7f6:	0e 94 f7 01 	call	0x3ee	; 0x3ee <_Z8sendDatall>
     7fa:	81 e5       	ldi	r24, 0x51	; 81
     7fc:	91 e0       	ldi	r25, 0x01	; 1
     7fe:	0e 94 08 11 	call	0x2210	; 0x2210 <atol>
     802:	6b 01       	movw	r12, r22
     804:	7c 01       	movw	r14, r24
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	40 e2       	ldi	r20, 0x20	; 32
     80c:	51 e4       	ldi	r21, 0x41	; 65
     80e:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <temperature>
     812:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <temperature+0x1>
     816:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <temperature+0x2>
     81a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <temperature+0x3>
     81e:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__mulsf3>
     822:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <__fixsfsi>
     826:	07 2e       	mov	r0, r23
     828:	00 0c       	add	r0, r0
     82a:	88 0b       	sbc	r24, r24
     82c:	99 0b       	sbc	r25, r25
     82e:	a7 01       	movw	r20, r14
     830:	96 01       	movw	r18, r12
     832:	0e 94 f7 01 	call	0x3ee	; 0x3ee <_Z8sendDatall>
     836:	88 e5       	ldi	r24, 0x58	; 88
     838:	92 e0       	ldi	r25, 0x02	; 2
     83a:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <SleepTimer+0x1>
     83e:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <SleepTimer>
     842:	2a 96       	adiw	r28, 0x0a	; 10
     844:	0f b6       	in	r0, 0x3f	; 63
     846:	f8 94       	cli
     848:	de bf       	out	0x3e, r29	; 62
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	cd bf       	out	0x3d, r28	; 61
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	ff 90       	pop	r15
     854:	ef 90       	pop	r14
     856:	df 90       	pop	r13
     858:	cf 90       	pop	r12
     85a:	bf 90       	pop	r11
     85c:	af 90       	pop	r10
     85e:	9f 90       	pop	r9
     860:	8f 90       	pop	r8
     862:	7f 90       	pop	r7
     864:	6f 90       	pop	r6
     866:	5f 90       	pop	r5
     868:	4f 90       	pop	r4
     86a:	08 95       	ret

0000086c <_Z10vccVoltagev>:
     86c:	8e e4       	ldi	r24, 0x4E	; 78
     86e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     872:	6a e0       	ldi	r22, 0x0A	; 10
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <delay>
     87e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     882:	80 64       	ori	r24, 0x40	; 64
     884:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     888:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     88c:	86 fd       	sbrc	r24, 6
     88e:	fc cf       	rjmp	.-8      	; 0x888 <_Z10vccVoltagev+0x1c>
     890:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     894:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	32 2f       	mov	r19, r18
     89c:	22 27       	eor	r18, r18
     89e:	a9 01       	movw	r20, r18
     8a0:	33 0f       	add	r19, r19
     8a2:	66 0b       	sbc	r22, r22
     8a4:	77 0b       	sbc	r23, r23
     8a6:	9a 01       	movw	r18, r20
     8a8:	ab 01       	movw	r20, r22
     8aa:	28 2b       	or	r18, r24
     8ac:	60 e0       	ldi	r22, 0x00	; 0
     8ae:	70 e3       	ldi	r23, 0x30	; 48
     8b0:	81 e1       	ldi	r24, 0x11	; 17
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__divmodsi4>
     8b8:	ca 01       	movw	r24, r20
     8ba:	b9 01       	movw	r22, r18
     8bc:	08 95       	ret

000008be <loop>:
     8be:	cf 92       	push	r12
     8c0:	df 92       	push	r13
     8c2:	ef 92       	push	r14
     8c4:	ff 92       	push	r15
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	00 d0       	rcall	.+0      	; 0x8cc <loop+0xe>
     8cc:	00 d0       	rcall	.+0      	; 0x8ce <loop+0x10>
     8ce:	00 d0       	rcall	.+0      	; 0x8d0 <loop+0x12>
     8d0:	cd b7       	in	r28, 0x3d	; 61
     8d2:	de b7       	in	r29, 0x3e	; 62
     8d4:	61 e0       	ldi	r22, 0x01	; 1
     8d6:	87 e0       	ldi	r24, 0x07	; 7
     8d8:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <pinMode>
     8dc:	61 e0       	ldi	r22, 0x01	; 1
     8de:	87 e0       	ldi	r24, 0x07	; 7
     8e0:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <digitalWrite>
     8e4:	66 e0       	ldi	r22, 0x06	; 6
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	82 eb       	ldi	r24, 0xB2	; 178
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	0e 94 b9 07 	call	0xf72	; 0xf72 <_ZN8RCSwitch14enableTransmitEi>
     8f0:	6f e0       	ldi	r22, 0x0F	; 15
     8f2:	70 e0       	ldi	r23, 0x00	; 0
     8f4:	82 eb       	ldi	r24, 0xB2	; 178
     8f6:	91 e0       	ldi	r25, 0x01	; 1
     8f8:	0e 94 b5 07 	call	0xf6a	; 0xf6a <_ZN8RCSwitch17setRepeatTransmitEi>
     8fc:	68 e7       	ldi	r22, 0x78	; 120
     8fe:	71 e0       	ldi	r23, 0x01	; 1
     900:	ce 01       	movw	r24, r28
     902:	01 96       	adiw	r24, 0x01	; 1
     904:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <_ZN6StringC1EPKc>
     908:	ce 01       	movw	r24, r28
     90a:	01 96       	adiw	r24, 0x01	; 1
     90c:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <_ZN6StringD1Ev>
     910:	0e 94 36 04 	call	0x86c	; 0x86c <_Z10vccVoltagev>
     914:	ab 01       	movw	r20, r22
     916:	bc 01       	movw	r22, r24
     918:	2a e0       	ldi	r18, 0x0A	; 10
     91a:	ce 01       	movw	r24, r28
     91c:	01 96       	adiw	r24, 0x01	; 1
     91e:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <_ZN6StringC1Elh>
     922:	ce 01       	movw	r24, r28
     924:	01 96       	adiw	r24, 0x01	; 1
     926:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <_ZN6StringD1Ev>
     92a:	82 e8       	ldi	r24, 0x82	; 130
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	0e 94 08 11 	call	0x2210	; 0x2210 <atol>
     932:	6b 01       	movw	r12, r22
     934:	7c 01       	movw	r14, r24
     936:	0e 94 36 04 	call	0x86c	; 0x86c <_Z10vccVoltagev>
     93a:	a7 01       	movw	r20, r14
     93c:	96 01       	movw	r18, r12
     93e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <_Z8sendDatall>
     942:	0e 94 30 01 	call	0x260	; 0x260 <_Z10readEEDatav>
     946:	61 e0       	ldi	r22, 0x01	; 1
     948:	84 e0       	ldi	r24, 0x04	; 4
     94a:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <pinMode>
     94e:	61 e0       	ldi	r22, 0x01	; 1
     950:	84 e0       	ldi	r24, 0x04	; 4
     952:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <digitalWrite>
     956:	8e e9       	ldi	r24, 0x9E	; 158
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	0e 94 24 05 	call	0xa48	; 0xa48 <_ZN3DHT5beginEv>
     95e:	64 e6       	ldi	r22, 0x64	; 100
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <delay>
     96a:	0e 94 79 02 	call	0x4f2	; 0x4f2 <_Z10TempAndHumv>
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	84 e0       	ldi	r24, 0x04	; 4
     972:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <digitalWrite>
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	83 e0       	ldi	r24, 0x03	; 3
     97a:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <pinMode>
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	83 e0       	ldi	r24, 0x03	; 3
     982:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <digitalWrite>
     986:	60 e0       	ldi	r22, 0x00	; 0
     988:	84 e0       	ldi	r24, 0x04	; 4
     98a:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <pinMode>
     98e:	82 eb       	ldi	r24, 0xB2	; 178
     990:	91 e0       	ldi	r25, 0x01	; 1
     992:	0e 94 c0 07 	call	0xf80	; 0xf80 <_ZN8RCSwitch15disableTransmitEv>
     996:	60 e0       	ldi	r22, 0x00	; 0
     998:	87 e0       	ldi	r24, 0x07	; 7
     99a:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <pinMode>
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	87 e0       	ldi	r24, 0x07	; 7
     9a2:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <digitalWrite>
     9a6:	60 e0       	ldi	r22, 0x00	; 0
     9a8:	86 e0       	ldi	r24, 0x06	; 6
     9aa:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <pinMode>
     9ae:	60 e0       	ldi	r22, 0x00	; 0
     9b0:	86 e0       	ldi	r24, 0x06	; 6
     9b2:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <digitalWrite>
     9b6:	69 e8       	ldi	r22, 0x89	; 137
     9b8:	71 e0       	ldi	r23, 0x01	; 1
     9ba:	ce 01       	movw	r24, r28
     9bc:	01 96       	adiw	r24, 0x01	; 1
     9be:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <_ZN6StringC1EPKc>
     9c2:	ce 01       	movw	r24, r28
     9c4:	01 96       	adiw	r24, 0x01	; 1
     9c6:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <_ZN6StringD1Ev>
     9ca:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <SleepTimer>
     9ce:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <SleepTimer+0x1>
     9d2:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_Z12sleepSecondsi>
     9d6:	26 96       	adiw	r28, 0x06	; 6
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	f8 94       	cli
     9dc:	de bf       	out	0x3e, r29	; 62
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	cd bf       	out	0x3d, r28	; 61
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	ff 90       	pop	r15
     9e8:	ef 90       	pop	r14
     9ea:	df 90       	pop	r13
     9ec:	cf 90       	pop	r12
     9ee:	08 95       	ret

000009f0 <_GLOBAL__sub_I_mySwitch>:
#define DHTTYPE DHT22
#define Sensor_Bath // Config Code for Sensor Bath?
//#define Sensor_Balcony // Config Code for Sensor Balcony?
//#define Sensor_MasterBed // Config Code for Sensor MasterBedroom?

RCSwitch mySwitch = RCSwitch();
     9f0:	82 eb       	ldi	r24, 0xB2	; 178
     9f2:	91 e0       	ldi	r25, 0x01	; 1
     9f4:	0e 94 8e 07 	call	0xf1c	; 0xf1c <_ZN8RCSwitchC1Ev>
// SleepTimer: Time to deepsleep, adapted to error situation:
// No error during measurement: Sleep for TimeToSleep
// Error during measurement: Sleep for TimeToSleepError!
int SleepTimer;

DHT dht(DhtPin,DHTTYPE);
     9f8:	26 e0       	ldi	r18, 0x06	; 6
     9fa:	46 e1       	ldi	r20, 0x16	; 22
     9fc:	63 e0       	ldi	r22, 0x03	; 3
     9fe:	8e e9       	ldi	r24, 0x9E	; 158
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	0c 94 03 05 	jmp	0xa06	; 0xa06 <_ZN3DHTC1Ehhh>

00000a06 <_ZN3DHTC1Ehhh>:
    else if((percentHumidity > 85.0) && (temperature >= 80.0) && (temperature <= 87.0))
      hi += ((percentHumidity - 85.0) * 0.1) * ((87.0 - temperature) * 0.2);
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}
     a06:	dc 01       	movw	r26, r24
     a08:	15 96       	adiw	r26, 0x05	; 5
     a0a:	6c 93       	st	X, r22
     a0c:	15 97       	sbiw	r26, 0x05	; 5
     a0e:	16 96       	adiw	r26, 0x06	; 6
     a10:	4c 93       	st	X, r20
     a12:	16 97       	sbiw	r26, 0x06	; 6
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	fb 01       	movw	r30, r22
     a18:	ee 54       	subi	r30, 0x4E	; 78
     a1a:	ff 4f       	sbci	r31, 0xFF	; 255
     a1c:	e4 91       	lpm	r30, Z
     a1e:	17 96       	adiw	r26, 0x07	; 7
     a20:	ec 93       	st	X, r30
     a22:	17 97       	sbiw	r26, 0x07	; 7
     a24:	fb 01       	movw	r30, r22
     a26:	ea 53       	subi	r30, 0x3A	; 58
     a28:	ff 4f       	sbci	r31, 0xFF	; 255
     a2a:	64 91       	lpm	r22, Z
     a2c:	18 96       	adiw	r26, 0x08	; 8
     a2e:	6c 93       	st	X, r22
     a30:	18 97       	sbiw	r26, 0x08	; 8
     a32:	40 e4       	ldi	r20, 0x40	; 64
     a34:	5f e1       	ldi	r21, 0x1F	; 31
     a36:	60 e0       	ldi	r22, 0x00	; 0
     a38:	70 e0       	ldi	r23, 0x00	; 0
     a3a:	1d 96       	adiw	r26, 0x0d	; 13
     a3c:	4d 93       	st	X+, r20
     a3e:	5d 93       	st	X+, r21
     a40:	6d 93       	st	X+, r22
     a42:	7c 93       	st	X, r23
     a44:	50 97       	sbiw	r26, 0x10	; 16
     a46:	08 95       	ret

00000a48 <_ZN3DHT5beginEv>:
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
     a4c:	ec 01       	movw	r28, r24
     a4e:	62 e0       	ldi	r22, 0x02	; 2
     a50:	8d 81       	ldd	r24, Y+5	; 0x05
     a52:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <pinMode>
     a56:	80 e3       	ldi	r24, 0x30	; 48
     a58:	98 ef       	ldi	r25, 0xF8	; 248
     a5a:	af ef       	ldi	r26, 0xFF	; 255
     a5c:	bf ef       	ldi	r27, 0xFF	; 255
     a5e:	89 87       	std	Y+9, r24	; 0x09
     a60:	9a 87       	std	Y+10, r25	; 0x0a
     a62:	ab 87       	std	Y+11, r26	; 0x0b
     a64:	bc 87       	std	Y+12, r27	; 0x0c
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	08 95       	ret

00000a6c <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
     a6c:	8f 92       	push	r8
     a6e:	9f 92       	push	r9
     a70:	af 92       	push	r10
     a72:	bf 92       	push	r11
     a74:	cf 92       	push	r12
     a76:	df 92       	push	r13
     a78:	ef 92       	push	r14
     a7a:	ff 92       	push	r15
     a7c:	cf 93       	push	r28
     a7e:	dc 01       	movw	r26, r24
     a80:	17 96       	adiw	r26, 0x07	; 7
     a82:	cc 91       	ld	r28, X
     a84:	17 97       	sbiw	r26, 0x07	; 7
  uint32_t count = 0;
  // On AVR platforms use direct GPIO port access as it's much faster and better
  // for catching pulses that are 10's of microseconds in length:
  #ifdef __AVR
    uint8_t portState = level ? _bit : 0;
     a86:	66 23       	and	r22, r22
     a88:	11 f0       	breq	.+4      	; 0xa8e <_ZN3DHT11expectPulseEb+0x22>
     a8a:	9c 2f       	mov	r25, r28
     a8c:	01 c0       	rjmp	.+2      	; 0xa90 <_ZN3DHT11expectPulseEb+0x24>
     a8e:	90 e0       	ldi	r25, 0x00	; 0
    while ((*portInputRegister(_port) & _bit) == portState) {
     a90:	18 96       	adiw	r26, 0x08	; 8
     a92:	2c 91       	ld	r18, X
     a94:	18 97       	sbiw	r26, 0x08	; 8
     a96:	30 e0       	ldi	r19, 0x00	; 0
     a98:	22 0f       	add	r18, r18
     a9a:	33 1f       	adc	r19, r19
     a9c:	26 52       	subi	r18, 0x26	; 38
     a9e:	3f 4f       	sbci	r19, 0xFF	; 255
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
  uint32_t count = 0;
     aa0:	40 e0       	ldi	r20, 0x00	; 0
     aa2:	50 e0       	ldi	r21, 0x00	; 0
     aa4:	ba 01       	movw	r22, r20
  // On AVR platforms use direct GPIO port access as it's much faster and better
  // for catching pulses that are 10's of microseconds in length:
  #ifdef __AVR
    uint8_t portState = level ? _bit : 0;
    while ((*portInputRegister(_port) & _bit) == portState) {
     aa6:	f9 01       	movw	r30, r18
     aa8:	e5 90       	lpm	r14, Z+
     aaa:	f4 90       	lpm	r15, Z
     aac:	f7 01       	movw	r30, r14
     aae:	80 81       	ld	r24, Z
     ab0:	8c 23       	and	r24, r28
     ab2:	98 13       	cpse	r25, r24
     ab4:	1a c0       	rjmp	.+52     	; 0xaea <_ZN3DHT11expectPulseEb+0x7e>
      if (count++ >= _maxcycles) {
     ab6:	4a 01       	movw	r8, r20
     ab8:	5b 01       	movw	r10, r22
     aba:	ff ef       	ldi	r31, 0xFF	; 255
     abc:	8f 1a       	sub	r8, r31
     abe:	9f 0a       	sbc	r9, r31
     ac0:	af 0a       	sbc	r10, r31
     ac2:	bf 0a       	sbc	r11, r31
     ac4:	1d 96       	adiw	r26, 0x0d	; 13
     ac6:	cd 90       	ld	r12, X+
     ac8:	dd 90       	ld	r13, X+
     aca:	ed 90       	ld	r14, X+
     acc:	fc 90       	ld	r15, X
     ace:	50 97       	sbiw	r26, 0x10	; 16
     ad0:	4c 15       	cp	r20, r12
     ad2:	5d 05       	cpc	r21, r13
     ad4:	6e 05       	cpc	r22, r14
     ad6:	7f 05       	cpc	r23, r15
     ad8:	18 f4       	brcc	.+6      	; 0xae0 <_ZN3DHT11expectPulseEb+0x74>
     ada:	b5 01       	movw	r22, r10
     adc:	a4 01       	movw	r20, r8
     ade:	e3 cf       	rjmp	.-58     	; 0xaa6 <_ZN3DHT11expectPulseEb+0x3a>
        return 0; // Exceeded timeout, fail.
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	20 e0       	ldi	r18, 0x00	; 0
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	03 c0       	rjmp	.+6      	; 0xaf0 <_ZN3DHT11expectPulseEb+0x84>
     aea:	34 2f       	mov	r19, r20
     aec:	25 2f       	mov	r18, r21
     aee:	cb 01       	movw	r24, r22
      }
    }
  #endif

  return count;
}
     af0:	63 2f       	mov	r22, r19
     af2:	72 2f       	mov	r23, r18
     af4:	cf 91       	pop	r28
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	cf 90       	pop	r12
     afe:	bf 90       	pop	r11
     b00:	af 90       	pop	r10
     b02:	9f 90       	pop	r9
     b04:	8f 90       	pop	r8
     b06:	08 95       	ret

00000b08 <_ZN3DHT4readEb>:
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}

boolean DHT::read(bool force) {
     b08:	8f 92       	push	r8
     b0a:	9f 92       	push	r9
     b0c:	af 92       	push	r10
     b0e:	bf 92       	push	r11
     b10:	cf 92       	push	r12
     b12:	df 92       	push	r13
     b14:	ef 92       	push	r14
     b16:	ff 92       	push	r15
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	cd b7       	in	r28, 0x3d	; 61
     b22:	de b7       	in	r29, 0x3e	; 62
     b24:	c0 54       	subi	r28, 0x40	; 64
     b26:	d1 40       	sbci	r29, 0x01	; 1
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	f8 94       	cli
     b2c:	de bf       	out	0x3e, r29	; 62
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	cd bf       	out	0x3d, r28	; 61
     b32:	8c 01       	movw	r16, r24
     b34:	f6 2e       	mov	r15, r22
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  uint32_t currenttime = millis();
     b36:	0e 94 b9 0c 	call	0x1972	; 0x1972 <millis>
  if (!force && ((currenttime - _lastreadtime) < 2000)) {
     b3a:	f1 10       	cpse	r15, r1
     b3c:	16 c0       	rjmp	.+44     	; 0xb6a <_ZN3DHT4readEb+0x62>
     b3e:	f8 01       	movw	r30, r16
     b40:	c1 84       	ldd	r12, Z+9	; 0x09
     b42:	d2 84       	ldd	r13, Z+10	; 0x0a
     b44:	e3 84       	ldd	r14, Z+11	; 0x0b
     b46:	f4 84       	ldd	r15, Z+12	; 0x0c
     b48:	9b 01       	movw	r18, r22
     b4a:	ac 01       	movw	r20, r24
     b4c:	2c 19       	sub	r18, r12
     b4e:	3d 09       	sbc	r19, r13
     b50:	4e 09       	sbc	r20, r14
     b52:	5f 09       	sbc	r21, r15
     b54:	69 01       	movw	r12, r18
     b56:	7a 01       	movw	r14, r20
     b58:	30 ed       	ldi	r19, 0xD0	; 208
     b5a:	c3 16       	cp	r12, r19
     b5c:	37 e0       	ldi	r19, 0x07	; 7
     b5e:	d3 06       	cpc	r13, r19
     b60:	e1 04       	cpc	r14, r1
     b62:	f1 04       	cpc	r15, r1
     b64:	10 f4       	brcc	.+4      	; 0xb6a <_ZN3DHT4readEb+0x62>
    return _lastresult; // return last correct measurement
     b66:	81 89       	ldd	r24, Z+17	; 0x11
     b68:	ab c0       	rjmp	.+342    	; 0xcc0 <_ZN3DHT4readEb+0x1b8>
  }
  _lastreadtime = currenttime;
     b6a:	f8 01       	movw	r30, r16
     b6c:	61 87       	std	Z+9, r22	; 0x09
     b6e:	72 87       	std	Z+10, r23	; 0x0a
     b70:	83 87       	std	Z+11, r24	; 0x0b
     b72:	94 87       	std	Z+12, r25	; 0x0c

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
     b74:	14 82       	std	Z+4, r1	; 0x04
     b76:	13 82       	std	Z+3, r1	; 0x03
     b78:	12 82       	std	Z+2, r1	; 0x02
     b7a:	11 82       	std	Z+1, r1	; 0x01
     b7c:	10 82       	st	Z, r1
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedance state to let pull-up raise data line level and
  // start the reading process.
  digitalWrite(_pin, HIGH);
     b7e:	61 e0       	ldi	r22, 0x01	; 1
     b80:	85 81       	ldd	r24, Z+5	; 0x05
     b82:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <digitalWrite>
  delay(250);
     b86:	6a ef       	ldi	r22, 0xFA	; 250
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <delay>

  // First set data line low for 20 milliseconds.
  pinMode(_pin, OUTPUT);
     b92:	61 e0       	ldi	r22, 0x01	; 1
     b94:	f8 01       	movw	r30, r16
     b96:	85 81       	ldd	r24, Z+5	; 0x05
     b98:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <pinMode>
  digitalWrite(_pin, LOW);
     b9c:	60 e0       	ldi	r22, 0x00	; 0
     b9e:	f8 01       	movw	r30, r16
     ba0:	85 81       	ldd	r24, Z+5	; 0x05
     ba2:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <digitalWrite>
  delay(20);
     ba6:	64 e1       	ldi	r22, 0x14	; 20
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <delay>
};

class InterruptLock {
  public:
   InterruptLock() {
    noInterrupts();
     bb2:	f8 94       	cli
    // End the start signal by setting data line high for 40 microseconds.
    //digitalWrite(_pin, HIGH); // Commented out by Marc R. reason see https://github.com/adafruit/DHT-sensor-library/issues/48
    //delayMicroseconds(40);  // Commented out by Marc R.

    // Now start reading the data line to get the value from the DHT sensor.
    pinMode(_pin, INPUT_PULLUP);
     bb4:	62 e0       	ldi	r22, 0x02	; 2
     bb6:	f8 01       	movw	r30, r16
     bb8:	85 81       	ldd	r24, Z+5	; 0x05
     bba:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <pinMode>
    delayMicroseconds(50);  // Delay a bit to let sensor pull data line low.
     bbe:	82 e3       	ldi	r24, 0x32	; 50
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <delayMicroseconds>

    // First expect a low signal for ~80 microseconds followed by a high signal
    // for ~80 microseconds again.
    if (expectPulse(LOW) == 0) {
     bc6:	60 e0       	ldi	r22, 0x00	; 0
     bc8:	c8 01       	movw	r24, r16
     bca:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN3DHT11expectPulseEb>
     bce:	67 2b       	or	r22, r23
     bd0:	68 2b       	or	r22, r24
     bd2:	69 2b       	or	r22, r25
     bd4:	21 f4       	brne	.+8      	; 0xbde <_ZN3DHT4readEb+0xd6>
      DEBUG_PRINTLN(F("Timeout waiting for start signal low pulse."));
      _lastresult = false;
     bd6:	f8 01       	movw	r30, r16
     bd8:	11 8a       	std	Z+17, r1	; 0x11
   }
   ~InterruptLock() {
    interrupts();
     bda:	78 94       	sei
     bdc:	42 c0       	rjmp	.+132    	; 0xc62 <_ZN3DHT4readEb+0x15a>
      return _lastresult;
    }
    if (expectPulse(HIGH) == 0) {
     bde:	61 e0       	ldi	r22, 0x01	; 1
     be0:	c8 01       	movw	r24, r16
     be2:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN3DHT11expectPulseEb>
     be6:	67 2b       	or	r22, r23
     be8:	68 2b       	or	r22, r24
     bea:	69 2b       	or	r22, r25
     bec:	a1 f3       	breq	.-24     	; 0xbd6 <_ZN3DHT4readEb+0xce>
     bee:	9e 01       	movw	r18, r28
     bf0:	2f 5f       	subi	r18, 0xFF	; 255
     bf2:	3f 4f       	sbci	r19, 0xFF	; 255
     bf4:	79 01       	movw	r14, r18
     bf6:	5e 01       	movw	r10, r28
     bf8:	3f eb       	ldi	r19, 0xBF	; 191
     bfa:	a3 1a       	sub	r10, r19
     bfc:	3e ef       	ldi	r19, 0xFE	; 254
     bfe:	b3 0a       	sbc	r11, r19
     c00:	67 01       	movw	r12, r14
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed all
    // the pulses are read into a array and then examined in a later step.
    for (int i=0; i<80; i+=2) {
      cycles[i]   = expectPulse(LOW);
     c02:	60 e0       	ldi	r22, 0x00	; 0
     c04:	c8 01       	movw	r24, r16
     c06:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN3DHT11expectPulseEb>
     c0a:	f6 01       	movw	r30, r12
     c0c:	60 83       	st	Z, r22
     c0e:	71 83       	std	Z+1, r23	; 0x01
     c10:	82 83       	std	Z+2, r24	; 0x02
     c12:	93 83       	std	Z+3, r25	; 0x03
      cycles[i+1] = expectPulse(HIGH);
     c14:	61 e0       	ldi	r22, 0x01	; 1
     c16:	c8 01       	movw	r24, r16
     c18:	0e 94 36 05 	call	0xa6c	; 0xa6c <_ZN3DHT11expectPulseEb>
     c1c:	f6 01       	movw	r30, r12
     c1e:	64 83       	std	Z+4, r22	; 0x04
     c20:	75 83       	std	Z+5, r23	; 0x05
     c22:	86 83       	std	Z+6, r24	; 0x06
     c24:	97 83       	std	Z+7, r25	; 0x07
     c26:	f8 e0       	ldi	r31, 0x08	; 8
     c28:	cf 0e       	add	r12, r31
     c2a:	d1 1c       	adc	r13, r1
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed all
    // the pulses are read into a array and then examined in a later step.
    for (int i=0; i<80; i+=2) {
     c2c:	ca 14       	cp	r12, r10
     c2e:	db 04       	cpc	r13, r11
     c30:	41 f7       	brne	.-48     	; 0xc02 <_ZN3DHT4readEb+0xfa>
     c32:	78 94       	sei
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i=0; i<40; ++i) {
     c34:	20 e0       	ldi	r18, 0x00	; 0
     c36:	30 e0       	ldi	r19, 0x00	; 0
    uint32_t lowCycles  = cycles[2*i];
     c38:	f7 01       	movw	r30, r14
     c3a:	80 80       	ld	r8, Z
     c3c:	91 80       	ldd	r9, Z+1	; 0x01
     c3e:	a2 80       	ldd	r10, Z+2	; 0x02
     c40:	b3 80       	ldd	r11, Z+3	; 0x03
    uint32_t highCycles = cycles[2*i+1];
     c42:	44 81       	ldd	r20, Z+4	; 0x04
     c44:	55 81       	ldd	r21, Z+5	; 0x05
     c46:	66 81       	ldd	r22, Z+6	; 0x06
     c48:	77 81       	ldd	r23, Z+7	; 0x07
    if ((lowCycles == 0) || (highCycles == 0)) {
     c4a:	81 14       	cp	r8, r1
     c4c:	91 04       	cpc	r9, r1
     c4e:	a1 04       	cpc	r10, r1
     c50:	b1 04       	cpc	r11, r1
     c52:	29 f0       	breq	.+10     	; 0xc5e <_ZN3DHT4readEb+0x156>
     c54:	41 15       	cp	r20, r1
     c56:	51 05       	cpc	r21, r1
     c58:	61 05       	cpc	r22, r1
     c5a:	71 05       	cpc	r23, r1
     c5c:	21 f4       	brne	.+8      	; 0xc66 <_ZN3DHT4readEb+0x15e>
      DEBUG_PRINTLN(F("Timeout waiting for pulse."));
      _lastresult = false;
     c5e:	f8 01       	movw	r30, r16
     c60:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <_ZN3DHT4readEb+0x1b8>
    }
    data[i/8] <<= 1;
     c66:	f9 01       	movw	r30, r18
     c68:	83 e0       	ldi	r24, 0x03	; 3
     c6a:	f5 95       	asr	r31
     c6c:	e7 95       	ror	r30
     c6e:	8a 95       	dec	r24
     c70:	e1 f7       	brne	.-8      	; 0xc6a <_ZN3DHT4readEb+0x162>
     c72:	e0 0f       	add	r30, r16
     c74:	f1 1f       	adc	r31, r17
     c76:	80 81       	ld	r24, Z
     c78:	88 0f       	add	r24, r24
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
     c7a:	84 16       	cp	r8, r20
     c7c:	95 06       	cpc	r9, r21
     c7e:	a6 06       	cpc	r10, r22
     c80:	b7 06       	cpc	r11, r23
     c82:	08 f4       	brcc	.+2      	; 0xc86 <_ZN3DHT4readEb+0x17e>
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i/8] |= 1;
     c84:	81 60       	ori	r24, 0x01	; 1
     c86:	80 83       	st	Z, r24
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i=0; i<40; ++i) {
     c88:	2f 5f       	subi	r18, 0xFF	; 255
     c8a:	3f 4f       	sbci	r19, 0xFF	; 255
     c8c:	f8 e0       	ldi	r31, 0x08	; 8
     c8e:	ef 0e       	add	r14, r31
     c90:	f1 1c       	adc	r15, r1
     c92:	28 32       	cpi	r18, 0x28	; 40
     c94:	31 05       	cpc	r19, r1
     c96:	81 f6       	brne	.-96     	; 0xc38 <_ZN3DHT4readEb+0x130>
  DEBUG_PRINT(data[3], HEX); DEBUG_PRINT(F(", "));
  DEBUG_PRINT(data[4], HEX); DEBUG_PRINT(F(" =? "));
  DEBUG_PRINTLN((data[0] + data[1] + data[2] + data[3]) & 0xFF, HEX);

  // Check we read 40 bits and that the checksum matches.
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
     c98:	f8 01       	movw	r30, r16
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	40 81       	ld	r20, Z
     ca0:	81 81       	ldd	r24, Z+1	; 0x01
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	84 0f       	add	r24, r20
     ca6:	91 1d       	adc	r25, r1
     ca8:	42 81       	ldd	r20, Z+2	; 0x02
     caa:	84 0f       	add	r24, r20
     cac:	91 1d       	adc	r25, r1
     cae:	43 81       	ldd	r20, Z+3	; 0x03
     cb0:	84 0f       	add	r24, r20
     cb2:	91 1d       	adc	r25, r1
     cb4:	99 27       	eor	r25, r25
     cb6:	28 17       	cp	r18, r24
     cb8:	39 07       	cpc	r19, r25
     cba:	89 f6       	brne	.-94     	; 0xc5e <_ZN3DHT4readEb+0x156>
    _lastresult = true;
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	81 8b       	std	Z+17, r24	; 0x11
  else {
    DEBUG_PRINTLN(F("Checksum failure!"));
    _lastresult = false;
    return _lastresult;
  }
}
     cc0:	c0 5c       	subi	r28, 0xC0	; 192
     cc2:	de 4f       	sbci	r29, 0xFE	; 254
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	f8 94       	cli
     cc8:	de bf       	out	0x3e, r29	; 62
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	cd bf       	out	0x3d, r28	; 61
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	1f 91       	pop	r17
     cd4:	0f 91       	pop	r16
     cd6:	ff 90       	pop	r15
     cd8:	ef 90       	pop	r14
     cda:	df 90       	pop	r13
     cdc:	cf 90       	pop	r12
     cde:	bf 90       	pop	r11
     ce0:	af 90       	pop	r10
     ce2:	9f 90       	pop	r9
     ce4:	8f 90       	pop	r8
     ce6:	08 95       	ret

00000ce8 <_ZN3DHT15readTemperatureEbb>:
  _lastreadtime = -MIN_INTERVAL;
  DEBUG_PRINT("Max clock cycles: "); DEBUG_PRINTLN(_maxcycles, DEC);
}

//boolean S == Scale.  True == Fahrenheit; False == Celcius
float DHT::readTemperature(bool S, bool force) {
     ce8:	cf 92       	push	r12
     cea:	df 92       	push	r13
     cec:	ef 92       	push	r14
     cee:	ff 92       	push	r15
     cf0:	0f 93       	push	r16
     cf2:	1f 93       	push	r17
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	ec 01       	movw	r28, r24
     cfa:	16 2f       	mov	r17, r22
  float f = NAN;

  if (read(force)) {
     cfc:	64 2f       	mov	r22, r20
     cfe:	0e 94 84 05 	call	0xb08	; 0xb08 <_ZN3DHT4readEb>
     d02:	88 23       	and	r24, r24
     d04:	09 f4       	brne	.+2      	; 0xd08 <_ZN3DHT15readTemperatureEbb+0x20>
     d06:	40 c0       	rjmp	.+128    	; 0xd88 <_ZN3DHT15readTemperatureEbb+0xa0>
    switch (_type) {
     d08:	8e 81       	ldd	r24, Y+6	; 0x06
     d0a:	8b 30       	cpi	r24, 0x0B	; 11
     d0c:	29 f0       	breq	.+10     	; 0xd18 <_ZN3DHT15readTemperatureEbb+0x30>
     d0e:	e0 f1       	brcs	.+120    	; 0xd88 <_ZN3DHT15readTemperatureEbb+0xa0>
     d10:	85 51       	subi	r24, 0x15	; 21
     d12:	82 30       	cpi	r24, 0x02	; 2
     d14:	40 f0       	brcs	.+16     	; 0xd26 <_ZN3DHT15readTemperatureEbb+0x3e>
     d16:	38 c0       	rjmp	.+112    	; 0xd88 <_ZN3DHT15readTemperatureEbb+0xa0>
    case DHT11:
      f = data[2];
     d18:	6a 81       	ldd	r22, Y+2	; 0x02
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	0e 94 b5 0a 	call	0x156a	; 0x156a <__floatunsisf>
     d24:	22 c0       	rjmp	.+68     	; 0xd6a <_ZN3DHT15readTemperatureEbb+0x82>
        f = convertCtoF(f);
      }
      break;
    case DHT22:
    case DHT21:
      f = data[2] & 0x7F;
     d26:	0a 81       	ldd	r16, Y+2	; 0x02
     d28:	60 2f       	mov	r22, r16
     d2a:	6f 77       	andi	r22, 0x7F	; 127
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	0e 94 b7 0a 	call	0x156e	; 0x156e <__floatsisf>
      f *= 256;
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	40 e8       	ldi	r20, 0x80	; 128
     d3c:	53 e4       	ldi	r21, 0x43	; 67
     d3e:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__mulsf3>
     d42:	6b 01       	movw	r12, r22
     d44:	7c 01       	movw	r14, r24
      f += data[3];
     d46:	6b 81       	ldd	r22, Y+3	; 0x03
     d48:	70 e0       	ldi	r23, 0x00	; 0
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	0e 94 b7 0a 	call	0x156e	; 0x156e <__floatsisf>
     d52:	a7 01       	movw	r20, r14
     d54:	96 01       	movw	r18, r12
     d56:	0e 94 0e 0a 	call	0x141c	; 0x141c <__addsf3>
      f *= 0.1;
     d5a:	2d ec       	ldi	r18, 0xCD	; 205
     d5c:	3c ec       	ldi	r19, 0xCC	; 204
     d5e:	4c ec       	ldi	r20, 0xCC	; 204
     d60:	5d e3       	ldi	r21, 0x3D	; 61
     d62:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__mulsf3>
      if (data[2] & 0x80) {
     d66:	07 fd       	sbrc	r16, 7
        f *= -1;
     d68:	90 58       	subi	r25, 0x80	; 128
      }
      if(S) {
     d6a:	11 23       	and	r17, r17
     d6c:	89 f0       	breq	.+34     	; 0xd90 <_ZN3DHT15readTemperatureEbb+0xa8>
  }
  return f;
}

float DHT::convertCtoF(float c) {
  return c * 1.8 + 32;
     d6e:	26 e6       	ldi	r18, 0x66	; 102
     d70:	36 e6       	ldi	r19, 0x66	; 102
     d72:	46 ee       	ldi	r20, 0xE6	; 230
     d74:	5f e3       	ldi	r21, 0x3F	; 63
     d76:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__mulsf3>
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	40 e0       	ldi	r20, 0x00	; 0
     d80:	52 e4       	ldi	r21, 0x42	; 66
     d82:	0e 94 0e 0a 	call	0x141c	; 0x141c <__addsf3>
     d86:	04 c0       	rjmp	.+8      	; 0xd90 <_ZN3DHT15readTemperatureEbb+0xa8>
  DEBUG_PRINT("Max clock cycles: "); DEBUG_PRINTLN(_maxcycles, DEC);
}

//boolean S == Scale.  True == Fahrenheit; False == Celcius
float DHT::readTemperature(bool S, bool force) {
  float f = NAN;
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	80 ec       	ldi	r24, 0xC0	; 192
     d8e:	9f e7       	ldi	r25, 0x7F	; 127
      }
      break;
    }
  }
  return f;
}
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	1f 91       	pop	r17
     d96:	0f 91       	pop	r16
     d98:	ff 90       	pop	r15
     d9a:	ef 90       	pop	r14
     d9c:	df 90       	pop	r13
     d9e:	cf 90       	pop	r12
     da0:	08 95       	ret

00000da2 <_ZN3DHT12readHumidityEb>:

float DHT::convertFtoC(float f) {
  return (f - 32) * 0.55555;
}

float DHT::readHumidity(bool force) {
     da2:	cf 92       	push	r12
     da4:	df 92       	push	r13
     da6:	ef 92       	push	r14
     da8:	ff 92       	push	r15
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	ec 01       	movw	r28, r24
  float f = NAN;
  if (read()) {
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	0e 94 84 05 	call	0xb08	; 0xb08 <_ZN3DHT4readEb>
     db6:	88 23       	and	r24, r24
     db8:	69 f1       	breq	.+90     	; 0xe14 <_ZN3DHT12readHumidityEb+0x72>
    switch (_type) {
     dba:	8e 81       	ldd	r24, Y+6	; 0x06
     dbc:	8b 30       	cpi	r24, 0x0B	; 11
     dbe:	19 f1       	breq	.+70     	; 0xe06 <_ZN3DHT12readHumidityEb+0x64>
     dc0:	48 f1       	brcs	.+82     	; 0xe14 <_ZN3DHT12readHumidityEb+0x72>
     dc2:	85 51       	subi	r24, 0x15	; 21
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	30 f5       	brcc	.+76     	; 0xe14 <_ZN3DHT12readHumidityEb+0x72>
    case DHT11:
      f = data[0];
      break;
    case DHT22:
    case DHT21:
      f = data[0];
     dc8:	68 81       	ld	r22, Y
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	80 e0       	ldi	r24, 0x00	; 0
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	0e 94 b5 0a 	call	0x156a	; 0x156a <__floatunsisf>
      f *= 256;
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	40 e8       	ldi	r20, 0x80	; 128
     dda:	53 e4       	ldi	r21, 0x43	; 67
     ddc:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__mulsf3>
     de0:	6b 01       	movw	r12, r22
     de2:	7c 01       	movw	r14, r24
      f += data[1];
     de4:	69 81       	ldd	r22, Y+1	; 0x01
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	0e 94 b7 0a 	call	0x156e	; 0x156e <__floatsisf>
     df0:	a7 01       	movw	r20, r14
     df2:	96 01       	movw	r18, r12
     df4:	0e 94 0e 0a 	call	0x141c	; 0x141c <__addsf3>
      f *= 0.1;
     df8:	2d ec       	ldi	r18, 0xCD	; 205
     dfa:	3c ec       	ldi	r19, 0xCC	; 204
     dfc:	4c ec       	ldi	r20, 0xCC	; 204
     dfe:	5d e3       	ldi	r21, 0x3D	; 61
     e00:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__mulsf3>
      break;
     e04:	0b c0       	rjmp	.+22     	; 0xe1c <_ZN3DHT12readHumidityEb+0x7a>
float DHT::readHumidity(bool force) {
  float f = NAN;
  if (read()) {
    switch (_type) {
    case DHT11:
      f = data[0];
     e06:	68 81       	ld	r22, Y
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 b5 0a 	call	0x156a	; 0x156a <__floatunsisf>
      break;
     e12:	04 c0       	rjmp	.+8      	; 0xe1c <_ZN3DHT12readHumidityEb+0x7a>
float DHT::convertFtoC(float f) {
  return (f - 32) * 0.55555;
}

float DHT::readHumidity(bool force) {
  float f = NAN;
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	80 ec       	ldi	r24, 0xC0	; 192
     e1a:	9f e7       	ldi	r25, 0x7F	; 127
      f *= 0.1;
      break;
    }
  }
  return f;
}
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	ff 90       	pop	r15
     e22:	ef 90       	pop	r14
     e24:	df 90       	pop	r13
     e26:	cf 90       	pop	r12
     e28:	08 95       	ret

00000e2a <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t>:
		if (clockSource & CS22) TCCR2B |= (1 << CS22);
		if (clockSource & CS21) TCCR2B |= (1 << CS21);
		if (clockSource & CS20) TCCR2B |= (1 << CS20);	
	}
	#endif
}
     e2a:	41 11       	cpse	r20, r1
     e2c:	05 c0       	rjmp	.+10     	; 0xe38 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0xe>
     e2e:	ea e7       	ldi	r30, 0x7A	; 122
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	8f 77       	andi	r24, 0x7F	; 127
     e36:	80 83       	st	Z, r24
     e38:	6a 30       	cpi	r22, 0x0A	; 10
     e3a:	a9 f0       	breq	.+42     	; 0xe66 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x3c>
     e3c:	63 fd       	sbrc	r22, 3
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x1a>
     e40:	88 e0       	ldi	r24, 0x08	; 8
     e42:	01 c0       	rjmp	.+2      	; 0xe46 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x1c>
     e44:	88 e2       	ldi	r24, 0x28	; 40
     e46:	67 70       	andi	r22, 0x07	; 7
     e48:	68 2b       	or	r22, r24
     e4a:	88 e1       	ldi	r24, 0x18	; 24
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	a8 95       	wdr
     e52:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     e5c:	e0 e6       	ldi	r30, 0x60	; 96
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	80 64       	ori	r24, 0x40	; 64
     e64:	80 83       	st	Z, r24
     e66:	21 11       	cpse	r18, r1
     e68:	14 c0       	rjmp	.+40     	; 0xe92 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x68>
     e6a:	83 b7       	in	r24, 0x33	; 51
     e6c:	81 7f       	andi	r24, 0xF1	; 241
     e6e:	84 60       	ori	r24, 0x04	; 4
     e70:	83 bf       	out	0x33, r24	; 51
     e72:	f8 94       	cli
     e74:	83 b7       	in	r24, 0x33	; 51
     e76:	81 60       	ori	r24, 0x01	; 1
     e78:	83 bf       	out	0x33, r24	; 51
     e7a:	85 b7       	in	r24, 0x35	; 53
     e7c:	80 66       	ori	r24, 0x60	; 96
     e7e:	85 bf       	out	0x35, r24	; 53
     e80:	8f 7d       	andi	r24, 0xDF	; 223
     e82:	85 bf       	out	0x35, r24	; 53
     e84:	78 94       	sei
     e86:	88 95       	sleep
     e88:	83 b7       	in	r24, 0x33	; 51
     e8a:	8e 7f       	andi	r24, 0xFE	; 254
     e8c:	83 bf       	out	0x33, r24	; 51
     e8e:	78 94       	sei
     e90:	0e c0       	rjmp	.+28     	; 0xeae <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x84>
     e92:	83 b7       	in	r24, 0x33	; 51
     e94:	81 7f       	andi	r24, 0xF1	; 241
     e96:	84 60       	ori	r24, 0x04	; 4
     e98:	83 bf       	out	0x33, r24	; 51
     e9a:	f8 94       	cli
     e9c:	83 b7       	in	r24, 0x33	; 51
     e9e:	81 60       	ori	r24, 0x01	; 1
     ea0:	83 bf       	out	0x33, r24	; 51
     ea2:	78 94       	sei
     ea4:	88 95       	sleep
     ea6:	83 b7       	in	r24, 0x33	; 51
     ea8:	8e 7f       	andi	r24, 0xFE	; 254
     eaa:	83 bf       	out	0x33, r24	; 51
     eac:	78 94       	sei
     eae:	41 11       	cpse	r20, r1
     eb0:	05 c0       	rjmp	.+10     	; 0xebc <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x92>
     eb2:	ea e7       	ldi	r30, 0x7A	; 122
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	80 68       	ori	r24, 0x80	; 128
     eba:	80 83       	st	Z, r24
     ebc:	08 95       	ret

00000ebe <__vector_6>:
*		       required to allow automatic WDIF and WDIE bit clearance in 
*			   hardware.
*
*******************************************************************************/
ISR (WDT_vect)
{
     ebe:	1f 92       	push	r1
     ec0:	0f 92       	push	r0
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	0f 92       	push	r0
     ec6:	11 24       	eor	r1, r1
     ec8:	8f 93       	push	r24
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "n"  (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	a8 95       	wdr
     ed0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     ed4:	88 61       	ori	r24, 0x18	; 24
     ed6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     eda:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     ede:	0f be       	out	0x3f, r0	; 63
	// WDIE & WDIF is cleared in hardware upon entering this ISR
	wdt_disable();
}
     ee0:	8f 91       	pop	r24
     ee2:	0f 90       	pop	r0
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	0f 90       	pop	r0
     ee8:	1f 90       	pop	r1
     eea:	18 95       	reti

00000eec <_ZN8RCSwitch11setProtocolEi>:
  return RCSwitch::nReceivedProtocol;
}

unsigned int* RCSwitch::getReceivedRawdata() {
  return RCSwitch::timings;
}
     eec:	9b 01       	movw	r18, r22
     eee:	21 50       	subi	r18, 0x01	; 1
     ef0:	31 09       	sbc	r19, r1
     ef2:	26 30       	cpi	r18, 0x06	; 6
     ef4:	31 05       	cpc	r19, r1
     ef6:	10 f0       	brcs	.+4      	; 0xefc <_ZN8RCSwitch11setProtocolEi+0x10>
     ef8:	61 e0       	ldi	r22, 0x01	; 1
     efa:	70 e0       	ldi	r23, 0x00	; 0
     efc:	61 50       	subi	r22, 0x01	; 1
     efe:	71 09       	sbc	r23, r1
     f00:	49 e0       	ldi	r20, 0x09	; 9
     f02:	46 9f       	mul	r20, r22
     f04:	90 01       	movw	r18, r0
     f06:	47 9f       	mul	r20, r23
     f08:	30 0d       	add	r19, r0
     f0a:	11 24       	eor	r1, r1
     f0c:	b9 01       	movw	r22, r18
     f0e:	68 59       	subi	r22, 0x98	; 152
     f10:	7f 4f       	sbci	r23, 0xFF	; 255
     f12:	49 e0       	ldi	r20, 0x09	; 9
     f14:	50 e0       	ldi	r21, 0x00	; 0
     f16:	06 96       	adiw	r24, 0x06	; 6
     f18:	0c 94 2f 11 	jmp	0x225e	; 0x225e <memcpy_P>

00000f1c <_ZN8RCSwitchC1Ev>:
     f1c:	0f 93       	push	r16
     f1e:	1f 93       	push	r17
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	ec 01       	movw	r28, r24
     f26:	0f ef       	ldi	r16, 0xFF	; 255
     f28:	1f ef       	ldi	r17, 0xFF	; 255
     f2a:	1b 83       	std	Y+3, r17	; 0x03
     f2c:	0a 83       	std	Y+2, r16	; 0x02
     f2e:	8a e0       	ldi	r24, 0x0A	; 10
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	9d 83       	std	Y+5, r25	; 0x05
     f34:	8c 83       	std	Y+4, r24	; 0x04
     f36:	61 e0       	ldi	r22, 0x01	; 1
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	ce 01       	movw	r24, r28
     f3c:	0e 94 76 07 	call	0xeec	; 0xeec <_ZN8RCSwitch11setProtocolEi>
     f40:	19 83       	std	Y+1, r17	; 0x01
     f42:	08 83       	st	Y, r16
     f44:	8c e3       	ldi	r24, 0x3C	; 60
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_ZN8RCSwitch17nReceiveToleranceE+0x1>
     f4c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_ZN8RCSwitch17nReceiveToleranceE>
     f50:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <_ZN8RCSwitch14nReceivedValueE>
     f54:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <_ZN8RCSwitch14nReceivedValueE+0x1>
     f58:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <_ZN8RCSwitch14nReceivedValueE+0x2>
     f5c:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <_ZN8RCSwitch14nReceivedValueE+0x3>
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	1f 91       	pop	r17
     f66:	0f 91       	pop	r16
     f68:	08 95       	ret

00000f6a <_ZN8RCSwitch17setRepeatTransmitEi>:
     f6a:	fc 01       	movw	r30, r24
     f6c:	75 83       	std	Z+5, r23	; 0x05
     f6e:	64 83       	std	Z+4, r22	; 0x04
     f70:	08 95       	ret

00000f72 <_ZN8RCSwitch14enableTransmitEi>:
     f72:	fc 01       	movw	r30, r24
     f74:	86 2f       	mov	r24, r22
     f76:	62 83       	std	Z+2, r22	; 0x02
     f78:	73 83       	std	Z+3, r23	; 0x03
     f7a:	61 e0       	ldi	r22, 0x01	; 1
     f7c:	0c 94 93 0d 	jmp	0x1b26	; 0x1b26 <pinMode>

00000f80 <_ZN8RCSwitch15disableTransmitEv>:
     f80:	2f ef       	ldi	r18, 0xFF	; 255
     f82:	3f ef       	ldi	r19, 0xFF	; 255
     f84:	fc 01       	movw	r30, r24
     f86:	33 83       	std	Z+3, r19	; 0x03
     f88:	22 83       	std	Z+2, r18	; 0x02
     f8a:	08 95       	ret

00000f8c <_ZN8RCSwitch8transmitENS_7HighLowE>:
     f8c:	ff 92       	push	r15
     f8e:	0f 93       	push	r16
     f90:	1f 93       	push	r17
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
     f96:	ec 01       	movw	r28, r24
     f98:	f6 2e       	mov	r15, r22
     f9a:	07 2f       	mov	r16, r23
     f9c:	8e 85       	ldd	r24, Y+14	; 0x0e
     f9e:	88 23       	and	r24, r24
     fa0:	19 f0       	breq	.+6      	; 0xfa8 <_ZN8RCSwitch8transmitENS_7HighLowE+0x1c>
     fa2:	60 e0       	ldi	r22, 0x00	; 0
     fa4:	11 e0       	ldi	r17, 0x01	; 1
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <_ZN8RCSwitch8transmitENS_7HighLowE+0x20>
     fa8:	61 e0       	ldi	r22, 0x01	; 1
     faa:	10 e0       	ldi	r17, 0x00	; 0
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <digitalWrite>
     fb2:	8e 81       	ldd	r24, Y+6	; 0x06
     fb4:	9f 81       	ldd	r25, Y+7	; 0x07
     fb6:	9c 01       	movw	r18, r24
     fb8:	f2 9e       	mul	r15, r18
     fba:	c0 01       	movw	r24, r0
     fbc:	f3 9e       	mul	r15, r19
     fbe:	90 0d       	add	r25, r0
     fc0:	11 24       	eor	r1, r1
     fc2:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <delayMicroseconds>
     fc6:	61 2f       	mov	r22, r17
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <digitalWrite>
     fce:	8e 81       	ldd	r24, Y+6	; 0x06
     fd0:	9f 81       	ldd	r25, Y+7	; 0x07
     fd2:	9c 01       	movw	r18, r24
     fd4:	02 9f       	mul	r16, r18
     fd6:	c0 01       	movw	r24, r0
     fd8:	03 9f       	mul	r16, r19
     fda:	90 0d       	add	r25, r0
     fdc:	11 24       	eor	r1, r1
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	1f 91       	pop	r17
     fe4:	0f 91       	pop	r16
     fe6:	ff 90       	pop	r15
     fe8:	0c 94 26 0d 	jmp	0x1a4c	; 0x1a4c <delayMicroseconds>

00000fec <_ZN8RCSwitch13enableReceiveEv>:
     fec:	fc 01       	movw	r30, r24
     fee:	80 81       	ld	r24, Z
     ff0:	91 81       	ldd	r25, Z+1	; 0x01
     ff2:	8f 3f       	cpi	r24, 0xFF	; 255
     ff4:	ff ef       	ldi	r31, 0xFF	; 255
     ff6:	9f 07       	cpc	r25, r31
     ff8:	91 f0       	breq	.+36     	; 0x101e <_ZN8RCSwitch13enableReceiveEv+0x32>
     ffa:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <_ZN8RCSwitch14nReceivedValueE>
     ffe:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <_ZN8RCSwitch14nReceivedValueE+0x1>
    1002:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <_ZN8RCSwitch14nReceivedValueE+0x2>
    1006:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <_ZN8RCSwitch14nReceivedValueE+0x3>
    100a:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <_ZN8RCSwitch18nReceivedBitlengthE+0x1>
    100e:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <_ZN8RCSwitch18nReceivedBitlengthE>
    1012:	41 e0       	ldi	r20, 0x01	; 1
    1014:	50 e0       	ldi	r21, 0x00	; 0
    1016:	62 e9       	ldi	r22, 0x92	; 146
    1018:	79 e0       	ldi	r23, 0x09	; 9
    101a:	0c 94 ef 0b 	jmp	0x17de	; 0x17de <attachInterrupt>
    101e:	08 95       	ret

00001020 <_ZN8RCSwitch14disableReceiveEv>:
    1020:	cf 93       	push	r28
    1022:	df 93       	push	r29
    1024:	ec 01       	movw	r28, r24
    1026:	88 81       	ld	r24, Y
    1028:	0e 94 0f 0c 	call	0x181e	; 0x181e <detachInterrupt>
    102c:	8f ef       	ldi	r24, 0xFF	; 255
    102e:	9f ef       	ldi	r25, 0xFF	; 255
    1030:	99 83       	std	Y+1, r25	; 0x01
    1032:	88 83       	st	Y, r24
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	08 95       	ret

0000103a <_ZN8RCSwitch4sendEmj>:
    103a:	2f 92       	push	r2
    103c:	3f 92       	push	r3
    103e:	4f 92       	push	r4
    1040:	5f 92       	push	r5
    1042:	6f 92       	push	r6
    1044:	7f 92       	push	r7
    1046:	8f 92       	push	r8
    1048:	9f 92       	push	r9
    104a:	af 92       	push	r10
    104c:	bf 92       	push	r11
    104e:	cf 92       	push	r12
    1050:	df 92       	push	r13
    1052:	ef 92       	push	r14
    1054:	ff 92       	push	r15
    1056:	0f 93       	push	r16
    1058:	1f 93       	push	r17
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	dc 01       	movw	r26, r24
    1060:	12 96       	adiw	r26, 0x02	; 2
    1062:	ed 91       	ld	r30, X+
    1064:	fc 91       	ld	r31, X
    1066:	13 97       	sbiw	r26, 0x03	; 3
    1068:	31 96       	adiw	r30, 0x01	; 1
    106a:	09 f4       	brne	.+2      	; 0x106e <_ZN8RCSwitch4sendEmj+0x34>
    106c:	5c c0       	rjmp	.+184    	; 0x1126 <_ZN8RCSwitch4sendEmj+0xec>
    106e:	19 01       	movw	r2, r18
    1070:	6a 01       	movw	r12, r20
    1072:	7b 01       	movw	r14, r22
    1074:	ec 01       	movw	r28, r24
    1076:	48 80       	ld	r4, Y
    1078:	59 80       	ldd	r5, Y+1	; 0x01
    107a:	8f ef       	ldi	r24, 0xFF	; 255
    107c:	48 16       	cp	r4, r24
    107e:	58 06       	cpc	r5, r24
    1080:	19 f0       	breq	.+6      	; 0x1088 <_ZN8RCSwitch4sendEmj+0x4e>
    1082:	ce 01       	movw	r24, r28
    1084:	0e 94 10 08 	call	0x1020	; 0x1020 <_ZN8RCSwitch14disableReceiveEv>
    1088:	61 2c       	mov	r6, r1
    108a:	71 2c       	mov	r7, r1
    108c:	81 2c       	mov	r8, r1
    108e:	91 2c       	mov	r9, r1
    1090:	54 01       	movw	r10, r8
    1092:	83 94       	inc	r8
    1094:	8c 81       	ldd	r24, Y+4	; 0x04
    1096:	9d 81       	ldd	r25, Y+5	; 0x05
    1098:	68 16       	cp	r6, r24
    109a:	79 06       	cpc	r7, r25
    109c:	4c f5       	brge	.+82     	; 0x10f0 <_ZN8RCSwitch4sendEmj+0xb6>
    109e:	81 01       	movw	r16, r2
    10a0:	01 50       	subi	r16, 0x01	; 1
    10a2:	11 09       	sbc	r17, r1
    10a4:	17 fd       	sbrc	r17, 7
    10a6:	1b c0       	rjmp	.+54     	; 0x10de <_ZN8RCSwitch4sendEmj+0xa4>
    10a8:	d5 01       	movw	r26, r10
    10aa:	c4 01       	movw	r24, r8
    10ac:	00 2e       	mov	r0, r16
    10ae:	04 c0       	rjmp	.+8      	; 0x10b8 <_ZN8RCSwitch4sendEmj+0x7e>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	aa 1f       	adc	r26, r26
    10b6:	bb 1f       	adc	r27, r27
    10b8:	0a 94       	dec	r0
    10ba:	d2 f7       	brpl	.-12     	; 0x10b0 <_ZN8RCSwitch4sendEmj+0x76>
    10bc:	8c 21       	and	r24, r12
    10be:	9d 21       	and	r25, r13
    10c0:	ae 21       	and	r26, r14
    10c2:	bf 21       	and	r27, r15
    10c4:	89 2b       	or	r24, r25
    10c6:	8a 2b       	or	r24, r26
    10c8:	8b 2b       	or	r24, r27
    10ca:	19 f0       	breq	.+6      	; 0x10d2 <_ZN8RCSwitch4sendEmj+0x98>
    10cc:	6c 85       	ldd	r22, Y+12	; 0x0c
    10ce:	7d 85       	ldd	r23, Y+13	; 0x0d
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <_ZN8RCSwitch4sendEmj+0x9c>
    10d2:	6a 85       	ldd	r22, Y+10	; 0x0a
    10d4:	7b 85       	ldd	r23, Y+11	; 0x0b
    10d6:	ce 01       	movw	r24, r28
    10d8:	0e 94 c6 07 	call	0xf8c	; 0xf8c <_ZN8RCSwitch8transmitENS_7HighLowE>
    10dc:	e1 cf       	rjmp	.-62     	; 0x10a0 <_ZN8RCSwitch4sendEmj+0x66>
    10de:	68 85       	ldd	r22, Y+8	; 0x08
    10e0:	79 85       	ldd	r23, Y+9	; 0x09
    10e2:	ce 01       	movw	r24, r28
    10e4:	0e 94 c6 07 	call	0xf8c	; 0xf8c <_ZN8RCSwitch8transmitENS_7HighLowE>
    10e8:	af ef       	ldi	r26, 0xFF	; 255
    10ea:	6a 1a       	sub	r6, r26
    10ec:	7a 0a       	sbc	r7, r26
    10ee:	d2 cf       	rjmp	.-92     	; 0x1094 <_ZN8RCSwitch4sendEmj+0x5a>
    10f0:	bf ef       	ldi	r27, 0xFF	; 255
    10f2:	4b 16       	cp	r4, r27
    10f4:	5b 06       	cpc	r5, r27
    10f6:	b9 f0       	breq	.+46     	; 0x1126 <_ZN8RCSwitch4sendEmj+0xec>
    10f8:	59 82       	std	Y+1, r5	; 0x01
    10fa:	48 82       	st	Y, r4
    10fc:	ce 01       	movw	r24, r28
    10fe:	df 91       	pop	r29
    1100:	cf 91       	pop	r28
    1102:	1f 91       	pop	r17
    1104:	0f 91       	pop	r16
    1106:	ff 90       	pop	r15
    1108:	ef 90       	pop	r14
    110a:	df 90       	pop	r13
    110c:	cf 90       	pop	r12
    110e:	bf 90       	pop	r11
    1110:	af 90       	pop	r10
    1112:	9f 90       	pop	r9
    1114:	8f 90       	pop	r8
    1116:	7f 90       	pop	r7
    1118:	6f 90       	pop	r6
    111a:	5f 90       	pop	r5
    111c:	4f 90       	pop	r4
    111e:	3f 90       	pop	r3
    1120:	2f 90       	pop	r2
    1122:	0c 94 f6 07 	jmp	0xfec	; 0xfec <_ZN8RCSwitch13enableReceiveEv>
    1126:	df 91       	pop	r29
    1128:	cf 91       	pop	r28
    112a:	1f 91       	pop	r17
    112c:	0f 91       	pop	r16
    112e:	ff 90       	pop	r15
    1130:	ef 90       	pop	r14
    1132:	df 90       	pop	r13
    1134:	cf 90       	pop	r12
    1136:	bf 90       	pop	r11
    1138:	af 90       	pop	r10
    113a:	9f 90       	pop	r9
    113c:	8f 90       	pop	r8
    113e:	7f 90       	pop	r7
    1140:	6f 90       	pop	r6
    1142:	5f 90       	pop	r5
    1144:	4f 90       	pop	r4
    1146:	3f 90       	pop	r3
    1148:	2f 90       	pop	r2
    114a:	08 95       	ret

0000114c <_ZN8RCSwitch15receiveProtocolEij>:
}

/**
 *
 */
bool RECEIVE_ATTR RCSwitch::receiveProtocol(const int p, unsigned int changeCount) {
    114c:	2f 92       	push	r2
    114e:	3f 92       	push	r3
    1150:	4f 92       	push	r4
    1152:	5f 92       	push	r5
    1154:	6f 92       	push	r6
    1156:	7f 92       	push	r7
    1158:	8f 92       	push	r8
    115a:	9f 92       	push	r9
    115c:	af 92       	push	r10
    115e:	bf 92       	push	r11
    1160:	cf 92       	push	r12
    1162:	df 92       	push	r13
    1164:	ef 92       	push	r14
    1166:	ff 92       	push	r15
    1168:	0f 93       	push	r16
    116a:	1f 93       	push	r17
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
    1174:	2d 97       	sbiw	r28, 0x0d	; 13
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	8c 01       	movw	r16, r24
    1182:	7b 01       	movw	r14, r22
#ifdef ESP8266
    const Protocol &pro = proto[p-1];
#else
    Protocol pro;
    memcpy_P(&pro, &proto[p-1], sizeof(Protocol));
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	29 e0       	ldi	r18, 0x09	; 9
    1188:	28 9f       	mul	r18, r24
    118a:	b0 01       	movw	r22, r0
    118c:	29 9f       	mul	r18, r25
    118e:	70 0d       	add	r23, r0
    1190:	11 24       	eor	r1, r1
    1192:	68 59       	subi	r22, 0x98	; 152
    1194:	7f 4f       	sbci	r23, 0xFF	; 255
    1196:	49 e0       	ldi	r20, 0x09	; 9
    1198:	50 e0       	ldi	r21, 0x00	; 0
    119a:	ce 01       	movw	r24, r28
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	0e 94 2f 11 	call	0x225e	; 0x225e <memcpy_P>
#endif

    unsigned long code = 0;
    //Assuming the longer pulse length is the pulse captured in timings[0]
    const unsigned int syncLengthInPulses =  ((pro.syncFactor.low) > (pro.syncFactor.high)) ? (pro.syncFactor.low) : (pro.syncFactor.high);
    const unsigned int delay = RCSwitch::timings[0] / syncLengthInPulses;
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	6c 81       	ldd	r22, Y+4	; 0x04
    11a6:	68 17       	cp	r22, r24
    11a8:	08 f4       	brcc	.+2      	; 0x11ac <_ZN8RCSwitch15receiveProtocolEij+0x60>
    11aa:	68 2f       	mov	r22, r24
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_ZN8RCSwitch7timingsE>
    11b2:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <_ZN8RCSwitch7timingsE+0x1>
    11b6:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__udivmodhi4>
    11ba:	9b 01       	movw	r18, r22
    const unsigned int delayTolerance = delay * RCSwitch::nReceiveTolerance / 100;
    11bc:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <_ZN8RCSwitch17nReceiveToleranceE>
    11c0:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <_ZN8RCSwitch17nReceiveToleranceE+0x1>
    11c4:	64 9f       	mul	r22, r20
    11c6:	c0 01       	movw	r24, r0
    11c8:	65 9f       	mul	r22, r21
    11ca:	90 0d       	add	r25, r0
    11cc:	74 9f       	mul	r23, r20
    11ce:	90 0d       	add	r25, r0
    11d0:	11 24       	eor	r1, r1
    11d2:	64 e6       	ldi	r22, 0x64	; 100
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <__udivmodhi4>
     *
     * |-filtered out-|--1st dur--|--Start data--|
     *
     * The 2nd saved duration starts the data
     */
    const unsigned int firstDataTiming = (pro.invertedSignal) ? (2) : (1);
    11da:	89 85       	ldd	r24, Y+9	; 0x09
    11dc:	81 11       	cpse	r24, r1
    11de:	03 c0       	rjmp	.+6      	; 0x11e6 <_ZN8RCSwitch15receiveProtocolEij+0x9a>
    11e0:	a1 e0       	ldi	r26, 0x01	; 1
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <_ZN8RCSwitch15receiveProtocolEij+0x9e>
    11e6:	a2 e0       	ldi	r26, 0x02	; 2
    11e8:	b0 e0       	ldi	r27, 0x00	; 0

    for (unsigned int i = firstDataTiming; i < changeCount - 1; i += 2) {
        code <<= 1;
        if (diff(RCSwitch::timings[i], delay * pro.zero.high) < delayTolerance &&
    11ea:	8d 81       	ldd	r24, Y+5	; 0x05
    11ec:	82 9f       	mul	r24, r18
    11ee:	30 01       	movw	r6, r0
    11f0:	83 9f       	mul	r24, r19
    11f2:	70 0c       	add	r7, r0
    11f4:	11 24       	eor	r1, r1
    11f6:	7b 86       	std	Y+11, r7	; 0x0b
    11f8:	6a 86       	std	Y+10, r6	; 0x0a
            diff(RCSwitch::timings[i + 1], delay * pro.zero.low) < delayTolerance) {
    11fa:	8e 81       	ldd	r24, Y+6	; 0x06
    11fc:	82 9f       	mul	r24, r18
    11fe:	10 01       	movw	r2, r0
    1200:	83 9f       	mul	r24, r19
    1202:	30 0c       	add	r3, r0
    1204:	11 24       	eor	r1, r1
            // zero
        } else if (diff(RCSwitch::timings[i], delay * pro.one.high) < delayTolerance &&
    1206:	8f 81       	ldd	r24, Y+7	; 0x07
    1208:	82 9f       	mul	r24, r18
    120a:	20 01       	movw	r4, r0
    120c:	83 9f       	mul	r24, r19
    120e:	50 0c       	add	r5, r0
    1210:	11 24       	eor	r1, r1
                   diff(RCSwitch::timings[i + 1], delay * pro.one.low) < delayTolerance) {
    1212:	88 85       	ldd	r24, Y+8	; 0x08
    1214:	82 9f       	mul	r24, r18
    1216:	a0 01       	movw	r20, r0
    1218:	83 9f       	mul	r24, r19
    121a:	50 0d       	add	r21, r0
    121c:	11 24       	eor	r1, r1
    121e:	5d 87       	std	Y+13, r21	; 0x0d
    1220:	4c 87       	std	Y+12, r20	; 0x0c
    1222:	fd 01       	movw	r30, r26
    1224:	ee 0f       	add	r30, r30
    1226:	ff 1f       	adc	r31, r31
    1228:	e6 53       	subi	r30, 0x36	; 54
    122a:	fe 4f       	sbci	r31, 0xFE	; 254
    122c:	81 2c       	mov	r8, r1
    122e:	91 2c       	mov	r9, r1
    1230:	54 01       	movw	r10, r8
     *
     * The 2nd saved duration starts the data
     */
    const unsigned int firstDataTiming = (pro.invertedSignal) ? (2) : (1);

    for (unsigned int i = firstDataTiming; i < changeCount - 1; i += 2) {
    1232:	67 01       	movw	r12, r14
    1234:	51 e0       	ldi	r21, 0x01	; 1
    1236:	c5 1a       	sub	r12, r21
    1238:	d1 08       	sbc	r13, r1
    123a:	ac 15       	cp	r26, r12
    123c:	bd 05       	cpc	r27, r13
    123e:	e0 f5       	brcc	.+120    	; 0x12b8 <_ZN8RCSwitch15receiveProtocolEij+0x16c>
        code <<= 1;
    1240:	88 0c       	add	r8, r8
    1242:	99 1c       	adc	r9, r9
    1244:	aa 1c       	adc	r10, r10
    1246:	bb 1c       	adc	r11, r11
        if (diff(RCSwitch::timings[i], delay * pro.zero.high) < delayTolerance &&
    1248:	80 81       	ld	r24, Z
    124a:	91 81       	ldd	r25, Z+1	; 0x01
    124c:	ac 01       	movw	r20, r24
    124e:	6a 84       	ldd	r6, Y+10	; 0x0a
    1250:	7b 84       	ldd	r7, Y+11	; 0x0b
    1252:	46 19       	sub	r20, r6
    1254:	57 09       	sbc	r21, r7
    1256:	57 ff       	sbrs	r21, 7
    1258:	03 c0       	rjmp	.+6      	; 0x1260 <_ZN8RCSwitch15receiveProtocolEij+0x114>
    125a:	51 95       	neg	r21
    125c:	41 95       	neg	r20
    125e:	51 09       	sbc	r21, r1
    1260:	46 17       	cp	r20, r22
    1262:	57 07       	cpc	r21, r23
    1264:	60 f4       	brcc	.+24     	; 0x127e <_ZN8RCSwitch15receiveProtocolEij+0x132>
    1266:	42 81       	ldd	r20, Z+2	; 0x02
    1268:	53 81       	ldd	r21, Z+3	; 0x03
    126a:	42 19       	sub	r20, r2
    126c:	53 09       	sbc	r21, r3
    126e:	57 ff       	sbrs	r21, 7
    1270:	03 c0       	rjmp	.+6      	; 0x1278 <_ZN8RCSwitch15receiveProtocolEij+0x12c>
    1272:	51 95       	neg	r21
    1274:	41 95       	neg	r20
    1276:	51 09       	sbc	r21, r1
    1278:	46 17       	cp	r20, r22
    127a:	57 07       	cpc	r21, r23
    127c:	d0 f0       	brcs	.+52     	; 0x12b2 <_ZN8RCSwitch15receiveProtocolEij+0x166>
            diff(RCSwitch::timings[i + 1], delay * pro.zero.low) < delayTolerance) {
            // zero
        } else if (diff(RCSwitch::timings[i], delay * pro.one.high) < delayTolerance &&
    127e:	84 19       	sub	r24, r4
    1280:	95 09       	sbc	r25, r5
    1282:	97 ff       	sbrs	r25, 7
    1284:	03 c0       	rjmp	.+6      	; 0x128c <_ZN8RCSwitch15receiveProtocolEij+0x140>
    1286:	91 95       	neg	r25
    1288:	81 95       	neg	r24
    128a:	91 09       	sbc	r25, r1
    128c:	86 17       	cp	r24, r22
    128e:	97 07       	cpc	r25, r23
    1290:	78 f5       	brcc	.+94     	; 0x12f0 <_ZN8RCSwitch15receiveProtocolEij+0x1a4>
    1292:	82 81       	ldd	r24, Z+2	; 0x02
    1294:	93 81       	ldd	r25, Z+3	; 0x03
    1296:	4c 85       	ldd	r20, Y+12	; 0x0c
    1298:	5d 85       	ldd	r21, Y+13	; 0x0d
    129a:	84 1b       	sub	r24, r20
    129c:	95 0b       	sbc	r25, r21
    129e:	97 ff       	sbrs	r25, 7
    12a0:	03 c0       	rjmp	.+6      	; 0x12a8 <_ZN8RCSwitch15receiveProtocolEij+0x15c>
    12a2:	91 95       	neg	r25
    12a4:	81 95       	neg	r24
    12a6:	91 09       	sbc	r25, r1
    12a8:	86 17       	cp	r24, r22
    12aa:	97 07       	cpc	r25, r23
    12ac:	08 f5       	brcc	.+66     	; 0x12f0 <_ZN8RCSwitch15receiveProtocolEij+0x1a4>
                   diff(RCSwitch::timings[i + 1], delay * pro.one.low) < delayTolerance) {
            // one
            code |= 1;
    12ae:	68 94       	set
    12b0:	80 f8       	bld	r8, 0
     *
     * The 2nd saved duration starts the data
     */
    const unsigned int firstDataTiming = (pro.invertedSignal) ? (2) : (1);

    for (unsigned int i = firstDataTiming; i < changeCount - 1; i += 2) {
    12b2:	12 96       	adiw	r26, 0x02	; 2
    12b4:	34 96       	adiw	r30, 0x04	; 4
    12b6:	c1 cf       	rjmp	.-126    	; 0x123a <_ZN8RCSwitch15receiveProtocolEij+0xee>
            // Failed
            return false;
        }
    }

    if (changeCount > 7) {    // ignore very short transmissions: no device sends them, so this must be noise
    12b8:	58 e0       	ldi	r21, 0x08	; 8
    12ba:	e5 16       	cp	r14, r21
    12bc:	f1 04       	cpc	r15, r1
    12be:	c0 f0       	brcs	.+48     	; 0x12f0 <_ZN8RCSwitch15receiveProtocolEij+0x1a4>
        RCSwitch::nReceivedValue = code;
    12c0:	80 92 56 02 	sts	0x0256, r8	; 0x800256 <_ZN8RCSwitch14nReceivedValueE>
    12c4:	90 92 57 02 	sts	0x0257, r9	; 0x800257 <_ZN8RCSwitch14nReceivedValueE+0x1>
    12c8:	a0 92 58 02 	sts	0x0258, r10	; 0x800258 <_ZN8RCSwitch14nReceivedValueE+0x2>
    12cc:	b0 92 59 02 	sts	0x0259, r11	; 0x800259 <_ZN8RCSwitch14nReceivedValueE+0x3>
        RCSwitch::nReceivedBitlength = (changeCount - 1) / 2;
    12d0:	d6 94       	lsr	r13
    12d2:	c7 94       	ror	r12
    12d4:	d0 92 55 02 	sts	0x0255, r13	; 0x800255 <_ZN8RCSwitch18nReceivedBitlengthE+0x1>
    12d8:	c0 92 54 02 	sts	0x0254, r12	; 0x800254 <_ZN8RCSwitch18nReceivedBitlengthE>
        RCSwitch::nReceivedDelay = delay;
    12dc:	30 93 53 02 	sts	0x0253, r19	; 0x800253 <_ZN8RCSwitch14nReceivedDelayE+0x1>
    12e0:	20 93 52 02 	sts	0x0252, r18	; 0x800252 <_ZN8RCSwitch14nReceivedDelayE>
        RCSwitch::nReceivedProtocol = p;
    12e4:	10 93 51 02 	sts	0x0251, r17	; 0x800251 <_ZN8RCSwitch17nReceivedProtocolE+0x1>
    12e8:	00 93 50 02 	sts	0x0250, r16	; 0x800250 <_ZN8RCSwitch17nReceivedProtocolE>
        return true;
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	01 c0       	rjmp	.+2      	; 0x12f2 <_ZN8RCSwitch15receiveProtocolEij+0x1a6>
                   diff(RCSwitch::timings[i + 1], delay * pro.one.low) < delayTolerance) {
            // one
            code |= 1;
        } else {
            // Failed
            return false;
    12f0:	80 e0       	ldi	r24, 0x00	; 0
        RCSwitch::nReceivedProtocol = p;
        return true;
    }

    return false;
}
    12f2:	2d 96       	adiw	r28, 0x0d	; 13
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	de bf       	out	0x3e, r29	; 62
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	cd bf       	out	0x3d, r28	; 61
    12fe:	df 91       	pop	r29
    1300:	cf 91       	pop	r28
    1302:	1f 91       	pop	r17
    1304:	0f 91       	pop	r16
    1306:	ff 90       	pop	r15
    1308:	ef 90       	pop	r14
    130a:	df 90       	pop	r13
    130c:	cf 90       	pop	r12
    130e:	bf 90       	pop	r11
    1310:	af 90       	pop	r10
    1312:	9f 90       	pop	r9
    1314:	8f 90       	pop	r8
    1316:	7f 90       	pop	r7
    1318:	6f 90       	pop	r6
    131a:	5f 90       	pop	r5
    131c:	4f 90       	pop	r4
    131e:	3f 90       	pop	r3
    1320:	2f 90       	pop	r2
    1322:	08 95       	ret

00001324 <_ZN8RCSwitch15handleInterruptEv>:

void RECEIVE_ATTR RCSwitch::handleInterrupt() {
    1324:	cf 92       	push	r12
    1326:	df 92       	push	r13
    1328:	ef 92       	push	r14
    132a:	ff 92       	push	r15
    132c:	0f 93       	push	r16
    132e:	1f 93       	push	r17
    1330:	cf 93       	push	r28
    1332:	df 93       	push	r29

  static unsigned int changeCount = 0;
  static unsigned long lastTime = 0;
  static unsigned int repeatCount = 0;

  const long time = micros();
    1334:	0e 94 c5 0c 	call	0x198a	; 0x198a <micros>
    1338:	6b 01       	movw	r12, r22
    133a:	7c 01       	movw	r14, r24
  const unsigned int duration = time - lastTime;
    133c:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <_ZZN8RCSwitch15handleInterruptEvE8lastTime>
    1340:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <_ZZN8RCSwitch15handleInterruptEvE8lastTime+0x1>
    1344:	86 01       	movw	r16, r12
    1346:	08 1b       	sub	r16, r24
    1348:	19 0b       	sbc	r17, r25

  if (duration > RCSwitch::nSeparationLimit) {
    134a:	0d 3c       	cpi	r16, 0xCD	; 205
    134c:	20 e1       	ldi	r18, 0x10	; 16
    134e:	12 07       	cpc	r17, r18
    1350:	90 f1       	brcs	.+100    	; 0x13b6 <_ZN8RCSwitch15handleInterruptEv+0x92>
    // A long stretch without signal level change occurred. This could
    // be the gap between two transmission.
    if (diff(duration, RCSwitch::timings[0]) < 200) {
    1352:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_ZN8RCSwitch7timingsE>
    1356:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <_ZN8RCSwitch7timingsE+0x1>
    135a:	98 01       	movw	r18, r16
    135c:	28 1b       	sub	r18, r24
    135e:	39 0b       	sbc	r19, r25
    1360:	c9 01       	movw	r24, r18
    1362:	37 ff       	sbrs	r19, 7
    1364:	03 c0       	rjmp	.+6      	; 0x136c <_ZN8RCSwitch15handleInterruptEv+0x48>
    1366:	91 95       	neg	r25
    1368:	81 95       	neg	r24
    136a:	91 09       	sbc	r25, r1
    136c:	88 3c       	cpi	r24, 0xC8	; 200
    136e:	91 05       	cpc	r25, r1
    1370:	f4 f4       	brge	.+60     	; 0x13ae <_ZN8RCSwitch15handleInterruptEv+0x8a>
      // This long signal is close in length to the long signal which
      // started the previously recorded timings; this suggests that
      // it may indeed by a a gap between two transmissions (we assume
      // here that a sender will send the signal multiple times,
      // with roughly the same gap between them).
      repeatCount++;
    1372:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount>
    1376:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount+0x1>
    137a:	01 96       	adiw	r24, 0x01	; 1
    137c:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount+0x1>
    1380:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount>
      if (repeatCount == 2) {
    1384:	02 97       	sbiw	r24, 0x02	; 2
    1386:	99 f4       	brne	.+38     	; 0x13ae <_ZN8RCSwitch15handleInterruptEv+0x8a>
    1388:	c1 e0       	ldi	r28, 0x01	; 1
    138a:	d0 e0       	ldi	r29, 0x00	; 0
        for(unsigned int i = 1; i <= numProto; i++) {
          if (receiveProtocol(i, changeCount)) {
    138c:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <_ZZN8RCSwitch15handleInterruptEvE11changeCount>
    1390:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <_ZZN8RCSwitch15handleInterruptEvE11changeCount+0x1>
    1394:	ce 01       	movw	r24, r28
    1396:	0e 94 a6 08 	call	0x114c	; 0x114c <_ZN8RCSwitch15receiveProtocolEij>
    139a:	81 11       	cpse	r24, r1
    139c:	04 c0       	rjmp	.+8      	; 0x13a6 <_ZN8RCSwitch15handleInterruptEv+0x82>
      // it may indeed by a a gap between two transmissions (we assume
      // here that a sender will send the signal multiple times,
      // with roughly the same gap between them).
      repeatCount++;
      if (repeatCount == 2) {
        for(unsigned int i = 1; i <= numProto; i++) {
    139e:	21 96       	adiw	r28, 0x01	; 1
    13a0:	c7 30       	cpi	r28, 0x07	; 7
    13a2:	d1 05       	cpc	r29, r1
    13a4:	99 f7       	brne	.-26     	; 0x138c <_ZN8RCSwitch15handleInterruptEv+0x68>
          if (receiveProtocol(i, changeCount)) {
            // receive succeeded for protocol i
            break;
          }
        }
        repeatCount = 0;
    13a6:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount+0x1>
    13aa:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount>
      }
    }
    changeCount = 0;
    13ae:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <_ZZN8RCSwitch15handleInterruptEvE11changeCount+0x1>
    13b2:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <_ZZN8RCSwitch15handleInterruptEvE11changeCount>
  }
 
  // detect overflow
  if (changeCount >= RCSWITCH_MAX_CHANGES) {
    13b6:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <_ZZN8RCSwitch15handleInterruptEvE11changeCount>
    13ba:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <_ZZN8RCSwitch15handleInterruptEvE11changeCount+0x1>
    13be:	83 34       	cpi	r24, 0x43	; 67
    13c0:	91 05       	cpc	r25, r1
    13c2:	40 f0       	brcs	.+16     	; 0x13d4 <_ZN8RCSwitch15handleInterruptEv+0xb0>
    changeCount = 0;
    13c4:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <_ZZN8RCSwitch15handleInterruptEvE11changeCount+0x1>
    13c8:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <_ZZN8RCSwitch15handleInterruptEvE11changeCount>
    repeatCount = 0;
    13cc:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount+0x1>
    13d0:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount>
  }

  RCSwitch::timings[changeCount++] = duration;
    13d4:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <_ZZN8RCSwitch15handleInterruptEvE11changeCount>
    13d8:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <_ZZN8RCSwitch15handleInterruptEvE11changeCount+0x1>
    13dc:	9c 01       	movw	r18, r24
    13de:	2f 5f       	subi	r18, 0xFF	; 255
    13e0:	3f 4f       	sbci	r19, 0xFF	; 255
    13e2:	30 93 c3 01 	sts	0x01C3, r19	; 0x8001c3 <_ZZN8RCSwitch15handleInterruptEvE11changeCount+0x1>
    13e6:	20 93 c2 01 	sts	0x01C2, r18	; 0x8001c2 <_ZZN8RCSwitch15handleInterruptEvE11changeCount>
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	fc 01       	movw	r30, r24
    13f0:	e6 53       	subi	r30, 0x36	; 54
    13f2:	fe 4f       	sbci	r31, 0xFE	; 254
    13f4:	11 83       	std	Z+1, r17	; 0x01
    13f6:	00 83       	st	Z, r16
  lastTime = time;  
    13f8:	c0 92 c6 01 	sts	0x01C6, r12	; 0x8001c6 <_ZZN8RCSwitch15handleInterruptEvE8lastTime>
    13fc:	d0 92 c7 01 	sts	0x01C7, r13	; 0x8001c7 <_ZZN8RCSwitch15handleInterruptEvE8lastTime+0x1>
    1400:	e0 92 c8 01 	sts	0x01C8, r14	; 0x8001c8 <_ZZN8RCSwitch15handleInterruptEvE8lastTime+0x2>
    1404:	f0 92 c9 01 	sts	0x01C9, r15	; 0x8001c9 <_ZZN8RCSwitch15handleInterruptEvE8lastTime+0x3>
}
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
    1410:	ff 90       	pop	r15
    1412:	ef 90       	pop	r14
    1414:	df 90       	pop	r13
    1416:	cf 90       	pop	r12
    1418:	08 95       	ret

0000141a <__subsf3>:
    141a:	50 58       	subi	r21, 0x80	; 128

0000141c <__addsf3>:
    141c:	bb 27       	eor	r27, r27
    141e:	aa 27       	eor	r26, r26
    1420:	0e 94 25 0a 	call	0x144a	; 0x144a <__addsf3x>
    1424:	0c 94 2d 0b 	jmp	0x165a	; 0x165a <__fp_round>
    1428:	0e 94 1f 0b 	call	0x163e	; 0x163e <__fp_pscA>
    142c:	38 f0       	brcs	.+14     	; 0x143c <__addsf3+0x20>
    142e:	0e 94 26 0b 	call	0x164c	; 0x164c <__fp_pscB>
    1432:	20 f0       	brcs	.+8      	; 0x143c <__addsf3+0x20>
    1434:	39 f4       	brne	.+14     	; 0x1444 <__addsf3+0x28>
    1436:	9f 3f       	cpi	r25, 0xFF	; 255
    1438:	19 f4       	brne	.+6      	; 0x1440 <__addsf3+0x24>
    143a:	26 f4       	brtc	.+8      	; 0x1444 <__addsf3+0x28>
    143c:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <__fp_nan>
    1440:	0e f4       	brtc	.+2      	; 0x1444 <__addsf3+0x28>
    1442:	e0 95       	com	r30
    1444:	e7 fb       	bst	r30, 7
    1446:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__fp_inf>

0000144a <__addsf3x>:
    144a:	e9 2f       	mov	r30, r25
    144c:	0e 94 3e 0b 	call	0x167c	; 0x167c <__fp_split3>
    1450:	58 f3       	brcs	.-42     	; 0x1428 <__addsf3+0xc>
    1452:	ba 17       	cp	r27, r26
    1454:	62 07       	cpc	r22, r18
    1456:	73 07       	cpc	r23, r19
    1458:	84 07       	cpc	r24, r20
    145a:	95 07       	cpc	r25, r21
    145c:	20 f0       	brcs	.+8      	; 0x1466 <__addsf3x+0x1c>
    145e:	79 f4       	brne	.+30     	; 0x147e <__addsf3x+0x34>
    1460:	a6 f5       	brtc	.+104    	; 0x14ca <__addsf3x+0x80>
    1462:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <__fp_zero>
    1466:	0e f4       	brtc	.+2      	; 0x146a <__addsf3x+0x20>
    1468:	e0 95       	com	r30
    146a:	0b 2e       	mov	r0, r27
    146c:	ba 2f       	mov	r27, r26
    146e:	a0 2d       	mov	r26, r0
    1470:	0b 01       	movw	r0, r22
    1472:	b9 01       	movw	r22, r18
    1474:	90 01       	movw	r18, r0
    1476:	0c 01       	movw	r0, r24
    1478:	ca 01       	movw	r24, r20
    147a:	a0 01       	movw	r20, r0
    147c:	11 24       	eor	r1, r1
    147e:	ff 27       	eor	r31, r31
    1480:	59 1b       	sub	r21, r25
    1482:	99 f0       	breq	.+38     	; 0x14aa <__addsf3x+0x60>
    1484:	59 3f       	cpi	r21, 0xF9	; 249
    1486:	50 f4       	brcc	.+20     	; 0x149c <__addsf3x+0x52>
    1488:	50 3e       	cpi	r21, 0xE0	; 224
    148a:	68 f1       	brcs	.+90     	; 0x14e6 <__addsf3x+0x9c>
    148c:	1a 16       	cp	r1, r26
    148e:	f0 40       	sbci	r31, 0x00	; 0
    1490:	a2 2f       	mov	r26, r18
    1492:	23 2f       	mov	r18, r19
    1494:	34 2f       	mov	r19, r20
    1496:	44 27       	eor	r20, r20
    1498:	58 5f       	subi	r21, 0xF8	; 248
    149a:	f3 cf       	rjmp	.-26     	; 0x1482 <__addsf3x+0x38>
    149c:	46 95       	lsr	r20
    149e:	37 95       	ror	r19
    14a0:	27 95       	ror	r18
    14a2:	a7 95       	ror	r26
    14a4:	f0 40       	sbci	r31, 0x00	; 0
    14a6:	53 95       	inc	r21
    14a8:	c9 f7       	brne	.-14     	; 0x149c <__addsf3x+0x52>
    14aa:	7e f4       	brtc	.+30     	; 0x14ca <__addsf3x+0x80>
    14ac:	1f 16       	cp	r1, r31
    14ae:	ba 0b       	sbc	r27, r26
    14b0:	62 0b       	sbc	r22, r18
    14b2:	73 0b       	sbc	r23, r19
    14b4:	84 0b       	sbc	r24, r20
    14b6:	ba f0       	brmi	.+46     	; 0x14e6 <__addsf3x+0x9c>
    14b8:	91 50       	subi	r25, 0x01	; 1
    14ba:	a1 f0       	breq	.+40     	; 0x14e4 <__addsf3x+0x9a>
    14bc:	ff 0f       	add	r31, r31
    14be:	bb 1f       	adc	r27, r27
    14c0:	66 1f       	adc	r22, r22
    14c2:	77 1f       	adc	r23, r23
    14c4:	88 1f       	adc	r24, r24
    14c6:	c2 f7       	brpl	.-16     	; 0x14b8 <__addsf3x+0x6e>
    14c8:	0e c0       	rjmp	.+28     	; 0x14e6 <__addsf3x+0x9c>
    14ca:	ba 0f       	add	r27, r26
    14cc:	62 1f       	adc	r22, r18
    14ce:	73 1f       	adc	r23, r19
    14d0:	84 1f       	adc	r24, r20
    14d2:	48 f4       	brcc	.+18     	; 0x14e6 <__addsf3x+0x9c>
    14d4:	87 95       	ror	r24
    14d6:	77 95       	ror	r23
    14d8:	67 95       	ror	r22
    14da:	b7 95       	ror	r27
    14dc:	f7 95       	ror	r31
    14de:	9e 3f       	cpi	r25, 0xFE	; 254
    14e0:	08 f0       	brcs	.+2      	; 0x14e4 <__addsf3x+0x9a>
    14e2:	b0 cf       	rjmp	.-160    	; 0x1444 <__addsf3+0x28>
    14e4:	93 95       	inc	r25
    14e6:	88 0f       	add	r24, r24
    14e8:	08 f0       	brcs	.+2      	; 0x14ec <__addsf3x+0xa2>
    14ea:	99 27       	eor	r25, r25
    14ec:	ee 0f       	add	r30, r30
    14ee:	97 95       	ror	r25
    14f0:	87 95       	ror	r24
    14f2:	08 95       	ret

000014f4 <__cmpsf2>:
    14f4:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__fp_cmp>
    14f8:	08 f4       	brcc	.+2      	; 0x14fc <__cmpsf2+0x8>
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	08 95       	ret

000014fe <__fixsfsi>:
    14fe:	0e 94 86 0a 	call	0x150c	; 0x150c <__fixunssfsi>
    1502:	68 94       	set
    1504:	b1 11       	cpse	r27, r1
    1506:	0c 94 61 0b 	jmp	0x16c2	; 0x16c2 <__fp_szero>
    150a:	08 95       	ret

0000150c <__fixunssfsi>:
    150c:	0e 94 46 0b 	call	0x168c	; 0x168c <__fp_splitA>
    1510:	88 f0       	brcs	.+34     	; 0x1534 <__fixunssfsi+0x28>
    1512:	9f 57       	subi	r25, 0x7F	; 127
    1514:	98 f0       	brcs	.+38     	; 0x153c <__fixunssfsi+0x30>
    1516:	b9 2f       	mov	r27, r25
    1518:	99 27       	eor	r25, r25
    151a:	b7 51       	subi	r27, 0x17	; 23
    151c:	b0 f0       	brcs	.+44     	; 0x154a <__fixunssfsi+0x3e>
    151e:	e1 f0       	breq	.+56     	; 0x1558 <__fixunssfsi+0x4c>
    1520:	66 0f       	add	r22, r22
    1522:	77 1f       	adc	r23, r23
    1524:	88 1f       	adc	r24, r24
    1526:	99 1f       	adc	r25, r25
    1528:	1a f0       	brmi	.+6      	; 0x1530 <__fixunssfsi+0x24>
    152a:	ba 95       	dec	r27
    152c:	c9 f7       	brne	.-14     	; 0x1520 <__fixunssfsi+0x14>
    152e:	14 c0       	rjmp	.+40     	; 0x1558 <__fixunssfsi+0x4c>
    1530:	b1 30       	cpi	r27, 0x01	; 1
    1532:	91 f0       	breq	.+36     	; 0x1558 <__fixunssfsi+0x4c>
    1534:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__fp_zero>
    1538:	b1 e0       	ldi	r27, 0x01	; 1
    153a:	08 95       	ret
    153c:	0c 94 60 0b 	jmp	0x16c0	; 0x16c0 <__fp_zero>
    1540:	67 2f       	mov	r22, r23
    1542:	78 2f       	mov	r23, r24
    1544:	88 27       	eor	r24, r24
    1546:	b8 5f       	subi	r27, 0xF8	; 248
    1548:	39 f0       	breq	.+14     	; 0x1558 <__fixunssfsi+0x4c>
    154a:	b9 3f       	cpi	r27, 0xF9	; 249
    154c:	cc f3       	brlt	.-14     	; 0x1540 <__fixunssfsi+0x34>
    154e:	86 95       	lsr	r24
    1550:	77 95       	ror	r23
    1552:	67 95       	ror	r22
    1554:	b3 95       	inc	r27
    1556:	d9 f7       	brne	.-10     	; 0x154e <__fixunssfsi+0x42>
    1558:	3e f4       	brtc	.+14     	; 0x1568 <__fixunssfsi+0x5c>
    155a:	90 95       	com	r25
    155c:	80 95       	com	r24
    155e:	70 95       	com	r23
    1560:	61 95       	neg	r22
    1562:	7f 4f       	sbci	r23, 0xFF	; 255
    1564:	8f 4f       	sbci	r24, 0xFF	; 255
    1566:	9f 4f       	sbci	r25, 0xFF	; 255
    1568:	08 95       	ret

0000156a <__floatunsisf>:
    156a:	e8 94       	clt
    156c:	09 c0       	rjmp	.+18     	; 0x1580 <__floatsisf+0x12>

0000156e <__floatsisf>:
    156e:	97 fb       	bst	r25, 7
    1570:	3e f4       	brtc	.+14     	; 0x1580 <__floatsisf+0x12>
    1572:	90 95       	com	r25
    1574:	80 95       	com	r24
    1576:	70 95       	com	r23
    1578:	61 95       	neg	r22
    157a:	7f 4f       	sbci	r23, 0xFF	; 255
    157c:	8f 4f       	sbci	r24, 0xFF	; 255
    157e:	9f 4f       	sbci	r25, 0xFF	; 255
    1580:	99 23       	and	r25, r25
    1582:	a9 f0       	breq	.+42     	; 0x15ae <__floatsisf+0x40>
    1584:	f9 2f       	mov	r31, r25
    1586:	96 e9       	ldi	r25, 0x96	; 150
    1588:	bb 27       	eor	r27, r27
    158a:	93 95       	inc	r25
    158c:	f6 95       	lsr	r31
    158e:	87 95       	ror	r24
    1590:	77 95       	ror	r23
    1592:	67 95       	ror	r22
    1594:	b7 95       	ror	r27
    1596:	f1 11       	cpse	r31, r1
    1598:	f8 cf       	rjmp	.-16     	; 0x158a <__floatsisf+0x1c>
    159a:	fa f4       	brpl	.+62     	; 0x15da <__floatsisf+0x6c>
    159c:	bb 0f       	add	r27, r27
    159e:	11 f4       	brne	.+4      	; 0x15a4 <__floatsisf+0x36>
    15a0:	60 ff       	sbrs	r22, 0
    15a2:	1b c0       	rjmp	.+54     	; 0x15da <__floatsisf+0x6c>
    15a4:	6f 5f       	subi	r22, 0xFF	; 255
    15a6:	7f 4f       	sbci	r23, 0xFF	; 255
    15a8:	8f 4f       	sbci	r24, 0xFF	; 255
    15aa:	9f 4f       	sbci	r25, 0xFF	; 255
    15ac:	16 c0       	rjmp	.+44     	; 0x15da <__floatsisf+0x6c>
    15ae:	88 23       	and	r24, r24
    15b0:	11 f0       	breq	.+4      	; 0x15b6 <__floatsisf+0x48>
    15b2:	96 e9       	ldi	r25, 0x96	; 150
    15b4:	11 c0       	rjmp	.+34     	; 0x15d8 <__floatsisf+0x6a>
    15b6:	77 23       	and	r23, r23
    15b8:	21 f0       	breq	.+8      	; 0x15c2 <__floatsisf+0x54>
    15ba:	9e e8       	ldi	r25, 0x8E	; 142
    15bc:	87 2f       	mov	r24, r23
    15be:	76 2f       	mov	r23, r22
    15c0:	05 c0       	rjmp	.+10     	; 0x15cc <__floatsisf+0x5e>
    15c2:	66 23       	and	r22, r22
    15c4:	71 f0       	breq	.+28     	; 0x15e2 <__floatsisf+0x74>
    15c6:	96 e8       	ldi	r25, 0x86	; 134
    15c8:	86 2f       	mov	r24, r22
    15ca:	70 e0       	ldi	r23, 0x00	; 0
    15cc:	60 e0       	ldi	r22, 0x00	; 0
    15ce:	2a f0       	brmi	.+10     	; 0x15da <__floatsisf+0x6c>
    15d0:	9a 95       	dec	r25
    15d2:	66 0f       	add	r22, r22
    15d4:	77 1f       	adc	r23, r23
    15d6:	88 1f       	adc	r24, r24
    15d8:	da f7       	brpl	.-10     	; 0x15d0 <__floatsisf+0x62>
    15da:	88 0f       	add	r24, r24
    15dc:	96 95       	lsr	r25
    15de:	87 95       	ror	r24
    15e0:	97 f9       	bld	r25, 7
    15e2:	08 95       	ret

000015e4 <__fp_cmp>:
    15e4:	99 0f       	add	r25, r25
    15e6:	00 08       	sbc	r0, r0
    15e8:	55 0f       	add	r21, r21
    15ea:	aa 0b       	sbc	r26, r26
    15ec:	e0 e8       	ldi	r30, 0x80	; 128
    15ee:	fe ef       	ldi	r31, 0xFE	; 254
    15f0:	16 16       	cp	r1, r22
    15f2:	17 06       	cpc	r1, r23
    15f4:	e8 07       	cpc	r30, r24
    15f6:	f9 07       	cpc	r31, r25
    15f8:	c0 f0       	brcs	.+48     	; 0x162a <__fp_cmp+0x46>
    15fa:	12 16       	cp	r1, r18
    15fc:	13 06       	cpc	r1, r19
    15fe:	e4 07       	cpc	r30, r20
    1600:	f5 07       	cpc	r31, r21
    1602:	98 f0       	brcs	.+38     	; 0x162a <__fp_cmp+0x46>
    1604:	62 1b       	sub	r22, r18
    1606:	73 0b       	sbc	r23, r19
    1608:	84 0b       	sbc	r24, r20
    160a:	95 0b       	sbc	r25, r21
    160c:	39 f4       	brne	.+14     	; 0x161c <__fp_cmp+0x38>
    160e:	0a 26       	eor	r0, r26
    1610:	61 f0       	breq	.+24     	; 0x162a <__fp_cmp+0x46>
    1612:	23 2b       	or	r18, r19
    1614:	24 2b       	or	r18, r20
    1616:	25 2b       	or	r18, r21
    1618:	21 f4       	brne	.+8      	; 0x1622 <__fp_cmp+0x3e>
    161a:	08 95       	ret
    161c:	0a 26       	eor	r0, r26
    161e:	09 f4       	brne	.+2      	; 0x1622 <__fp_cmp+0x3e>
    1620:	a1 40       	sbci	r26, 0x01	; 1
    1622:	a6 95       	lsr	r26
    1624:	8f ef       	ldi	r24, 0xFF	; 255
    1626:	81 1d       	adc	r24, r1
    1628:	81 1d       	adc	r24, r1
    162a:	08 95       	ret

0000162c <__fp_inf>:
    162c:	97 f9       	bld	r25, 7
    162e:	9f 67       	ori	r25, 0x7F	; 127
    1630:	80 e8       	ldi	r24, 0x80	; 128
    1632:	70 e0       	ldi	r23, 0x00	; 0
    1634:	60 e0       	ldi	r22, 0x00	; 0
    1636:	08 95       	ret

00001638 <__fp_nan>:
    1638:	9f ef       	ldi	r25, 0xFF	; 255
    163a:	80 ec       	ldi	r24, 0xC0	; 192
    163c:	08 95       	ret

0000163e <__fp_pscA>:
    163e:	00 24       	eor	r0, r0
    1640:	0a 94       	dec	r0
    1642:	16 16       	cp	r1, r22
    1644:	17 06       	cpc	r1, r23
    1646:	18 06       	cpc	r1, r24
    1648:	09 06       	cpc	r0, r25
    164a:	08 95       	ret

0000164c <__fp_pscB>:
    164c:	00 24       	eor	r0, r0
    164e:	0a 94       	dec	r0
    1650:	12 16       	cp	r1, r18
    1652:	13 06       	cpc	r1, r19
    1654:	14 06       	cpc	r1, r20
    1656:	05 06       	cpc	r0, r21
    1658:	08 95       	ret

0000165a <__fp_round>:
    165a:	09 2e       	mov	r0, r25
    165c:	03 94       	inc	r0
    165e:	00 0c       	add	r0, r0
    1660:	11 f4       	brne	.+4      	; 0x1666 <__fp_round+0xc>
    1662:	88 23       	and	r24, r24
    1664:	52 f0       	brmi	.+20     	; 0x167a <__fp_round+0x20>
    1666:	bb 0f       	add	r27, r27
    1668:	40 f4       	brcc	.+16     	; 0x167a <__fp_round+0x20>
    166a:	bf 2b       	or	r27, r31
    166c:	11 f4       	brne	.+4      	; 0x1672 <__fp_round+0x18>
    166e:	60 ff       	sbrs	r22, 0
    1670:	04 c0       	rjmp	.+8      	; 0x167a <__fp_round+0x20>
    1672:	6f 5f       	subi	r22, 0xFF	; 255
    1674:	7f 4f       	sbci	r23, 0xFF	; 255
    1676:	8f 4f       	sbci	r24, 0xFF	; 255
    1678:	9f 4f       	sbci	r25, 0xFF	; 255
    167a:	08 95       	ret

0000167c <__fp_split3>:
    167c:	57 fd       	sbrc	r21, 7
    167e:	90 58       	subi	r25, 0x80	; 128
    1680:	44 0f       	add	r20, r20
    1682:	55 1f       	adc	r21, r21
    1684:	59 f0       	breq	.+22     	; 0x169c <__fp_splitA+0x10>
    1686:	5f 3f       	cpi	r21, 0xFF	; 255
    1688:	71 f0       	breq	.+28     	; 0x16a6 <__fp_splitA+0x1a>
    168a:	47 95       	ror	r20

0000168c <__fp_splitA>:
    168c:	88 0f       	add	r24, r24
    168e:	97 fb       	bst	r25, 7
    1690:	99 1f       	adc	r25, r25
    1692:	61 f0       	breq	.+24     	; 0x16ac <__fp_splitA+0x20>
    1694:	9f 3f       	cpi	r25, 0xFF	; 255
    1696:	79 f0       	breq	.+30     	; 0x16b6 <__fp_splitA+0x2a>
    1698:	87 95       	ror	r24
    169a:	08 95       	ret
    169c:	12 16       	cp	r1, r18
    169e:	13 06       	cpc	r1, r19
    16a0:	14 06       	cpc	r1, r20
    16a2:	55 1f       	adc	r21, r21
    16a4:	f2 cf       	rjmp	.-28     	; 0x168a <__fp_split3+0xe>
    16a6:	46 95       	lsr	r20
    16a8:	f1 df       	rcall	.-30     	; 0x168c <__fp_splitA>
    16aa:	08 c0       	rjmp	.+16     	; 0x16bc <__fp_splitA+0x30>
    16ac:	16 16       	cp	r1, r22
    16ae:	17 06       	cpc	r1, r23
    16b0:	18 06       	cpc	r1, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	f1 cf       	rjmp	.-30     	; 0x1698 <__fp_splitA+0xc>
    16b6:	86 95       	lsr	r24
    16b8:	71 05       	cpc	r23, r1
    16ba:	61 05       	cpc	r22, r1
    16bc:	08 94       	sec
    16be:	08 95       	ret

000016c0 <__fp_zero>:
    16c0:	e8 94       	clt

000016c2 <__fp_szero>:
    16c2:	bb 27       	eor	r27, r27
    16c4:	66 27       	eor	r22, r22
    16c6:	77 27       	eor	r23, r23
    16c8:	cb 01       	movw	r24, r22
    16ca:	97 f9       	bld	r25, 7
    16cc:	08 95       	ret

000016ce <__gesf2>:
    16ce:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__fp_cmp>
    16d2:	08 f4       	brcc	.+2      	; 0x16d6 <__gesf2+0x8>
    16d4:	8f ef       	ldi	r24, 0xFF	; 255
    16d6:	08 95       	ret

000016d8 <__mulsf3>:
    16d8:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <__mulsf3x>
    16dc:	0c 94 2d 0b 	jmp	0x165a	; 0x165a <__fp_round>
    16e0:	0e 94 1f 0b 	call	0x163e	; 0x163e <__fp_pscA>
    16e4:	38 f0       	brcs	.+14     	; 0x16f4 <__mulsf3+0x1c>
    16e6:	0e 94 26 0b 	call	0x164c	; 0x164c <__fp_pscB>
    16ea:	20 f0       	brcs	.+8      	; 0x16f4 <__mulsf3+0x1c>
    16ec:	95 23       	and	r25, r21
    16ee:	11 f0       	breq	.+4      	; 0x16f4 <__mulsf3+0x1c>
    16f0:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__fp_inf>
    16f4:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <__fp_nan>
    16f8:	11 24       	eor	r1, r1
    16fa:	0c 94 61 0b 	jmp	0x16c2	; 0x16c2 <__fp_szero>

000016fe <__mulsf3x>:
    16fe:	0e 94 3e 0b 	call	0x167c	; 0x167c <__fp_split3>
    1702:	70 f3       	brcs	.-36     	; 0x16e0 <__mulsf3+0x8>

00001704 <__mulsf3_pse>:
    1704:	95 9f       	mul	r25, r21
    1706:	c1 f3       	breq	.-16     	; 0x16f8 <__mulsf3+0x20>
    1708:	95 0f       	add	r25, r21
    170a:	50 e0       	ldi	r21, 0x00	; 0
    170c:	55 1f       	adc	r21, r21
    170e:	62 9f       	mul	r22, r18
    1710:	f0 01       	movw	r30, r0
    1712:	72 9f       	mul	r23, r18
    1714:	bb 27       	eor	r27, r27
    1716:	f0 0d       	add	r31, r0
    1718:	b1 1d       	adc	r27, r1
    171a:	63 9f       	mul	r22, r19
    171c:	aa 27       	eor	r26, r26
    171e:	f0 0d       	add	r31, r0
    1720:	b1 1d       	adc	r27, r1
    1722:	aa 1f       	adc	r26, r26
    1724:	64 9f       	mul	r22, r20
    1726:	66 27       	eor	r22, r22
    1728:	b0 0d       	add	r27, r0
    172a:	a1 1d       	adc	r26, r1
    172c:	66 1f       	adc	r22, r22
    172e:	82 9f       	mul	r24, r18
    1730:	22 27       	eor	r18, r18
    1732:	b0 0d       	add	r27, r0
    1734:	a1 1d       	adc	r26, r1
    1736:	62 1f       	adc	r22, r18
    1738:	73 9f       	mul	r23, r19
    173a:	b0 0d       	add	r27, r0
    173c:	a1 1d       	adc	r26, r1
    173e:	62 1f       	adc	r22, r18
    1740:	83 9f       	mul	r24, r19
    1742:	a0 0d       	add	r26, r0
    1744:	61 1d       	adc	r22, r1
    1746:	22 1f       	adc	r18, r18
    1748:	74 9f       	mul	r23, r20
    174a:	33 27       	eor	r19, r19
    174c:	a0 0d       	add	r26, r0
    174e:	61 1d       	adc	r22, r1
    1750:	23 1f       	adc	r18, r19
    1752:	84 9f       	mul	r24, r20
    1754:	60 0d       	add	r22, r0
    1756:	21 1d       	adc	r18, r1
    1758:	82 2f       	mov	r24, r18
    175a:	76 2f       	mov	r23, r22
    175c:	6a 2f       	mov	r22, r26
    175e:	11 24       	eor	r1, r1
    1760:	9f 57       	subi	r25, 0x7F	; 127
    1762:	50 40       	sbci	r21, 0x00	; 0
    1764:	9a f0       	brmi	.+38     	; 0x178c <__mulsf3_pse+0x88>
    1766:	f1 f0       	breq	.+60     	; 0x17a4 <__mulsf3_pse+0xa0>
    1768:	88 23       	and	r24, r24
    176a:	4a f0       	brmi	.+18     	; 0x177e <__mulsf3_pse+0x7a>
    176c:	ee 0f       	add	r30, r30
    176e:	ff 1f       	adc	r31, r31
    1770:	bb 1f       	adc	r27, r27
    1772:	66 1f       	adc	r22, r22
    1774:	77 1f       	adc	r23, r23
    1776:	88 1f       	adc	r24, r24
    1778:	91 50       	subi	r25, 0x01	; 1
    177a:	50 40       	sbci	r21, 0x00	; 0
    177c:	a9 f7       	brne	.-22     	; 0x1768 <__mulsf3_pse+0x64>
    177e:	9e 3f       	cpi	r25, 0xFE	; 254
    1780:	51 05       	cpc	r21, r1
    1782:	80 f0       	brcs	.+32     	; 0x17a4 <__mulsf3_pse+0xa0>
    1784:	0c 94 16 0b 	jmp	0x162c	; 0x162c <__fp_inf>
    1788:	0c 94 61 0b 	jmp	0x16c2	; 0x16c2 <__fp_szero>
    178c:	5f 3f       	cpi	r21, 0xFF	; 255
    178e:	e4 f3       	brlt	.-8      	; 0x1788 <__mulsf3_pse+0x84>
    1790:	98 3e       	cpi	r25, 0xE8	; 232
    1792:	d4 f3       	brlt	.-12     	; 0x1788 <__mulsf3_pse+0x84>
    1794:	86 95       	lsr	r24
    1796:	77 95       	ror	r23
    1798:	67 95       	ror	r22
    179a:	b7 95       	ror	r27
    179c:	f7 95       	ror	r31
    179e:	e7 95       	ror	r30
    17a0:	9f 5f       	subi	r25, 0xFF	; 255
    17a2:	c1 f7       	brne	.-16     	; 0x1794 <__mulsf3_pse+0x90>
    17a4:	fe 2b       	or	r31, r30
    17a6:	88 0f       	add	r24, r24
    17a8:	91 1d       	adc	r25, r1
    17aa:	96 95       	lsr	r25
    17ac:	87 95       	ror	r24
    17ae:	97 f9       	bld	r25, 7
    17b0:	08 95       	ret

000017b2 <__unordsf2>:
    17b2:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <__fp_cmp>
    17b6:	88 0b       	sbc	r24, r24
    17b8:	99 0b       	sbc	r25, r25
    17ba:	08 95       	ret

000017bc <initVariant>:
    17bc:	08 95       	ret

000017be <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    17be:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <init>

	initVariant();
    17c2:	0e 94 de 0b 	call	0x17bc	; 0x17bc <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    17c6:	0e 94 a7 00 	call	0x14e	; 0x14e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    17ca:	c0 e0       	ldi	r28, 0x00	; 0
    17cc:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    17ce:	0e 94 5f 04 	call	0x8be	; 0x8be <loop>
		if (serialEventRun) serialEventRun();
    17d2:	20 97       	sbiw	r28, 0x00	; 0
    17d4:	e1 f3       	breq	.-8      	; 0x17ce <main+0x10>
    17d6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    17da:	f9 cf       	rjmp	.-14     	; 0x17ce <main+0x10>

000017dc <nothing>:
#include <avr/pgmspace.h>
#include <stdio.h>

#include "wiring_private.h"

static void nothing(void) {
    17dc:	08 95       	ret

000017de <attachInterrupt>:
#endif
};
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    17de:	82 30       	cpi	r24, 0x02	; 2
    17e0:	e8 f4       	brcc	.+58     	; 0x181c <attachInterrupt+0x3e>
    intFunc[interruptNum] = userFunc;
    17e2:	e8 2f       	mov	r30, r24
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	ee 0f       	add	r30, r30
    17e8:	ff 1f       	adc	r31, r31
    17ea:	ee 5e       	subi	r30, 0xEE	; 238
    17ec:	fe 4f       	sbci	r31, 0xFE	; 254
    17ee:	71 83       	std	Z+1, r23	; 0x01
    17f0:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    17f2:	81 30       	cpi	r24, 0x01	; 1
    17f4:	41 f0       	breq	.+16     	; 0x1806 <attachInterrupt+0x28>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    17f6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    17fa:	8c 7f       	andi	r24, 0xFC	; 252
    17fc:	48 2b       	or	r20, r24
    17fe:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
      EIMSK |= (1 << INT0);
    1802:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
    1804:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    1806:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    180a:	83 7f       	andi	r24, 0xF3	; 243
    180c:	44 0f       	add	r20, r20
    180e:	55 1f       	adc	r21, r21
    1810:	44 0f       	add	r20, r20
    1812:	55 1f       	adc	r21, r21
    1814:	48 2b       	or	r20, r24
    1816:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
      EIMSK |= (1 << INT1);
    181a:	e9 9a       	sbi	0x1d, 1	; 29
    181c:	08 95       	ret

0000181e <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    181e:	82 30       	cpi	r24, 0x02	; 2
    1820:	78 f4       	brcc	.+30     	; 0x1840 <detachInterrupt+0x22>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    1822:	81 30       	cpi	r24, 0x01	; 1
    1824:	11 f0       	breq	.+4      	; 0x182a <detachInterrupt+0xc>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
    1826:	e8 98       	cbi	0x1d, 0	; 29
    #elif defined(GIMSK) && defined(INT0)
      GIMSK &= ~(1 << INT0);
    #else
      #error detachInterrupt not finished for this cpu
    #endif
      break;
    1828:	01 c0       	rjmp	.+2      	; 0x182c <detachInterrupt+0xe>

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
    182a:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    182c:	e8 2f       	mov	r30, r24
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	ee 0f       	add	r30, r30
    1832:	ff 1f       	adc	r31, r31
    1834:	ee 5e       	subi	r30, 0xEE	; 238
    1836:	fe 4f       	sbci	r31, 0xFE	; 254
    1838:	8e ee       	ldi	r24, 0xEE	; 238
    183a:	9b e0       	ldi	r25, 0x0B	; 11
    183c:	91 83       	std	Z+1, r25	; 0x01
    183e:	80 83       	st	Z, r24
    1840:	08 95       	ret

00001842 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    1842:	1f 92       	push	r1
    1844:	0f 92       	push	r0
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	0f 92       	push	r0
    184a:	11 24       	eor	r1, r1
    184c:	2f 93       	push	r18
    184e:	3f 93       	push	r19
    1850:	4f 93       	push	r20
    1852:	5f 93       	push	r21
    1854:	6f 93       	push	r22
    1856:	7f 93       	push	r23
    1858:	8f 93       	push	r24
    185a:	9f 93       	push	r25
    185c:	af 93       	push	r26
    185e:	bf 93       	push	r27
    1860:	ef 93       	push	r30
    1862:	ff 93       	push	r31
    1864:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <intFunc>
    1868:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <intFunc+0x1>
    186c:	09 95       	icall
    186e:	ff 91       	pop	r31
    1870:	ef 91       	pop	r30
    1872:	bf 91       	pop	r27
    1874:	af 91       	pop	r26
    1876:	9f 91       	pop	r25
    1878:	8f 91       	pop	r24
    187a:	7f 91       	pop	r23
    187c:	6f 91       	pop	r22
    187e:	5f 91       	pop	r21
    1880:	4f 91       	pop	r20
    1882:	3f 91       	pop	r19
    1884:	2f 91       	pop	r18
    1886:	0f 90       	pop	r0
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	0f 90       	pop	r0
    188c:	1f 90       	pop	r1
    188e:	18 95       	reti

00001890 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    1890:	1f 92       	push	r1
    1892:	0f 92       	push	r0
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	0f 92       	push	r0
    1898:	11 24       	eor	r1, r1
    189a:	2f 93       	push	r18
    189c:	3f 93       	push	r19
    189e:	4f 93       	push	r20
    18a0:	5f 93       	push	r21
    18a2:	6f 93       	push	r22
    18a4:	7f 93       	push	r23
    18a6:	8f 93       	push	r24
    18a8:	9f 93       	push	r25
    18aa:	af 93       	push	r26
    18ac:	bf 93       	push	r27
    18ae:	ef 93       	push	r30
    18b0:	ff 93       	push	r31
    18b2:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <intFunc+0x2>
    18b6:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <intFunc+0x3>
    18ba:	09 95       	icall
    18bc:	ff 91       	pop	r31
    18be:	ef 91       	pop	r30
    18c0:	bf 91       	pop	r27
    18c2:	af 91       	pop	r26
    18c4:	9f 91       	pop	r25
    18c6:	8f 91       	pop	r24
    18c8:	7f 91       	pop	r23
    18ca:	6f 91       	pop	r22
    18cc:	5f 91       	pop	r21
    18ce:	4f 91       	pop	r20
    18d0:	3f 91       	pop	r19
    18d2:	2f 91       	pop	r18
    18d4:	0f 90       	pop	r0
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	0f 90       	pop	r0
    18da:	1f 90       	pop	r1
    18dc:	18 95       	reti

000018de <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    18de:	1f 92       	push	r1
    18e0:	0f 92       	push	r0
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	0f 92       	push	r0
    18e6:	11 24       	eor	r1, r1
    18e8:	2f 93       	push	r18
    18ea:	3f 93       	push	r19
    18ec:	8f 93       	push	r24
    18ee:	9f 93       	push	r25
    18f0:	af 93       	push	r26
    18f2:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    18f4:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <timer0_millis>
    18f8:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <timer0_millis+0x1>
    18fc:	a0 91 5d 02 	lds	r26, 0x025D	; 0x80025d <timer0_millis+0x2>
    1900:	b0 91 5e 02 	lds	r27, 0x025E	; 0x80025e <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    1904:	30 91 5a 02 	lds	r19, 0x025A	; 0x80025a <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    1908:	26 e0       	ldi	r18, 0x06	; 6
    190a:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    190c:	2d 37       	cpi	r18, 0x7D	; 125
    190e:	20 f4       	brcc	.+8      	; 0x1918 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1910:	02 96       	adiw	r24, 0x02	; 2
    1912:	a1 1d       	adc	r26, r1
    1914:	b1 1d       	adc	r27, r1
    1916:	05 c0       	rjmp	.+10     	; 0x1922 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1918:	29 e8       	ldi	r18, 0x89	; 137
    191a:	23 0f       	add	r18, r19
		m += 1;
    191c:	03 96       	adiw	r24, 0x03	; 3
    191e:	a1 1d       	adc	r26, r1
    1920:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1922:	20 93 5a 02 	sts	0x025A, r18	; 0x80025a <timer0_fract>
	timer0_millis = m;
    1926:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <timer0_millis>
    192a:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <timer0_millis+0x1>
    192e:	a0 93 5d 02 	sts	0x025D, r26	; 0x80025d <timer0_millis+0x2>
    1932:	b0 93 5e 02 	sts	0x025E, r27	; 0x80025e <timer0_millis+0x3>
	timer0_overflow_count++;
    1936:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <timer0_overflow_count>
    193a:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <timer0_overflow_count+0x1>
    193e:	a0 91 61 02 	lds	r26, 0x0261	; 0x800261 <timer0_overflow_count+0x2>
    1942:	b0 91 62 02 	lds	r27, 0x0262	; 0x800262 <timer0_overflow_count+0x3>
    1946:	01 96       	adiw	r24, 0x01	; 1
    1948:	a1 1d       	adc	r26, r1
    194a:	b1 1d       	adc	r27, r1
    194c:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <timer0_overflow_count>
    1950:	90 93 60 02 	sts	0x0260, r25	; 0x800260 <timer0_overflow_count+0x1>
    1954:	a0 93 61 02 	sts	0x0261, r26	; 0x800261 <timer0_overflow_count+0x2>
    1958:	b0 93 62 02 	sts	0x0262, r27	; 0x800262 <timer0_overflow_count+0x3>
}
    195c:	bf 91       	pop	r27
    195e:	af 91       	pop	r26
    1960:	9f 91       	pop	r25
    1962:	8f 91       	pop	r24
    1964:	3f 91       	pop	r19
    1966:	2f 91       	pop	r18
    1968:	0f 90       	pop	r0
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	0f 90       	pop	r0
    196e:	1f 90       	pop	r1
    1970:	18 95       	reti

00001972 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    1972:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1974:	f8 94       	cli
	m = timer0_millis;
    1976:	60 91 5b 02 	lds	r22, 0x025B	; 0x80025b <timer0_millis>
    197a:	70 91 5c 02 	lds	r23, 0x025C	; 0x80025c <timer0_millis+0x1>
    197e:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <timer0_millis+0x2>
    1982:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <timer0_millis+0x3>
	SREG = oldSREG;
    1986:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    1988:	08 95       	ret

0000198a <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    198a:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    198c:	f8 94       	cli
	m = timer0_overflow_count;
    198e:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <timer0_overflow_count>
    1992:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <timer0_overflow_count+0x1>
    1996:	a0 91 61 02 	lds	r26, 0x0261	; 0x800261 <timer0_overflow_count+0x2>
    199a:	b0 91 62 02 	lds	r27, 0x0262	; 0x800262 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    199e:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    19a0:	a8 9b       	sbis	0x15, 0	; 21
    19a2:	05 c0       	rjmp	.+10     	; 0x19ae <micros+0x24>
    19a4:	2f 3f       	cpi	r18, 0xFF	; 255
    19a6:	19 f0       	breq	.+6      	; 0x19ae <micros+0x24>
		m++;
    19a8:	01 96       	adiw	r24, 0x01	; 1
    19aa:	a1 1d       	adc	r26, r1
    19ac:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    19ae:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    19b0:	ba 2f       	mov	r27, r26
    19b2:	a9 2f       	mov	r26, r25
    19b4:	98 2f       	mov	r25, r24
    19b6:	88 27       	eor	r24, r24
    19b8:	82 0f       	add	r24, r18
    19ba:	91 1d       	adc	r25, r1
    19bc:	a1 1d       	adc	r26, r1
    19be:	b1 1d       	adc	r27, r1
    19c0:	bc 01       	movw	r22, r24
    19c2:	cd 01       	movw	r24, r26
    19c4:	43 e0       	ldi	r20, 0x03	; 3
    19c6:	66 0f       	add	r22, r22
    19c8:	77 1f       	adc	r23, r23
    19ca:	88 1f       	adc	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	4a 95       	dec	r20
    19d0:	d1 f7       	brne	.-12     	; 0x19c6 <micros+0x3c>
}
    19d2:	08 95       	ret

000019d4 <delay>:

void delay(unsigned long ms)
{
    19d4:	8f 92       	push	r8
    19d6:	9f 92       	push	r9
    19d8:	af 92       	push	r10
    19da:	bf 92       	push	r11
    19dc:	cf 92       	push	r12
    19de:	df 92       	push	r13
    19e0:	ef 92       	push	r14
    19e2:	ff 92       	push	r15
    19e4:	6b 01       	movw	r12, r22
    19e6:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    19e8:	0e 94 c5 0c 	call	0x198a	; 0x198a <micros>
    19ec:	4b 01       	movw	r8, r22
    19ee:	5c 01       	movw	r10, r24

	while (ms > 0) {
    19f0:	c1 14       	cp	r12, r1
    19f2:	d1 04       	cpc	r13, r1
    19f4:	e1 04       	cpc	r14, r1
    19f6:	f1 04       	cpc	r15, r1
    19f8:	01 f1       	breq	.+64     	; 0x1a3a <delay+0x66>
		yield();
    19fa:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    19fe:	0e 94 c5 0c 	call	0x198a	; 0x198a <micros>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	88 19       	sub	r24, r8
    1a08:	99 09       	sbc	r25, r9
    1a0a:	aa 09       	sbc	r26, r10
    1a0c:	bb 09       	sbc	r27, r11
    1a0e:	88 3e       	cpi	r24, 0xE8	; 232
    1a10:	93 40       	sbci	r25, 0x03	; 3
    1a12:	a1 05       	cpc	r26, r1
    1a14:	b1 05       	cpc	r27, r1
    1a16:	60 f3       	brcs	.-40     	; 0x19f0 <delay+0x1c>
			ms--;
    1a18:	21 e0       	ldi	r18, 0x01	; 1
    1a1a:	c2 1a       	sub	r12, r18
    1a1c:	d1 08       	sbc	r13, r1
    1a1e:	e1 08       	sbc	r14, r1
    1a20:	f1 08       	sbc	r15, r1
			start += 1000;
    1a22:	88 ee       	ldi	r24, 0xE8	; 232
    1a24:	88 0e       	add	r8, r24
    1a26:	83 e0       	ldi	r24, 0x03	; 3
    1a28:	98 1e       	adc	r9, r24
    1a2a:	a1 1c       	adc	r10, r1
    1a2c:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    1a2e:	c1 14       	cp	r12, r1
    1a30:	d1 04       	cpc	r13, r1
    1a32:	e1 04       	cpc	r14, r1
    1a34:	f1 04       	cpc	r15, r1
    1a36:	19 f7       	brne	.-58     	; 0x19fe <delay+0x2a>
    1a38:	db cf       	rjmp	.-74     	; 0x19f0 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    1a3a:	ff 90       	pop	r15
    1a3c:	ef 90       	pop	r14
    1a3e:	df 90       	pop	r13
    1a40:	cf 90       	pop	r12
    1a42:	bf 90       	pop	r11
    1a44:	af 90       	pop	r10
    1a46:	9f 90       	pop	r9
    1a48:	8f 90       	pop	r8
    1a4a:	08 95       	ret

00001a4c <delayMicroseconds>:
#elif F_CPU >= 8000000L
	// for the 8 MHz internal clock

	// for a 1 and 2 microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 2us
	if (us <= 2) return; //  = 3 cycles, (4 when true)
    1a4c:	83 30       	cpi	r24, 0x03	; 3
    1a4e:	91 05       	cpc	r25, r1
    1a50:	28 f0       	brcs	.+10     	; 0x1a5c <delayMicroseconds+0x10>

	// the following loop takes 1/2 of a microsecond (4 cycles)
	// per iteration, so execute it twice for each microsecond of
	// delay requested.
	us <<= 1; //x2 us, = 2 cycles
    1a52:	88 0f       	add	r24, r24
    1a54:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 17 (19) cycles above, remove 4, (4*4=16)
	// us is at least 6 so we can substract 4
	us -= 4; // = 2 cycles
    1a56:	04 97       	sbiw	r24, 0x04	; 4
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	f1 f7       	brne	.-4      	; 0x1a58 <delayMicroseconds+0xc>
    1a5c:	08 95       	ret

00001a5e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1a5e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1a60:	84 b5       	in	r24, 0x24	; 36
    1a62:	82 60       	ori	r24, 0x02	; 2
    1a64:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1a66:	84 b5       	in	r24, 0x24	; 36
    1a68:	81 60       	ori	r24, 0x01	; 1
    1a6a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1a6c:	85 b5       	in	r24, 0x25	; 37
    1a6e:	82 60       	ori	r24, 0x02	; 2
    1a70:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1a72:	85 b5       	in	r24, 0x25	; 37
    1a74:	81 60       	ori	r24, 0x01	; 1
    1a76:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1a78:	ee e6       	ldi	r30, 0x6E	; 110
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	80 81       	ld	r24, Z
    1a7e:	81 60       	ori	r24, 0x01	; 1
    1a80:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1a82:	e1 e8       	ldi	r30, 0x81	; 129
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1a88:	80 81       	ld	r24, Z
    1a8a:	82 60       	ori	r24, 0x02	; 2
    1a8c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1a8e:	80 81       	ld	r24, Z
    1a90:	81 60       	ori	r24, 0x01	; 1
    1a92:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1a94:	e0 e8       	ldi	r30, 0x80	; 128
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	81 60       	ori	r24, 0x01	; 1
    1a9c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1a9e:	e1 eb       	ldi	r30, 0xB1	; 177
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	84 60       	ori	r24, 0x04	; 4
    1aa6:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1aa8:	e0 eb       	ldi	r30, 0xB0	; 176
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	81 60       	ori	r24, 0x01	; 1
    1ab0:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1ab2:	ea e7       	ldi	r30, 0x7A	; 122
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	84 60       	ori	r24, 0x04	; 4
    1aba:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1abc:	80 81       	ld	r24, Z
    1abe:	82 60       	ori	r24, 0x02	; 2
    1ac0:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS0);
    1ac2:	80 81       	ld	r24, Z
    1ac4:	8e 7f       	andi	r24, 0xFE	; 254
    1ac6:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1ac8:	80 81       	ld	r24, Z
    1aca:	80 68       	ori	r24, 0x80	; 128
    1acc:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1ace:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1ad2:	08 95       	ret

00001ad4 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1ad4:	83 30       	cpi	r24, 0x03	; 3
    1ad6:	81 f0       	breq	.+32     	; 0x1af8 <turnOffPWM+0x24>
    1ad8:	28 f4       	brcc	.+10     	; 0x1ae4 <turnOffPWM+0x10>
    1ada:	81 30       	cpi	r24, 0x01	; 1
    1adc:	99 f0       	breq	.+38     	; 0x1b04 <turnOffPWM+0x30>
    1ade:	82 30       	cpi	r24, 0x02	; 2
    1ae0:	a1 f0       	breq	.+40     	; 0x1b0a <turnOffPWM+0x36>
    1ae2:	08 95       	ret
    1ae4:	87 30       	cpi	r24, 0x07	; 7
    1ae6:	a9 f0       	breq	.+42     	; 0x1b12 <turnOffPWM+0x3e>
    1ae8:	88 30       	cpi	r24, 0x08	; 8
    1aea:	b9 f0       	breq	.+46     	; 0x1b1a <turnOffPWM+0x46>
    1aec:	84 30       	cpi	r24, 0x04	; 4
    1aee:	d1 f4       	brne	.+52     	; 0x1b24 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1af0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1af4:	8f 7d       	andi	r24, 0xDF	; 223
    1af6:	03 c0       	rjmp	.+6      	; 0x1afe <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1af8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1afc:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1afe:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1b02:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1b04:	84 b5       	in	r24, 0x24	; 36
    1b06:	8f 77       	andi	r24, 0x7F	; 127
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1b0a:	84 b5       	in	r24, 0x24	; 36
    1b0c:	8f 7d       	andi	r24, 0xDF	; 223
    1b0e:	84 bd       	out	0x24, r24	; 36
    1b10:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1b12:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1b16:	8f 77       	andi	r24, 0x7F	; 127
    1b18:	03 c0       	rjmp	.+6      	; 0x1b20 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1b1a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1b1e:	8f 7d       	andi	r24, 0xDF	; 223
    1b20:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1b24:	08 95       	ret

00001b26 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1b26:	cf 93       	push	r28
    1b28:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	fc 01       	movw	r30, r24
    1b2e:	ee 54       	subi	r30, 0x4E	; 78
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1b34:	fc 01       	movw	r30, r24
    1b36:	ea 53       	subi	r30, 0x3A	; 58
    1b38:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1b3c:	88 23       	and	r24, r24
    1b3e:	61 f1       	breq	.+88     	; 0x1b98 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	88 0f       	add	r24, r24
    1b44:	99 1f       	adc	r25, r25
    1b46:	fc 01       	movw	r30, r24
    1b48:	e2 51       	subi	r30, 0x12	; 18
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	c5 91       	lpm	r28, Z+
    1b4e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1b50:	fc 01       	movw	r30, r24
    1b52:	ec 51       	subi	r30, 0x1C	; 28
    1b54:	ff 4f       	sbci	r31, 0xFF	; 255
    1b56:	a5 91       	lpm	r26, Z+
    1b58:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1b5a:	61 11       	cpse	r22, r1
    1b5c:	09 c0       	rjmp	.+18     	; 0x1b70 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1b5e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1b60:	f8 94       	cli
		*reg &= ~bit;
    1b62:	88 81       	ld	r24, Y
    1b64:	20 95       	com	r18
    1b66:	82 23       	and	r24, r18
    1b68:	88 83       	st	Y, r24
		*out &= ~bit;
    1b6a:	ec 91       	ld	r30, X
    1b6c:	2e 23       	and	r18, r30
    1b6e:	0b c0       	rjmp	.+22     	; 0x1b86 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1b70:	62 30       	cpi	r22, 0x02	; 2
    1b72:	61 f4       	brne	.+24     	; 0x1b8c <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1b74:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1b76:	f8 94       	cli
		*reg &= ~bit;
    1b78:	88 81       	ld	r24, Y
    1b7a:	32 2f       	mov	r19, r18
    1b7c:	30 95       	com	r19
    1b7e:	83 23       	and	r24, r19
    1b80:	88 83       	st	Y, r24
		*out |= bit;
    1b82:	ec 91       	ld	r30, X
    1b84:	2e 2b       	or	r18, r30
    1b86:	2c 93       	st	X, r18
		SREG = oldSREG;
    1b88:	9f bf       	out	0x3f, r25	; 63
    1b8a:	06 c0       	rjmp	.+12     	; 0x1b98 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1b8c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1b8e:	f8 94       	cli
		*reg |= bit;
    1b90:	e8 81       	ld	r30, Y
    1b92:	2e 2b       	or	r18, r30
    1b94:	28 83       	st	Y, r18
		SREG = oldSREG;
    1b96:	8f bf       	out	0x3f, r24	; 63
	}
}
    1b98:	df 91       	pop	r29
    1b9a:	cf 91       	pop	r28
    1b9c:	08 95       	ret

00001b9e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1b9e:	1f 93       	push	r17
    1ba0:	cf 93       	push	r28
    1ba2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1ba4:	28 2f       	mov	r18, r24
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	f9 01       	movw	r30, r18
    1baa:	e2 56       	subi	r30, 0x62	; 98
    1bac:	ff 4f       	sbci	r31, 0xFF	; 255
    1bae:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1bb0:	f9 01       	movw	r30, r18
    1bb2:	ee 54       	subi	r30, 0x4E	; 78
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1bb8:	f9 01       	movw	r30, r18
    1bba:	ea 53       	subi	r30, 0x3A	; 58
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1bc0:	cc 23       	and	r28, r28
    1bc2:	c1 f0       	breq	.+48     	; 0x1bf4 <digitalWrite+0x56>
    1bc4:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1bc6:	81 11       	cpse	r24, r1
    1bc8:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <turnOffPWM>

	out = portOutputRegister(port);
    1bcc:	ec 2f       	mov	r30, r28
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	ee 0f       	add	r30, r30
    1bd2:	ff 1f       	adc	r31, r31
    1bd4:	ec 51       	subi	r30, 0x1C	; 28
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	a5 91       	lpm	r26, Z+
    1bda:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1bdc:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1bde:	f8 94       	cli

	if (val == LOW) {
    1be0:	11 11       	cpse	r17, r1
    1be2:	04 c0       	rjmp	.+8      	; 0x1bec <digitalWrite+0x4e>
		*out &= ~bit;
    1be4:	8c 91       	ld	r24, X
    1be6:	d0 95       	com	r29
    1be8:	d8 23       	and	r29, r24
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1bec:	ec 91       	ld	r30, X
    1bee:	de 2b       	or	r29, r30
    1bf0:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1bf2:	9f bf       	out	0x3f, r25	; 63
}
    1bf4:	df 91       	pop	r29
    1bf6:	cf 91       	pop	r28
    1bf8:	1f 91       	pop	r17
    1bfa:	08 95       	ret

00001bfc <_ZN6StringD1Ev>:
{
	init();
	char buf[1 + 8 * sizeof(unsigned int)];
	utoa(value, buf, base);
	*this = buf;
}
    1bfc:	fc 01       	movw	r30, r24
    1bfe:	80 81       	ld	r24, Z
    1c00:	91 81       	ldd	r25, Z+1	; 0x01
    1c02:	0c 94 b9 0f 	jmp	0x1f72	; 0x1f72 <free>

00001c06 <_ZN6String10invalidateEv>:
    1c06:	cf 93       	push	r28
    1c08:	df 93       	push	r29
    1c0a:	ec 01       	movw	r28, r24
    1c0c:	88 81       	ld	r24, Y
    1c0e:	99 81       	ldd	r25, Y+1	; 0x01
    1c10:	00 97       	sbiw	r24, 0x00	; 0
    1c12:	11 f0       	breq	.+4      	; 0x1c18 <_ZN6String10invalidateEv+0x12>
    1c14:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <free>
    1c18:	19 82       	std	Y+1, r1	; 0x01
    1c1a:	18 82       	st	Y, r1
    1c1c:	1d 82       	std	Y+5, r1	; 0x05
    1c1e:	1c 82       	std	Y+4, r1	; 0x04
    1c20:	1b 82       	std	Y+3, r1	; 0x03
    1c22:	1a 82       	std	Y+2, r1	; 0x02
    1c24:	df 91       	pop	r29
    1c26:	cf 91       	pop	r28
    1c28:	08 95       	ret

00001c2a <_ZN6String12changeBufferEj>:
    1c2a:	0f 93       	push	r16
    1c2c:	1f 93       	push	r17
    1c2e:	cf 93       	push	r28
    1c30:	df 93       	push	r29
    1c32:	ec 01       	movw	r28, r24
    1c34:	8b 01       	movw	r16, r22
    1c36:	6f 5f       	subi	r22, 0xFF	; 255
    1c38:	7f 4f       	sbci	r23, 0xFF	; 255
    1c3a:	88 81       	ld	r24, Y
    1c3c:	99 81       	ldd	r25, Y+1	; 0x01
    1c3e:	0e 94 42 10 	call	0x2084	; 0x2084 <realloc>
    1c42:	00 97       	sbiw	r24, 0x00	; 0
    1c44:	31 f0       	breq	.+12     	; 0x1c52 <_ZN6String12changeBufferEj+0x28>
    1c46:	99 83       	std	Y+1, r25	; 0x01
    1c48:	88 83       	st	Y, r24
    1c4a:	1b 83       	std	Y+3, r17	; 0x03
    1c4c:	0a 83       	std	Y+2, r16	; 0x02
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	01 c0       	rjmp	.+2      	; 0x1c54 <_ZN6String12changeBufferEj+0x2a>
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28
    1c58:	1f 91       	pop	r17
    1c5a:	0f 91       	pop	r16
    1c5c:	08 95       	ret

00001c5e <_ZN6String7reserveEj>:
    1c5e:	cf 93       	push	r28
    1c60:	df 93       	push	r29
    1c62:	ec 01       	movw	r28, r24
    1c64:	88 81       	ld	r24, Y
    1c66:	99 81       	ldd	r25, Y+1	; 0x01
    1c68:	89 2b       	or	r24, r25
    1c6a:	29 f0       	breq	.+10     	; 0x1c76 <_ZN6String7reserveEj+0x18>
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c70:	86 17       	cp	r24, r22
    1c72:	97 07       	cpc	r25, r23
    1c74:	60 f4       	brcc	.+24     	; 0x1c8e <_ZN6String7reserveEj+0x30>
    1c76:	ce 01       	movw	r24, r28
    1c78:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <_ZN6String12changeBufferEj>
    1c7c:	88 23       	and	r24, r24
    1c7e:	41 f0       	breq	.+16     	; 0x1c90 <_ZN6String7reserveEj+0x32>
    1c80:	8c 81       	ldd	r24, Y+4	; 0x04
    1c82:	9d 81       	ldd	r25, Y+5	; 0x05
    1c84:	89 2b       	or	r24, r25
    1c86:	19 f4       	brne	.+6      	; 0x1c8e <_ZN6String7reserveEj+0x30>
    1c88:	e8 81       	ld	r30, Y
    1c8a:	f9 81       	ldd	r31, Y+1	; 0x01
    1c8c:	10 82       	st	Z, r1
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	df 91       	pop	r29
    1c92:	cf 91       	pop	r28
    1c94:	08 95       	ret

00001c96 <_ZN6String4copyEPKcj>:
    1c96:	ef 92       	push	r14
    1c98:	ff 92       	push	r15
    1c9a:	0f 93       	push	r16
    1c9c:	1f 93       	push	r17
    1c9e:	cf 93       	push	r28
    1ca0:	df 93       	push	r29
    1ca2:	ec 01       	movw	r28, r24
    1ca4:	7b 01       	movw	r14, r22
    1ca6:	8a 01       	movw	r16, r20
    1ca8:	ba 01       	movw	r22, r20
    1caa:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <_ZN6String7reserveEj>
    1cae:	81 11       	cpse	r24, r1
    1cb0:	04 c0       	rjmp	.+8      	; 0x1cba <_ZN6String4copyEPKcj+0x24>
    1cb2:	ce 01       	movw	r24, r28
    1cb4:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <_ZN6String10invalidateEv>
    1cb8:	07 c0       	rjmp	.+14     	; 0x1cc8 <_ZN6String4copyEPKcj+0x32>
    1cba:	1d 83       	std	Y+5, r17	; 0x05
    1cbc:	0c 83       	std	Y+4, r16	; 0x04
    1cbe:	b7 01       	movw	r22, r14
    1cc0:	88 81       	ld	r24, Y
    1cc2:	99 81       	ldd	r25, Y+1	; 0x01
    1cc4:	0e 94 41 11 	call	0x2282	; 0x2282 <strcpy>
    1cc8:	ce 01       	movw	r24, r28
    1cca:	df 91       	pop	r29
    1ccc:	cf 91       	pop	r28
    1cce:	1f 91       	pop	r17
    1cd0:	0f 91       	pop	r16
    1cd2:	ff 90       	pop	r15
    1cd4:	ef 90       	pop	r14
    1cd6:	08 95       	ret

00001cd8 <_ZN6StringC1EPKc>:
    1cd8:	fc 01       	movw	r30, r24
    1cda:	11 82       	std	Z+1, r1	; 0x01
    1cdc:	10 82       	st	Z, r1
    1cde:	13 82       	std	Z+3, r1	; 0x03
    1ce0:	12 82       	std	Z+2, r1	; 0x02
    1ce2:	15 82       	std	Z+5, r1	; 0x05
    1ce4:	14 82       	std	Z+4, r1	; 0x04
    1ce6:	61 15       	cp	r22, r1
    1ce8:	71 05       	cpc	r23, r1
    1cea:	51 f0       	breq	.+20     	; 0x1d00 <_ZN6StringC1EPKc+0x28>
    1cec:	fb 01       	movw	r30, r22
    1cee:	01 90       	ld	r0, Z+
    1cf0:	00 20       	and	r0, r0
    1cf2:	e9 f7       	brne	.-6      	; 0x1cee <_ZN6StringC1EPKc+0x16>
    1cf4:	31 97       	sbiw	r30, 0x01	; 1
    1cf6:	af 01       	movw	r20, r30
    1cf8:	46 1b       	sub	r20, r22
    1cfa:	57 0b       	sbc	r21, r23
    1cfc:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <_ZN6String4copyEPKcj>
    1d00:	08 95       	ret

00001d02 <_ZN6StringaSEPKc>:
    1d02:	cf 93       	push	r28
    1d04:	df 93       	push	r29
    1d06:	ec 01       	movw	r28, r24
    1d08:	61 15       	cp	r22, r1
    1d0a:	71 05       	cpc	r23, r1
    1d0c:	59 f0       	breq	.+22     	; 0x1d24 <_ZN6StringaSEPKc+0x22>
    1d0e:	fb 01       	movw	r30, r22
    1d10:	01 90       	ld	r0, Z+
    1d12:	00 20       	and	r0, r0
    1d14:	e9 f7       	brne	.-6      	; 0x1d10 <_ZN6StringaSEPKc+0xe>
    1d16:	31 97       	sbiw	r30, 0x01	; 1
    1d18:	af 01       	movw	r20, r30
    1d1a:	46 1b       	sub	r20, r22
    1d1c:	57 0b       	sbc	r21, r23
    1d1e:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <_ZN6String4copyEPKcj>
    1d22:	02 c0       	rjmp	.+4      	; 0x1d28 <_ZN6StringaSEPKc+0x26>
    1d24:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <_ZN6String10invalidateEv>
    1d28:	ce 01       	movw	r24, r28
    1d2a:	df 91       	pop	r29
    1d2c:	cf 91       	pop	r28
    1d2e:	08 95       	ret

00001d30 <_ZN6StringC1Elh>:

String::String(long value, unsigned char base)
    1d30:	0f 93       	push	r16
    1d32:	1f 93       	push	r17
    1d34:	cf 93       	push	r28
    1d36:	df 93       	push	r29
    1d38:	cd b7       	in	r28, 0x3d	; 61
    1d3a:	de b7       	in	r29, 0x3e	; 62
    1d3c:	a2 97       	sbiw	r28, 0x22	; 34
    1d3e:	0f b6       	in	r0, 0x3f	; 63
    1d40:	f8 94       	cli
    1d42:	de bf       	out	0x3e, r29	; 62
    1d44:	0f be       	out	0x3f, r0	; 63
    1d46:	cd bf       	out	0x3d, r28	; 61
    1d48:	8c 01       	movw	r16, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	ba 01       	movw	r22, r20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    1d4e:	f8 01       	movw	r30, r16
    1d50:	11 82       	std	Z+1, r1	; 0x01
    1d52:	10 82       	st	Z, r1
	capacity = 0;
    1d54:	13 82       	std	Z+3, r1	; 0x03
    1d56:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    1d58:	15 82       	std	Z+5, r1	; 0x05
    1d5a:	14 82       	std	Z+4, r1	; 0x04
extern __inline__ __ATTR_GNU_INLINE__
char *ltoa (long __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__ltoa (long, char *, int);
	return __ltoa (__val, __s, __radix);
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	ae 01       	movw	r20, r28
    1d60:	4f 5f       	subi	r20, 0xFF	; 255
    1d62:	5f 4f       	sbci	r21, 0xFF	; 255
    1d64:	0e 94 48 11 	call	0x2290	; 0x2290 <ltoa>
String::String(long value, unsigned char base)
{
	init();
	char buf[2 + 8 * sizeof(long)];
	ltoa(value, buf, base);
	*this = buf;
    1d68:	be 01       	movw	r22, r28
    1d6a:	6f 5f       	subi	r22, 0xFF	; 255
    1d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6e:	c8 01       	movw	r24, r16
    1d70:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <_ZN6StringaSEPKc>
}
    1d74:	a2 96       	adiw	r28, 0x22	; 34
    1d76:	0f b6       	in	r0, 0x3f	; 63
    1d78:	f8 94       	cli
    1d7a:	de bf       	out	0x3e, r29	; 62
    1d7c:	0f be       	out	0x3f, r0	; 63
    1d7e:	cd bf       	out	0x3d, r28	; 61
    1d80:	df 91       	pop	r29
    1d82:	cf 91       	pop	r28
    1d84:	1f 91       	pop	r17
    1d86:	0f 91       	pop	r16
    1d88:	08 95       	ret

00001d8a <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1d8a:	08 95       	ret

00001d8c <__udivmodhi4>:
    1d8c:	aa 1b       	sub	r26, r26
    1d8e:	bb 1b       	sub	r27, r27
    1d90:	51 e1       	ldi	r21, 0x11	; 17
    1d92:	07 c0       	rjmp	.+14     	; 0x1da2 <__udivmodhi4_ep>

00001d94 <__udivmodhi4_loop>:
    1d94:	aa 1f       	adc	r26, r26
    1d96:	bb 1f       	adc	r27, r27
    1d98:	a6 17       	cp	r26, r22
    1d9a:	b7 07       	cpc	r27, r23
    1d9c:	10 f0       	brcs	.+4      	; 0x1da2 <__udivmodhi4_ep>
    1d9e:	a6 1b       	sub	r26, r22
    1da0:	b7 0b       	sbc	r27, r23

00001da2 <__udivmodhi4_ep>:
    1da2:	88 1f       	adc	r24, r24
    1da4:	99 1f       	adc	r25, r25
    1da6:	5a 95       	dec	r21
    1da8:	a9 f7       	brne	.-22     	; 0x1d94 <__udivmodhi4_loop>
    1daa:	80 95       	com	r24
    1dac:	90 95       	com	r25
    1dae:	bc 01       	movw	r22, r24
    1db0:	cd 01       	movw	r24, r26
    1db2:	08 95       	ret

00001db4 <__divmodsi4>:
    1db4:	05 2e       	mov	r0, r21
    1db6:	97 fb       	bst	r25, 7
    1db8:	1e f4       	brtc	.+6      	; 0x1dc0 <__divmodsi4+0xc>
    1dba:	00 94       	com	r0
    1dbc:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <__negsi2>
    1dc0:	57 fd       	sbrc	r21, 7
    1dc2:	07 d0       	rcall	.+14     	; 0x1dd2 <__divmodsi4_neg2>
    1dc4:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <__udivmodsi4>
    1dc8:	07 fc       	sbrc	r0, 7
    1dca:	03 d0       	rcall	.+6      	; 0x1dd2 <__divmodsi4_neg2>
    1dcc:	4e f4       	brtc	.+18     	; 0x1de0 <__divmodsi4_exit>
    1dce:	0c 94 f1 0e 	jmp	0x1de2	; 0x1de2 <__negsi2>

00001dd2 <__divmodsi4_neg2>:
    1dd2:	50 95       	com	r21
    1dd4:	40 95       	com	r20
    1dd6:	30 95       	com	r19
    1dd8:	21 95       	neg	r18
    1dda:	3f 4f       	sbci	r19, 0xFF	; 255
    1ddc:	4f 4f       	sbci	r20, 0xFF	; 255
    1dde:	5f 4f       	sbci	r21, 0xFF	; 255

00001de0 <__divmodsi4_exit>:
    1de0:	08 95       	ret

00001de2 <__negsi2>:
    1de2:	90 95       	com	r25
    1de4:	80 95       	com	r24
    1de6:	70 95       	com	r23
    1de8:	61 95       	neg	r22
    1dea:	7f 4f       	sbci	r23, 0xFF	; 255
    1dec:	8f 4f       	sbci	r24, 0xFF	; 255
    1dee:	9f 4f       	sbci	r25, 0xFF	; 255
    1df0:	08 95       	ret

00001df2 <__udivmodsi4>:
    1df2:	a1 e2       	ldi	r26, 0x21	; 33
    1df4:	1a 2e       	mov	r1, r26
    1df6:	aa 1b       	sub	r26, r26
    1df8:	bb 1b       	sub	r27, r27
    1dfa:	fd 01       	movw	r30, r26
    1dfc:	0d c0       	rjmp	.+26     	; 0x1e18 <__udivmodsi4_ep>

00001dfe <__udivmodsi4_loop>:
    1dfe:	aa 1f       	adc	r26, r26
    1e00:	bb 1f       	adc	r27, r27
    1e02:	ee 1f       	adc	r30, r30
    1e04:	ff 1f       	adc	r31, r31
    1e06:	a2 17       	cp	r26, r18
    1e08:	b3 07       	cpc	r27, r19
    1e0a:	e4 07       	cpc	r30, r20
    1e0c:	f5 07       	cpc	r31, r21
    1e0e:	20 f0       	brcs	.+8      	; 0x1e18 <__udivmodsi4_ep>
    1e10:	a2 1b       	sub	r26, r18
    1e12:	b3 0b       	sbc	r27, r19
    1e14:	e4 0b       	sbc	r30, r20
    1e16:	f5 0b       	sbc	r31, r21

00001e18 <__udivmodsi4_ep>:
    1e18:	66 1f       	adc	r22, r22
    1e1a:	77 1f       	adc	r23, r23
    1e1c:	88 1f       	adc	r24, r24
    1e1e:	99 1f       	adc	r25, r25
    1e20:	1a 94       	dec	r1
    1e22:	69 f7       	brne	.-38     	; 0x1dfe <__udivmodsi4_loop>
    1e24:	60 95       	com	r22
    1e26:	70 95       	com	r23
    1e28:	80 95       	com	r24
    1e2a:	90 95       	com	r25
    1e2c:	9b 01       	movw	r18, r22
    1e2e:	ac 01       	movw	r20, r24
    1e30:	bd 01       	movw	r22, r26
    1e32:	cf 01       	movw	r24, r30
    1e34:	08 95       	ret

00001e36 <__tablejump2__>:
    1e36:	ee 0f       	add	r30, r30
    1e38:	ff 1f       	adc	r31, r31
    1e3a:	05 90       	lpm	r0, Z+
    1e3c:	f4 91       	lpm	r31, Z
    1e3e:	e0 2d       	mov	r30, r0
    1e40:	09 94       	ijmp

00001e42 <malloc>:
    1e42:	0f 93       	push	r16
    1e44:	1f 93       	push	r17
    1e46:	cf 93       	push	r28
    1e48:	df 93       	push	r29
    1e4a:	82 30       	cpi	r24, 0x02	; 2
    1e4c:	91 05       	cpc	r25, r1
    1e4e:	10 f4       	brcc	.+4      	; 0x1e54 <malloc+0x12>
    1e50:	82 e0       	ldi	r24, 0x02	; 2
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	e0 91 65 02 	lds	r30, 0x0265	; 0x800265 <__flp>
    1e58:	f0 91 66 02 	lds	r31, 0x0266	; 0x800266 <__flp+0x1>
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	a0 e0       	ldi	r26, 0x00	; 0
    1e62:	b0 e0       	ldi	r27, 0x00	; 0
    1e64:	30 97       	sbiw	r30, 0x00	; 0
    1e66:	19 f1       	breq	.+70     	; 0x1eae <malloc+0x6c>
    1e68:	40 81       	ld	r20, Z
    1e6a:	51 81       	ldd	r21, Z+1	; 0x01
    1e6c:	02 81       	ldd	r16, Z+2	; 0x02
    1e6e:	13 81       	ldd	r17, Z+3	; 0x03
    1e70:	48 17       	cp	r20, r24
    1e72:	59 07       	cpc	r21, r25
    1e74:	c8 f0       	brcs	.+50     	; 0x1ea8 <malloc+0x66>
    1e76:	84 17       	cp	r24, r20
    1e78:	95 07       	cpc	r25, r21
    1e7a:	69 f4       	brne	.+26     	; 0x1e96 <malloc+0x54>
    1e7c:	10 97       	sbiw	r26, 0x00	; 0
    1e7e:	31 f0       	breq	.+12     	; 0x1e8c <malloc+0x4a>
    1e80:	12 96       	adiw	r26, 0x02	; 2
    1e82:	0c 93       	st	X, r16
    1e84:	12 97       	sbiw	r26, 0x02	; 2
    1e86:	13 96       	adiw	r26, 0x03	; 3
    1e88:	1c 93       	st	X, r17
    1e8a:	27 c0       	rjmp	.+78     	; 0x1eda <malloc+0x98>
    1e8c:	00 93 65 02 	sts	0x0265, r16	; 0x800265 <__flp>
    1e90:	10 93 66 02 	sts	0x0266, r17	; 0x800266 <__flp+0x1>
    1e94:	22 c0       	rjmp	.+68     	; 0x1eda <malloc+0x98>
    1e96:	21 15       	cp	r18, r1
    1e98:	31 05       	cpc	r19, r1
    1e9a:	19 f0       	breq	.+6      	; 0x1ea2 <malloc+0x60>
    1e9c:	42 17       	cp	r20, r18
    1e9e:	53 07       	cpc	r21, r19
    1ea0:	18 f4       	brcc	.+6      	; 0x1ea8 <malloc+0x66>
    1ea2:	9a 01       	movw	r18, r20
    1ea4:	bd 01       	movw	r22, r26
    1ea6:	ef 01       	movw	r28, r30
    1ea8:	df 01       	movw	r26, r30
    1eaa:	f8 01       	movw	r30, r16
    1eac:	db cf       	rjmp	.-74     	; 0x1e64 <malloc+0x22>
    1eae:	21 15       	cp	r18, r1
    1eb0:	31 05       	cpc	r19, r1
    1eb2:	f9 f0       	breq	.+62     	; 0x1ef2 <malloc+0xb0>
    1eb4:	28 1b       	sub	r18, r24
    1eb6:	39 0b       	sbc	r19, r25
    1eb8:	24 30       	cpi	r18, 0x04	; 4
    1eba:	31 05       	cpc	r19, r1
    1ebc:	80 f4       	brcc	.+32     	; 0x1ede <malloc+0x9c>
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec2:	61 15       	cp	r22, r1
    1ec4:	71 05       	cpc	r23, r1
    1ec6:	21 f0       	breq	.+8      	; 0x1ed0 <malloc+0x8e>
    1ec8:	fb 01       	movw	r30, r22
    1eca:	93 83       	std	Z+3, r25	; 0x03
    1ecc:	82 83       	std	Z+2, r24	; 0x02
    1ece:	04 c0       	rjmp	.+8      	; 0x1ed8 <malloc+0x96>
    1ed0:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <__flp+0x1>
    1ed4:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <__flp>
    1ed8:	fe 01       	movw	r30, r28
    1eda:	32 96       	adiw	r30, 0x02	; 2
    1edc:	44 c0       	rjmp	.+136    	; 0x1f66 <malloc+0x124>
    1ede:	fe 01       	movw	r30, r28
    1ee0:	e2 0f       	add	r30, r18
    1ee2:	f3 1f       	adc	r31, r19
    1ee4:	81 93       	st	Z+, r24
    1ee6:	91 93       	st	Z+, r25
    1ee8:	22 50       	subi	r18, 0x02	; 2
    1eea:	31 09       	sbc	r19, r1
    1eec:	39 83       	std	Y+1, r19	; 0x01
    1eee:	28 83       	st	Y, r18
    1ef0:	3a c0       	rjmp	.+116    	; 0x1f66 <malloc+0x124>
    1ef2:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <__brkval>
    1ef6:	30 91 64 02 	lds	r19, 0x0264	; 0x800264 <__brkval+0x1>
    1efa:	23 2b       	or	r18, r19
    1efc:	41 f4       	brne	.+16     	; 0x1f0e <malloc+0xcc>
    1efe:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1f02:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1f06:	30 93 64 02 	sts	0x0264, r19	; 0x800264 <__brkval+0x1>
    1f0a:	20 93 63 02 	sts	0x0263, r18	; 0x800263 <__brkval>
    1f0e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1f12:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1f16:	21 15       	cp	r18, r1
    1f18:	31 05       	cpc	r19, r1
    1f1a:	41 f4       	brne	.+16     	; 0x1f2c <malloc+0xea>
    1f1c:	2d b7       	in	r18, 0x3d	; 61
    1f1e:	3e b7       	in	r19, 0x3e	; 62
    1f20:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1f24:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1f28:	24 1b       	sub	r18, r20
    1f2a:	35 0b       	sbc	r19, r21
    1f2c:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <__brkval>
    1f30:	f0 91 64 02 	lds	r31, 0x0264	; 0x800264 <__brkval+0x1>
    1f34:	e2 17       	cp	r30, r18
    1f36:	f3 07       	cpc	r31, r19
    1f38:	a0 f4       	brcc	.+40     	; 0x1f62 <malloc+0x120>
    1f3a:	2e 1b       	sub	r18, r30
    1f3c:	3f 0b       	sbc	r19, r31
    1f3e:	28 17       	cp	r18, r24
    1f40:	39 07       	cpc	r19, r25
    1f42:	78 f0       	brcs	.+30     	; 0x1f62 <malloc+0x120>
    1f44:	ac 01       	movw	r20, r24
    1f46:	4e 5f       	subi	r20, 0xFE	; 254
    1f48:	5f 4f       	sbci	r21, 0xFF	; 255
    1f4a:	24 17       	cp	r18, r20
    1f4c:	35 07       	cpc	r19, r21
    1f4e:	48 f0       	brcs	.+18     	; 0x1f62 <malloc+0x120>
    1f50:	4e 0f       	add	r20, r30
    1f52:	5f 1f       	adc	r21, r31
    1f54:	50 93 64 02 	sts	0x0264, r21	; 0x800264 <__brkval+0x1>
    1f58:	40 93 63 02 	sts	0x0263, r20	; 0x800263 <__brkval>
    1f5c:	81 93       	st	Z+, r24
    1f5e:	91 93       	st	Z+, r25
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <malloc+0x124>
    1f62:	e0 e0       	ldi	r30, 0x00	; 0
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	cf 01       	movw	r24, r30
    1f68:	df 91       	pop	r29
    1f6a:	cf 91       	pop	r28
    1f6c:	1f 91       	pop	r17
    1f6e:	0f 91       	pop	r16
    1f70:	08 95       	ret

00001f72 <free>:
    1f72:	cf 93       	push	r28
    1f74:	df 93       	push	r29
    1f76:	00 97       	sbiw	r24, 0x00	; 0
    1f78:	09 f4       	brne	.+2      	; 0x1f7c <free+0xa>
    1f7a:	81 c0       	rjmp	.+258    	; 0x207e <free+0x10c>
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	32 97       	sbiw	r30, 0x02	; 2
    1f80:	13 82       	std	Z+3, r1	; 0x03
    1f82:	12 82       	std	Z+2, r1	; 0x02
    1f84:	a0 91 65 02 	lds	r26, 0x0265	; 0x800265 <__flp>
    1f88:	b0 91 66 02 	lds	r27, 0x0266	; 0x800266 <__flp+0x1>
    1f8c:	10 97       	sbiw	r26, 0x00	; 0
    1f8e:	81 f4       	brne	.+32     	; 0x1fb0 <free+0x3e>
    1f90:	20 81       	ld	r18, Z
    1f92:	31 81       	ldd	r19, Z+1	; 0x01
    1f94:	82 0f       	add	r24, r18
    1f96:	93 1f       	adc	r25, r19
    1f98:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <__brkval>
    1f9c:	30 91 64 02 	lds	r19, 0x0264	; 0x800264 <__brkval+0x1>
    1fa0:	28 17       	cp	r18, r24
    1fa2:	39 07       	cpc	r19, r25
    1fa4:	51 f5       	brne	.+84     	; 0x1ffa <free+0x88>
    1fa6:	f0 93 64 02 	sts	0x0264, r31	; 0x800264 <__brkval+0x1>
    1faa:	e0 93 63 02 	sts	0x0263, r30	; 0x800263 <__brkval>
    1fae:	67 c0       	rjmp	.+206    	; 0x207e <free+0x10c>
    1fb0:	ed 01       	movw	r28, r26
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	ce 17       	cp	r28, r30
    1fb8:	df 07       	cpc	r29, r31
    1fba:	40 f4       	brcc	.+16     	; 0x1fcc <free+0x5a>
    1fbc:	4a 81       	ldd	r20, Y+2	; 0x02
    1fbe:	5b 81       	ldd	r21, Y+3	; 0x03
    1fc0:	9e 01       	movw	r18, r28
    1fc2:	41 15       	cp	r20, r1
    1fc4:	51 05       	cpc	r21, r1
    1fc6:	f1 f0       	breq	.+60     	; 0x2004 <free+0x92>
    1fc8:	ea 01       	movw	r28, r20
    1fca:	f5 cf       	rjmp	.-22     	; 0x1fb6 <free+0x44>
    1fcc:	d3 83       	std	Z+3, r29	; 0x03
    1fce:	c2 83       	std	Z+2, r28	; 0x02
    1fd0:	40 81       	ld	r20, Z
    1fd2:	51 81       	ldd	r21, Z+1	; 0x01
    1fd4:	84 0f       	add	r24, r20
    1fd6:	95 1f       	adc	r25, r21
    1fd8:	c8 17       	cp	r28, r24
    1fda:	d9 07       	cpc	r29, r25
    1fdc:	59 f4       	brne	.+22     	; 0x1ff4 <free+0x82>
    1fde:	88 81       	ld	r24, Y
    1fe0:	99 81       	ldd	r25, Y+1	; 0x01
    1fe2:	84 0f       	add	r24, r20
    1fe4:	95 1f       	adc	r25, r21
    1fe6:	02 96       	adiw	r24, 0x02	; 2
    1fe8:	91 83       	std	Z+1, r25	; 0x01
    1fea:	80 83       	st	Z, r24
    1fec:	8a 81       	ldd	r24, Y+2	; 0x02
    1fee:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff0:	93 83       	std	Z+3, r25	; 0x03
    1ff2:	82 83       	std	Z+2, r24	; 0x02
    1ff4:	21 15       	cp	r18, r1
    1ff6:	31 05       	cpc	r19, r1
    1ff8:	29 f4       	brne	.+10     	; 0x2004 <free+0x92>
    1ffa:	f0 93 66 02 	sts	0x0266, r31	; 0x800266 <__flp+0x1>
    1ffe:	e0 93 65 02 	sts	0x0265, r30	; 0x800265 <__flp>
    2002:	3d c0       	rjmp	.+122    	; 0x207e <free+0x10c>
    2004:	e9 01       	movw	r28, r18
    2006:	fb 83       	std	Y+3, r31	; 0x03
    2008:	ea 83       	std	Y+2, r30	; 0x02
    200a:	49 91       	ld	r20, Y+
    200c:	59 91       	ld	r21, Y+
    200e:	c4 0f       	add	r28, r20
    2010:	d5 1f       	adc	r29, r21
    2012:	ec 17       	cp	r30, r28
    2014:	fd 07       	cpc	r31, r29
    2016:	61 f4       	brne	.+24     	; 0x2030 <free+0xbe>
    2018:	80 81       	ld	r24, Z
    201a:	91 81       	ldd	r25, Z+1	; 0x01
    201c:	84 0f       	add	r24, r20
    201e:	95 1f       	adc	r25, r21
    2020:	02 96       	adiw	r24, 0x02	; 2
    2022:	e9 01       	movw	r28, r18
    2024:	99 83       	std	Y+1, r25	; 0x01
    2026:	88 83       	st	Y, r24
    2028:	82 81       	ldd	r24, Z+2	; 0x02
    202a:	93 81       	ldd	r25, Z+3	; 0x03
    202c:	9b 83       	std	Y+3, r25	; 0x03
    202e:	8a 83       	std	Y+2, r24	; 0x02
    2030:	e0 e0       	ldi	r30, 0x00	; 0
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	12 96       	adiw	r26, 0x02	; 2
    2036:	8d 91       	ld	r24, X+
    2038:	9c 91       	ld	r25, X
    203a:	13 97       	sbiw	r26, 0x03	; 3
    203c:	00 97       	sbiw	r24, 0x00	; 0
    203e:	19 f0       	breq	.+6      	; 0x2046 <free+0xd4>
    2040:	fd 01       	movw	r30, r26
    2042:	dc 01       	movw	r26, r24
    2044:	f7 cf       	rjmp	.-18     	; 0x2034 <free+0xc2>
    2046:	8d 91       	ld	r24, X+
    2048:	9c 91       	ld	r25, X
    204a:	11 97       	sbiw	r26, 0x01	; 1
    204c:	9d 01       	movw	r18, r26
    204e:	2e 5f       	subi	r18, 0xFE	; 254
    2050:	3f 4f       	sbci	r19, 0xFF	; 255
    2052:	82 0f       	add	r24, r18
    2054:	93 1f       	adc	r25, r19
    2056:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <__brkval>
    205a:	30 91 64 02 	lds	r19, 0x0264	; 0x800264 <__brkval+0x1>
    205e:	28 17       	cp	r18, r24
    2060:	39 07       	cpc	r19, r25
    2062:	69 f4       	brne	.+26     	; 0x207e <free+0x10c>
    2064:	30 97       	sbiw	r30, 0x00	; 0
    2066:	29 f4       	brne	.+10     	; 0x2072 <free+0x100>
    2068:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <__flp+0x1>
    206c:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <__flp>
    2070:	02 c0       	rjmp	.+4      	; 0x2076 <free+0x104>
    2072:	13 82       	std	Z+3, r1	; 0x03
    2074:	12 82       	std	Z+2, r1	; 0x02
    2076:	b0 93 64 02 	sts	0x0264, r27	; 0x800264 <__brkval+0x1>
    207a:	a0 93 63 02 	sts	0x0263, r26	; 0x800263 <__brkval>
    207e:	df 91       	pop	r29
    2080:	cf 91       	pop	r28
    2082:	08 95       	ret

00002084 <realloc>:
    2084:	a0 e0       	ldi	r26, 0x00	; 0
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	e8 e4       	ldi	r30, 0x48	; 72
    208a:	f0 e1       	ldi	r31, 0x10	; 16
    208c:	0c 94 f5 11 	jmp	0x23ea	; 0x23ea <__prologue_saves__+0x8>
    2090:	ec 01       	movw	r28, r24
    2092:	00 97       	sbiw	r24, 0x00	; 0
    2094:	21 f4       	brne	.+8      	; 0x209e <realloc+0x1a>
    2096:	cb 01       	movw	r24, r22
    2098:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <malloc>
    209c:	b4 c0       	rjmp	.+360    	; 0x2206 <realloc+0x182>
    209e:	fc 01       	movw	r30, r24
    20a0:	e6 0f       	add	r30, r22
    20a2:	f7 1f       	adc	r31, r23
    20a4:	9c 01       	movw	r18, r24
    20a6:	22 50       	subi	r18, 0x02	; 2
    20a8:	31 09       	sbc	r19, r1
    20aa:	e2 17       	cp	r30, r18
    20ac:	f3 07       	cpc	r31, r19
    20ae:	08 f4       	brcc	.+2      	; 0x20b2 <realloc+0x2e>
    20b0:	a8 c0       	rjmp	.+336    	; 0x2202 <realloc+0x17e>
    20b2:	d9 01       	movw	r26, r18
    20b4:	0d 91       	ld	r16, X+
    20b6:	1c 91       	ld	r17, X
    20b8:	11 97       	sbiw	r26, 0x01	; 1
    20ba:	06 17       	cp	r16, r22
    20bc:	17 07       	cpc	r17, r23
    20be:	b0 f0       	brcs	.+44     	; 0x20ec <realloc+0x68>
    20c0:	05 30       	cpi	r16, 0x05	; 5
    20c2:	11 05       	cpc	r17, r1
    20c4:	08 f4       	brcc	.+2      	; 0x20c8 <realloc+0x44>
    20c6:	9b c0       	rjmp	.+310    	; 0x21fe <realloc+0x17a>
    20c8:	c8 01       	movw	r24, r16
    20ca:	04 97       	sbiw	r24, 0x04	; 4
    20cc:	86 17       	cp	r24, r22
    20ce:	97 07       	cpc	r25, r23
    20d0:	08 f4       	brcc	.+2      	; 0x20d4 <realloc+0x50>
    20d2:	95 c0       	rjmp	.+298    	; 0x21fe <realloc+0x17a>
    20d4:	02 50       	subi	r16, 0x02	; 2
    20d6:	11 09       	sbc	r17, r1
    20d8:	06 1b       	sub	r16, r22
    20da:	17 0b       	sbc	r17, r23
    20dc:	01 93       	st	Z+, r16
    20de:	11 93       	st	Z+, r17
    20e0:	6d 93       	st	X+, r22
    20e2:	7c 93       	st	X, r23
    20e4:	cf 01       	movw	r24, r30
    20e6:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <free>
    20ea:	89 c0       	rjmp	.+274    	; 0x21fe <realloc+0x17a>
    20ec:	5b 01       	movw	r10, r22
    20ee:	a0 1a       	sub	r10, r16
    20f0:	b1 0a       	sbc	r11, r17
    20f2:	4c 01       	movw	r8, r24
    20f4:	80 0e       	add	r8, r16
    20f6:	91 1e       	adc	r9, r17
    20f8:	a0 91 65 02 	lds	r26, 0x0265	; 0x800265 <__flp>
    20fc:	b0 91 66 02 	lds	r27, 0x0266	; 0x800266 <__flp+0x1>
    2100:	61 2c       	mov	r6, r1
    2102:	71 2c       	mov	r7, r1
    2104:	e1 2c       	mov	r14, r1
    2106:	f1 2c       	mov	r15, r1
    2108:	10 97       	sbiw	r26, 0x00	; 0
    210a:	09 f4       	brne	.+2      	; 0x210e <realloc+0x8a>
    210c:	46 c0       	rjmp	.+140    	; 0x219a <realloc+0x116>
    210e:	8d 91       	ld	r24, X+
    2110:	9c 91       	ld	r25, X
    2112:	11 97       	sbiw	r26, 0x01	; 1
    2114:	a8 15       	cp	r26, r8
    2116:	b9 05       	cpc	r27, r9
    2118:	b1 f5       	brne	.+108    	; 0x2186 <realloc+0x102>
    211a:	6c 01       	movw	r12, r24
    211c:	42 e0       	ldi	r20, 0x02	; 2
    211e:	c4 0e       	add	r12, r20
    2120:	d1 1c       	adc	r13, r1
    2122:	ca 14       	cp	r12, r10
    2124:	db 04       	cpc	r13, r11
    2126:	78 f1       	brcs	.+94     	; 0x2186 <realloc+0x102>
    2128:	4c 01       	movw	r8, r24
    212a:	8a 18       	sub	r8, r10
    212c:	9b 08       	sbc	r9, r11
    212e:	64 01       	movw	r12, r8
    2130:	42 e0       	ldi	r20, 0x02	; 2
    2132:	c4 0e       	add	r12, r20
    2134:	d1 1c       	adc	r13, r1
    2136:	12 96       	adiw	r26, 0x02	; 2
    2138:	bc 90       	ld	r11, X
    213a:	12 97       	sbiw	r26, 0x02	; 2
    213c:	13 96       	adiw	r26, 0x03	; 3
    213e:	ac 91       	ld	r26, X
    2140:	b5 e0       	ldi	r27, 0x05	; 5
    2142:	cb 16       	cp	r12, r27
    2144:	d1 04       	cpc	r13, r1
    2146:	40 f0       	brcs	.+16     	; 0x2158 <realloc+0xd4>
    2148:	b2 82       	std	Z+2, r11	; 0x02
    214a:	a3 83       	std	Z+3, r26	; 0x03
    214c:	91 82       	std	Z+1, r9	; 0x01
    214e:	80 82       	st	Z, r8
    2150:	d9 01       	movw	r26, r18
    2152:	6d 93       	st	X+, r22
    2154:	7c 93       	st	X, r23
    2156:	09 c0       	rjmp	.+18     	; 0x216a <realloc+0xe6>
    2158:	0e 5f       	subi	r16, 0xFE	; 254
    215a:	1f 4f       	sbci	r17, 0xFF	; 255
    215c:	80 0f       	add	r24, r16
    215e:	91 1f       	adc	r25, r17
    2160:	f9 01       	movw	r30, r18
    2162:	91 83       	std	Z+1, r25	; 0x01
    2164:	80 83       	st	Z, r24
    2166:	eb 2d       	mov	r30, r11
    2168:	fa 2f       	mov	r31, r26
    216a:	e1 14       	cp	r14, r1
    216c:	f1 04       	cpc	r15, r1
    216e:	31 f0       	breq	.+12     	; 0x217c <realloc+0xf8>
    2170:	d7 01       	movw	r26, r14
    2172:	13 96       	adiw	r26, 0x03	; 3
    2174:	fc 93       	st	X, r31
    2176:	ee 93       	st	-X, r30
    2178:	12 97       	sbiw	r26, 0x02	; 2
    217a:	41 c0       	rjmp	.+130    	; 0x21fe <realloc+0x17a>
    217c:	f0 93 66 02 	sts	0x0266, r31	; 0x800266 <__flp+0x1>
    2180:	e0 93 65 02 	sts	0x0265, r30	; 0x800265 <__flp>
    2184:	3c c0       	rjmp	.+120    	; 0x21fe <realloc+0x17a>
    2186:	68 16       	cp	r6, r24
    2188:	79 06       	cpc	r7, r25
    218a:	08 f4       	brcc	.+2      	; 0x218e <realloc+0x10a>
    218c:	3c 01       	movw	r6, r24
    218e:	7d 01       	movw	r14, r26
    2190:	12 96       	adiw	r26, 0x02	; 2
    2192:	0d 90       	ld	r0, X+
    2194:	bc 91       	ld	r27, X
    2196:	a0 2d       	mov	r26, r0
    2198:	b7 cf       	rjmp	.-146    	; 0x2108 <realloc+0x84>
    219a:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <__brkval>
    219e:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <__brkval+0x1>
    21a2:	88 16       	cp	r8, r24
    21a4:	99 06       	cpc	r9, r25
    21a6:	e1 f4       	brne	.+56     	; 0x21e0 <realloc+0x15c>
    21a8:	66 16       	cp	r6, r22
    21aa:	77 06       	cpc	r7, r23
    21ac:	c8 f4       	brcc	.+50     	; 0x21e0 <realloc+0x15c>
    21ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    21b2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    21b6:	00 97       	sbiw	r24, 0x00	; 0
    21b8:	41 f4       	brne	.+16     	; 0x21ca <realloc+0x146>
    21ba:	8d b7       	in	r24, 0x3d	; 61
    21bc:	9e b7       	in	r25, 0x3e	; 62
    21be:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    21c2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    21c6:	84 1b       	sub	r24, r20
    21c8:	95 0b       	sbc	r25, r21
    21ca:	e8 17       	cp	r30, r24
    21cc:	f9 07       	cpc	r31, r25
    21ce:	c8 f4       	brcc	.+50     	; 0x2202 <realloc+0x17e>
    21d0:	f0 93 64 02 	sts	0x0264, r31	; 0x800264 <__brkval+0x1>
    21d4:	e0 93 63 02 	sts	0x0263, r30	; 0x800263 <__brkval>
    21d8:	f9 01       	movw	r30, r18
    21da:	71 83       	std	Z+1, r23	; 0x01
    21dc:	60 83       	st	Z, r22
    21de:	0f c0       	rjmp	.+30     	; 0x21fe <realloc+0x17a>
    21e0:	cb 01       	movw	r24, r22
    21e2:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <malloc>
    21e6:	7c 01       	movw	r14, r24
    21e8:	00 97       	sbiw	r24, 0x00	; 0
    21ea:	59 f0       	breq	.+22     	; 0x2202 <realloc+0x17e>
    21ec:	a8 01       	movw	r20, r16
    21ee:	be 01       	movw	r22, r28
    21f0:	0e 94 38 11 	call	0x2270	; 0x2270 <memcpy>
    21f4:	ce 01       	movw	r24, r28
    21f6:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <free>
    21fa:	c7 01       	movw	r24, r14
    21fc:	04 c0       	rjmp	.+8      	; 0x2206 <realloc+0x182>
    21fe:	ce 01       	movw	r24, r28
    2200:	02 c0       	rjmp	.+4      	; 0x2206 <realloc+0x182>
    2202:	80 e0       	ldi	r24, 0x00	; 0
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
    220a:	ee e0       	ldi	r30, 0x0E	; 14
    220c:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__epilogue_restores__+0x8>

00002210 <atol>:
    2210:	1f 93       	push	r17
    2212:	fc 01       	movw	r30, r24
    2214:	99 27       	eor	r25, r25
    2216:	88 27       	eor	r24, r24
    2218:	bc 01       	movw	r22, r24
    221a:	e8 94       	clt
    221c:	11 91       	ld	r17, Z+
    221e:	10 32       	cpi	r17, 0x20	; 32
    2220:	e9 f3       	breq	.-6      	; 0x221c <atol+0xc>
    2222:	19 30       	cpi	r17, 0x09	; 9
    2224:	10 f0       	brcs	.+4      	; 0x222a <atol+0x1a>
    2226:	1e 30       	cpi	r17, 0x0E	; 14
    2228:	c8 f3       	brcs	.-14     	; 0x221c <atol+0xc>
    222a:	1b 32       	cpi	r17, 0x2B	; 43
    222c:	51 f0       	breq	.+20     	; 0x2242 <atol+0x32>
    222e:	1d 32       	cpi	r17, 0x2D	; 45
    2230:	49 f4       	brne	.+18     	; 0x2244 <atol+0x34>
    2232:	68 94       	set
    2234:	06 c0       	rjmp	.+12     	; 0x2242 <atol+0x32>
    2236:	0e 94 62 11 	call	0x22c4	; 0x22c4 <__mulsi_const_10>
    223a:	61 0f       	add	r22, r17
    223c:	71 1d       	adc	r23, r1
    223e:	81 1d       	adc	r24, r1
    2240:	91 1d       	adc	r25, r1
    2242:	11 91       	ld	r17, Z+
    2244:	10 53       	subi	r17, 0x30	; 48
    2246:	1a 30       	cpi	r17, 0x0A	; 10
    2248:	b0 f3       	brcs	.-20     	; 0x2236 <atol+0x26>
    224a:	3e f4       	brtc	.+14     	; 0x225a <atol+0x4a>
    224c:	90 95       	com	r25
    224e:	80 95       	com	r24
    2250:	70 95       	com	r23
    2252:	61 95       	neg	r22
    2254:	7f 4f       	sbci	r23, 0xFF	; 255
    2256:	8f 4f       	sbci	r24, 0xFF	; 255
    2258:	9f 4f       	sbci	r25, 0xFF	; 255
    225a:	1f 91       	pop	r17
    225c:	08 95       	ret

0000225e <memcpy_P>:
    225e:	fb 01       	movw	r30, r22
    2260:	dc 01       	movw	r26, r24
    2262:	02 c0       	rjmp	.+4      	; 0x2268 <memcpy_P+0xa>
    2264:	05 90       	lpm	r0, Z+
    2266:	0d 92       	st	X+, r0
    2268:	41 50       	subi	r20, 0x01	; 1
    226a:	50 40       	sbci	r21, 0x00	; 0
    226c:	d8 f7       	brcc	.-10     	; 0x2264 <memcpy_P+0x6>
    226e:	08 95       	ret

00002270 <memcpy>:
    2270:	fb 01       	movw	r30, r22
    2272:	dc 01       	movw	r26, r24
    2274:	02 c0       	rjmp	.+4      	; 0x227a <memcpy+0xa>
    2276:	01 90       	ld	r0, Z+
    2278:	0d 92       	st	X+, r0
    227a:	41 50       	subi	r20, 0x01	; 1
    227c:	50 40       	sbci	r21, 0x00	; 0
    227e:	d8 f7       	brcc	.-10     	; 0x2276 <memcpy+0x6>
    2280:	08 95       	ret

00002282 <strcpy>:
    2282:	fb 01       	movw	r30, r22
    2284:	dc 01       	movw	r26, r24
    2286:	01 90       	ld	r0, Z+
    2288:	0d 92       	st	X+, r0
    228a:	00 20       	and	r0, r0
    228c:	e1 f7       	brne	.-8      	; 0x2286 <strcpy+0x4>
    228e:	08 95       	ret

00002290 <ltoa>:
    2290:	25 32       	cpi	r18, 0x25	; 37
    2292:	31 05       	cpc	r19, r1
    2294:	20 f4       	brcc	.+8      	; 0x229e <ltoa+0xe>
    2296:	22 30       	cpi	r18, 0x02	; 2
    2298:	10 f0       	brcs	.+4      	; 0x229e <ltoa+0xe>
    229a:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <__ltoa_ncheck>
    229e:	fa 01       	movw	r30, r20
    22a0:	10 82       	st	Z, r1
    22a2:	ca 01       	movw	r24, r20
    22a4:	08 95       	ret

000022a6 <__ltoa_ncheck>:
    22a6:	bb 27       	eor	r27, r27
    22a8:	2a 30       	cpi	r18, 0x0A	; 10
    22aa:	51 f4       	brne	.+20     	; 0x22c0 <__ltoa_ncheck+0x1a>
    22ac:	99 23       	and	r25, r25
    22ae:	42 f4       	brpl	.+16     	; 0x22c0 <__ltoa_ncheck+0x1a>
    22b0:	bd e2       	ldi	r27, 0x2D	; 45
    22b2:	90 95       	com	r25
    22b4:	80 95       	com	r24
    22b6:	70 95       	com	r23
    22b8:	61 95       	neg	r22
    22ba:	7f 4f       	sbci	r23, 0xFF	; 255
    22bc:	8f 4f       	sbci	r24, 0xFF	; 255
    22be:	9f 4f       	sbci	r25, 0xFF	; 255
    22c0:	0c 94 78 11 	jmp	0x22f0	; 0x22f0 <__ultoa_common>

000022c4 <__mulsi_const_10>:
    22c4:	59 2f       	mov	r21, r25
    22c6:	48 2f       	mov	r20, r24
    22c8:	37 2f       	mov	r19, r23
    22ca:	26 2f       	mov	r18, r22
    22cc:	66 0f       	add	r22, r22
    22ce:	77 1f       	adc	r23, r23
    22d0:	88 1f       	adc	r24, r24
    22d2:	99 1f       	adc	r25, r25
    22d4:	66 0f       	add	r22, r22
    22d6:	77 1f       	adc	r23, r23
    22d8:	88 1f       	adc	r24, r24
    22da:	99 1f       	adc	r25, r25
    22dc:	62 0f       	add	r22, r18
    22de:	73 1f       	adc	r23, r19
    22e0:	84 1f       	adc	r24, r20
    22e2:	95 1f       	adc	r25, r21
    22e4:	66 0f       	add	r22, r22
    22e6:	77 1f       	adc	r23, r23
    22e8:	88 1f       	adc	r24, r24
    22ea:	99 1f       	adc	r25, r25
    22ec:	08 95       	ret

000022ee <__ultoa_ncheck>:
    22ee:	bb 27       	eor	r27, r27

000022f0 <__ultoa_common>:
    22f0:	fa 01       	movw	r30, r20
    22f2:	a6 2f       	mov	r26, r22
    22f4:	62 17       	cp	r22, r18
    22f6:	71 05       	cpc	r23, r1
    22f8:	81 05       	cpc	r24, r1
    22fa:	91 05       	cpc	r25, r1
    22fc:	33 0b       	sbc	r19, r19
    22fe:	30 fb       	bst	r19, 0
    2300:	66 f0       	brts	.+24     	; 0x231a <__ultoa_common+0x2a>
    2302:	aa 27       	eor	r26, r26
    2304:	66 0f       	add	r22, r22
    2306:	77 1f       	adc	r23, r23
    2308:	88 1f       	adc	r24, r24
    230a:	99 1f       	adc	r25, r25
    230c:	aa 1f       	adc	r26, r26
    230e:	a2 17       	cp	r26, r18
    2310:	10 f0       	brcs	.+4      	; 0x2316 <__ultoa_common+0x26>
    2312:	a2 1b       	sub	r26, r18
    2314:	63 95       	inc	r22
    2316:	38 50       	subi	r19, 0x08	; 8
    2318:	a9 f7       	brne	.-22     	; 0x2304 <__ultoa_common+0x14>
    231a:	a0 5d       	subi	r26, 0xD0	; 208
    231c:	aa 33       	cpi	r26, 0x3A	; 58
    231e:	08 f0       	brcs	.+2      	; 0x2322 <__ultoa_common+0x32>
    2320:	a9 5d       	subi	r26, 0xD9	; 217
    2322:	a1 93       	st	Z+, r26
    2324:	36 f7       	brtc	.-52     	; 0x22f2 <__ultoa_common+0x2>
    2326:	b1 11       	cpse	r27, r1
    2328:	b1 93       	st	Z+, r27
    232a:	10 82       	st	Z, r1
    232c:	ca 01       	movw	r24, r20
    232e:	0c 94 99 11 	jmp	0x2332	; 0x2332 <strrev>

00002332 <strrev>:
    2332:	dc 01       	movw	r26, r24
    2334:	fc 01       	movw	r30, r24
    2336:	67 2f       	mov	r22, r23
    2338:	71 91       	ld	r23, Z+
    233a:	77 23       	and	r23, r23
    233c:	e1 f7       	brne	.-8      	; 0x2336 <strrev+0x4>
    233e:	32 97       	sbiw	r30, 0x02	; 2
    2340:	04 c0       	rjmp	.+8      	; 0x234a <strrev+0x18>
    2342:	7c 91       	ld	r23, X
    2344:	6d 93       	st	X+, r22
    2346:	70 83       	st	Z, r23
    2348:	62 91       	ld	r22, -Z
    234a:	ae 17       	cp	r26, r30
    234c:	bf 07       	cpc	r27, r31
    234e:	c8 f3       	brcs	.-14     	; 0x2342 <strrev+0x10>
    2350:	08 95       	ret

00002352 <eeprom_read_block>:
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22

00002356 <eeprom_read_blraw>:
    2356:	fc 01       	movw	r30, r24
    2358:	f9 99       	sbic	0x1f, 1	; 31
    235a:	fe cf       	rjmp	.-4      	; 0x2358 <eeprom_read_blraw+0x2>
    235c:	06 c0       	rjmp	.+12     	; 0x236a <eeprom_read_blraw+0x14>
    235e:	f2 bd       	out	0x22, r31	; 34
    2360:	e1 bd       	out	0x21, r30	; 33
    2362:	f8 9a       	sbi	0x1f, 0	; 31
    2364:	31 96       	adiw	r30, 0x01	; 1
    2366:	00 b4       	in	r0, 0x20	; 32
    2368:	0d 92       	st	X+, r0
    236a:	41 50       	subi	r20, 0x01	; 1
    236c:	50 40       	sbci	r21, 0x00	; 0
    236e:	b8 f7       	brcc	.-18     	; 0x235e <eeprom_read_blraw+0x8>
    2370:	08 95       	ret

00002372 <eeprom_read_byte>:
    2372:	f9 99       	sbic	0x1f, 1	; 31
    2374:	fe cf       	rjmp	.-4      	; 0x2372 <eeprom_read_byte>
    2376:	92 bd       	out	0x22, r25	; 34
    2378:	81 bd       	out	0x21, r24	; 33
    237a:	f8 9a       	sbi	0x1f, 0	; 31
    237c:	99 27       	eor	r25, r25
    237e:	80 b5       	in	r24, 0x20	; 32
    2380:	08 95       	ret

00002382 <eeprom_update_block>:
    2382:	dc 01       	movw	r26, r24
    2384:	a4 0f       	add	r26, r20
    2386:	b5 1f       	adc	r27, r21
    2388:	41 50       	subi	r20, 0x01	; 1
    238a:	50 40       	sbci	r21, 0x00	; 0
    238c:	48 f0       	brcs	.+18     	; 0x23a0 <eeprom_update_block+0x1e>
    238e:	cb 01       	movw	r24, r22
    2390:	84 0f       	add	r24, r20
    2392:	95 1f       	adc	r25, r21
    2394:	2e 91       	ld	r18, -X
    2396:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <eeprom_update_r18>
    239a:	41 50       	subi	r20, 0x01	; 1
    239c:	50 40       	sbci	r21, 0x00	; 0
    239e:	d0 f7       	brcc	.-12     	; 0x2394 <eeprom_update_block+0x12>
    23a0:	08 95       	ret

000023a2 <eeprom_update_byte>:
    23a2:	26 2f       	mov	r18, r22

000023a4 <eeprom_update_r18>:
    23a4:	f9 99       	sbic	0x1f, 1	; 31
    23a6:	fe cf       	rjmp	.-4      	; 0x23a4 <eeprom_update_r18>
    23a8:	92 bd       	out	0x22, r25	; 34
    23aa:	81 bd       	out	0x21, r24	; 33
    23ac:	f8 9a       	sbi	0x1f, 0	; 31
    23ae:	01 97       	sbiw	r24, 0x01	; 1
    23b0:	00 b4       	in	r0, 0x20	; 32
    23b2:	02 16       	cp	r0, r18
    23b4:	39 f0       	breq	.+14     	; 0x23c4 <eeprom_update_r18+0x20>
    23b6:	1f ba       	out	0x1f, r1	; 31
    23b8:	20 bd       	out	0x20, r18	; 32
    23ba:	0f b6       	in	r0, 0x3f	; 63
    23bc:	f8 94       	cli
    23be:	fa 9a       	sbi	0x1f, 2	; 31
    23c0:	f9 9a       	sbi	0x1f, 1	; 31
    23c2:	0f be       	out	0x3f, r0	; 63
    23c4:	08 95       	ret

000023c6 <eeprom_write_byte>:
    23c6:	26 2f       	mov	r18, r22

000023c8 <eeprom_write_r18>:
    23c8:	f9 99       	sbic	0x1f, 1	; 31
    23ca:	fe cf       	rjmp	.-4      	; 0x23c8 <eeprom_write_r18>
    23cc:	1f ba       	out	0x1f, r1	; 31
    23ce:	92 bd       	out	0x22, r25	; 34
    23d0:	81 bd       	out	0x21, r24	; 33
    23d2:	20 bd       	out	0x20, r18	; 32
    23d4:	0f b6       	in	r0, 0x3f	; 63
    23d6:	f8 94       	cli
    23d8:	fa 9a       	sbi	0x1f, 2	; 31
    23da:	f9 9a       	sbi	0x1f, 1	; 31
    23dc:	0f be       	out	0x3f, r0	; 63
    23de:	01 96       	adiw	r24, 0x01	; 1
    23e0:	08 95       	ret

000023e2 <__prologue_saves__>:
    23e2:	2f 92       	push	r2
    23e4:	3f 92       	push	r3
    23e6:	4f 92       	push	r4
    23e8:	5f 92       	push	r5
    23ea:	6f 92       	push	r6
    23ec:	7f 92       	push	r7
    23ee:	8f 92       	push	r8
    23f0:	9f 92       	push	r9
    23f2:	af 92       	push	r10
    23f4:	bf 92       	push	r11
    23f6:	cf 92       	push	r12
    23f8:	df 92       	push	r13
    23fa:	ef 92       	push	r14
    23fc:	ff 92       	push	r15
    23fe:	0f 93       	push	r16
    2400:	1f 93       	push	r17
    2402:	cf 93       	push	r28
    2404:	df 93       	push	r29
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
    240a:	ca 1b       	sub	r28, r26
    240c:	db 0b       	sbc	r29, r27
    240e:	0f b6       	in	r0, 0x3f	; 63
    2410:	f8 94       	cli
    2412:	de bf       	out	0x3e, r29	; 62
    2414:	0f be       	out	0x3f, r0	; 63
    2416:	cd bf       	out	0x3d, r28	; 61
    2418:	09 94       	ijmp

0000241a <__epilogue_restores__>:
    241a:	2a 88       	ldd	r2, Y+18	; 0x12
    241c:	39 88       	ldd	r3, Y+17	; 0x11
    241e:	48 88       	ldd	r4, Y+16	; 0x10
    2420:	5f 84       	ldd	r5, Y+15	; 0x0f
    2422:	6e 84       	ldd	r6, Y+14	; 0x0e
    2424:	7d 84       	ldd	r7, Y+13	; 0x0d
    2426:	8c 84       	ldd	r8, Y+12	; 0x0c
    2428:	9b 84       	ldd	r9, Y+11	; 0x0b
    242a:	aa 84       	ldd	r10, Y+10	; 0x0a
    242c:	b9 84       	ldd	r11, Y+9	; 0x09
    242e:	c8 84       	ldd	r12, Y+8	; 0x08
    2430:	df 80       	ldd	r13, Y+7	; 0x07
    2432:	ee 80       	ldd	r14, Y+6	; 0x06
    2434:	fd 80       	ldd	r15, Y+5	; 0x05
    2436:	0c 81       	ldd	r16, Y+4	; 0x04
    2438:	1b 81       	ldd	r17, Y+3	; 0x03
    243a:	aa 81       	ldd	r26, Y+2	; 0x02
    243c:	b9 81       	ldd	r27, Y+1	; 0x01
    243e:	ce 0f       	add	r28, r30
    2440:	d1 1d       	adc	r29, r1
    2442:	0f b6       	in	r0, 0x3f	; 63
    2444:	f8 94       	cli
    2446:	de bf       	out	0x3e, r29	; 62
    2448:	0f be       	out	0x3f, r0	; 63
    244a:	cd bf       	out	0x3d, r28	; 61
    244c:	ed 01       	movw	r28, r26
    244e:	08 95       	ret

00002450 <_exit>:
    2450:	f8 94       	cli

00002452 <__stop_program>:
    2452:	ff cf       	rjmp	.-2      	; 0x2452 <__stop_program>
