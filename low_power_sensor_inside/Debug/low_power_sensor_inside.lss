
low_power_sensor_inside.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000bc  00800100  00002d30  00002dc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e7  008001bc  008001bc  00002e80  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002e80  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002eb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007e8  00000000  00000000  00002ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dea9  00000000  00000000  000036d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022cb  00000000  00000000  00011581  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000044c7  00000000  00000000  0001384c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001c68  00000000  00000000  00017d14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003620  00000000  00000000  0001997c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a1da  00000000  00000000  0001cf9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007f0  00000000  00000000  00027176  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__ctors_end>
       4:	0c 94 85 10 	jmp	0x210a	; 0x210a <__vector_1>
       8:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <__vector_2>
       c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      10:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      14:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      18:	0c 94 82 09 	jmp	0x1304	; 0x1304 <__vector_6>
      1c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      20:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      24:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      28:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      2c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      30:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      34:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      38:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      3c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      40:	0c 94 d3 10 	jmp	0x21a6	; 0x21a6 <__vector_16>
      44:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      48:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      4c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      50:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      54:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      58:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      5c:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      60:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>
      64:	0c 94 25 01 	jmp	0x24a	; 0x24a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 5e       	subi	r16, 0xE0	; 224
      6a:	bc e2       	ldi	r27, 0x2C	; 44
      6c:	61 3f       	cpi	r22, 0xF1	; 241
      6e:	dd 83       	std	Y+5, r29	; 0x05
      70:	c2 9c       	mul	r12, r2
      72:	7e 20       	and	r7, r14
      74:	a3 fd       	sbrc	r26, 3
      76:	1f 41       	sbci	r17, 0x1F	; 31
      78:	9d c3       	rjmp	.+1850   	; 0x7b4 <_Z20prepare_onewire_datav+0x1f4>
      7a:	21 7f       	andi	r18, 0xF1	; 241
      7c:	fc a2       	std	Y+36, r15	; 0x24
      7e:	40 1e       	adc	r4, r16
      80:	5f 01       	movw	r10, r30
      82:	e3 bd       	out	0x23, r30	; 35
      84:	3e 60       	ori	r19, 0x0E	; 14
      86:	82 dc       	rcall	.-1788   	; 0xfffff98c <__eeprom_end+0xff7ef98c>
      88:	23 7d       	andi	r18, 0xD3	; 211
      8a:	9f c1       	rjmp	.+830    	; 0x3ca <_Z10readEEDatav+0x56>
      8c:	42 1c       	adc	r4, r2
      8e:	fe a0       	ldd	r15, Y+38	; 0x26
      90:	e1 bf       	out	0x31, r30	; 49
      92:	5d 03       	fmul	r21, r21
      94:	80 de       	rcall	.-768    	; 0xfffffd96 <__eeprom_end+0xff7efd96>
      96:	3c 62       	ori	r19, 0x2C	; 44
      98:	be e0       	ldi	r27, 0x0E	; 14
      9a:	02 5c       	subi	r16, 0xC2	; 194
      9c:	df 81       	ldd	r29, Y+7	; 0x07
      9e:	63 3d       	cpi	r22, 0xD3	; 211
      a0:	7c 22       	and	r7, r28
      a2:	c0 9e       	mul	r12, r16
      a4:	1d 43       	sbci	r17, 0x3D	; 61
      a6:	a1 ff       	sbrs	r26, 1
      a8:	46 18       	sub	r4, r6
      aa:	fa a4       	ldd	r15, Y+42	; 0x2a
      ac:	27 79       	andi	r18, 0x97	; 151
      ae:	9b c5       	rjmp	.+2870   	; 0xbe6 <_ZN17DallasTemperature14readScratchPadEPhS0_+0x92>
      b0:	84 da       	rcall	.-2808   	; 0xfffff5ba <__eeprom_end+0xff7ef5ba>
      b2:	38 66       	ori	r19, 0x68	; 104
      b4:	e5 bb       	out	0x15, r30	; 21
      b6:	59 07       	cpc	r21, r25
      b8:	db 85       	ldd	r29, Y+11	; 0x0b
      ba:	67 39       	cpi	r22, 0x97	; 151
      bc:	ba e4       	ldi	r27, 0x4A	; 74
      be:	06 58       	subi	r16, 0x86	; 134
      c0:	19 47       	sbci	r17, 0x79	; 121
      c2:	a5 fb       	bst	r26, 5
      c4:	78 26       	eor	r7, r24
      c6:	c4 9a       	sbi	0x18, 4	; 24
      c8:	65 3b       	cpi	r22, 0xB5	; 181
      ca:	d9 87       	std	Y+9, r29	; 0x09
      cc:	04 5a       	subi	r16, 0xA4	; 164
      ce:	b8 e6       	ldi	r27, 0x68	; 104
      d0:	a7 f9       	bld	r26, 7
      d2:	1b 45       	sbci	r17, 0x5B	; 91
      d4:	c6 98       	cbi	0x18, 6	; 24
      d6:	7a 24       	eor	r7, r10
      d8:	f8 a6       	std	Y+40, r15	; 0x28
      da:	44 1a       	sub	r4, r20
      dc:	99 c7       	rjmp	.+3890   	; 0x1010 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x7e>
      de:	25 7b       	andi	r18, 0xB5	; 181
      e0:	3a 64       	ori	r19, 0x4A	; 74
      e2:	86 d8       	rcall	.-3828   	; 0xfffff1f0 <__eeprom_end+0xff7ef1f0>
      e4:	5b 05       	cpc	r21, r11
      e6:	e7 b9       	out	0x07, r30	; 7
      e8:	8c d2       	rcall	.+1304   	; 0x602 <_Z20prepare_onewire_datav+0x42>
      ea:	30 6e       	ori	r19, 0xE0	; 224
      ec:	ed b3       	in	r30, 0x1d	; 29
      ee:	51 0f       	add	r21, r17
      f0:	4e 10       	cpse	r4, r14
      f2:	f2 ac       	ldd	r15, Z+58	; 0x3a
      f4:	2f 71       	andi	r18, 0x1F	; 31
      f6:	93 cd       	rjmp	.-1242   	; 0xfffffc1e <__eeprom_end+0xff7efc1e>
      f8:	11 4f       	sbci	r17, 0xF1	; 241
      fa:	ad f3       	brhs	.-22     	; 0xe6 <__trampolines_end+0x7e>
      fc:	70 2e       	mov	r7, r16
      fe:	cc 92       	st	X, r12
     100:	d3 8d       	ldd	r29, Z+27	; 0x1b
     102:	6f 31       	cpi	r22, 0x1F	; 31
     104:	b2 ec       	ldi	r27, 0xC2	; 194
     106:	0e 50       	subi	r16, 0x0E	; 14
     108:	af f1       	brie	.+106    	; 0x174 <_ZL5proto+0xc>
     10a:	13 4d       	sbci	r17, 0xD3	; 211
     10c:	ce 90       	ld	r12, -X
     10e:	72 2c       	mov	r7, r2
     110:	6d 33       	cpi	r22, 0x3D	; 61
     112:	d1 8f       	std	Z+25, r29	; 0x19
     114:	0c 52       	subi	r16, 0x2C	; 44
     116:	b0 ee       	ldi	r27, 0xE0	; 224
     118:	32 6c       	ori	r19, 0xC2	; 194
     11a:	8e d0       	rcall	.+284    	; 0x238 <__do_global_ctors+0xc>
     11c:	53 0d       	add	r21, r3
     11e:	ef b1       	in	r30, 0x0f	; 15
     120:	f0 ae       	std	Z+56, r15	; 0x38
     122:	4c 12       	cpse	r4, r28
     124:	91 cf       	rjmp	.-222    	; 0x48 <__SREG__+0x9>
     126:	2d 73       	andi	r18, 0x3D	; 61
     128:	ca 94       	dec	r12
     12a:	76 28       	or	r7, r6
     12c:	ab f5       	brvc	.+106    	; 0x198 <_ZL5proto+0x30>
     12e:	17 49       	sbci	r17, 0x97	; 151
     130:	08 56       	subi	r16, 0x68	; 104
     132:	b4 ea       	ldi	r27, 0xA4	; 164
     134:	69 37       	cpi	r22, 0x79	; 121
     136:	d5 8b       	std	Z+21, r29	; 0x15
     138:	57 09       	sbc	r21, r7
     13a:	eb b5       	in	r30, 0x2b	; 43
     13c:	36 68       	ori	r19, 0x86	; 134
     13e:	8a d4       	rcall	.+2324   	; 0xa54 <loop+0xa4>
     140:	95 cb       	rjmp	.-2262   	; 0xfffff86c <__eeprom_end+0xff7ef86c>
     142:	29 77       	andi	r18, 0x79	; 121
     144:	f4 aa       	std	Z+52, r15	; 0x34
     146:	48 16       	cp	r4, r24
     148:	e9 b7       	in	r30, 0x39	; 57
     14a:	55 0b       	sbc	r21, r21
     14c:	88 d6       	rcall	.+3344   	; 0xe5e <_ZN17DallasTemperature13getResolutionEPh+0x42>
     14e:	34 6a       	ori	r19, 0xA4	; 164
     150:	2b 75       	andi	r18, 0x5B	; 91
     152:	97 c9       	rjmp	.-3282   	; 0xfffff482 <__eeprom_end+0xff7ef482>
     154:	4a 14       	cp	r4, r10
     156:	f6 a8       	ldd	r15, Z+54	; 0x36
     158:	74 2a       	or	r7, r20
     15a:	c8 96       	adiw	r24, 0x38	; 56
     15c:	15 4b       	sbci	r17, 0xB5	; 181
     15e:	a9 f7       	brne	.-22     	; 0x14a <__trampolines_end+0xe2>
     160:	b6 e8       	ldi	r27, 0x86	; 134
     162:	0a 54       	subi	r16, 0x4A	; 74
     164:	d7 89       	ldd	r29, Z+23	; 0x17
     166:	6b 35       	cpi	r22, 0x5B	; 91

00000168 <_ZL5proto>:
     168:	5e 01 01 1f 01 03 03 01 00 8a 02 01 0a 01 02 02     ^...............
     178:	01 00 64 00 1e 47 04 0b 09 06 00 7c 01 01 06 01     ..d..G.....|....
     188:	03 03 01 00 f4 01 06 0e 01 02 02 01 00 c2 01 17     ................
     198:	01 01 02 02 01 01                                   ......

0000019e <digital_pin_to_timer_PGM>:
     19e:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     1ae:	00 00 00 00                                         ....

000001b2 <digital_pin_to_bit_mask_PGM>:
     1b2:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     1c2:	04 08 10 20                                         ... 

000001c6 <digital_pin_to_port_PGM>:
     1c6:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     1d6:	03 03 03 03                                         ....

000001da <port_to_input_PGM>:
     1da:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000001e4 <port_to_output_PGM>:
     1e4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000001ee <port_to_mode_PGM>:
     1ee:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000001f8 <__ctors_start>:
     1f8:	4f 05       	cpc	r20, r15

000001fa <__ctors_end>:
     1fa:	11 24       	eor	r1, r1
     1fc:	1f be       	out	0x3f, r1	; 63
     1fe:	cf ef       	ldi	r28, 0xFF	; 255
     200:	d8 e0       	ldi	r29, 0x08	; 8
     202:	de bf       	out	0x3e, r29	; 62
     204:	cd bf       	out	0x3d, r28	; 61

00000206 <__do_copy_data>:
     206:	11 e0       	ldi	r17, 0x01	; 1
     208:	a0 e0       	ldi	r26, 0x00	; 0
     20a:	b1 e0       	ldi	r27, 0x01	; 1
     20c:	e0 e3       	ldi	r30, 0x30	; 48
     20e:	fd e2       	ldi	r31, 0x2D	; 45
     210:	02 c0       	rjmp	.+4      	; 0x216 <__do_copy_data+0x10>
     212:	05 90       	lpm	r0, Z+
     214:	0d 92       	st	X+, r0
     216:	ac 3b       	cpi	r26, 0xBC	; 188
     218:	b1 07       	cpc	r27, r17
     21a:	d9 f7       	brne	.-10     	; 0x212 <__do_copy_data+0xc>

0000021c <__do_clear_bss>:
     21c:	22 e0       	ldi	r18, 0x02	; 2
     21e:	ac eb       	ldi	r26, 0xBC	; 188
     220:	b1 e0       	ldi	r27, 0x01	; 1
     222:	01 c0       	rjmp	.+2      	; 0x226 <.do_clear_bss_start>

00000224 <.do_clear_bss_loop>:
     224:	1d 92       	st	X+, r1

00000226 <.do_clear_bss_start>:
     226:	a3 3a       	cpi	r26, 0xA3	; 163
     228:	b2 07       	cpc	r27, r18
     22a:	e1 f7       	brne	.-8      	; 0x224 <.do_clear_bss_loop>

0000022c <__do_global_ctors>:
     22c:	10 e0       	ldi	r17, 0x00	; 0
     22e:	cd ef       	ldi	r28, 0xFD	; 253
     230:	d0 e0       	ldi	r29, 0x00	; 0
     232:	04 c0       	rjmp	.+8      	; 0x23c <__do_global_ctors+0x10>
     234:	21 97       	sbiw	r28, 0x01	; 1
     236:	fe 01       	movw	r30, r28
     238:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__tablejump2__>
     23c:	cc 3f       	cpi	r28, 0xFC	; 252
     23e:	d1 07       	cpc	r29, r17
     240:	c9 f7       	brne	.-14     	; 0x234 <__do_global_ctors+0x8>
     242:	0e 94 43 10 	call	0x2086	; 0x2086 <main>
     246:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <_exit>

0000024a <__bad_interrupt>:
     24a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024e <setup>:
	return result;
}


//trace function
void trc(String msg){
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	00 d0       	rcall	.+0      	; 0x256 <setup+0x8>
     256:	00 d0       	rcall	.+0      	; 0x258 <setup+0xa>
     258:	00 d0       	rcall	.+0      	; 0x25a <setup+0xc>
     25a:	cd b7       	in	r28, 0x3d	; 61
     25c:	de b7       	in	r29, 0x3e	; 62
     25e:	10 e0       	ldi	r17, 0x00	; 0
     260:	60 e0       	ldi	r22, 0x00	; 0
     262:	81 2f       	mov	r24, r17
     264:	0e 94 f7 11 	call	0x23ee	; 0x23ee <pinMode>
     268:	60 e0       	ldi	r22, 0x00	; 0
     26a:	81 2f       	mov	r24, r17
     26c:	0e 94 33 12 	call	0x2466	; 0x2466 <digitalWrite>
     270:	1f 5f       	subi	r17, 0xFF	; 255
     272:	14 31       	cpi	r17, 0x14	; 20
     274:	a9 f7       	brne	.-22     	; 0x260 <setup+0x12>
     276:	60 e0       	ldi	r22, 0x00	; 0
     278:	84 e0       	ldi	r24, 0x04	; 4
     27a:	0e 94 f7 11 	call	0x23ee	; 0x23ee <pinMode>
     27e:	61 e0       	ldi	r22, 0x01	; 1
     280:	84 e0       	ldi	r24, 0x04	; 4
     282:	0e 94 f7 11 	call	0x23ee	; 0x23ee <pinMode>
     286:	61 e0       	ldi	r22, 0x01	; 1
     288:	84 e0       	ldi	r24, 0x04	; 4
     28a:	0e 94 33 12 	call	0x2466	; 0x2466 <digitalWrite>
     28e:	60 e0       	ldi	r22, 0x00	; 0
     290:	87 e0       	ldi	r24, 0x07	; 7
     292:	0e 94 f7 11 	call	0x23ee	; 0x23ee <pinMode>
     296:	61 e0       	ldi	r22, 0x01	; 1
     298:	89 e0       	ldi	r24, 0x09	; 9
     29a:	0e 94 f7 11 	call	0x23ee	; 0x23ee <pinMode>
     29e:	61 e0       	ldi	r22, 0x01	; 1
     2a0:	89 e0       	ldi	r24, 0x09	; 9
     2a2:	0e 94 33 12 	call	0x2466	; 0x2466 <digitalWrite>
     2a6:	68 ec       	ldi	r22, 0xC8	; 200
     2a8:	70 e0       	ldi	r23, 0x00	; 0
     2aa:	80 e0       	ldi	r24, 0x00	; 0
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	0e 94 4e 11 	call	0x229c	; 0x229c <delay>
     2b2:	60 e0       	ldi	r22, 0x00	; 0
     2b4:	89 e0       	ldi	r24, 0x09	; 9
     2b6:	0e 94 33 12 	call	0x2466	; 0x2466 <digitalWrite>
     2ba:	60 e0       	ldi	r22, 0x00	; 0
     2bc:	89 e0       	ldi	r24, 0x09	; 9
     2be:	0e 94 f7 11 	call	0x23ee	; 0x23ee <pinMode>
     2c2:	88 e5       	ldi	r24, 0x58	; 88
     2c4:	92 e0       	ldi	r25, 0x02	; 2
     2c6:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <SleepTimer+0x1>
     2ca:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <SleepTimer>
     2ce:	66 e2       	ldi	r22, 0x26	; 38
     2d0:	71 e0       	ldi	r23, 0x01	; 1
     2d2:	ce 01       	movw	r24, r28
     2d4:	01 96       	adiw	r24, 0x01	; 1
     2d6:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN6StringC1EPKc>
     2da:	ce 01       	movw	r24, r28
     2dc:	01 96       	adiw	r24, 0x01	; 1
     2de:	0e 94 62 12 	call	0x24c4	; 0x24c4 <_ZN6StringD1Ev>
     2e2:	8c e0       	ldi	r24, 0x0C	; 12
     2e4:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <__data_end>
     2e8:	26 96       	adiw	r28, 0x06	; 6
     2ea:	0f b6       	in	r0, 0x3f	; 63
     2ec:	f8 94       	cli
     2ee:	de bf       	out	0x3e, r29	; 62
     2f0:	0f be       	out	0x3f, r0	; 63
     2f2:	cd bf       	out	0x3d, r28	; 61
     2f4:	df 91       	pop	r29
     2f6:	cf 91       	pop	r28
     2f8:	1f 91       	pop	r17
     2fa:	08 95       	ret

000002fc <_Z12sleepSecondsi>:
     2fc:	0f 93       	push	r16
     2fe:	1f 93       	push	r17
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
     304:	97 fd       	sbrc	r25, 7
     306:	07 96       	adiw	r24, 0x07	; 7
     308:	ec 01       	movw	r28, r24
     30a:	83 e0       	ldi	r24, 0x03	; 3
     30c:	d5 95       	asr	r29
     30e:	c7 95       	ror	r28
     310:	8a 95       	dec	r24
     312:	e1 f7       	brne	.-8      	; 0x30c <_Z12sleepSecondsi+0x10>
     314:	00 e0       	ldi	r16, 0x00	; 0
     316:	10 e0       	ldi	r17, 0x00	; 0
     318:	0c 17       	cp	r16, r28
     31a:	1d 07       	cpc	r17, r29
     31c:	54 f4       	brge	.+20     	; 0x332 <_Z12sleepSecondsi+0x36>
     31e:	20 e0       	ldi	r18, 0x00	; 0
     320:	40 e0       	ldi	r20, 0x00	; 0
     322:	69 e0       	ldi	r22, 0x09	; 9
     324:	8d ef       	ldi	r24, 0xFD	; 253
     326:	91 e0       	ldi	r25, 0x01	; 1
     328:	0e 94 38 09 	call	0x1270	; 0x1270 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t>
     32c:	0f 5f       	subi	r16, 0xFF	; 255
     32e:	1f 4f       	sbci	r17, 0xFF	; 255
     330:	f3 cf       	rjmp	.-26     	; 0x318 <_Z12sleepSecondsi+0x1c>
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	1f 91       	pop	r17
     338:	0f 91       	pop	r16
     33a:	08 95       	ret

0000033c <_Z19checkForFreshEEpromv>:
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <eeprom_read_byte>
     344:	81 50       	subi	r24, 0x01	; 1
     346:	8e 3f       	cpi	r24, 0xFE	; 254
     348:	50 f0       	brcs	.+20     	; 0x35e <_Z19checkForFreshEEpromv+0x22>
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ee_address>
     350:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <fresh_eeprom>
     354:	61 e0       	ldi	r22, 0x01	; 1
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	0c 94 51 16 	jmp	0x2ca2	; 0x2ca2 <eeprom_write_byte>
     35e:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <__data_end>
     362:	89 9f       	mul	r24, r25
     364:	80 2d       	mov	r24, r0
     366:	11 24       	eor	r1, r1
     368:	8f 5f       	subi	r24, 0xFF	; 255
     36a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ee_address>
     36e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <fresh_eeprom>
     372:	08 95       	ret

00000374 <_Z10readEEDatav>:
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	2c 97       	sbiw	r28, 0x0c	; 12
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	f8 94       	cli
     382:	de bf       	out	0x3e, r29	; 62
     384:	0f be       	out	0x3f, r0	; 63
     386:	cd bf       	out	0x3d, r28	; 61
     388:	0e 94 9e 01 	call	0x33c	; 0x33c <_Z19checkForFreshEEpromv>
     38c:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <ee_address>
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	4c e0       	ldi	r20, 0x0C	; 12
     394:	50 e0       	ldi	r21, 0x00	; 0
     396:	ce 01       	movw	r24, r28
     398:	01 96       	adiw	r24, 0x01	; 1
     39a:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <eeprom_read_block>
     39e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <fresh_eeprom>
     3a2:	88 23       	and	r24, r24
     3a4:	81 f0       	breq	.+32     	; 0x3c6 <_Z10readEEDatav+0x52>
     3a6:	1a 82       	std	Y+2, r1	; 0x02
     3a8:	19 82       	std	Y+1, r1	; 0x01
     3aa:	1c 86       	std	Y+12, r1	; 0x0c
     3ac:	1b 86       	std	Y+11, r1	; 0x0b
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	a0 ec       	ldi	r26, 0xC0	; 192
     3b4:	bf e7       	ldi	r27, 0x7F	; 127
     3b6:	8b 83       	std	Y+3, r24	; 0x03
     3b8:	9c 83       	std	Y+4, r25	; 0x04
     3ba:	ad 83       	std	Y+5, r26	; 0x05
     3bc:	be 83       	std	Y+6, r27	; 0x06
     3be:	8f 83       	std	Y+7, r24	; 0x07
     3c0:	98 87       	std	Y+8, r25	; 0x08
     3c2:	a9 87       	std	Y+9, r26	; 0x09
     3c4:	ba 87       	std	Y+10, r27	; 0x0a
     3c6:	8c e0       	ldi	r24, 0x0C	; 12
     3c8:	fe 01       	movw	r30, r28
     3ca:	31 96       	adiw	r30, 0x01	; 1
     3cc:	ad eb       	ldi	r26, 0xBD	; 189
     3ce:	b1 e0       	ldi	r27, 0x01	; 1
     3d0:	01 90       	ld	r0, Z+
     3d2:	0d 92       	st	X+, r0
     3d4:	8a 95       	dec	r24
     3d6:	e1 f7       	brne	.-8      	; 0x3d0 <_Z10readEEDatav+0x5c>
     3d8:	2c 96       	adiw	r28, 0x0c	; 12
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	f8 94       	cli
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	0f be       	out	0x3f, r0	; 63
     3e2:	cd bf       	out	0x3d, r28	; 61
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	08 95       	ret

000003ea <_Z11writeEEDatab>:
     3ea:	1f 93       	push	r17
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	cd b7       	in	r28, 0x3d	; 61
     3f2:	de b7       	in	r29, 0x3e	; 62
     3f4:	2c 97       	sbiw	r28, 0x0c	; 12
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	f8 94       	cli
     3fa:	de bf       	out	0x3e, r29	; 62
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	cd bf       	out	0x3d, r28	; 61
     400:	88 23       	and	r24, r24
     402:	49 f0       	breq	.+18     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     404:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <ee_data+0xa>
     408:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <ee_data+0xb>
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <ee_data+0xb>
     412:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <ee_data+0xa>
     416:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <ee_data>
     41a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <ee_data+0x1>
     41e:	01 96       	adiw	r24, 0x01	; 1
     420:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <ee_data+0x1>
     424:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <ee_data>
     428:	40 91 bc 01 	lds	r20, 0x01BC	; 0x8001bc <__data_end>
     42c:	50 e0       	ldi	r21, 0x00	; 0
     42e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <ee_address>
     432:	70 e0       	ldi	r23, 0x00	; 0
     434:	8d eb       	ldi	r24, 0xBD	; 189
     436:	91 e0       	ldi	r25, 0x01	; 1
     438:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <eeprom_update_block>
     43c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <ee_data>
     440:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <ee_data+0x1>
     444:	80 33       	cpi	r24, 0x30	; 48
     446:	95 47       	sbci	r25, 0x75	; 117
     448:	68 f1       	brcs	.+90     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <eeprom_read_byte>
     452:	18 2f       	mov	r17, r24
     454:	68 2f       	mov	r22, r24
     456:	70 e0       	ldi	r23, 0x00	; 0
     458:	6f 5f       	subi	r22, 0xFF	; 255
     45a:	7f 4f       	sbci	r23, 0xFF	; 255
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <eeprom_update_byte>
     464:	40 91 bc 01 	lds	r20, 0x01BC	; 0x8001bc <__data_end>
     468:	14 9f       	mul	r17, r20
     46a:	60 2d       	mov	r22, r0
     46c:	11 24       	eor	r1, r1
     46e:	11 e0       	ldi	r17, 0x01	; 1
     470:	16 0f       	add	r17, r22
     472:	10 93 06 01 	sts	0x0106, r17	; 0x800106 <ee_address>
     476:	1a 82       	std	Y+2, r1	; 0x02
     478:	19 82       	std	Y+1, r1	; 0x01
     47a:	1c 86       	std	Y+12, r1	; 0x0c
     47c:	1b 86       	std	Y+11, r1	; 0x0b
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	a0 ec       	ldi	r26, 0xC0	; 192
     484:	bf e7       	ldi	r27, 0x7F	; 127
     486:	8b 83       	std	Y+3, r24	; 0x03
     488:	9c 83       	std	Y+4, r25	; 0x04
     48a:	ad 83       	std	Y+5, r26	; 0x05
     48c:	be 83       	std	Y+6, r27	; 0x06
     48e:	8f 83       	std	Y+7, r24	; 0x07
     490:	98 87       	std	Y+8, r25	; 0x08
     492:	a9 87       	std	Y+9, r26	; 0x09
     494:	ba 87       	std	Y+10, r27	; 0x0a
     496:	50 e0       	ldi	r21, 0x00	; 0
     498:	61 2f       	mov	r22, r17
     49a:	70 e0       	ldi	r23, 0x00	; 0
     49c:	ce 01       	movw	r24, r28
     49e:	01 96       	adiw	r24, 0x01	; 1
     4a0:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <eeprom_write_block>
     4a4:	2c 96       	adiw	r28, 0x0c	; 12
     4a6:	0f b6       	in	r0, 0x3f	; 63
     4a8:	f8 94       	cli
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	0f be       	out	0x3f, r0	; 63
     4ae:	cd bf       	out	0x3d, r28	; 61
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	1f 91       	pop	r17
     4b6:	08 95       	ret

000004b8 <_Z8sendDatall>:
     4b8:	4f 92       	push	r4
     4ba:	5f 92       	push	r5
     4bc:	6f 92       	push	r6
     4be:	7f 92       	push	r7
     4c0:	8f 92       	push	r8
     4c2:	9f 92       	push	r9
     4c4:	af 92       	push	r10
     4c6:	bf 92       	push	r11
     4c8:	cf 92       	push	r12
     4ca:	df 92       	push	r13
     4cc:	ef 92       	push	r14
     4ce:	ff 92       	push	r15
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	00 d0       	rcall	.+0      	; 0x4d6 <_Z8sendDatall+0x1e>
     4d6:	00 d0       	rcall	.+0      	; 0x4d8 <_Z8sendDatall+0x20>
     4d8:	00 d0       	rcall	.+0      	; 0x4da <_Z8sendDatall+0x22>
     4da:	cd b7       	in	r28, 0x3d	; 61
     4dc:	de b7       	in	r29, 0x3e	; 62
     4de:	4b 01       	movw	r8, r22
     4e0:	5c 01       	movw	r10, r24
     4e2:	29 01       	movw	r4, r18
     4e4:	3a 01       	movw	r6, r20
     4e6:	8b e3       	ldi	r24, 0x3B	; 59
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <atol>
     4ee:	6b 01       	movw	r12, r22
     4f0:	7c 01       	movw	r14, r24
     4f2:	62 e4       	ldi	r22, 0x42	; 66
     4f4:	71 e0       	ldi	r23, 0x01	; 1
     4f6:	ce 01       	movw	r24, r28
     4f8:	01 96       	adiw	r24, 0x01	; 1
     4fa:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN6StringC1EPKc>
     4fe:	ce 01       	movw	r24, r28
     500:	01 96       	adiw	r24, 0x01	; 1
     502:	0e 94 62 12 	call	0x24c4	; 0x24c4 <_ZN6StringD1Ev>
     506:	2a e0       	ldi	r18, 0x0A	; 10
     508:	b5 01       	movw	r22, r10
     50a:	a4 01       	movw	r20, r8
     50c:	ce 01       	movw	r24, r28
     50e:	01 96       	adiw	r24, 0x01	; 1
     510:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <_ZN6StringC1Elh>
     514:	ce 01       	movw	r24, r28
     516:	01 96       	adiw	r24, 0x01	; 1
     518:	0e 94 62 12 	call	0x24c4	; 0x24c4 <_ZN6StringD1Ev>
     51c:	6d e4       	ldi	r22, 0x4D	; 77
     51e:	71 e0       	ldi	r23, 0x01	; 1
     520:	ce 01       	movw	r24, r28
     522:	01 96       	adiw	r24, 0x01	; 1
     524:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN6StringC1EPKc>
     528:	ce 01       	movw	r24, r28
     52a:	01 96       	adiw	r24, 0x01	; 1
     52c:	0e 94 62 12 	call	0x24c4	; 0x24c4 <_ZN6StringD1Ev>
     530:	2a e0       	ldi	r18, 0x0A	; 10
     532:	b3 01       	movw	r22, r6
     534:	a2 01       	movw	r20, r4
     536:	ce 01       	movw	r24, r28
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <_ZN6StringC1Elh>
     53e:	ce 01       	movw	r24, r28
     540:	01 96       	adiw	r24, 0x01	; 1
     542:	0e 94 62 12 	call	0x24c4	; 0x24c4 <_ZN6StringD1Ev>
     546:	8c 14       	cp	r8, r12
     548:	9d 04       	cpc	r9, r13
     54a:	ae 04       	cpc	r10, r14
     54c:	bf 04       	cpc	r11, r15
     54e:	34 f4       	brge	.+12     	; 0x55c <_Z8sendDatall+0xa4>
     550:	75 01       	movw	r14, r10
     552:	64 01       	movw	r12, r8
     554:	c4 0c       	add	r12, r4
     556:	d5 1c       	adc	r13, r5
     558:	e6 1c       	adc	r14, r6
     55a:	f7 1c       	adc	r15, r7
     55c:	66 e5       	ldi	r22, 0x56	; 86
     55e:	71 e0       	ldi	r23, 0x01	; 1
     560:	ce 01       	movw	r24, r28
     562:	01 96       	adiw	r24, 0x01	; 1
     564:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN6StringC1EPKc>
     568:	ce 01       	movw	r24, r28
     56a:	01 96       	adiw	r24, 0x01	; 1
     56c:	0e 94 62 12 	call	0x24c4	; 0x24c4 <_ZN6StringD1Ev>
     570:	2a e0       	ldi	r18, 0x0A	; 10
     572:	b7 01       	movw	r22, r14
     574:	a6 01       	movw	r20, r12
     576:	ce 01       	movw	r24, r28
     578:	01 96       	adiw	r24, 0x01	; 1
     57a:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <_ZN6StringC1Elh>
     57e:	ce 01       	movw	r24, r28
     580:	01 96       	adiw	r24, 0x01	; 1
     582:	0e 94 62 12 	call	0x24c4	; 0x24c4 <_ZN6StringD1Ev>
     586:	28 e1       	ldi	r18, 0x18	; 24
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	b7 01       	movw	r22, r14
     58c:	a6 01       	movw	r20, r12
     58e:	8e ee       	ldi	r24, 0xEE	; 238
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	0e 94 14 0c 	call	0x1828	; 0x1828 <_ZN8RCSwitch4sendEmj>
     596:	26 96       	adiw	r28, 0x06	; 6
     598:	0f b6       	in	r0, 0x3f	; 63
     59a:	f8 94       	cli
     59c:	de bf       	out	0x3e, r29	; 62
     59e:	0f be       	out	0x3f, r0	; 63
     5a0:	cd bf       	out	0x3d, r28	; 61
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	ff 90       	pop	r15
     5a8:	ef 90       	pop	r14
     5aa:	df 90       	pop	r13
     5ac:	cf 90       	pop	r12
     5ae:	bf 90       	pop	r11
     5b0:	af 90       	pop	r10
     5b2:	9f 90       	pop	r9
     5b4:	8f 90       	pop	r8
     5b6:	7f 90       	pop	r7
     5b8:	6f 90       	pop	r6
     5ba:	5f 90       	pop	r5
     5bc:	4f 90       	pop	r4
     5be:	08 95       	ret

000005c0 <_Z20prepare_onewire_datav>:
     5c0:	8f 92       	push	r8
     5c2:	9f 92       	push	r9
     5c4:	af 92       	push	r10
     5c6:	bf 92       	push	r11
     5c8:	cf 92       	push	r12
     5ca:	df 92       	push	r13
     5cc:	ef 92       	push	r14
     5ce:	ff 92       	push	r15
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	00 d0       	rcall	.+0      	; 0x5d6 <_Z20prepare_onewire_datav+0x16>
     5d6:	00 d0       	rcall	.+0      	; 0x5d8 <_Z20prepare_onewire_datav+0x18>
     5d8:	00 d0       	rcall	.+0      	; 0x5da <_Z20prepare_onewire_datav+0x1a>
     5da:	cd b7       	in	r28, 0x3d	; 61
     5dc:	de b7       	in	r29, 0x3e	; 62
     5de:	c0 90 0c 01 	lds	r12, 0x010C	; 0x80010c <humidity>
     5e2:	d0 90 0d 01 	lds	r13, 0x010D	; 0x80010d <humidity+0x1>
     5e6:	e0 90 0e 01 	lds	r14, 0x010E	; 0x80010e <humidity+0x2>
     5ea:	f0 90 0f 01 	lds	r15, 0x010F	; 0x80010f <humidity+0x3>
     5ee:	a7 01       	movw	r20, r14
     5f0:	96 01       	movw	r18, r12
     5f2:	c7 01       	movw	r24, r14
     5f4:	b6 01       	movw	r22, r12
     5f6:	0e 94 3d 10 	call	0x207a	; 0x207a <__unordsf2>
     5fa:	81 11       	cpse	r24, r1
     5fc:	24 c0       	rjmp	.+72     	; 0x646 <_Z20prepare_onewire_datav+0x86>
     5fe:	80 90 08 01 	lds	r8, 0x0108	; 0x800108 <temperature>
     602:	90 90 09 01 	lds	r9, 0x0109	; 0x800109 <temperature+0x1>
     606:	a0 90 0a 01 	lds	r10, 0x010A	; 0x80010a <temperature+0x2>
     60a:	b0 90 0b 01 	lds	r11, 0x010B	; 0x80010b <temperature+0x3>
     60e:	a5 01       	movw	r20, r10
     610:	94 01       	movw	r18, r8
     612:	c5 01       	movw	r24, r10
     614:	b4 01       	movw	r22, r8
     616:	0e 94 3d 10 	call	0x207a	; 0x207a <__unordsf2>
     61a:	81 11       	cpse	r24, r1
     61c:	14 c0       	rjmp	.+40     	; 0x646 <_Z20prepare_onewire_datav+0x86>
     61e:	20 e0       	ldi	r18, 0x00	; 0
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	4c ef       	ldi	r20, 0xFC	; 252
     624:	52 ec       	ldi	r21, 0xC2	; 194
     626:	c7 01       	movw	r24, r14
     628:	b6 01       	movw	r22, r12
     62a:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__cmpsf2>
     62e:	87 fd       	sbrc	r24, 7
     630:	0a c0       	rjmp	.+20     	; 0x646 <_Z20prepare_onewire_datav+0x86>
     632:	20 e0       	ldi	r18, 0x00	; 0
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	4c ef       	ldi	r20, 0xFC	; 252
     638:	52 ec       	ldi	r21, 0xC2	; 194
     63a:	c5 01       	movw	r24, r10
     63c:	b4 01       	movw	r22, r8
     63e:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__cmpsf2>
     642:	87 ff       	sbrs	r24, 7
     644:	25 c0       	rjmp	.+74     	; 0x690 <_Z20prepare_onewire_datav+0xd0>
     646:	6a e5       	ldi	r22, 0x5A	; 90
     648:	71 e0       	ldi	r23, 0x01	; 1
     64a:	ce 01       	movw	r24, r28
     64c:	01 96       	adiw	r24, 0x01	; 1
     64e:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN6StringC1EPKc>
     652:	ce 01       	movw	r24, r28
     654:	01 96       	adiw	r24, 0x01	; 1
     656:	0e 94 62 12 	call	0x24c4	; 0x24c4 <_ZN6StringD1Ev>
     65a:	c0 90 08 01 	lds	r12, 0x0108	; 0x800108 <temperature>
     65e:	d0 90 09 01 	lds	r13, 0x0109	; 0x800109 <temperature+0x1>
     662:	e0 90 0a 01 	lds	r14, 0x010A	; 0x80010a <temperature+0x2>
     666:	f0 90 0b 01 	lds	r15, 0x010B	; 0x80010b <temperature+0x3>
     66a:	a7 01       	movw	r20, r14
     66c:	96 01       	movw	r18, r12
     66e:	c7 01       	movw	r24, r14
     670:	b6 01       	movw	r22, r12
     672:	0e 94 3d 10 	call	0x207a	; 0x207a <__unordsf2>
     676:	81 11       	cpse	r24, r1
     678:	29 c0       	rjmp	.+82     	; 0x6cc <_Z20prepare_onewire_datav+0x10c>
     67a:	20 e0       	ldi	r18, 0x00	; 0
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	4c ef       	ldi	r20, 0xFC	; 252
     680:	52 ec       	ldi	r21, 0xC2	; 194
     682:	c7 01       	movw	r24, r14
     684:	b6 01       	movw	r22, r12
     686:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__cmpsf2>
     68a:	87 fd       	sbrc	r24, 7
     68c:	1f c0       	rjmp	.+62     	; 0x6cc <_Z20prepare_onewire_datav+0x10c>
     68e:	33 c0       	rjmp	.+102    	; 0x6f6 <_Z20prepare_onewire_datav+0x136>
     690:	60 91 c3 01 	lds	r22, 0x01C3	; 0x8001c3 <ee_data+0x6>
     694:	70 91 c4 01 	lds	r23, 0x01C4	; 0x8001c4 <ee_data+0x7>
     698:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <ee_data+0x8>
     69c:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <ee_data+0x9>
     6a0:	9b 01       	movw	r18, r22
     6a2:	ac 01       	movw	r20, r24
     6a4:	0e 94 3d 10 	call	0x207a	; 0x207a <__unordsf2>
     6a8:	81 11       	cpse	r24, r1
     6aa:	34 c0       	rjmp	.+104    	; 0x714 <_Z20prepare_onewire_datav+0x154>
     6ac:	60 91 bf 01 	lds	r22, 0x01BF	; 0x8001bf <ee_data+0x2>
     6b0:	70 91 c0 01 	lds	r23, 0x01C0	; 0x8001c0 <ee_data+0x3>
     6b4:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <ee_data+0x4>
     6b8:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <ee_data+0x5>
     6bc:	9b 01       	movw	r18, r22
     6be:	ac 01       	movw	r20, r24
     6c0:	0e 94 3d 10 	call	0x207a	; 0x207a <__unordsf2>
     6c4:	88 23       	and	r24, r24
     6c6:	09 f4       	brne	.+2      	; 0x6ca <_Z20prepare_onewire_datav+0x10a>
     6c8:	85 c0       	rjmp	.+266    	; 0x7d4 <_Z20prepare_onewire_datav+0x214>
     6ca:	24 c0       	rjmp	.+72     	; 0x714 <_Z20prepare_onewire_datav+0x154>
     6cc:	89 e8       	ldi	r24, 0x89	; 137
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <atol>
     6d4:	6b 01       	movw	r12, r22
     6d6:	7c 01       	movw	r14, r24
     6d8:	80 e9       	ldi	r24, 0x90	; 144
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <atol>
     6e0:	a7 01       	movw	r20, r14
     6e2:	96 01       	movw	r18, r12
     6e4:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_Z8sendDatall>
     6e8:	8c e3       	ldi	r24, 0x3C	; 60
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <SleepTimer+0x1>
     6f0:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <SleepTimer>
     6f4:	c4 c0       	rjmp	.+392    	; 0x87e <_Z20prepare_onewire_datav+0x2be>
     6f6:	87 e9       	ldi	r24, 0x97	; 151
     6f8:	91 e0       	ldi	r25, 0x01	; 1
     6fa:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <atol>
     6fe:	6b 01       	movw	r12, r22
     700:	7c 01       	movw	r14, r24
     702:	8e e9       	ldi	r24, 0x9E	; 158
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <atol>
     70a:	a7 01       	movw	r20, r14
     70c:	96 01       	movw	r18, r12
     70e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_Z8sendDatall>
     712:	ea cf       	rjmp	.-44     	; 0x6e8 <_Z20prepare_onewire_datav+0x128>
     714:	87 e9       	ldi	r24, 0x97	; 151
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <atol>
     71c:	4b 01       	movw	r8, r22
     71e:	5c 01       	movw	r10, r24
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	40 e2       	ldi	r20, 0x20	; 32
     726:	51 e4       	ldi	r21, 0x41	; 65
     728:	c7 01       	movw	r24, r14
     72a:	b6 01       	movw	r22, r12
     72c:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <__mulsf3>
     730:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__fixsfsi>
     734:	07 2e       	mov	r0, r23
     736:	00 0c       	add	r0, r0
     738:	88 0b       	sbc	r24, r24
     73a:	99 0b       	sbc	r25, r25
     73c:	a5 01       	movw	r20, r10
     73e:	94 01       	movw	r18, r8
     740:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_Z8sendDatall>
     744:	89 e8       	ldi	r24, 0x89	; 137
     746:	91 e0       	ldi	r25, 0x01	; 1
     748:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <atol>
     74c:	6b 01       	movw	r12, r22
     74e:	7c 01       	movw	r14, r24
     750:	20 e0       	ldi	r18, 0x00	; 0
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	40 e2       	ldi	r20, 0x20	; 32
     756:	51 e4       	ldi	r21, 0x41	; 65
     758:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <temperature>
     75c:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <temperature+0x1>
     760:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <temperature+0x2>
     764:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <temperature+0x3>
     768:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <__mulsf3>
     76c:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__fixsfsi>
     770:	07 2e       	mov	r0, r23
     772:	00 0c       	add	r0, r0
     774:	88 0b       	sbc	r24, r24
     776:	99 0b       	sbc	r25, r25
     778:	a7 01       	movw	r20, r14
     77a:	96 01       	movw	r18, r12
     77c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_Z8sendDatall>
     780:	88 e5       	ldi	r24, 0x58	; 88
     782:	92 e0       	ldi	r25, 0x02	; 2
     784:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <SleepTimer+0x1>
     788:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <SleepTimer>
     78c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <humidity>
     790:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <humidity+0x1>
     794:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <humidity+0x2>
     798:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <humidity+0x3>
     79c:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <ee_data+0x6>
     7a0:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <ee_data+0x7>
     7a4:	a0 93 c5 01 	sts	0x01C5, r26	; 0x8001c5 <ee_data+0x8>
     7a8:	b0 93 c6 01 	sts	0x01C6, r27	; 0x8001c6 <ee_data+0x9>
     7ac:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <temperature>
     7b0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <temperature+0x1>
     7b4:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <temperature+0x2>
     7b8:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <temperature+0x3>
     7bc:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <ee_data+0x2>
     7c0:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <ee_data+0x3>
     7c4:	a0 93 c1 01 	sts	0x01C1, r26	; 0x8001c1 <ee_data+0x4>
     7c8:	b0 93 c2 01 	sts	0x01C2, r27	; 0x8001c2 <ee_data+0x5>
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_Z11writeEEDatab>
     7d2:	55 c0       	rjmp	.+170    	; 0x87e <_Z20prepare_onewire_datav+0x2be>
     7d4:	c0 92 c3 01 	sts	0x01C3, r12	; 0x8001c3 <ee_data+0x6>
     7d8:	d0 92 c4 01 	sts	0x01C4, r13	; 0x8001c4 <ee_data+0x7>
     7dc:	e0 92 c5 01 	sts	0x01C5, r14	; 0x8001c5 <ee_data+0x8>
     7e0:	f0 92 c6 01 	sts	0x01C6, r15	; 0x8001c6 <ee_data+0x9>
     7e4:	80 92 bf 01 	sts	0x01BF, r8	; 0x8001bf <ee_data+0x2>
     7e8:	90 92 c0 01 	sts	0x01C0, r9	; 0x8001c0 <ee_data+0x3>
     7ec:	a0 92 c1 01 	sts	0x01C1, r10	; 0x8001c1 <ee_data+0x4>
     7f0:	b0 92 c2 01 	sts	0x01C2, r11	; 0x8001c2 <ee_data+0x5>
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_Z11writeEEDatab>
     7fa:	87 e9       	ldi	r24, 0x97	; 151
     7fc:	91 e0       	ldi	r25, 0x01	; 1
     7fe:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <atol>
     802:	6b 01       	movw	r12, r22
     804:	7c 01       	movw	r14, r24
     806:	20 e0       	ldi	r18, 0x00	; 0
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	40 e2       	ldi	r20, 0x20	; 32
     80c:	51 e4       	ldi	r21, 0x41	; 65
     80e:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <humidity>
     812:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <humidity+0x1>
     816:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <humidity+0x2>
     81a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <humidity+0x3>
     81e:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <__mulsf3>
     822:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__fixsfsi>
     826:	07 2e       	mov	r0, r23
     828:	00 0c       	add	r0, r0
     82a:	88 0b       	sbc	r24, r24
     82c:	99 0b       	sbc	r25, r25
     82e:	a7 01       	movw	r20, r14
     830:	96 01       	movw	r18, r12
     832:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_Z8sendDatall>
     836:	89 e8       	ldi	r24, 0x89	; 137
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <atol>
     83e:	6b 01       	movw	r12, r22
     840:	7c 01       	movw	r14, r24
     842:	20 e0       	ldi	r18, 0x00	; 0
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	40 e2       	ldi	r20, 0x20	; 32
     848:	51 e4       	ldi	r21, 0x41	; 65
     84a:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <temperature>
     84e:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <temperature+0x1>
     852:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <temperature+0x2>
     856:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <temperature+0x3>
     85a:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <__mulsf3>
     85e:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__fixsfsi>
     862:	07 2e       	mov	r0, r23
     864:	00 0c       	add	r0, r0
     866:	88 0b       	sbc	r24, r24
     868:	99 0b       	sbc	r25, r25
     86a:	a7 01       	movw	r20, r14
     86c:	96 01       	movw	r18, r12
     86e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_Z8sendDatall>
     872:	88 e5       	ldi	r24, 0x58	; 88
     874:	92 e0       	ldi	r25, 0x02	; 2
     876:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <SleepTimer+0x1>
     87a:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <SleepTimer>
     87e:	26 96       	adiw	r28, 0x06	; 6
     880:	0f b6       	in	r0, 0x3f	; 63
     882:	f8 94       	cli
     884:	de bf       	out	0x3e, r29	; 62
     886:	0f be       	out	0x3f, r0	; 63
     888:	cd bf       	out	0x3d, r28	; 61
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	ff 90       	pop	r15
     890:	ef 90       	pop	r14
     892:	df 90       	pop	r13
     894:	cf 90       	pop	r12
     896:	bf 90       	pop	r11
     898:	af 90       	pop	r10
     89a:	9f 90       	pop	r9
     89c:	8f 90       	pop	r8
     89e:	08 95       	ret

000008a0 <_Z12loop_onewirev>:
     8a0:	61 e0       	ldi	r22, 0x01	; 1
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	0e 94 4e 11 	call	0x229c	; 0x229c <delay>
     8ac:	89 ec       	ldi	r24, 0xC9	; 201
     8ae:	91 e0       	ldi	r25, 0x01	; 1
     8b0:	0e 94 44 07 	call	0xe88	; 0xe88 <_ZN17DallasTemperature5beginEv>
     8b4:	89 ec       	ldi	r24, 0xC9	; 201
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	0e 94 18 08 	call	0x1030	; 0x1030 <_ZN17DallasTemperature19requestTemperaturesEv>
     8bc:	60 e0       	ldi	r22, 0x00	; 0
     8be:	89 ec       	ldi	r24, 0xC9	; 201
     8c0:	91 e0       	ldi	r25, 0x01	; 1
     8c2:	0e 94 14 09 	call	0x1228	; 0x1228 <_ZN17DallasTemperature15getTempCByIndexEh>
     8c6:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <temperature>
     8ca:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <temperature+0x1>
     8ce:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <temperature+0x2>
     8d2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <temperature+0x3>
     8d6:	89 ec       	ldi	r24, 0xC9	; 201
     8d8:	91 e0       	ldi	r25, 0x01	; 1
     8da:	0e 94 44 07 	call	0xe88	; 0xe88 <_ZN17DallasTemperature5beginEv>
     8de:	89 ec       	ldi	r24, 0xC9	; 201
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	0e 94 6e 05 	call	0xadc	; 0xadc <_ZN17DallasTemperature14getDeviceCountEv>
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <numberOfDevices+0x1>
     8ec:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <numberOfDevices>
     8f0:	6c e0       	ldi	r22, 0x0C	; 12
     8f2:	89 ec       	ldi	r24, 0xC9	; 201
     8f4:	91 e0       	ldi	r25, 0x01	; 1
     8f6:	0e 94 ce 06 	call	0xd9c	; 0xd9c <_ZN17DallasTemperature13setResolutionEh>
     8fa:	89 ec       	ldi	r24, 0xC9	; 201
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	0e 94 18 08 	call	0x1030	; 0x1030 <_ZN17DallasTemperature19requestTemperaturesEv>
     902:	68 e1       	ldi	r22, 0x18	; 24
     904:	71 e0       	ldi	r23, 0x01	; 1
     906:	89 ec       	ldi	r24, 0xC9	; 201
     908:	91 e0       	ldi	r25, 0x01	; 1
     90a:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <_ZN17DallasTemperature8getTempCEPh>
     90e:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <temperature>
     912:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <temperature+0x1>
     916:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <temperature+0x2>
     91a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <temperature+0x3>
     91e:	60 e1       	ldi	r22, 0x10	; 16
     920:	71 e0       	ldi	r23, 0x01	; 1
     922:	89 ec       	ldi	r24, 0xC9	; 201
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <_ZN17DallasTemperature8getTempCEPh>
     92a:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <humidity>
     92e:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <humidity+0x1>
     932:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <humidity+0x2>
     936:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <humidity+0x3>
     93a:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_Z20prepare_onewire_datav>
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	84 e0       	ldi	r24, 0x04	; 4
     942:	0e 94 33 12 	call	0x2466	; 0x2466 <digitalWrite>
     946:	60 e0       	ldi	r22, 0x00	; 0
     948:	83 e0       	ldi	r24, 0x03	; 3
     94a:	0e 94 f7 11 	call	0x23ee	; 0x23ee <pinMode>
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	83 e0       	ldi	r24, 0x03	; 3
     952:	0e 94 33 12 	call	0x2466	; 0x2466 <digitalWrite>
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	84 e0       	ldi	r24, 0x04	; 4
     95a:	0c 94 f7 11 	jmp	0x23ee	; 0x23ee <pinMode>

0000095e <_Z10vccVoltagev>:
     95e:	8e e4       	ldi	r24, 0x4E	; 78
     960:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     964:	6a e0       	ldi	r22, 0x0A	; 10
     966:	70 e0       	ldi	r23, 0x00	; 0
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	0e 94 4e 11 	call	0x229c	; 0x229c <delay>
     970:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     974:	80 64       	ori	r24, 0x40	; 64
     976:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     97a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     97e:	86 fd       	sbrc	r24, 6
     980:	fc cf       	rjmp	.-8      	; 0x97a <_Z10vccVoltagev+0x1c>
     982:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     986:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	32 2f       	mov	r19, r18
     98e:	22 27       	eor	r18, r18
     990:	a9 01       	movw	r20, r18
     992:	33 0f       	add	r19, r19
     994:	66 0b       	sbc	r22, r22
     996:	77 0b       	sbc	r23, r23
     998:	9a 01       	movw	r18, r20
     99a:	ab 01       	movw	r20, r22
     99c:	28 2b       	or	r18, r24
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	70 e3       	ldi	r23, 0x30	; 48
     9a2:	81 e1       	ldi	r24, 0x11	; 17
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	0e 94 3e 13 	call	0x267c	; 0x267c <__divmodsi4>
     9aa:	ca 01       	movw	r24, r20
     9ac:	b9 01       	movw	r22, r18
     9ae:	08 95       	ret

000009b0 <loop>:
     9b0:	cf 92       	push	r12
     9b2:	df 92       	push	r13
     9b4:	ef 92       	push	r14
     9b6:	ff 92       	push	r15
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	00 d0       	rcall	.+0      	; 0x9be <loop+0xe>
     9be:	00 d0       	rcall	.+0      	; 0x9c0 <loop+0x10>
     9c0:	00 d0       	rcall	.+0      	; 0x9c2 <loop+0x12>
     9c2:	cd b7       	in	r28, 0x3d	; 61
     9c4:	de b7       	in	r29, 0x3e	; 62
     9c6:	61 e0       	ldi	r22, 0x01	; 1
     9c8:	87 e0       	ldi	r24, 0x07	; 7
     9ca:	0e 94 f7 11 	call	0x23ee	; 0x23ee <pinMode>
     9ce:	61 e0       	ldi	r22, 0x01	; 1
     9d0:	87 e0       	ldi	r24, 0x07	; 7
     9d2:	0e 94 33 12 	call	0x2466	; 0x2466 <digitalWrite>
     9d6:	66 e0       	ldi	r22, 0x06	; 6
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	8e ee       	ldi	r24, 0xEE	; 238
     9dc:	91 e0       	ldi	r25, 0x01	; 1
     9de:	0e 94 b0 0b 	call	0x1760	; 0x1760 <_ZN8RCSwitch14enableTransmitEi>
     9e2:	6f e0       	ldi	r22, 0x0F	; 15
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	8e ee       	ldi	r24, 0xEE	; 238
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	0e 94 ac 0b 	call	0x1758	; 0x1758 <_ZN8RCSwitch17setRepeatTransmitEi>
     9ee:	65 ea       	ldi	r22, 0xA5	; 165
     9f0:	71 e0       	ldi	r23, 0x01	; 1
     9f2:	ce 01       	movw	r24, r28
     9f4:	01 96       	adiw	r24, 0x01	; 1
     9f6:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN6StringC1EPKc>
     9fa:	ce 01       	movw	r24, r28
     9fc:	01 96       	adiw	r24, 0x01	; 1
     9fe:	0e 94 62 12 	call	0x24c4	; 0x24c4 <_ZN6StringD1Ev>
     a02:	0e 94 af 04 	call	0x95e	; 0x95e <_Z10vccVoltagev>
     a06:	ab 01       	movw	r20, r22
     a08:	bc 01       	movw	r22, r24
     a0a:	2a e0       	ldi	r18, 0x0A	; 10
     a0c:	ce 01       	movw	r24, r28
     a0e:	01 96       	adiw	r24, 0x01	; 1
     a10:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <_ZN6StringC1Elh>
     a14:	ce 01       	movw	r24, r28
     a16:	01 96       	adiw	r24, 0x01	; 1
     a18:	0e 94 62 12 	call	0x24c4	; 0x24c4 <_ZN6StringD1Ev>
     a1c:	8f ea       	ldi	r24, 0xAF	; 175
     a1e:	91 e0       	ldi	r25, 0x01	; 1
     a20:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <atol>
     a24:	6b 01       	movw	r12, r22
     a26:	7c 01       	movw	r14, r24
     a28:	0e 94 af 04 	call	0x95e	; 0x95e <_Z10vccVoltagev>
     a2c:	a7 01       	movw	r20, r14
     a2e:	96 01       	movw	r18, r12
     a30:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_Z8sendDatall>
     a34:	0e 94 ba 01 	call	0x374	; 0x374 <_Z10readEEDatav>
     a38:	0e 94 50 04 	call	0x8a0	; 0x8a0 <_Z12loop_onewirev>
     a3c:	8e ee       	ldi	r24, 0xEE	; 238
     a3e:	91 e0       	ldi	r25, 0x01	; 1
     a40:	0e 94 b7 0b 	call	0x176e	; 0x176e <_ZN8RCSwitch15disableTransmitEv>
     a44:	60 e0       	ldi	r22, 0x00	; 0
     a46:	87 e0       	ldi	r24, 0x07	; 7
     a48:	0e 94 f7 11 	call	0x23ee	; 0x23ee <pinMode>
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	87 e0       	ldi	r24, 0x07	; 7
     a50:	0e 94 33 12 	call	0x2466	; 0x2466 <digitalWrite>
     a54:	60 e0       	ldi	r22, 0x00	; 0
     a56:	86 e0       	ldi	r24, 0x06	; 6
     a58:	0e 94 f7 11 	call	0x23ee	; 0x23ee <pinMode>
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	86 e0       	ldi	r24, 0x06	; 6
     a60:	0e 94 33 12 	call	0x2466	; 0x2466 <digitalWrite>
     a64:	66 eb       	ldi	r22, 0xB6	; 182
     a66:	71 e0       	ldi	r23, 0x01	; 1
     a68:	ce 01       	movw	r24, r28
     a6a:	01 96       	adiw	r24, 0x01	; 1
     a6c:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <_ZN6StringC1EPKc>
     a70:	ce 01       	movw	r24, r28
     a72:	01 96       	adiw	r24, 0x01	; 1
     a74:	0e 94 62 12 	call	0x24c4	; 0x24c4 <_ZN6StringD1Ev>
     a78:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <SleepTimer>
     a7c:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <SleepTimer+0x1>
     a80:	0e 94 7e 01 	call	0x2fc	; 0x2fc <_Z12sleepSecondsi>
     a84:	26 96       	adiw	r28, 0x06	; 6
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	f8 94       	cli
     a8a:	de bf       	out	0x3e, r29	; 62
     a8c:	0f be       	out	0x3f, r0	; 63
     a8e:	cd bf       	out	0x3d, r28	; 61
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	ff 90       	pop	r15
     a96:	ef 90       	pop	r14
     a98:	df 90       	pop	r13
     a9a:	cf 90       	pop	r12
     a9c:	08 95       	ret

00000a9e <_GLOBAL__sub_I_mySwitch>:
//#define Sensor_Bath // Config Code for Sensor Bath?
//#define Sensor_Balcony // Config Code for Sensor Balcony?
//#define Sensor_MasterBed // Config Code for Sensor MasterBedroom?
#define Sensor_Pond // Config Code for Sensor Pond?

RCSwitch mySwitch = RCSwitch();
     a9e:	8e ee       	ldi	r24, 0xEE	; 238
     aa0:	91 e0       	ldi	r25, 0x01	; 1
     aa2:	0e 94 85 0b 	call	0x170a	; 0x170a <_ZN8RCSwitchC1Ev>

#if DS18B20_use == 1
#define TEMPERATURE_PRECISION 12
int numberOfDevices; // Number of temperature devices found (onewire aka ds18b20)
DeviceAddress tempDeviceAddress; // We'll use this variable to store a found device address
OneWire oneWire(SensorPin); // Setup a oneWire instance to communicate with any OneWire devices (not just Maxim/Dallas temperature ICs)
     aa6:	63 e0       	ldi	r22, 0x03	; 3
     aa8:	8c ed       	ldi	r24, 0xDC	; 220
     aaa:	91 e0       	ldi	r25, 0x01	; 1
     aac:	0e 94 b5 0a 	call	0x156a	; 0x156a <_ZN7OneWireC1Eh>
DallasTemperature sensors(&oneWire); // Pass our oneWire reference to Dallas Temperature.
     ab0:	6c ed       	ldi	r22, 0xDC	; 220
     ab2:	71 e0       	ldi	r23, 0x01	; 1
     ab4:	89 ec       	ldi	r24, 0xC9	; 201
     ab6:	91 e0       	ldi	r25, 0x01	; 1
     ab8:	0c 94 5f 05 	jmp	0xabe	; 0xabe <_ZN17DallasTemperatureC1EP7OneWire>

00000abc <_ZN17DallasTemperature19defaultAlarmHandlerEPh>:
bool DallasTemperature::requestTemperaturesByIndex(uint8_t deviceIndex)
{
  DeviceAddress deviceAddress;
  getAddress(deviceAddress, deviceIndex);
  return requestTemperaturesByAddress(deviceAddress);
}
     abc:	08 95       	ret

00000abe <_ZN17DallasTemperatureC1EP7OneWire>:
     abe:	fc 01       	movw	r30, r24
     ac0:	8e e5       	ldi	r24, 0x5E	; 94
     ac2:	95 e0       	ldi	r25, 0x05	; 5
     ac4:	92 8b       	std	Z+18, r25	; 0x12
     ac6:	81 8b       	std	Z+17, r24	; 0x11
     ac8:	76 83       	std	Z+6, r23	; 0x06
     aca:	65 83       	std	Z+5, r22	; 0x05
     acc:	14 82       	std	Z+4, r1	; 0x04
     ace:	10 82       	st	Z, r1
     ad0:	89 e0       	ldi	r24, 0x09	; 9
     ad2:	81 83       	std	Z+1, r24	; 0x01
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	82 83       	std	Z+2, r24	; 0x02
     ad8:	83 83       	std	Z+3, r24	; 0x03
     ada:	08 95       	ret

00000adc <_ZN17DallasTemperature14getDeviceCountEv>:
     adc:	fc 01       	movw	r30, r24
     ade:	84 81       	ldd	r24, Z+4	; 0x04
     ae0:	08 95       	ret

00000ae2 <_ZN17DallasTemperature12validAddressEPh>:
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	eb 01       	movw	r28, r22
     ae8:	67 e0       	ldi	r22, 0x07	; 7
     aea:	ce 01       	movw	r24, r28
     aec:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <_ZN7OneWire4crc8EPKhh>
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	2f 81       	ldd	r18, Y+7	; 0x07
     af4:	28 13       	cpse	r18, r24
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	89 2f       	mov	r24, r25
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	08 95       	ret

00000b00 <_ZN17DallasTemperature10getAddressEPhh>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	8c 01       	movw	r16, r24
     b0e:	7b 01       	movw	r14, r22
     b10:	d4 2f       	mov	r29, r20
     b12:	fc 01       	movw	r30, r24
     b14:	85 81       	ldd	r24, Z+5	; 0x05
     b16:	96 81       	ldd	r25, Z+6	; 0x06
     b18:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_ZN7OneWire12reset_searchEv>
     b1c:	c0 e0       	ldi	r28, 0x00	; 0
     b1e:	b7 01       	movw	r22, r14
     b20:	f8 01       	movw	r30, r16
     b22:	85 81       	ldd	r24, Z+5	; 0x05
     b24:	96 81       	ldd	r25, Z+6	; 0x06
     b26:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <_ZN7OneWire6searchEPh>
     b2a:	88 23       	and	r24, r24
     b2c:	59 f0       	breq	.+22     	; 0xb44 <_ZN17DallasTemperature10getAddressEPhh+0x44>
     b2e:	dc 13       	cpse	r29, r28
     b30:	06 c0       	rjmp	.+12     	; 0xb3e <_ZN17DallasTemperature10getAddressEPhh+0x3e>
     b32:	b7 01       	movw	r22, r14
     b34:	c8 01       	movw	r24, r16
     b36:	0e 94 71 05 	call	0xae2	; 0xae2 <_ZN17DallasTemperature12validAddressEPh>
     b3a:	81 11       	cpse	r24, r1
     b3c:	04 c0       	rjmp	.+8      	; 0xb46 <_ZN17DallasTemperature10getAddressEPhh+0x46>
     b3e:	cf 5f       	subi	r28, 0xFF	; 255
     b40:	dc 17       	cp	r29, r28
     b42:	68 f7       	brcc	.-38     	; 0xb1e <_ZN17DallasTemperature10getAddressEPhh+0x1e>
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	1f 91       	pop	r17
     b4c:	0f 91       	pop	r16
     b4e:	ff 90       	pop	r15
     b50:	ef 90       	pop	r14
     b52:	08 95       	ret

00000b54 <_ZN17DallasTemperature14readScratchPadEPhS0_>:
     b54:	ef 92       	push	r14
     b56:	ff 92       	push	r15
     b58:	0f 93       	push	r16
     b5a:	1f 93       	push	r17
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	ec 01       	movw	r28, r24
     b62:	7b 01       	movw	r14, r22
     b64:	8a 01       	movw	r16, r20
     b66:	8d 81       	ldd	r24, Y+5	; 0x05
     b68:	9e 81       	ldd	r25, Y+6	; 0x06
     b6a:	0e 94 99 09 	call	0x1332	; 0x1332 <_ZN7OneWire5resetEv>
     b6e:	b7 01       	movw	r22, r14
     b70:	8d 81       	ldd	r24, Y+5	; 0x05
     b72:	9e 81       	ldd	r25, Y+6	; 0x06
     b74:	0e 94 86 0a 	call	0x150c	; 0x150c <_ZN7OneWire6selectEPKh>
     b78:	40 e0       	ldi	r20, 0x00	; 0
     b7a:	6e eb       	ldi	r22, 0xBE	; 190
     b7c:	8d 81       	ldd	r24, Y+5	; 0x05
     b7e:	9e 81       	ldd	r25, Y+6	; 0x06
     b80:	0e 94 36 0a 	call	0x146c	; 0x146c <_ZN7OneWire5writeEhh>
     b84:	8d 81       	ldd	r24, Y+5	; 0x05
     b86:	9e 81       	ldd	r25, Y+6	; 0x06
     b88:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <_ZN7OneWire4readEv>
     b8c:	f8 01       	movw	r30, r16
     b8e:	80 83       	st	Z, r24
     b90:	8d 81       	ldd	r24, Y+5	; 0x05
     b92:	9e 81       	ldd	r25, Y+6	; 0x06
     b94:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <_ZN7OneWire4readEv>
     b98:	f8 01       	movw	r30, r16
     b9a:	81 83       	std	Z+1, r24	; 0x01
     b9c:	8d 81       	ldd	r24, Y+5	; 0x05
     b9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ba0:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <_ZN7OneWire4readEv>
     ba4:	f8 01       	movw	r30, r16
     ba6:	82 83       	std	Z+2, r24	; 0x02
     ba8:	8d 81       	ldd	r24, Y+5	; 0x05
     baa:	9e 81       	ldd	r25, Y+6	; 0x06
     bac:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <_ZN7OneWire4readEv>
     bb0:	f8 01       	movw	r30, r16
     bb2:	83 83       	std	Z+3, r24	; 0x03
     bb4:	8d 81       	ldd	r24, Y+5	; 0x05
     bb6:	9e 81       	ldd	r25, Y+6	; 0x06
     bb8:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <_ZN7OneWire4readEv>
     bbc:	f8 01       	movw	r30, r16
     bbe:	84 83       	std	Z+4, r24	; 0x04
     bc0:	8d 81       	ldd	r24, Y+5	; 0x05
     bc2:	9e 81       	ldd	r25, Y+6	; 0x06
     bc4:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <_ZN7OneWire4readEv>
     bc8:	f8 01       	movw	r30, r16
     bca:	85 83       	std	Z+5, r24	; 0x05
     bcc:	8d 81       	ldd	r24, Y+5	; 0x05
     bce:	9e 81       	ldd	r25, Y+6	; 0x06
     bd0:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <_ZN7OneWire4readEv>
     bd4:	f8 01       	movw	r30, r16
     bd6:	86 83       	std	Z+6, r24	; 0x06
     bd8:	8d 81       	ldd	r24, Y+5	; 0x05
     bda:	9e 81       	ldd	r25, Y+6	; 0x06
     bdc:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <_ZN7OneWire4readEv>
     be0:	f8 01       	movw	r30, r16
     be2:	87 83       	std	Z+7, r24	; 0x07
     be4:	8d 81       	ldd	r24, Y+5	; 0x05
     be6:	9e 81       	ldd	r25, Y+6	; 0x06
     be8:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <_ZN7OneWire4readEv>
     bec:	f8 01       	movw	r30, r16
     bee:	80 87       	std	Z+8, r24	; 0x08
     bf0:	8d 81       	ldd	r24, Y+5	; 0x05
     bf2:	9e 81       	ldd	r25, Y+6	; 0x06
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	1f 91       	pop	r17
     bfa:	0f 91       	pop	r16
     bfc:	ff 90       	pop	r15
     bfe:	ef 90       	pop	r14
     c00:	0c 94 99 09 	jmp	0x1332	; 0x1332 <_ZN7OneWire5resetEv>

00000c04 <_ZN17DallasTemperature11isConnectedEPhS0_>:
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	ea 01       	movw	r28, r20
     c0a:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN17DallasTemperature14readScratchPadEPhS0_>
     c0e:	68 e0       	ldi	r22, 0x08	; 8
     c10:	ce 01       	movw	r24, r28
     c12:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <_ZN7OneWire4crc8EPKhh>
     c16:	91 e0       	ldi	r25, 0x01	; 1
     c18:	28 85       	ldd	r18, Y+8	; 0x08
     c1a:	28 13       	cpse	r18, r24
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	89 2f       	mov	r24, r25
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	08 95       	ret

00000c26 <_ZN17DallasTemperature15writeScratchPadEPhPKh>:
     c26:	ef 92       	push	r14
     c28:	ff 92       	push	r15
     c2a:	0f 93       	push	r16
     c2c:	1f 93       	push	r17
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
     c32:	ec 01       	movw	r28, r24
     c34:	7b 01       	movw	r14, r22
     c36:	8a 01       	movw	r16, r20
     c38:	8d 81       	ldd	r24, Y+5	; 0x05
     c3a:	9e 81       	ldd	r25, Y+6	; 0x06
     c3c:	0e 94 99 09 	call	0x1332	; 0x1332 <_ZN7OneWire5resetEv>
     c40:	b7 01       	movw	r22, r14
     c42:	8d 81       	ldd	r24, Y+5	; 0x05
     c44:	9e 81       	ldd	r25, Y+6	; 0x06
     c46:	0e 94 86 0a 	call	0x150c	; 0x150c <_ZN7OneWire6selectEPKh>
     c4a:	40 e0       	ldi	r20, 0x00	; 0
     c4c:	6e e4       	ldi	r22, 0x4E	; 78
     c4e:	8d 81       	ldd	r24, Y+5	; 0x05
     c50:	9e 81       	ldd	r25, Y+6	; 0x06
     c52:	0e 94 36 0a 	call	0x146c	; 0x146c <_ZN7OneWire5writeEhh>
     c56:	40 e0       	ldi	r20, 0x00	; 0
     c58:	f8 01       	movw	r30, r16
     c5a:	62 81       	ldd	r22, Z+2	; 0x02
     c5c:	8d 81       	ldd	r24, Y+5	; 0x05
     c5e:	9e 81       	ldd	r25, Y+6	; 0x06
     c60:	0e 94 36 0a 	call	0x146c	; 0x146c <_ZN7OneWire5writeEhh>
     c64:	40 e0       	ldi	r20, 0x00	; 0
     c66:	f8 01       	movw	r30, r16
     c68:	63 81       	ldd	r22, Z+3	; 0x03
     c6a:	8d 81       	ldd	r24, Y+5	; 0x05
     c6c:	9e 81       	ldd	r25, Y+6	; 0x06
     c6e:	0e 94 36 0a 	call	0x146c	; 0x146c <_ZN7OneWire5writeEhh>
     c72:	f7 01       	movw	r30, r14
     c74:	80 81       	ld	r24, Z
     c76:	80 31       	cpi	r24, 0x10	; 16
     c78:	39 f0       	breq	.+14     	; 0xc88 <_ZN17DallasTemperature15writeScratchPadEPhPKh+0x62>
     c7a:	40 e0       	ldi	r20, 0x00	; 0
     c7c:	f8 01       	movw	r30, r16
     c7e:	64 81       	ldd	r22, Z+4	; 0x04
     c80:	8d 81       	ldd	r24, Y+5	; 0x05
     c82:	9e 81       	ldd	r25, Y+6	; 0x06
     c84:	0e 94 36 0a 	call	0x146c	; 0x146c <_ZN7OneWire5writeEhh>
     c88:	8d 81       	ldd	r24, Y+5	; 0x05
     c8a:	9e 81       	ldd	r25, Y+6	; 0x06
     c8c:	0e 94 99 09 	call	0x1332	; 0x1332 <_ZN7OneWire5resetEv>
     c90:	48 81       	ld	r20, Y
     c92:	68 e4       	ldi	r22, 0x48	; 72
     c94:	8d 81       	ldd	r24, Y+5	; 0x05
     c96:	9e 81       	ldd	r25, Y+6	; 0x06
     c98:	0e 94 36 0a 	call	0x146c	; 0x146c <_ZN7OneWire5writeEhh>
     c9c:	88 81       	ld	r24, Y
     c9e:	88 23       	and	r24, r24
     ca0:	31 f0       	breq	.+12     	; 0xcae <_ZN17DallasTemperature15writeScratchPadEPhPKh+0x88>
     ca2:	6a e0       	ldi	r22, 0x0A	; 10
     ca4:	70 e0       	ldi	r23, 0x00	; 0
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	0e 94 4e 11 	call	0x229c	; 0x229c <delay>
     cae:	8d 81       	ldd	r24, Y+5	; 0x05
     cb0:	9e 81       	ldd	r25, Y+6	; 0x06
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	1f 91       	pop	r17
     cb8:	0f 91       	pop	r16
     cba:	ff 90       	pop	r15
     cbc:	ef 90       	pop	r14
     cbe:	0c 94 99 09 	jmp	0x1332	; 0x1332 <_ZN7OneWire5resetEv>

00000cc2 <_ZN17DallasTemperature15readPowerSupplyEPh>:
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	ec 01       	movw	r28, r24
     ccc:	8b 01       	movw	r16, r22
     cce:	8d 81       	ldd	r24, Y+5	; 0x05
     cd0:	9e 81       	ldd	r25, Y+6	; 0x06
     cd2:	0e 94 99 09 	call	0x1332	; 0x1332 <_ZN7OneWire5resetEv>
     cd6:	b8 01       	movw	r22, r16
     cd8:	8d 81       	ldd	r24, Y+5	; 0x05
     cda:	9e 81       	ldd	r25, Y+6	; 0x06
     cdc:	0e 94 86 0a 	call	0x150c	; 0x150c <_ZN7OneWire6selectEPKh>
     ce0:	40 e0       	ldi	r20, 0x00	; 0
     ce2:	64 eb       	ldi	r22, 0xB4	; 180
     ce4:	8d 81       	ldd	r24, Y+5	; 0x05
     ce6:	9e 81       	ldd	r25, Y+6	; 0x06
     ce8:	0e 94 36 0a 	call	0x146c	; 0x146c <_ZN7OneWire5writeEhh>
     cec:	8d 81       	ldd	r24, Y+5	; 0x05
     cee:	9e 81       	ldd	r25, Y+6	; 0x06
     cf0:	0e 94 0b 0a 	call	0x1416	; 0x1416 <_ZN7OneWire8read_bitEv>
     cf4:	18 2f       	mov	r17, r24
     cf6:	8d 81       	ldd	r24, Y+5	; 0x05
     cf8:	9e 81       	ldd	r25, Y+6	; 0x06
     cfa:	0e 94 99 09 	call	0x1332	; 0x1332 <_ZN7OneWire5resetEv>
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	11 11       	cpse	r17, r1
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	1f 91       	pop	r17
     d0a:	0f 91       	pop	r16
     d0c:	08 95       	ret

00000d0e <_ZN17DallasTemperature13setResolutionEPhh>:
     d0e:	cf 92       	push	r12
     d10:	df 92       	push	r13
     d12:	ef 92       	push	r14
     d14:	ff 92       	push	r15
     d16:	0f 93       	push	r16
     d18:	1f 93       	push	r17
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	29 97       	sbiw	r28, 0x09	; 9
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	cd bf       	out	0x3d, r28	; 61
     d2e:	6c 01       	movw	r12, r24
     d30:	8b 01       	movw	r16, r22
     d32:	f4 2e       	mov	r15, r20
     d34:	ae 01       	movw	r20, r28
     d36:	4f 5f       	subi	r20, 0xFF	; 255
     d38:	5f 4f       	sbci	r21, 0xFF	; 255
     d3a:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN17DallasTemperature11isConnectedEPhS0_>
     d3e:	e8 2e       	mov	r14, r24
     d40:	88 23       	and	r24, r24
     d42:	e1 f0       	breq	.+56     	; 0xd7c <_ZN17DallasTemperature13setResolutionEPhh+0x6e>
     d44:	f8 01       	movw	r30, r16
     d46:	80 81       	ld	r24, Z
     d48:	80 31       	cpi	r24, 0x10	; 16
     d4a:	c1 f0       	breq	.+48     	; 0xd7c <_ZN17DallasTemperature13setResolutionEPhh+0x6e>
     d4c:	fb e0       	ldi	r31, 0x0B	; 11
     d4e:	ff 16       	cp	r15, r31
     d50:	51 f0       	breq	.+20     	; 0xd66 <_ZN17DallasTemperature13setResolutionEPhh+0x58>
     d52:	8c e0       	ldi	r24, 0x0C	; 12
     d54:	f8 16       	cp	r15, r24
     d56:	29 f0       	breq	.+10     	; 0xd62 <_ZN17DallasTemperature13setResolutionEPhh+0x54>
     d58:	ea e0       	ldi	r30, 0x0A	; 10
     d5a:	fe 12       	cpse	r15, r30
     d5c:	06 c0       	rjmp	.+12     	; 0xd6a <_ZN17DallasTemperature13setResolutionEPhh+0x5c>
     d5e:	8f e3       	ldi	r24, 0x3F	; 63
     d60:	05 c0       	rjmp	.+10     	; 0xd6c <_ZN17DallasTemperature13setResolutionEPhh+0x5e>
     d62:	8f e7       	ldi	r24, 0x7F	; 127
     d64:	03 c0       	rjmp	.+6      	; 0xd6c <_ZN17DallasTemperature13setResolutionEPhh+0x5e>
     d66:	8f e5       	ldi	r24, 0x5F	; 95
     d68:	01 c0       	rjmp	.+2      	; 0xd6c <_ZN17DallasTemperature13setResolutionEPhh+0x5e>
     d6a:	8f e1       	ldi	r24, 0x1F	; 31
     d6c:	8d 83       	std	Y+5, r24	; 0x05
     d6e:	ae 01       	movw	r20, r28
     d70:	4f 5f       	subi	r20, 0xFF	; 255
     d72:	5f 4f       	sbci	r21, 0xFF	; 255
     d74:	b8 01       	movw	r22, r16
     d76:	c6 01       	movw	r24, r12
     d78:	0e 94 13 06 	call	0xc26	; 0xc26 <_ZN17DallasTemperature15writeScratchPadEPhPKh>
     d7c:	8e 2d       	mov	r24, r14
     d7e:	29 96       	adiw	r28, 0x09	; 9
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	1f 91       	pop	r17
     d90:	0f 91       	pop	r16
     d92:	ff 90       	pop	r15
     d94:	ef 90       	pop	r14
     d96:	df 90       	pop	r13
     d98:	cf 90       	pop	r12
     d9a:	08 95       	ret

00000d9c <_ZN17DallasTemperature13setResolutionEh>:
     d9c:	ef 92       	push	r14
     d9e:	ff 92       	push	r15
     da0:	0f 93       	push	r16
     da2:	1f 93       	push	r17
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
     dac:	28 97       	sbiw	r28, 0x08	; 8
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	8c 01       	movw	r16, r24
     dba:	69 30       	cpi	r22, 0x09	; 9
     dbc:	20 f0       	brcs	.+8      	; 0xdc6 <_ZN17DallasTemperature13setResolutionEh+0x2a>
     dbe:	6d 30       	cpi	r22, 0x0D	; 13
     dc0:	18 f0       	brcs	.+6      	; 0xdc8 <_ZN17DallasTemperature13setResolutionEh+0x2c>
     dc2:	6c e0       	ldi	r22, 0x0C	; 12
     dc4:	01 c0       	rjmp	.+2      	; 0xdc8 <_ZN17DallasTemperature13setResolutionEh+0x2c>
     dc6:	69 e0       	ldi	r22, 0x09	; 9
     dc8:	f8 01       	movw	r30, r16
     dca:	61 83       	std	Z+1, r22	; 0x01
     dcc:	e1 2c       	mov	r14, r1
     dce:	f1 2c       	mov	r15, r1
     dd0:	f8 01       	movw	r30, r16
     dd2:	84 81       	ldd	r24, Z+4	; 0x04
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	e8 16       	cp	r14, r24
     dd8:	f9 06       	cpc	r15, r25
     dda:	9c f4       	brge	.+38     	; 0xe02 <_ZN17DallasTemperature13setResolutionEh+0x66>
     ddc:	4e 2d       	mov	r20, r14
     dde:	be 01       	movw	r22, r28
     de0:	6f 5f       	subi	r22, 0xFF	; 255
     de2:	7f 4f       	sbci	r23, 0xFF	; 255
     de4:	c8 01       	movw	r24, r16
     de6:	0e 94 80 05 	call	0xb00	; 0xb00 <_ZN17DallasTemperature10getAddressEPhh>
     dea:	f8 01       	movw	r30, r16
     dec:	41 81       	ldd	r20, Z+1	; 0x01
     dee:	be 01       	movw	r22, r28
     df0:	6f 5f       	subi	r22, 0xFF	; 255
     df2:	7f 4f       	sbci	r23, 0xFF	; 255
     df4:	c8 01       	movw	r24, r16
     df6:	0e 94 87 06 	call	0xd0e	; 0xd0e <_ZN17DallasTemperature13setResolutionEPhh>
     dfa:	ff ef       	ldi	r31, 0xFF	; 255
     dfc:	ef 1a       	sub	r14, r31
     dfe:	ff 0a       	sbc	r15, r31
     e00:	e7 cf       	rjmp	.-50     	; 0xdd0 <_ZN17DallasTemperature13setResolutionEh+0x34>
     e02:	28 96       	adiw	r28, 0x08	; 8
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	f8 94       	cli
     e08:	de bf       	out	0x3e, r29	; 62
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	cd bf       	out	0x3d, r28	; 61
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	1f 91       	pop	r17
     e14:	0f 91       	pop	r16
     e16:	ff 90       	pop	r15
     e18:	ef 90       	pop	r14
     e1a:	08 95       	ret

00000e1c <_ZN17DallasTemperature13getResolutionEPh>:
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
     e24:	29 97       	sbiw	r28, 0x09	; 9
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	f8 94       	cli
     e2a:	de bf       	out	0x3e, r29	; 62
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	cd bf       	out	0x3d, r28	; 61
     e30:	fb 01       	movw	r30, r22
     e32:	20 81       	ld	r18, Z
     e34:	20 31       	cpi	r18, 0x10	; 16
     e36:	f1 f0       	breq	.+60     	; 0xe74 <_ZN17DallasTemperature13getResolutionEPh+0x58>
     e38:	ae 01       	movw	r20, r28
     e3a:	4f 5f       	subi	r20, 0xFF	; 255
     e3c:	5f 4f       	sbci	r21, 0xFF	; 255
     e3e:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN17DallasTemperature11isConnectedEPhS0_>
     e42:	88 23       	and	r24, r24
     e44:	a9 f0       	breq	.+42     	; 0xe70 <_ZN17DallasTemperature13getResolutionEPh+0x54>
     e46:	8d 81       	ldd	r24, Y+5	; 0x05
     e48:	8f 33       	cpi	r24, 0x3F	; 63
     e4a:	59 f0       	breq	.+22     	; 0xe62 <_ZN17DallasTemperature13getResolutionEPh+0x46>
     e4c:	18 f4       	brcc	.+6      	; 0xe54 <_ZN17DallasTemperature13getResolutionEPh+0x38>
     e4e:	8f 31       	cpi	r24, 0x1F	; 31
     e50:	89 f0       	breq	.+34     	; 0xe74 <_ZN17DallasTemperature13getResolutionEPh+0x58>
     e52:	09 c0       	rjmp	.+18     	; 0xe66 <_ZN17DallasTemperature13getResolutionEPh+0x4a>
     e54:	8f 35       	cpi	r24, 0x5F	; 95
     e56:	19 f0       	breq	.+6      	; 0xe5e <_ZN17DallasTemperature13getResolutionEPh+0x42>
     e58:	8f 37       	cpi	r24, 0x7F	; 127
     e5a:	41 f0       	breq	.+16     	; 0xe6c <_ZN17DallasTemperature13getResolutionEPh+0x50>
     e5c:	04 c0       	rjmp	.+8      	; 0xe66 <_ZN17DallasTemperature13getResolutionEPh+0x4a>
     e5e:	8b e0       	ldi	r24, 0x0B	; 11
     e60:	0a c0       	rjmp	.+20     	; 0xe76 <_ZN17DallasTemperature13getResolutionEPh+0x5a>
     e62:	8a e0       	ldi	r24, 0x0A	; 10
     e64:	08 c0       	rjmp	.+16     	; 0xe76 <_ZN17DallasTemperature13getResolutionEPh+0x5a>
     e66:	80 7f       	andi	r24, 0xF0	; 240
     e68:	80 3f       	cpi	r24, 0xF0	; 240
     e6a:	11 f4       	brne	.+4      	; 0xe70 <_ZN17DallasTemperature13getResolutionEPh+0x54>
     e6c:	8c e0       	ldi	r24, 0x0C	; 12
     e6e:	03 c0       	rjmp	.+6      	; 0xe76 <_ZN17DallasTemperature13getResolutionEPh+0x5a>
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	01 c0       	rjmp	.+2      	; 0xe76 <_ZN17DallasTemperature13getResolutionEPh+0x5a>
     e74:	89 e0       	ldi	r24, 0x09	; 9
     e76:	29 96       	adiw	r28, 0x09	; 9
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	f8 94       	cli
     e7c:	de bf       	out	0x3e, r29	; 62
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	cd bf       	out	0x3d, r28	; 61
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	08 95       	ret

00000e88 <_ZN17DallasTemperature5beginEv>:
     e88:	ef 92       	push	r14
     e8a:	ff 92       	push	r15
     e8c:	0f 93       	push	r16
     e8e:	1f 93       	push	r17
     e90:	cf 93       	push	r28
     e92:	df 93       	push	r29
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	61 97       	sbiw	r28, 0x11	; 17
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	f8 94       	cli
     e9e:	de bf       	out	0x3e, r29	; 62
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	cd bf       	out	0x3d, r28	; 61
     ea4:	8c 01       	movw	r16, r24
     ea6:	fc 01       	movw	r30, r24
     ea8:	85 81       	ldd	r24, Z+5	; 0x05
     eaa:	96 81       	ldd	r25, Z+6	; 0x06
     eac:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_ZN7OneWire12reset_searchEv>
     eb0:	f8 01       	movw	r30, r16
     eb2:	14 82       	std	Z+4, r1	; 0x04
     eb4:	ff 24       	eor	r15, r15
     eb6:	f3 94       	inc	r15
     eb8:	be 01       	movw	r22, r28
     eba:	66 5f       	subi	r22, 0xF6	; 246
     ebc:	7f 4f       	sbci	r23, 0xFF	; 255
     ebe:	f8 01       	movw	r30, r16
     ec0:	85 81       	ldd	r24, Z+5	; 0x05
     ec2:	96 81       	ldd	r25, Z+6	; 0x06
     ec4:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <_ZN7OneWire6searchEPh>
     ec8:	88 23       	and	r24, r24
     eca:	c9 f1       	breq	.+114    	; 0xf3e <_ZN17DallasTemperature5beginEv+0xb6>
     ecc:	be 01       	movw	r22, r28
     ece:	66 5f       	subi	r22, 0xF6	; 246
     ed0:	7f 4f       	sbci	r23, 0xFF	; 255
     ed2:	c8 01       	movw	r24, r16
     ed4:	0e 94 71 05 	call	0xae2	; 0xae2 <_ZN17DallasTemperature12validAddressEPh>
     ed8:	88 23       	and	r24, r24
     eda:	71 f3       	breq	.-36     	; 0xeb8 <_ZN17DallasTemperature5beginEv+0x30>
     edc:	f8 01       	movw	r30, r16
     ede:	80 81       	ld	r24, Z
     ee0:	81 11       	cpse	r24, r1
     ee2:	08 c0       	rjmp	.+16     	; 0xef4 <_ZN17DallasTemperature5beginEv+0x6c>
     ee4:	be 01       	movw	r22, r28
     ee6:	66 5f       	subi	r22, 0xF6	; 246
     ee8:	7f 4f       	sbci	r23, 0xFF	; 255
     eea:	c8 01       	movw	r24, r16
     eec:	0e 94 61 06 	call	0xcc2	; 0xcc2 <_ZN17DallasTemperature15readPowerSupplyEPh>
     ef0:	81 11       	cpse	r24, r1
     ef2:	22 c0       	rjmp	.+68     	; 0xf38 <_ZN17DallasTemperature5beginEv+0xb0>
     ef4:	ae 01       	movw	r20, r28
     ef6:	4f 5f       	subi	r20, 0xFF	; 255
     ef8:	5f 4f       	sbci	r21, 0xFF	; 255
     efa:	be 01       	movw	r22, r28
     efc:	66 5f       	subi	r22, 0xF6	; 246
     efe:	7f 4f       	sbci	r23, 0xFF	; 255
     f00:	c8 01       	movw	r24, r16
     f02:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN17DallasTemperature14readScratchPadEPhS0_>
     f06:	f8 01       	movw	r30, r16
     f08:	e1 80       	ldd	r14, Z+1	; 0x01
     f0a:	be 01       	movw	r22, r28
     f0c:	66 5f       	subi	r22, 0xF6	; 246
     f0e:	7f 4f       	sbci	r23, 0xFF	; 255
     f10:	c8 01       	movw	r24, r16
     f12:	0e 94 0e 07 	call	0xe1c	; 0xe1c <_ZN17DallasTemperature13getResolutionEPh>
     f16:	8e 15       	cp	r24, r14
     f18:	18 f4       	brcc	.+6      	; 0xf20 <_ZN17DallasTemperature5beginEv+0x98>
     f1a:	f8 01       	movw	r30, r16
     f1c:	81 81       	ldd	r24, Z+1	; 0x01
     f1e:	06 c0       	rjmp	.+12     	; 0xf2c <_ZN17DallasTemperature5beginEv+0xa4>
     f20:	be 01       	movw	r22, r28
     f22:	66 5f       	subi	r22, 0xF6	; 246
     f24:	7f 4f       	sbci	r23, 0xFF	; 255
     f26:	c8 01       	movw	r24, r16
     f28:	0e 94 0e 07 	call	0xe1c	; 0xe1c <_ZN17DallasTemperature13getResolutionEPh>
     f2c:	f8 01       	movw	r30, r16
     f2e:	81 83       	std	Z+1, r24	; 0x01
     f30:	84 81       	ldd	r24, Z+4	; 0x04
     f32:	8f 5f       	subi	r24, 0xFF	; 255
     f34:	84 83       	std	Z+4, r24	; 0x04
     f36:	c0 cf       	rjmp	.-128    	; 0xeb8 <_ZN17DallasTemperature5beginEv+0x30>
     f38:	f8 01       	movw	r30, r16
     f3a:	f0 82       	st	Z, r15
     f3c:	db cf       	rjmp	.-74     	; 0xef4 <_ZN17DallasTemperature5beginEv+0x6c>
     f3e:	61 96       	adiw	r28, 0x11	; 17
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	f8 94       	cli
     f44:	de bf       	out	0x3e, r29	; 62
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	cd bf       	out	0x3d, r28	; 61
     f4a:	df 91       	pop	r29
     f4c:	cf 91       	pop	r28
     f4e:	1f 91       	pop	r17
     f50:	0f 91       	pop	r16
     f52:	ff 90       	pop	r15
     f54:	ef 90       	pop	r14
     f56:	08 95       	ret

00000f58 <_ZN17DallasTemperature21isConversionAvailableEPh>:
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	29 97       	sbiw	r28, 0x09	; 9
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	f8 94       	cli
     f66:	de bf       	out	0x3e, r29	; 62
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	cd bf       	out	0x3d, r28	; 61
     f6c:	ae 01       	movw	r20, r28
     f6e:	4f 5f       	subi	r20, 0xFF	; 255
     f70:	5f 4f       	sbci	r21, 0xFF	; 255
     f72:	0e 94 aa 05 	call	0xb54	; 0xb54 <_ZN17DallasTemperature14readScratchPadEPhS0_>
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	99 81       	ldd	r25, Y+1	; 0x01
     f7a:	91 11       	cpse	r25, r1
     f7c:	01 c0       	rjmp	.+2      	; 0xf80 <_ZN17DallasTemperature21isConversionAvailableEPh+0x28>
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	29 96       	adiw	r28, 0x09	; 9
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	f8 94       	cli
     f86:	de bf       	out	0x3e, r29	; 62
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	cd bf       	out	0x3d, r28	; 61
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	08 95       	ret

00000f92 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>:
     f92:	cf 92       	push	r12
     f94:	df 92       	push	r13
     f96:	ef 92       	push	r14
     f98:	ff 92       	push	r15
     f9a:	0f 93       	push	r16
     f9c:	1f 93       	push	r17
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	ec 01       	movw	r28, r24
     fa4:	8b 01       	movw	r16, r22
     fa6:	45 2b       	or	r20, r21
     fa8:	f1 f0       	breq	.+60     	; 0xfe6 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x54>
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	88 23       	and	r24, r24
     fae:	d9 f0       	breq	.+54     	; 0xfe6 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x54>
     fb0:	88 81       	ld	r24, Y
     fb2:	81 11       	cpse	r24, r1
     fb4:	18 c0       	rjmp	.+48     	; 0xfe6 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x54>
     fb6:	0e 94 1d 11 	call	0x223a	; 0x223a <millis>
     fba:	6b 01       	movw	r12, r22
     fbc:	7c 01       	movw	r14, r24
     fbe:	60 e0       	ldi	r22, 0x00	; 0
     fc0:	70 e0       	ldi	r23, 0x00	; 0
     fc2:	ce 01       	movw	r24, r28
     fc4:	0e 94 ac 07 	call	0xf58	; 0xf58 <_ZN17DallasTemperature21isConversionAvailableEPh>
     fc8:	81 11       	cpse	r24, r1
     fca:	0d c0       	rjmp	.+26     	; 0xfe6 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x54>
     fcc:	0e 94 1d 11 	call	0x223a	; 0x223a <millis>
     fd0:	dc 01       	movw	r26, r24
     fd2:	cb 01       	movw	r24, r22
     fd4:	8c 19       	sub	r24, r12
     fd6:	9d 09       	sbc	r25, r13
     fd8:	ae 09       	sbc	r26, r14
     fda:	bf 09       	sbc	r27, r15
     fdc:	8e 3e       	cpi	r24, 0xEE	; 238
     fde:	92 40       	sbci	r25, 0x02	; 2
     fe0:	a1 05       	cpc	r26, r1
     fe2:	b1 05       	cpc	r27, r1
     fe4:	60 f3       	brcs	.-40     	; 0xfbe <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x2c>
     fe6:	f8 01       	movw	r30, r16
     fe8:	80 81       	ld	r24, Z
     fea:	8a 30       	cpi	r24, 0x0A	; 10
     fec:	a9 f4       	brne	.+42     	; 0x1018 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x86>
     fee:	6c eb       	ldi	r22, 0xBC	; 188
     ff0:	70 e0       	ldi	r23, 0x00	; 0
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	06 c0       	rjmp	.+12     	; 0x1004 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x72>
     ff8:	89 30       	cpi	r24, 0x09	; 9
     ffa:	a9 f4       	brne	.+42     	; 0x1026 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x94>
     ffc:	6e e5       	ldi	r22, 0x5E	; 94
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	1f 91       	pop	r17
    100a:	0f 91       	pop	r16
    100c:	ff 90       	pop	r15
    100e:	ef 90       	pop	r14
    1010:	df 90       	pop	r13
    1012:	cf 90       	pop	r12
    1014:	0c 94 4e 11 	jmp	0x229c	; 0x229c <delay>
    1018:	8b 30       	cpi	r24, 0x0B	; 11
    101a:	71 f7       	brne	.-36     	; 0xff8 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x66>
    101c:	67 e7       	ldi	r22, 0x77	; 119
    101e:	71 e0       	ldi	r23, 0x01	; 1
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	ef cf       	rjmp	.-34     	; 0x1004 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x72>
    1026:	6e ee       	ldi	r22, 0xEE	; 238
    1028:	72 e0       	ldi	r23, 0x02	; 2
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	ea cf       	rjmp	.-44     	; 0x1004 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x72>

00001030 <_ZN17DallasTemperature19requestTemperaturesEv>:
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	ec 01       	movw	r28, r24
    1036:	8d 81       	ldd	r24, Y+5	; 0x05
    1038:	9e 81       	ldd	r25, Y+6	; 0x06
    103a:	0e 94 99 09 	call	0x1332	; 0x1332 <_ZN7OneWire5resetEv>
    103e:	8d 81       	ldd	r24, Y+5	; 0x05
    1040:	9e 81       	ldd	r25, Y+6	; 0x06
    1042:	0e 94 a5 0a 	call	0x154a	; 0x154a <_ZN7OneWire4skipEv>
    1046:	48 81       	ld	r20, Y
    1048:	64 e4       	ldi	r22, 0x44	; 68
    104a:	8d 81       	ldd	r24, Y+5	; 0x05
    104c:	9e 81       	ldd	r25, Y+6	; 0x06
    104e:	0e 94 36 0a 	call	0x146c	; 0x146c <_ZN7OneWire5writeEhh>
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	88 23       	and	r24, r24
    1056:	51 f0       	breq	.+20     	; 0x106c <_ZN17DallasTemperature19requestTemperaturesEv+0x3c>
    1058:	be 01       	movw	r22, r28
    105a:	6f 5f       	subi	r22, 0xFF	; 255
    105c:	7f 4f       	sbci	r23, 0xFF	; 255
    105e:	40 e0       	ldi	r20, 0x00	; 0
    1060:	50 e0       	ldi	r21, 0x00	; 0
    1062:	ce 01       	movw	r24, r28
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	08 95       	ret

00001072 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>:
  return toFahrenheit(getTempCByIndex(deviceIndex));
}

// reads scratchpad and returns the temperature in degrees C
float DallasTemperature::calculateTemperature(uint8_t* deviceAddress, uint8_t* scratchPad)
{
    1072:	8f 92       	push	r8
    1074:	9f 92       	push	r9
    1076:	af 92       	push	r10
    1078:	bf 92       	push	r11
    107a:	cf 92       	push	r12
    107c:	df 92       	push	r13
    107e:	ef 92       	push	r14
    1080:	ff 92       	push	r15
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
    1086:	fa 01       	movw	r30, r20
  int16_t rawTemperature = (((int16_t)scratchPad[TEMP_MSB]) << 8) | scratchPad[TEMP_LSB];
    1088:	c0 81       	ld	r28, Z
    108a:	d1 81       	ldd	r29, Z+1	; 0x01
    108c:	90 81       	ld	r25, Z

  switch (deviceAddress[0])
    108e:	db 01       	movw	r26, r22
    1090:	8c 91       	ld	r24, X
    1092:	82 32       	cpi	r24, 0x22	; 34
    1094:	f1 f1       	breq	.+124    	; 0x1112 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xa0>
    1096:	a8 f5       	brcc	.+106    	; 0x1102 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x90>
    1098:	80 31       	cpi	r24, 0x10	; 16
    109a:	09 f0       	breq	.+2      	; 0x109e <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x2c>
    109c:	86 c0       	rjmp	.+268    	; 0x11aa <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x138>
      TEMPERATURE = TEMP_READ - 0.25 + --------------------------
                                               COUNT_PER_C
      */

      // Good spot. Thanks Nic Johns for your contribution
      return (float)(rawTemperature >> 1) - 0.25 +((float)(scratchPad[COUNT_PER_C] - scratchPad[COUNT_REMAIN]) / (float)scratchPad[COUNT_PER_C] );
    109e:	f7 80       	ldd	r15, Z+7	; 0x07
    10a0:	6f 2d       	mov	r22, r15
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	86 81       	ldd	r24, Z+6	; 0x06
    10a6:	68 1b       	sub	r22, r24
    10a8:	71 09       	sbc	r23, r1
    10aa:	07 2e       	mov	r0, r23
    10ac:	00 0c       	add	r0, r0
    10ae:	88 0b       	sbc	r24, r24
    10b0:	99 0b       	sbc	r25, r25
    10b2:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__floatsisf>
    10b6:	4b 01       	movw	r8, r22
    10b8:	5c 01       	movw	r10, r24
    10ba:	6f 2d       	mov	r22, r15
    10bc:	70 e0       	ldi	r23, 0x00	; 0
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__floatunsisf>
    10c6:	9b 01       	movw	r18, r22
    10c8:	ac 01       	movw	r20, r24
    10ca:	c5 01       	movw	r24, r10
    10cc:	b4 01       	movw	r22, r8
    10ce:	0e 94 76 0e 	call	0x1cec	; 0x1cec <__divsf3>
    10d2:	6b 01       	movw	r12, r22
    10d4:	7c 01       	movw	r14, r24
    10d6:	be 01       	movw	r22, r28
    10d8:	75 95       	asr	r23
    10da:	67 95       	ror	r22
    10dc:	07 2e       	mov	r0, r23
    10de:	00 0c       	add	r0, r0
    10e0:	88 0b       	sbc	r24, r24
    10e2:	99 0b       	sbc	r25, r25
    10e4:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__floatsisf>
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	40 e8       	ldi	r20, 0x80	; 128
    10ee:	5e e3       	ldi	r21, 0x3E	; 62
    10f0:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__subsf3>
    10f4:	9b 01       	movw	r18, r22
    10f6:	ac 01       	movw	r20, r24
    10f8:	c7 01       	movw	r24, r14
    10fa:	b6 01       	movw	r22, r12
    10fc:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__addsf3>
    1100:	50 c0       	rjmp	.+160    	; 0x11a2 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x130>
// reads scratchpad and returns the temperature in degrees C
float DallasTemperature::calculateTemperature(uint8_t* deviceAddress, uint8_t* scratchPad)
{
  int16_t rawTemperature = (((int16_t)scratchPad[TEMP_MSB]) << 8) | scratchPad[TEMP_LSB];

  switch (deviceAddress[0])
    1102:	88 32       	cpi	r24, 0x28	; 40
    1104:	31 f0       	breq	.+12     	; 0x1112 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xa0>
    1106:	8b 33       	cpi	r24, 0x3B	; 59
    1108:	09 f0       	breq	.+2      	; 0x110c <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x9a>
    110a:	4f c0       	rjmp	.+158    	; 0x11aa <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x138>
  {
    case MAX31850MODEL:
      if (scratchPad[0] & 0x1) {
    110c:	90 fd       	sbrc	r25, 0
    110e:	45 c0       	rjmp	.+138    	; 0x119a <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x128>
    1110:	1b c0       	rjmp	.+54     	; 0x1148 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xd6>
	return (float)rawTemperature * 0.0625;
      }
      break;
    case DS18B20MODEL:
    case DS1822MODEL:
      switch (scratchPad[CONFIGURATION])
    1112:	84 81       	ldd	r24, Z+4	; 0x04
    1114:	8f 33       	cpi	r24, 0x3F	; 63
    1116:	81 f1       	breq	.+96     	; 0x1178 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x106>
    1118:	98 f4       	brcc	.+38     	; 0x1140 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xce>
    111a:	8f 31       	cpi	r24, 0x1F	; 31
    111c:	09 f0       	breq	.+2      	; 0x1120 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xae>
    111e:	45 c0       	rjmp	.+138    	; 0x11aa <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x138>
          break;
        case TEMP_10_BIT:
          return (float)(rawTemperature >> 2) * 0.25;
          break;
        case TEMP_9_BIT:
          return (float)(rawTemperature >> 3) * 0.5;
    1120:	93 e0       	ldi	r25, 0x03	; 3
    1122:	d5 95       	asr	r29
    1124:	c7 95       	ror	r28
    1126:	9a 95       	dec	r25
    1128:	e1 f7       	brne	.-8      	; 0x1122 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xb0>
    112a:	be 01       	movw	r22, r28
    112c:	dd 0f       	add	r29, r29
    112e:	88 0b       	sbc	r24, r24
    1130:	99 0b       	sbc	r25, r25
    1132:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__floatsisf>
    1136:	20 e0       	ldi	r18, 0x00	; 0
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	40 e0       	ldi	r20, 0x00	; 0
    113c:	5f e3       	ldi	r21, 0x3F	; 63
    113e:	2a c0       	rjmp	.+84     	; 0x1194 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x122>
	return (float)rawTemperature * 0.0625;
      }
      break;
    case DS18B20MODEL:
    case DS1822MODEL:
      switch (scratchPad[CONFIGURATION])
    1140:	8f 35       	cpi	r24, 0x5F	; 95
    1142:	69 f0       	breq	.+26     	; 0x115e <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xec>
    1144:	8f 37       	cpi	r24, 0x7F	; 127
    1146:	89 f5       	brne	.+98     	; 0x11aa <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x138>
      {
        case TEMP_12_BIT:
          return (float)rawTemperature * 0.0625;
    1148:	be 01       	movw	r22, r28
    114a:	dd 0f       	add	r29, r29
    114c:	88 0b       	sbc	r24, r24
    114e:	99 0b       	sbc	r25, r25
    1150:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__floatsisf>
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e8       	ldi	r20, 0x80	; 128
    115a:	5d e3       	ldi	r21, 0x3D	; 61
    115c:	1b c0       	rjmp	.+54     	; 0x1194 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x122>
          break;
        case TEMP_11_BIT:
          return (float)(rawTemperature >> 1) * 0.125;
    115e:	d5 95       	asr	r29
    1160:	c7 95       	ror	r28
    1162:	be 01       	movw	r22, r28
    1164:	dd 0f       	add	r29, r29
    1166:	88 0b       	sbc	r24, r24
    1168:	99 0b       	sbc	r25, r25
    116a:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__floatsisf>
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 e0       	ldi	r20, 0x00	; 0
    1174:	5e e3       	ldi	r21, 0x3E	; 62
    1176:	0e c0       	rjmp	.+28     	; 0x1194 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x122>
          break;
        case TEMP_10_BIT:
          return (float)(rawTemperature >> 2) * 0.25;
    1178:	d5 95       	asr	r29
    117a:	c7 95       	ror	r28
    117c:	d5 95       	asr	r29
    117e:	c7 95       	ror	r28
    1180:	be 01       	movw	r22, r28
    1182:	dd 0f       	add	r29, r29
    1184:	88 0b       	sbc	r24, r24
    1186:	99 0b       	sbc	r25, r25
    1188:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <__floatsisf>
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	40 e8       	ldi	r20, 0x80	; 128
    1192:	5e e3       	ldi	r21, 0x3E	; 62
          break;
        case TEMP_9_BIT:
          return (float)(rawTemperature >> 3) * 0.5;
    1194:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <__mulsf3>
    1198:	04 c0       	rjmp	.+8      	; 0x11a2 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x130>

  switch (deviceAddress[0])
  {
    case MAX31850MODEL:
      if (scratchPad[0] & 0x1) {
	return NAN;
    119a:	60 e0       	ldi	r22, 0x00	; 0
    119c:	70 e0       	ldi	r23, 0x00	; 0
    119e:	80 ec       	ldi	r24, 0xC0	; 192
    11a0:	9f e7       	ldi	r25, 0x7F	; 127
    11a2:	26 2f       	mov	r18, r22
    11a4:	57 2f       	mov	r21, r23
    11a6:	48 2f       	mov	r20, r24
    11a8:	39 2f       	mov	r19, r25

      // Good spot. Thanks Nic Johns for your contribution
      return (float)(rawTemperature >> 1) - 0.25 +((float)(scratchPad[COUNT_PER_C] - scratchPad[COUNT_REMAIN]) / (float)scratchPad[COUNT_PER_C] );
      break;
  }
}
    11aa:	62 2f       	mov	r22, r18
    11ac:	75 2f       	mov	r23, r21
    11ae:	84 2f       	mov	r24, r20
    11b0:	93 2f       	mov	r25, r19
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
    11b6:	ff 90       	pop	r15
    11b8:	ef 90       	pop	r14
    11ba:	df 90       	pop	r13
    11bc:	cf 90       	pop	r12
    11be:	bf 90       	pop	r11
    11c0:	af 90       	pop	r10
    11c2:	9f 90       	pop	r9
    11c4:	8f 90       	pop	r8
    11c6:	08 95       	ret

000011c8 <_ZN17DallasTemperature8getTempCEPh>:
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
float DallasTemperature::getTempC(uint8_t* deviceAddress)
{
    11c8:	ef 92       	push	r14
    11ca:	ff 92       	push	r15
    11cc:	0f 93       	push	r16
    11ce:	1f 93       	push	r17
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	29 97       	sbiw	r28, 0x09	; 9
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	de bf       	out	0x3e, r29	; 62
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	cd bf       	out	0x3d, r28	; 61
    11e4:	8c 01       	movw	r16, r24
    11e6:	7b 01       	movw	r14, r22
  // TODO: Multiple devices (up to 64) on the same bus may take 
  //       some time to negotiate a response
  // What happens in case of collision?

  ScratchPad scratchPad;
  if (isConnected(deviceAddress, scratchPad)) return calculateTemperature(deviceAddress, scratchPad);
    11e8:	ae 01       	movw	r20, r28
    11ea:	4f 5f       	subi	r20, 0xFF	; 255
    11ec:	5f 4f       	sbci	r21, 0xFF	; 255
    11ee:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN17DallasTemperature11isConnectedEPhS0_>
    11f2:	88 23       	and	r24, r24
    11f4:	41 f0       	breq	.+16     	; 0x1206 <_ZN17DallasTemperature8getTempCEPh+0x3e>
    11f6:	ae 01       	movw	r20, r28
    11f8:	4f 5f       	subi	r20, 0xFF	; 255
    11fa:	5f 4f       	sbci	r21, 0xFF	; 255
    11fc:	b7 01       	movw	r22, r14
    11fe:	c8 01       	movw	r24, r16
    1200:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>
    1204:	04 c0       	rjmp	.+8      	; 0x120e <_ZN17DallasTemperature8getTempCEPh+0x46>
  return DEVICE_DISCONNECTED;
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	8e ef       	ldi	r24, 0xFE	; 254
    120c:	92 ec       	ldi	r25, 0xC2	; 194
}
    120e:	29 96       	adiw	r28, 0x09	; 9
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	1f 91       	pop	r17
    1220:	0f 91       	pop	r16
    1222:	ff 90       	pop	r15
    1224:	ef 90       	pop	r14
    1226:	08 95       	ret

00001228 <_ZN17DallasTemperature15getTempCByIndexEh>:
  return requestTemperaturesByAddress(deviceAddress);
}

// Fetch temperature for device index
float DallasTemperature::getTempCByIndex(uint8_t deviceIndex)
{
    1228:	0f 93       	push	r16
    122a:	1f 93       	push	r17
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	28 97       	sbiw	r28, 0x08	; 8
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	cd bf       	out	0x3d, r28	; 61
    1240:	8c 01       	movw	r16, r24
    1242:	46 2f       	mov	r20, r22
  DeviceAddress deviceAddress;
  getAddress(deviceAddress, deviceIndex);
    1244:	be 01       	movw	r22, r28
    1246:	6f 5f       	subi	r22, 0xFF	; 255
    1248:	7f 4f       	sbci	r23, 0xFF	; 255
    124a:	0e 94 80 05 	call	0xb00	; 0xb00 <_ZN17DallasTemperature10getAddressEPhh>
  return getTempC((uint8_t*)deviceAddress);
    124e:	be 01       	movw	r22, r28
    1250:	6f 5f       	subi	r22, 0xFF	; 255
    1252:	7f 4f       	sbci	r23, 0xFF	; 255
    1254:	c8 01       	movw	r24, r16
    1256:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <_ZN17DallasTemperature8getTempCEPh>
}
    125a:	28 96       	adiw	r28, 0x08	; 8
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	f8 94       	cli
    1260:	de bf       	out	0x3e, r29	; 62
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	cd bf       	out	0x3d, r28	; 61
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	1f 91       	pop	r17
    126c:	0f 91       	pop	r16
    126e:	08 95       	ret

00001270 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t>:
		if (clockSource & CS22) TCCR2B |= (1 << CS22);
		if (clockSource & CS21) TCCR2B |= (1 << CS21);
		if (clockSource & CS20) TCCR2B |= (1 << CS20);	
	}
	#endif
}
    1270:	41 11       	cpse	r20, r1
    1272:	05 c0       	rjmp	.+10     	; 0x127e <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0xe>
    1274:	ea e7       	ldi	r30, 0x7A	; 122
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	8f 77       	andi	r24, 0x7F	; 127
    127c:	80 83       	st	Z, r24
    127e:	6a 30       	cpi	r22, 0x0A	; 10
    1280:	a9 f0       	breq	.+42     	; 0x12ac <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x3c>
    1282:	63 fd       	sbrc	r22, 3
    1284:	02 c0       	rjmp	.+4      	; 0x128a <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x1a>
    1286:	88 e0       	ldi	r24, 0x08	; 8
    1288:	01 c0       	rjmp	.+2      	; 0x128c <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x1c>
    128a:	88 e2       	ldi	r24, 0x28	; 40
    128c:	67 70       	andi	r22, 0x07	; 7
    128e:	68 2b       	or	r22, r24
    1290:	88 e1       	ldi	r24, 0x18	; 24
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	a8 95       	wdr
    1298:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    129c:	0f be       	out	0x3f, r0	; 63
    129e:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    12a2:	e0 e6       	ldi	r30, 0x60	; 96
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	80 64       	ori	r24, 0x40	; 64
    12aa:	80 83       	st	Z, r24
    12ac:	21 11       	cpse	r18, r1
    12ae:	14 c0       	rjmp	.+40     	; 0x12d8 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x68>
    12b0:	83 b7       	in	r24, 0x33	; 51
    12b2:	81 7f       	andi	r24, 0xF1	; 241
    12b4:	84 60       	ori	r24, 0x04	; 4
    12b6:	83 bf       	out	0x33, r24	; 51
    12b8:	f8 94       	cli
    12ba:	83 b7       	in	r24, 0x33	; 51
    12bc:	81 60       	ori	r24, 0x01	; 1
    12be:	83 bf       	out	0x33, r24	; 51
    12c0:	85 b7       	in	r24, 0x35	; 53
    12c2:	80 66       	ori	r24, 0x60	; 96
    12c4:	85 bf       	out	0x35, r24	; 53
    12c6:	8f 7d       	andi	r24, 0xDF	; 223
    12c8:	85 bf       	out	0x35, r24	; 53
    12ca:	78 94       	sei
    12cc:	88 95       	sleep
    12ce:	83 b7       	in	r24, 0x33	; 51
    12d0:	8e 7f       	andi	r24, 0xFE	; 254
    12d2:	83 bf       	out	0x33, r24	; 51
    12d4:	78 94       	sei
    12d6:	0e c0       	rjmp	.+28     	; 0x12f4 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x84>
    12d8:	83 b7       	in	r24, 0x33	; 51
    12da:	81 7f       	andi	r24, 0xF1	; 241
    12dc:	84 60       	ori	r24, 0x04	; 4
    12de:	83 bf       	out	0x33, r24	; 51
    12e0:	f8 94       	cli
    12e2:	83 b7       	in	r24, 0x33	; 51
    12e4:	81 60       	ori	r24, 0x01	; 1
    12e6:	83 bf       	out	0x33, r24	; 51
    12e8:	78 94       	sei
    12ea:	88 95       	sleep
    12ec:	83 b7       	in	r24, 0x33	; 51
    12ee:	8e 7f       	andi	r24, 0xFE	; 254
    12f0:	83 bf       	out	0x33, r24	; 51
    12f2:	78 94       	sei
    12f4:	41 11       	cpse	r20, r1
    12f6:	05 c0       	rjmp	.+10     	; 0x1302 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x92>
    12f8:	ea e7       	ldi	r30, 0x7A	; 122
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	80 68       	ori	r24, 0x80	; 128
    1300:	80 83       	st	Z, r24
    1302:	08 95       	ret

00001304 <__vector_6>:
*		       required to allow automatic WDIF and WDIE bit clearance in 
*			   hardware.
*
*******************************************************************************/
ISR (WDT_vect)
{
    1304:	1f 92       	push	r1
    1306:	0f 92       	push	r0
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	0f 92       	push	r0
    130c:	11 24       	eor	r1, r1
    130e:	8f 93       	push	r24
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "n"  (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	f8 94       	cli
    1314:	a8 95       	wdr
    1316:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    131a:	88 61       	ori	r24, 0x18	; 24
    131c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1320:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1324:	0f be       	out	0x3f, r0	; 63
	// WDIE & WDIF is cleared in hardware upon entering this ISR
	wdt_disable();
}
    1326:	8f 91       	pop	r24
    1328:	0f 90       	pop	r0
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	0f 90       	pop	r0
    132e:	1f 90       	pop	r1
    1330:	18 95       	reti

00001332 <_ZN7OneWire5resetEv>:
   ROM_NO[0] = family_code;
   for (uint8_t i = 1; i < 8; i++)
      ROM_NO[i] = 0;
   LastDiscrepancy = 64;
   LastFamilyDiscrepancy = 0;
   LastDeviceFlag = FALSE;
    1332:	ff 92       	push	r15
    1334:	0f 93       	push	r16
    1336:	1f 93       	push	r17
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	fc 01       	movw	r30, r24
    133e:	f0 80       	ld	r15, Z
    1340:	c1 81       	ldd	r28, Z+1	; 0x01
    1342:	d2 81       	ldd	r29, Z+2	; 0x02
    1344:	f8 94       	cli
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	0f 2d       	mov	r16, r15
    134a:	00 95       	com	r16
    134c:	80 23       	and	r24, r16
    134e:	89 83       	std	Y+1, r24	; 0x01
    1350:	78 94       	sei
    1352:	1d e7       	ldi	r17, 0x7D	; 125
    1354:	11 50       	subi	r17, 0x01	; 1
    1356:	29 f1       	breq	.+74     	; 0x13a2 <_ZN7OneWire5resetEv+0x70>
    1358:	82 e0       	ldi	r24, 0x02	; 2
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	0e 94 8a 11 	call	0x2314	; 0x2314 <delayMicroseconds>
    1360:	88 81       	ld	r24, Y
    1362:	8f 21       	and	r24, r15
    1364:	b9 f3       	breq	.-18     	; 0x1354 <_ZN7OneWire5resetEv+0x22>
    1366:	f8 94       	cli
    1368:	8a 81       	ldd	r24, Y+2	; 0x02
    136a:	80 23       	and	r24, r16
    136c:	8a 83       	std	Y+2, r24	; 0x02
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	8f 29       	or	r24, r15
    1372:	89 83       	std	Y+1, r24	; 0x01
    1374:	78 94       	sei
    1376:	80 ee       	ldi	r24, 0xE0	; 224
    1378:	91 e0       	ldi	r25, 0x01	; 1
    137a:	0e 94 8a 11 	call	0x2314	; 0x2314 <delayMicroseconds>
    137e:	f8 94       	cli
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	08 23       	and	r16, r24
    1384:	09 83       	std	Y+1, r16	; 0x01
    1386:	86 e4       	ldi	r24, 0x46	; 70
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	0e 94 8a 11 	call	0x2314	; 0x2314 <delayMicroseconds>
    138e:	88 81       	ld	r24, Y
    1390:	f8 22       	and	r15, r24
    1392:	11 e0       	ldi	r17, 0x01	; 1
    1394:	09 f0       	breq	.+2      	; 0x1398 <_ZN7OneWire5resetEv+0x66>
    1396:	10 e0       	ldi	r17, 0x00	; 0
    1398:	78 94       	sei
    139a:	8a e9       	ldi	r24, 0x9A	; 154
    139c:	91 e0       	ldi	r25, 0x01	; 1
    139e:	0e 94 8a 11 	call	0x2314	; 0x2314 <delayMicroseconds>
    13a2:	81 2f       	mov	r24, r17
    13a4:	df 91       	pop	r29
    13a6:	cf 91       	pop	r28
    13a8:	1f 91       	pop	r17
    13aa:	0f 91       	pop	r16
    13ac:	ff 90       	pop	r15
    13ae:	08 95       	ret

000013b0 <_ZN7OneWire9write_bitEh>:
    13b0:	1f 93       	push	r17
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	fc 01       	movw	r30, r24
    13b8:	10 81       	ld	r17, Z
    13ba:	c1 81       	ldd	r28, Z+1	; 0x01
    13bc:	d2 81       	ldd	r29, Z+2	; 0x02
    13be:	81 2f       	mov	r24, r17
    13c0:	80 95       	com	r24
    13c2:	60 ff       	sbrs	r22, 0
    13c4:	12 c0       	rjmp	.+36     	; 0x13ea <_ZN7OneWire9write_bitEh+0x3a>
    13c6:	f8 94       	cli
    13c8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ca:	89 23       	and	r24, r25
    13cc:	8a 83       	std	Y+2, r24	; 0x02
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
    13d0:	81 2b       	or	r24, r17
    13d2:	89 83       	std	Y+1, r24	; 0x01
    13d4:	8a e0       	ldi	r24, 0x0A	; 10
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	0e 94 8a 11 	call	0x2314	; 0x2314 <delayMicroseconds>
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	18 2b       	or	r17, r24
    13e0:	1a 83       	std	Y+2, r17	; 0x02
    13e2:	78 94       	sei
    13e4:	87 e3       	ldi	r24, 0x37	; 55
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	11 c0       	rjmp	.+34     	; 0x140c <_ZN7OneWire9write_bitEh+0x5c>
    13ea:	f8 94       	cli
    13ec:	9a 81       	ldd	r25, Y+2	; 0x02
    13ee:	89 23       	and	r24, r25
    13f0:	8a 83       	std	Y+2, r24	; 0x02
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	81 2b       	or	r24, r17
    13f6:	89 83       	std	Y+1, r24	; 0x01
    13f8:	81 e4       	ldi	r24, 0x41	; 65
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	0e 94 8a 11 	call	0x2314	; 0x2314 <delayMicroseconds>
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	18 2b       	or	r17, r24
    1404:	1a 83       	std	Y+2, r17	; 0x02
    1406:	78 94       	sei
    1408:	85 e0       	ldi	r24, 0x05	; 5
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	1f 91       	pop	r17
    1412:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <delayMicroseconds>

00001416 <_ZN7OneWire8read_bitEv>:
    1416:	0f 93       	push	r16
    1418:	1f 93       	push	r17
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	fc 01       	movw	r30, r24
    1420:	00 81       	ld	r16, Z
    1422:	c1 81       	ldd	r28, Z+1	; 0x01
    1424:	d2 81       	ldd	r29, Z+2	; 0x02
    1426:	f8 94       	cli
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	80 2b       	or	r24, r16
    142c:	89 83       	std	Y+1, r24	; 0x01
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	10 2f       	mov	r17, r16
    1432:	10 95       	com	r17
    1434:	81 23       	and	r24, r17
    1436:	8a 83       	std	Y+2, r24	; 0x02
    1438:	83 e0       	ldi	r24, 0x03	; 3
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	0e 94 8a 11 	call	0x2314	; 0x2314 <delayMicroseconds>
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	18 23       	and	r17, r24
    1444:	19 83       	std	Y+1, r17	; 0x01
    1446:	8a e0       	ldi	r24, 0x0A	; 10
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	0e 94 8a 11 	call	0x2314	; 0x2314 <delayMicroseconds>
    144e:	c8 81       	ld	r28, Y
    1450:	78 94       	sei
    1452:	85 e3       	ldi	r24, 0x35	; 53
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	0e 94 8a 11 	call	0x2314	; 0x2314 <delayMicroseconds>
    145a:	c0 23       	and	r28, r16
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	09 f4       	brne	.+2      	; 0x1462 <_ZN7OneWire8read_bitEv+0x4c>
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	df 91       	pop	r29
    1464:	cf 91       	pop	r28
    1466:	1f 91       	pop	r17
    1468:	0f 91       	pop	r16
    146a:	08 95       	ret

0000146c <_ZN7OneWire5writeEhh>:
    146c:	df 92       	push	r13
    146e:	ef 92       	push	r14
    1470:	ff 92       	push	r15
    1472:	0f 93       	push	r16
    1474:	1f 93       	push	r17
    1476:	cf 93       	push	r28
    1478:	df 93       	push	r29
    147a:	ec 01       	movw	r28, r24
    147c:	d6 2e       	mov	r13, r22
    147e:	e4 2e       	mov	r14, r20
    1480:	08 e0       	ldi	r16, 0x08	; 8
    1482:	10 e0       	ldi	r17, 0x00	; 0
    1484:	ff 24       	eor	r15, r15
    1486:	f3 94       	inc	r15
    1488:	61 e0       	ldi	r22, 0x01	; 1
    148a:	8d 2d       	mov	r24, r13
    148c:	8f 21       	and	r24, r15
    148e:	09 f4       	brne	.+2      	; 0x1492 <_ZN7OneWire5writeEhh+0x26>
    1490:	60 e0       	ldi	r22, 0x00	; 0
    1492:	ce 01       	movw	r24, r28
    1494:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <_ZN7OneWire9write_bitEh>
    1498:	ff 0c       	add	r15, r15
    149a:	01 50       	subi	r16, 0x01	; 1
    149c:	11 09       	sbc	r17, r1
    149e:	a1 f7       	brne	.-24     	; 0x1488 <_ZN7OneWire5writeEhh+0x1c>
    14a0:	e1 10       	cpse	r14, r1
    14a2:	10 c0       	rjmp	.+32     	; 0x14c4 <_ZN7OneWire5writeEhh+0x58>
    14a4:	f8 94       	cli
    14a6:	e9 81       	ldd	r30, Y+1	; 0x01
    14a8:	fa 81       	ldd	r31, Y+2	; 0x02
    14aa:	91 81       	ldd	r25, Z+1	; 0x01
    14ac:	88 81       	ld	r24, Y
    14ae:	80 95       	com	r24
    14b0:	89 23       	and	r24, r25
    14b2:	81 83       	std	Z+1, r24	; 0x01
    14b4:	e9 81       	ldd	r30, Y+1	; 0x01
    14b6:	fa 81       	ldd	r31, Y+2	; 0x02
    14b8:	92 81       	ldd	r25, Z+2	; 0x02
    14ba:	88 81       	ld	r24, Y
    14bc:	80 95       	com	r24
    14be:	89 23       	and	r24, r25
    14c0:	82 83       	std	Z+2, r24	; 0x02
    14c2:	78 94       	sei
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	1f 91       	pop	r17
    14ca:	0f 91       	pop	r16
    14cc:	ff 90       	pop	r15
    14ce:	ef 90       	pop	r14
    14d0:	df 90       	pop	r13
    14d2:	08 95       	ret

000014d4 <_ZN7OneWire4readEv>:
    14d4:	ef 92       	push	r14
    14d6:	ff 92       	push	r15
    14d8:	0f 93       	push	r16
    14da:	1f 93       	push	r17
    14dc:	cf 93       	push	r28
    14de:	df 93       	push	r29
    14e0:	7c 01       	movw	r14, r24
    14e2:	08 e0       	ldi	r16, 0x08	; 8
    14e4:	10 e0       	ldi	r17, 0x00	; 0
    14e6:	c0 e0       	ldi	r28, 0x00	; 0
    14e8:	d1 e0       	ldi	r29, 0x01	; 1
    14ea:	c7 01       	movw	r24, r14
    14ec:	0e 94 0b 0a 	call	0x1416	; 0x1416 <_ZN7OneWire8read_bitEv>
    14f0:	81 11       	cpse	r24, r1
    14f2:	cd 2b       	or	r28, r29
    14f4:	dd 0f       	add	r29, r29
    14f6:	01 50       	subi	r16, 0x01	; 1
    14f8:	11 09       	sbc	r17, r1
    14fa:	b9 f7       	brne	.-18     	; 0x14ea <_ZN7OneWire4readEv+0x16>
    14fc:	8c 2f       	mov	r24, r28
    14fe:	df 91       	pop	r29
    1500:	cf 91       	pop	r28
    1502:	1f 91       	pop	r17
    1504:	0f 91       	pop	r16
    1506:	ff 90       	pop	r15
    1508:	ef 90       	pop	r14
    150a:	08 95       	ret

0000150c <_ZN7OneWire6selectEPKh>:
    150c:	ef 92       	push	r14
    150e:	ff 92       	push	r15
    1510:	0f 93       	push	r16
    1512:	1f 93       	push	r17
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	8c 01       	movw	r16, r24
    151a:	7b 01       	movw	r14, r22
    151c:	40 e0       	ldi	r20, 0x00	; 0
    151e:	65 e5       	ldi	r22, 0x55	; 85
    1520:	0e 94 36 0a 	call	0x146c	; 0x146c <_ZN7OneWire5writeEhh>
    1524:	e7 01       	movw	r28, r14
    1526:	88 e0       	ldi	r24, 0x08	; 8
    1528:	e8 0e       	add	r14, r24
    152a:	f1 1c       	adc	r15, r1
    152c:	69 91       	ld	r22, Y+
    152e:	40 e0       	ldi	r20, 0x00	; 0
    1530:	c8 01       	movw	r24, r16
    1532:	0e 94 36 0a 	call	0x146c	; 0x146c <_ZN7OneWire5writeEhh>
    1536:	ce 15       	cp	r28, r14
    1538:	df 05       	cpc	r29, r15
    153a:	c1 f7       	brne	.-16     	; 0x152c <_ZN7OneWire6selectEPKh+0x20>
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	1f 91       	pop	r17
    1542:	0f 91       	pop	r16
    1544:	ff 90       	pop	r15
    1546:	ef 90       	pop	r14
    1548:	08 95       	ret

0000154a <_ZN7OneWire4skipEv>:
    154a:	40 e0       	ldi	r20, 0x00	; 0
    154c:	6c ec       	ldi	r22, 0xCC	; 204
    154e:	0c 94 36 0a 	jmp	0x146c	; 0x146c <_ZN7OneWire5writeEhh>

00001552 <_ZN7OneWire12reset_searchEv>:
    1552:	fc 01       	movw	r30, r24
    1554:	13 86       	std	Z+11, r1	; 0x0b
    1556:	15 86       	std	Z+13, r1	; 0x0d
    1558:	14 86       	std	Z+12, r1	; 0x0c
    155a:	dc 01       	movw	r26, r24
    155c:	1b 96       	adiw	r26, 0x0b	; 11
    155e:	33 96       	adiw	r30, 0x03	; 3
    1560:	1e 92       	st	-X, r1
    1562:	ae 17       	cp	r26, r30
    1564:	bf 07       	cpc	r27, r31
    1566:	e1 f7       	brne	.-8      	; 0x1560 <_ZN7OneWire12reset_searchEv+0xe>
    1568:	08 95       	ret

0000156a <_ZN7OneWireC1Eh>:
    156a:	1f 93       	push	r17
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	ec 01       	movw	r28, r24
    1572:	16 2f       	mov	r17, r22
    1574:	60 e0       	ldi	r22, 0x00	; 0
    1576:	81 2f       	mov	r24, r17
    1578:	0e 94 f7 11 	call	0x23ee	; 0x23ee <pinMode>
    157c:	61 2f       	mov	r22, r17
    157e:	70 e0       	ldi	r23, 0x00	; 0
    1580:	fb 01       	movw	r30, r22
    1582:	ee 54       	subi	r30, 0x4E	; 78
    1584:	fe 4f       	sbci	r31, 0xFE	; 254
    1586:	e4 91       	lpm	r30, Z
    1588:	e8 83       	st	Y, r30
    158a:	fb 01       	movw	r30, r22
    158c:	ea 53       	subi	r30, 0x3A	; 58
    158e:	fe 4f       	sbci	r31, 0xFE	; 254
    1590:	e4 91       	lpm	r30, Z
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	ee 0f       	add	r30, r30
    1596:	ff 1f       	adc	r31, r31
    1598:	e6 52       	subi	r30, 0x26	; 38
    159a:	fe 4f       	sbci	r31, 0xFE	; 254
    159c:	85 91       	lpm	r24, Z+
    159e:	94 91       	lpm	r25, Z
    15a0:	9a 83       	std	Y+2, r25	; 0x02
    15a2:	89 83       	std	Y+1, r24	; 0x01
    15a4:	ce 01       	movw	r24, r28
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	1f 91       	pop	r17
    15ac:	0c 94 a9 0a 	jmp	0x1552	; 0x1552 <_ZN7OneWire12reset_searchEv>

000015b0 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
    15b0:	bf 92       	push	r11
    15b2:	cf 92       	push	r12
    15b4:	df 92       	push	r13
    15b6:	ef 92       	push	r14
    15b8:	ff 92       	push	r15
    15ba:	0f 93       	push	r16
    15bc:	1f 93       	push	r17
    15be:	cf 93       	push	r28
    15c0:	df 93       	push	r29
    15c2:	ec 01       	movw	r28, r24
    15c4:	d6 2e       	mov	r13, r22
    15c6:	c7 2e       	mov	r12, r23
   rom_byte_number = 0;
   rom_byte_mask = 1;
   search_result = 0;

   // if the last call was not the last one
   if (!LastDeviceFlag)
    15c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ca:	81 11       	cpse	r24, r1
    15cc:	5b c0       	rjmp	.+182    	; 0x1684 <_ZN7OneWire6searchEPh+0xd4>
   {
      // 1-Wire reset
      if (!reset())
    15ce:	ce 01       	movw	r24, r28
    15d0:	0e 94 99 09 	call	0x1332	; 0x1332 <_ZN7OneWire5resetEv>
    15d4:	81 11       	cpse	r24, r1
    15d6:	04 c0       	rjmp	.+8      	; 0x15e0 <_ZN7OneWire6searchEPh+0x30>
      {
         // reset the search
         LastDiscrepancy = 0;
    15d8:	1b 86       	std	Y+11, r1	; 0x0b
         LastDeviceFlag = FALSE;
    15da:	1d 86       	std	Y+13, r1	; 0x0d
         LastFamilyDiscrepancy = 0;
    15dc:	1c 86       	std	Y+12, r1	; 0x0c
         return FALSE;
    15de:	66 c0       	rjmp	.+204    	; 0x16ac <_ZN7OneWire6searchEPh+0xfc>
      }

      // issue the search command
      write(0xF0);
    15e0:	40 e0       	ldi	r20, 0x00	; 0
    15e2:	60 ef       	ldi	r22, 0xF0	; 240
    15e4:	ce 01       	movw	r24, r28
    15e6:	0e 94 36 0a 	call	0x146c	; 0x146c <_ZN7OneWire5writeEhh>

   // initialize for search
   id_bit_number = 1;
   last_zero = 0;
   rom_byte_number = 0;
   rom_byte_mask = 1;
    15ea:	01 e0       	ldi	r16, 0x01	; 1
   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
   last_zero = 0;
   rom_byte_number = 0;
    15ec:	e1 2c       	mov	r14, r1

   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
   last_zero = 0;
    15ee:	b1 2c       	mov	r11, r1
   uint8_t id_bit, cmp_id_bit;

   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
    15f0:	11 e0       	ldi	r17, 0x01	; 1

      // loop to do the search
      do
      {
         // read a bit and its complement
         id_bit = read_bit();
    15f2:	ce 01       	movw	r24, r28
    15f4:	0e 94 0b 0a 	call	0x1416	; 0x1416 <_ZN7OneWire8read_bitEv>
    15f8:	f8 2e       	mov	r15, r24
         cmp_id_bit = read_bit();
    15fa:	ce 01       	movw	r24, r28
    15fc:	0e 94 0b 0a 	call	0x1416	; 0x1416 <_ZN7OneWire8read_bitEv>

         // check for no devices on 1-wire
         if ((id_bit == 1) && (cmp_id_bit == 1))
    1600:	91 e0       	ldi	r25, 0x01	; 1
    1602:	f9 12       	cpse	r15, r25
    1604:	03 c0       	rjmp	.+6      	; 0x160c <_ZN7OneWire6searchEPh+0x5c>
    1606:	81 30       	cpi	r24, 0x01	; 1
    1608:	b1 f4       	brne	.+44     	; 0x1636 <_ZN7OneWire6searchEPh+0x86>
    160a:	34 c0       	rjmp	.+104    	; 0x1674 <_ZN7OneWire6searchEPh+0xc4>
    160c:	2e 2d       	mov	r18, r14
    160e:	30 e0       	ldi	r19, 0x00	; 0
            break;
         else
         {
            // all devices coupled have 0 or 1
            if (id_bit != cmp_id_bit)
    1610:	f8 12       	cpse	r15, r24
    1612:	1b c0       	rjmp	.+54     	; 0x164a <_ZN7OneWire6searchEPh+0x9a>
               search_direction = id_bit;  // bit write value for search
            else
            {
               // if this discrepancy if before the Last Discrepancy
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy)
    1614:	8b 85       	ldd	r24, Y+11	; 0x0b
    1616:	18 17       	cp	r17, r24
    1618:	38 f4       	brcc	.+14     	; 0x1628 <_ZN7OneWire6searchEPh+0x78>
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
    161a:	fe 01       	movw	r30, r28
    161c:	e2 0f       	add	r30, r18
    161e:	f3 1f       	adc	r31, r19
    1620:	83 81       	ldd	r24, Z+3	; 0x03
    1622:	80 23       	and	r24, r16
    1624:	41 f4       	brne	.+16     	; 0x1636 <_ZN7OneWire6searchEPh+0x86>
    1626:	02 c0       	rjmp	.+4      	; 0x162c <_ZN7OneWire6searchEPh+0x7c>
               else
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
    1628:	18 17       	cp	r17, r24
    162a:	29 f0       	breq	.+10     	; 0x1636 <_ZN7OneWire6searchEPh+0x86>
    162c:	f1 2c       	mov	r15, r1
               if (search_direction == 0)
               {
                  last_zero = id_bit_number;

                  // check for Last discrepancy in family
                  if (last_zero < 9)
    162e:	19 30       	cpi	r17, 0x09	; 9
    1630:	58 f4       	brcc	.+22     	; 0x1648 <_ZN7OneWire6searchEPh+0x98>
                     LastFamilyDiscrepancy = last_zero;
    1632:	1c 87       	std	Y+12, r17	; 0x0c
    1634:	09 c0       	rjmp	.+18     	; 0x1648 <_ZN7OneWire6searchEPh+0x98>
            }

            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
    1636:	fe 01       	movw	r30, r28
    1638:	ee 0d       	add	r30, r14
    163a:	f1 1d       	adc	r31, r1
    163c:	83 81       	ldd	r24, Z+3	; 0x03
    163e:	80 2b       	or	r24, r16
    1640:	83 83       	std	Z+3, r24	; 0x03
    1642:	ff 24       	eor	r15, r15
    1644:	f3 94       	inc	r15
    1646:	09 c0       	rjmp	.+18     	; 0x165a <_ZN7OneWire6searchEPh+0xaa>
   uint8_t id_bit, cmp_id_bit;

   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
    1648:	b1 2e       	mov	r11, r17
            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
            else
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;
    164a:	fe 01       	movw	r30, r28
    164c:	e2 0f       	add	r30, r18
    164e:	f3 1f       	adc	r31, r19
    1650:	93 81       	ldd	r25, Z+3	; 0x03
    1652:	80 2f       	mov	r24, r16
    1654:	80 95       	com	r24
    1656:	89 23       	and	r24, r25
    1658:	83 83       	std	Z+3, r24	; 0x03

            // serial number search direction write bit
            write_bit(search_direction);
    165a:	6f 2d       	mov	r22, r15
    165c:	ce 01       	movw	r24, r28
    165e:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <_ZN7OneWire9write_bitEh>

            // increment the byte counter id_bit_number
            // and shift the mask rom_byte_mask
            id_bit_number++;
    1662:	1f 5f       	subi	r17, 0xFF	; 255
            rom_byte_mask <<= 1;
    1664:	00 0f       	add	r16, r16

            // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
            if (rom_byte_mask == 0)
    1666:	11 f4       	brne	.+4      	; 0x166c <_ZN7OneWire6searchEPh+0xbc>
            {
                rom_byte_number++;
    1668:	e3 94       	inc	r14
                rom_byte_mask = 1;
    166a:	01 e0       	ldi	r16, 0x01	; 1
            }
         }
      }
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
    166c:	87 e0       	ldi	r24, 0x07	; 7
    166e:	8e 15       	cp	r24, r14
    1670:	08 f0       	brcs	.+2      	; 0x1674 <_ZN7OneWire6searchEPh+0xc4>
    1672:	bf cf       	rjmp	.-130    	; 0x15f2 <_ZN7OneWire6searchEPh+0x42>

      // if the search was successful then
      if (!(id_bit_number < 65))
    1674:	11 34       	cpi	r17, 0x41	; 65
    1676:	30 f0       	brcs	.+12     	; 0x1684 <_ZN7OneWire6searchEPh+0xd4>
      {
         // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
         LastDiscrepancy = last_zero;
    1678:	bb 86       	std	Y+11, r11	; 0x0b

         // check for last device
         if (LastDiscrepancy == 0)
    167a:	b1 10       	cpse	r11, r1
    167c:	12 c0       	rjmp	.+36     	; 0x16a2 <_ZN7OneWire6searchEPh+0xf2>
            LastDeviceFlag = TRUE;
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	8d 87       	std	Y+13, r24	; 0x0d
    1682:	0f c0       	rjmp	.+30     	; 0x16a2 <_ZN7OneWire6searchEPh+0xf2>
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
   {
      LastDiscrepancy = 0;
    1684:	1b 86       	std	Y+11, r1	; 0x0b
      LastDeviceFlag = FALSE;
    1686:	1d 86       	std	Y+13, r1	; 0x0d
      LastFamilyDiscrepancy = 0;
    1688:	1c 86       	std	Y+12, r1	; 0x0c
      search_result = FALSE;
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	de 01       	movw	r26, r28
    168e:	13 96       	adiw	r26, 0x03	; 3
    1690:	ed 2d       	mov	r30, r13
    1692:	fc 2d       	mov	r31, r12
    1694:	2b 96       	adiw	r28, 0x0b	; 11
   }
   for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
    1696:	9d 91       	ld	r25, X+
    1698:	91 93       	st	Z+, r25
    169a:	ac 17       	cp	r26, r28
    169c:	bd 07       	cpc	r27, r29
    169e:	d9 f7       	brne	.-10     	; 0x1696 <_ZN7OneWire6searchEPh+0xe6>
    16a0:	05 c0       	rjmp	.+10     	; 0x16ac <_ZN7OneWire6searchEPh+0xfc>
         search_result = TRUE;
      }
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
    16a2:	8b 81       	ldd	r24, Y+3	; 0x03
    16a4:	88 23       	and	r24, r24
    16a6:	71 f3       	breq	.-36     	; 0x1684 <_ZN7OneWire6searchEPh+0xd4>
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	f0 cf       	rjmp	.-32     	; 0x168c <_ZN7OneWire6searchEPh+0xdc>
      LastFamilyDiscrepancy = 0;
      search_result = FALSE;
   }
   for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
   return search_result;
  }
    16ac:	df 91       	pop	r29
    16ae:	cf 91       	pop	r28
    16b0:	1f 91       	pop	r17
    16b2:	0f 91       	pop	r16
    16b4:	ff 90       	pop	r15
    16b6:	ef 90       	pop	r14
    16b8:	df 90       	pop	r13
    16ba:	cf 90       	pop	r12
    16bc:	bf 90       	pop	r11
    16be:	08 95       	ret

000016c0 <_ZN7OneWire4crc8EPKhh>:
// table, it would probably be smaller and certainly fast enough
// compared to all those delayMicrosecond() calls.  But I got
// confused, so I use this table from the examples.)
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
    16c0:	dc 01       	movw	r26, r24
	uint8_t crc = 0;
    16c2:	80 e0       	ldi	r24, 0x00	; 0

	while (len--) {
    16c4:	61 50       	subi	r22, 0x01	; 1
    16c6:	40 f0       	brcs	.+16     	; 0x16d8 <_ZN7OneWire4crc8EPKhh+0x18>
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
    16c8:	9d 91       	ld	r25, X+
    16ca:	e8 2f       	mov	r30, r24
    16cc:	e9 27       	eor	r30, r25
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	e8 59       	subi	r30, 0x98	; 152
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	84 91       	lpm	r24, Z
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;

	while (len--) {
    16d6:	f6 cf       	rjmp	.-20     	; 0x16c4 <_ZN7OneWire4crc8EPKhh+0x4>
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
	}
	return crc;
}
    16d8:	08 95       	ret

000016da <_ZN8RCSwitch11setProtocolEi>:
  return RCSwitch::nReceivedProtocol;
}

unsigned int* RCSwitch::getReceivedRawdata() {
  return RCSwitch::timings;
}
    16da:	9b 01       	movw	r18, r22
    16dc:	21 50       	subi	r18, 0x01	; 1
    16de:	31 09       	sbc	r19, r1
    16e0:	26 30       	cpi	r18, 0x06	; 6
    16e2:	31 05       	cpc	r19, r1
    16e4:	10 f0       	brcs	.+4      	; 0x16ea <_ZN8RCSwitch11setProtocolEi+0x10>
    16e6:	61 e0       	ldi	r22, 0x01	; 1
    16e8:	70 e0       	ldi	r23, 0x00	; 0
    16ea:	61 50       	subi	r22, 0x01	; 1
    16ec:	71 09       	sbc	r23, r1
    16ee:	49 e0       	ldi	r20, 0x09	; 9
    16f0:	46 9f       	mul	r20, r22
    16f2:	90 01       	movw	r18, r0
    16f4:	47 9f       	mul	r20, r23
    16f6:	30 0d       	add	r19, r0
    16f8:	11 24       	eor	r1, r1
    16fa:	b9 01       	movw	r22, r18
    16fc:	68 59       	subi	r22, 0x98	; 152
    16fe:	7e 4f       	sbci	r23, 0xFE	; 254
    1700:	49 e0       	ldi	r20, 0x09	; 9
    1702:	50 e0       	ldi	r21, 0x00	; 0
    1704:	06 96       	adiw	r24, 0x06	; 6
    1706:	0c 94 93 15 	jmp	0x2b26	; 0x2b26 <memcpy_P>

0000170a <_ZN8RCSwitchC1Ev>:
    170a:	0f 93       	push	r16
    170c:	1f 93       	push	r17
    170e:	cf 93       	push	r28
    1710:	df 93       	push	r29
    1712:	ec 01       	movw	r28, r24
    1714:	0f ef       	ldi	r16, 0xFF	; 255
    1716:	1f ef       	ldi	r17, 0xFF	; 255
    1718:	1b 83       	std	Y+3, r17	; 0x03
    171a:	0a 83       	std	Y+2, r16	; 0x02
    171c:	8a e0       	ldi	r24, 0x0A	; 10
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	9d 83       	std	Y+5, r25	; 0x05
    1722:	8c 83       	std	Y+4, r24	; 0x04
    1724:	61 e0       	ldi	r22, 0x01	; 1
    1726:	70 e0       	ldi	r23, 0x00	; 0
    1728:	ce 01       	movw	r24, r28
    172a:	0e 94 6d 0b 	call	0x16da	; 0x16da <_ZN8RCSwitch11setProtocolEi>
    172e:	19 83       	std	Y+1, r17	; 0x01
    1730:	08 83       	st	Y, r16
    1732:	8c e3       	ldi	r24, 0x3C	; 60
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <_ZN8RCSwitch17nReceiveToleranceE+0x1>
    173a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <_ZN8RCSwitch17nReceiveToleranceE>
    173e:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <_ZN8RCSwitch14nReceivedValueE>
    1742:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <_ZN8RCSwitch14nReceivedValueE+0x1>
    1746:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <_ZN8RCSwitch14nReceivedValueE+0x2>
    174a:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <_ZN8RCSwitch14nReceivedValueE+0x3>
    174e:	df 91       	pop	r29
    1750:	cf 91       	pop	r28
    1752:	1f 91       	pop	r17
    1754:	0f 91       	pop	r16
    1756:	08 95       	ret

00001758 <_ZN8RCSwitch17setRepeatTransmitEi>:
    1758:	fc 01       	movw	r30, r24
    175a:	75 83       	std	Z+5, r23	; 0x05
    175c:	64 83       	std	Z+4, r22	; 0x04
    175e:	08 95       	ret

00001760 <_ZN8RCSwitch14enableTransmitEi>:
    1760:	fc 01       	movw	r30, r24
    1762:	86 2f       	mov	r24, r22
    1764:	62 83       	std	Z+2, r22	; 0x02
    1766:	73 83       	std	Z+3, r23	; 0x03
    1768:	61 e0       	ldi	r22, 0x01	; 1
    176a:	0c 94 f7 11 	jmp	0x23ee	; 0x23ee <pinMode>

0000176e <_ZN8RCSwitch15disableTransmitEv>:
    176e:	2f ef       	ldi	r18, 0xFF	; 255
    1770:	3f ef       	ldi	r19, 0xFF	; 255
    1772:	fc 01       	movw	r30, r24
    1774:	33 83       	std	Z+3, r19	; 0x03
    1776:	22 83       	std	Z+2, r18	; 0x02
    1778:	08 95       	ret

0000177a <_ZN8RCSwitch8transmitENS_7HighLowE>:
    177a:	ff 92       	push	r15
    177c:	0f 93       	push	r16
    177e:	1f 93       	push	r17
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	ec 01       	movw	r28, r24
    1786:	f6 2e       	mov	r15, r22
    1788:	07 2f       	mov	r16, r23
    178a:	8e 85       	ldd	r24, Y+14	; 0x0e
    178c:	88 23       	and	r24, r24
    178e:	19 f0       	breq	.+6      	; 0x1796 <_ZN8RCSwitch8transmitENS_7HighLowE+0x1c>
    1790:	60 e0       	ldi	r22, 0x00	; 0
    1792:	11 e0       	ldi	r17, 0x01	; 1
    1794:	02 c0       	rjmp	.+4      	; 0x179a <_ZN8RCSwitch8transmitENS_7HighLowE+0x20>
    1796:	61 e0       	ldi	r22, 0x01	; 1
    1798:	10 e0       	ldi	r17, 0x00	; 0
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	0e 94 33 12 	call	0x2466	; 0x2466 <digitalWrite>
    17a0:	8e 81       	ldd	r24, Y+6	; 0x06
    17a2:	9f 81       	ldd	r25, Y+7	; 0x07
    17a4:	9c 01       	movw	r18, r24
    17a6:	f2 9e       	mul	r15, r18
    17a8:	c0 01       	movw	r24, r0
    17aa:	f3 9e       	mul	r15, r19
    17ac:	90 0d       	add	r25, r0
    17ae:	11 24       	eor	r1, r1
    17b0:	0e 94 8a 11 	call	0x2314	; 0x2314 <delayMicroseconds>
    17b4:	61 2f       	mov	r22, r17
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	0e 94 33 12 	call	0x2466	; 0x2466 <digitalWrite>
    17bc:	8e 81       	ldd	r24, Y+6	; 0x06
    17be:	9f 81       	ldd	r25, Y+7	; 0x07
    17c0:	9c 01       	movw	r18, r24
    17c2:	02 9f       	mul	r16, r18
    17c4:	c0 01       	movw	r24, r0
    17c6:	03 9f       	mul	r16, r19
    17c8:	90 0d       	add	r25, r0
    17ca:	11 24       	eor	r1, r1
    17cc:	df 91       	pop	r29
    17ce:	cf 91       	pop	r28
    17d0:	1f 91       	pop	r17
    17d2:	0f 91       	pop	r16
    17d4:	ff 90       	pop	r15
    17d6:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <delayMicroseconds>

000017da <_ZN8RCSwitch13enableReceiveEv>:
    17da:	fc 01       	movw	r30, r24
    17dc:	80 81       	ld	r24, Z
    17de:	91 81       	ldd	r25, Z+1	; 0x01
    17e0:	8f 3f       	cpi	r24, 0xFF	; 255
    17e2:	ff ef       	ldi	r31, 0xFF	; 255
    17e4:	9f 07       	cpc	r25, r31
    17e6:	91 f0       	breq	.+36     	; 0x180c <_ZN8RCSwitch13enableReceiveEv+0x32>
    17e8:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <_ZN8RCSwitch14nReceivedValueE>
    17ec:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <_ZN8RCSwitch14nReceivedValueE+0x1>
    17f0:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <_ZN8RCSwitch14nReceivedValueE+0x2>
    17f4:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <_ZN8RCSwitch14nReceivedValueE+0x3>
    17f8:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <_ZN8RCSwitch18nReceivedBitlengthE+0x1>
    17fc:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <_ZN8RCSwitch18nReceivedBitlengthE>
    1800:	41 e0       	ldi	r20, 0x01	; 1
    1802:	50 e0       	ldi	r21, 0x00	; 0
    1804:	69 e8       	ldi	r22, 0x89	; 137
    1806:	7d e0       	ldi	r23, 0x0D	; 13
    1808:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <attachInterrupt>
    180c:	08 95       	ret

0000180e <_ZN8RCSwitch14disableReceiveEv>:
    180e:	cf 93       	push	r28
    1810:	df 93       	push	r29
    1812:	ec 01       	movw	r28, r24
    1814:	88 81       	ld	r24, Y
    1816:	0e 94 73 10 	call	0x20e6	; 0x20e6 <detachInterrupt>
    181a:	8f ef       	ldi	r24, 0xFF	; 255
    181c:	9f ef       	ldi	r25, 0xFF	; 255
    181e:	99 83       	std	Y+1, r25	; 0x01
    1820:	88 83       	st	Y, r24
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	08 95       	ret

00001828 <_ZN8RCSwitch4sendEmj>:
    1828:	2f 92       	push	r2
    182a:	3f 92       	push	r3
    182c:	4f 92       	push	r4
    182e:	5f 92       	push	r5
    1830:	6f 92       	push	r6
    1832:	7f 92       	push	r7
    1834:	8f 92       	push	r8
    1836:	9f 92       	push	r9
    1838:	af 92       	push	r10
    183a:	bf 92       	push	r11
    183c:	cf 92       	push	r12
    183e:	df 92       	push	r13
    1840:	ef 92       	push	r14
    1842:	ff 92       	push	r15
    1844:	0f 93       	push	r16
    1846:	1f 93       	push	r17
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
    184c:	dc 01       	movw	r26, r24
    184e:	12 96       	adiw	r26, 0x02	; 2
    1850:	ed 91       	ld	r30, X+
    1852:	fc 91       	ld	r31, X
    1854:	13 97       	sbiw	r26, 0x03	; 3
    1856:	31 96       	adiw	r30, 0x01	; 1
    1858:	09 f4       	brne	.+2      	; 0x185c <_ZN8RCSwitch4sendEmj+0x34>
    185a:	5c c0       	rjmp	.+184    	; 0x1914 <_ZN8RCSwitch4sendEmj+0xec>
    185c:	19 01       	movw	r2, r18
    185e:	6a 01       	movw	r12, r20
    1860:	7b 01       	movw	r14, r22
    1862:	ec 01       	movw	r28, r24
    1864:	48 80       	ld	r4, Y
    1866:	59 80       	ldd	r5, Y+1	; 0x01
    1868:	8f ef       	ldi	r24, 0xFF	; 255
    186a:	48 16       	cp	r4, r24
    186c:	58 06       	cpc	r5, r24
    186e:	19 f0       	breq	.+6      	; 0x1876 <_ZN8RCSwitch4sendEmj+0x4e>
    1870:	ce 01       	movw	r24, r28
    1872:	0e 94 07 0c 	call	0x180e	; 0x180e <_ZN8RCSwitch14disableReceiveEv>
    1876:	61 2c       	mov	r6, r1
    1878:	71 2c       	mov	r7, r1
    187a:	81 2c       	mov	r8, r1
    187c:	91 2c       	mov	r9, r1
    187e:	54 01       	movw	r10, r8
    1880:	83 94       	inc	r8
    1882:	8c 81       	ldd	r24, Y+4	; 0x04
    1884:	9d 81       	ldd	r25, Y+5	; 0x05
    1886:	68 16       	cp	r6, r24
    1888:	79 06       	cpc	r7, r25
    188a:	4c f5       	brge	.+82     	; 0x18de <_ZN8RCSwitch4sendEmj+0xb6>
    188c:	81 01       	movw	r16, r2
    188e:	01 50       	subi	r16, 0x01	; 1
    1890:	11 09       	sbc	r17, r1
    1892:	17 fd       	sbrc	r17, 7
    1894:	1b c0       	rjmp	.+54     	; 0x18cc <_ZN8RCSwitch4sendEmj+0xa4>
    1896:	d5 01       	movw	r26, r10
    1898:	c4 01       	movw	r24, r8
    189a:	00 2e       	mov	r0, r16
    189c:	04 c0       	rjmp	.+8      	; 0x18a6 <_ZN8RCSwitch4sendEmj+0x7e>
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	aa 1f       	adc	r26, r26
    18a4:	bb 1f       	adc	r27, r27
    18a6:	0a 94       	dec	r0
    18a8:	d2 f7       	brpl	.-12     	; 0x189e <_ZN8RCSwitch4sendEmj+0x76>
    18aa:	8c 21       	and	r24, r12
    18ac:	9d 21       	and	r25, r13
    18ae:	ae 21       	and	r26, r14
    18b0:	bf 21       	and	r27, r15
    18b2:	89 2b       	or	r24, r25
    18b4:	8a 2b       	or	r24, r26
    18b6:	8b 2b       	or	r24, r27
    18b8:	19 f0       	breq	.+6      	; 0x18c0 <_ZN8RCSwitch4sendEmj+0x98>
    18ba:	6c 85       	ldd	r22, Y+12	; 0x0c
    18bc:	7d 85       	ldd	r23, Y+13	; 0x0d
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <_ZN8RCSwitch4sendEmj+0x9c>
    18c0:	6a 85       	ldd	r22, Y+10	; 0x0a
    18c2:	7b 85       	ldd	r23, Y+11	; 0x0b
    18c4:	ce 01       	movw	r24, r28
    18c6:	0e 94 bd 0b 	call	0x177a	; 0x177a <_ZN8RCSwitch8transmitENS_7HighLowE>
    18ca:	e1 cf       	rjmp	.-62     	; 0x188e <_ZN8RCSwitch4sendEmj+0x66>
    18cc:	68 85       	ldd	r22, Y+8	; 0x08
    18ce:	79 85       	ldd	r23, Y+9	; 0x09
    18d0:	ce 01       	movw	r24, r28
    18d2:	0e 94 bd 0b 	call	0x177a	; 0x177a <_ZN8RCSwitch8transmitENS_7HighLowE>
    18d6:	af ef       	ldi	r26, 0xFF	; 255
    18d8:	6a 1a       	sub	r6, r26
    18da:	7a 0a       	sbc	r7, r26
    18dc:	d2 cf       	rjmp	.-92     	; 0x1882 <_ZN8RCSwitch4sendEmj+0x5a>
    18de:	bf ef       	ldi	r27, 0xFF	; 255
    18e0:	4b 16       	cp	r4, r27
    18e2:	5b 06       	cpc	r5, r27
    18e4:	b9 f0       	breq	.+46     	; 0x1914 <_ZN8RCSwitch4sendEmj+0xec>
    18e6:	59 82       	std	Y+1, r5	; 0x01
    18e8:	48 82       	st	Y, r4
    18ea:	ce 01       	movw	r24, r28
    18ec:	df 91       	pop	r29
    18ee:	cf 91       	pop	r28
    18f0:	1f 91       	pop	r17
    18f2:	0f 91       	pop	r16
    18f4:	ff 90       	pop	r15
    18f6:	ef 90       	pop	r14
    18f8:	df 90       	pop	r13
    18fa:	cf 90       	pop	r12
    18fc:	bf 90       	pop	r11
    18fe:	af 90       	pop	r10
    1900:	9f 90       	pop	r9
    1902:	8f 90       	pop	r8
    1904:	7f 90       	pop	r7
    1906:	6f 90       	pop	r6
    1908:	5f 90       	pop	r5
    190a:	4f 90       	pop	r4
    190c:	3f 90       	pop	r3
    190e:	2f 90       	pop	r2
    1910:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <_ZN8RCSwitch13enableReceiveEv>
    1914:	df 91       	pop	r29
    1916:	cf 91       	pop	r28
    1918:	1f 91       	pop	r17
    191a:	0f 91       	pop	r16
    191c:	ff 90       	pop	r15
    191e:	ef 90       	pop	r14
    1920:	df 90       	pop	r13
    1922:	cf 90       	pop	r12
    1924:	bf 90       	pop	r11
    1926:	af 90       	pop	r10
    1928:	9f 90       	pop	r9
    192a:	8f 90       	pop	r8
    192c:	7f 90       	pop	r7
    192e:	6f 90       	pop	r6
    1930:	5f 90       	pop	r5
    1932:	4f 90       	pop	r4
    1934:	3f 90       	pop	r3
    1936:	2f 90       	pop	r2
    1938:	08 95       	ret

0000193a <_ZN8RCSwitch15receiveProtocolEij>:
}

/**
 *
 */
bool RECEIVE_ATTR RCSwitch::receiveProtocol(const int p, unsigned int changeCount) {
    193a:	2f 92       	push	r2
    193c:	3f 92       	push	r3
    193e:	4f 92       	push	r4
    1940:	5f 92       	push	r5
    1942:	6f 92       	push	r6
    1944:	7f 92       	push	r7
    1946:	8f 92       	push	r8
    1948:	9f 92       	push	r9
    194a:	af 92       	push	r10
    194c:	bf 92       	push	r11
    194e:	cf 92       	push	r12
    1950:	df 92       	push	r13
    1952:	ef 92       	push	r14
    1954:	ff 92       	push	r15
    1956:	0f 93       	push	r16
    1958:	1f 93       	push	r17
    195a:	cf 93       	push	r28
    195c:	df 93       	push	r29
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    1962:	2d 97       	sbiw	r28, 0x0d	; 13
    1964:	0f b6       	in	r0, 0x3f	; 63
    1966:	f8 94       	cli
    1968:	de bf       	out	0x3e, r29	; 62
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	cd bf       	out	0x3d, r28	; 61
    196e:	8c 01       	movw	r16, r24
    1970:	7b 01       	movw	r14, r22
#ifdef ESP8266
    const Protocol &pro = proto[p-1];
#else
    Protocol pro;
    memcpy_P(&pro, &proto[p-1], sizeof(Protocol));
    1972:	01 97       	sbiw	r24, 0x01	; 1
    1974:	29 e0       	ldi	r18, 0x09	; 9
    1976:	28 9f       	mul	r18, r24
    1978:	b0 01       	movw	r22, r0
    197a:	29 9f       	mul	r18, r25
    197c:	70 0d       	add	r23, r0
    197e:	11 24       	eor	r1, r1
    1980:	68 59       	subi	r22, 0x98	; 152
    1982:	7e 4f       	sbci	r23, 0xFE	; 254
    1984:	49 e0       	ldi	r20, 0x09	; 9
    1986:	50 e0       	ldi	r21, 0x00	; 0
    1988:	ce 01       	movw	r24, r28
    198a:	01 96       	adiw	r24, 0x01	; 1
    198c:	0e 94 93 15 	call	0x2b26	; 0x2b26 <memcpy_P>
#endif

    unsigned long code = 0;
    //Assuming the longer pulse length is the pulse captured in timings[0]
    const unsigned int syncLengthInPulses =  ((pro.syncFactor.low) > (pro.syncFactor.high)) ? (pro.syncFactor.low) : (pro.syncFactor.high);
    const unsigned int delay = RCSwitch::timings[0] / syncLengthInPulses;
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	6c 81       	ldd	r22, Y+4	; 0x04
    1994:	68 17       	cp	r22, r24
    1996:	08 f4       	brcc	.+2      	; 0x199a <_ZN8RCSwitch15receiveProtocolEij+0x60>
    1998:	68 2f       	mov	r22, r24
    199a:	70 e0       	ldi	r23, 0x00	; 0
    199c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <_ZN8RCSwitch7timingsE>
    19a0:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <_ZN8RCSwitch7timingsE+0x1>
    19a4:	0e 94 2a 13 	call	0x2654	; 0x2654 <__udivmodhi4>
    19a8:	9b 01       	movw	r18, r22
    const unsigned int delayTolerance = delay * RCSwitch::nReceiveTolerance / 100;
    19aa:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <_ZN8RCSwitch17nReceiveToleranceE>
    19ae:	50 91 21 01 	lds	r21, 0x0121	; 0x800121 <_ZN8RCSwitch17nReceiveToleranceE+0x1>
    19b2:	64 9f       	mul	r22, r20
    19b4:	c0 01       	movw	r24, r0
    19b6:	65 9f       	mul	r22, r21
    19b8:	90 0d       	add	r25, r0
    19ba:	74 9f       	mul	r23, r20
    19bc:	90 0d       	add	r25, r0
    19be:	11 24       	eor	r1, r1
    19c0:	64 e6       	ldi	r22, 0x64	; 100
    19c2:	70 e0       	ldi	r23, 0x00	; 0
    19c4:	0e 94 2a 13 	call	0x2654	; 0x2654 <__udivmodhi4>
     *
     * |-filtered out-|--1st dur--|--Start data--|
     *
     * The 2nd saved duration starts the data
     */
    const unsigned int firstDataTiming = (pro.invertedSignal) ? (2) : (1);
    19c8:	89 85       	ldd	r24, Y+9	; 0x09
    19ca:	81 11       	cpse	r24, r1
    19cc:	03 c0       	rjmp	.+6      	; 0x19d4 <_ZN8RCSwitch15receiveProtocolEij+0x9a>
    19ce:	a1 e0       	ldi	r26, 0x01	; 1
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <_ZN8RCSwitch15receiveProtocolEij+0x9e>
    19d4:	a2 e0       	ldi	r26, 0x02	; 2
    19d6:	b0 e0       	ldi	r27, 0x00	; 0

    for (unsigned int i = firstDataTiming; i < changeCount - 1; i += 2) {
        code <<= 1;
        if (diff(RCSwitch::timings[i], delay * pro.zero.high) < delayTolerance &&
    19d8:	8d 81       	ldd	r24, Y+5	; 0x05
    19da:	82 9f       	mul	r24, r18
    19dc:	30 01       	movw	r6, r0
    19de:	83 9f       	mul	r24, r19
    19e0:	70 0c       	add	r7, r0
    19e2:	11 24       	eor	r1, r1
    19e4:	7b 86       	std	Y+11, r7	; 0x0b
    19e6:	6a 86       	std	Y+10, r6	; 0x0a
            diff(RCSwitch::timings[i + 1], delay * pro.zero.low) < delayTolerance) {
    19e8:	8e 81       	ldd	r24, Y+6	; 0x06
    19ea:	82 9f       	mul	r24, r18
    19ec:	10 01       	movw	r2, r0
    19ee:	83 9f       	mul	r24, r19
    19f0:	30 0c       	add	r3, r0
    19f2:	11 24       	eor	r1, r1
            // zero
        } else if (diff(RCSwitch::timings[i], delay * pro.one.high) < delayTolerance &&
    19f4:	8f 81       	ldd	r24, Y+7	; 0x07
    19f6:	82 9f       	mul	r24, r18
    19f8:	20 01       	movw	r4, r0
    19fa:	83 9f       	mul	r24, r19
    19fc:	50 0c       	add	r5, r0
    19fe:	11 24       	eor	r1, r1
                   diff(RCSwitch::timings[i + 1], delay * pro.one.low) < delayTolerance) {
    1a00:	88 85       	ldd	r24, Y+8	; 0x08
    1a02:	82 9f       	mul	r24, r18
    1a04:	a0 01       	movw	r20, r0
    1a06:	83 9f       	mul	r24, r19
    1a08:	50 0d       	add	r21, r0
    1a0a:	11 24       	eor	r1, r1
    1a0c:	5d 87       	std	Y+13, r21	; 0x0d
    1a0e:	4c 87       	std	Y+12, r20	; 0x0c
    1a10:	fd 01       	movw	r30, r26
    1a12:	ee 0f       	add	r30, r30
    1a14:	ff 1f       	adc	r31, r31
    1a16:	ea 5f       	subi	r30, 0xFA	; 250
    1a18:	fd 4f       	sbci	r31, 0xFD	; 253
    1a1a:	81 2c       	mov	r8, r1
    1a1c:	91 2c       	mov	r9, r1
    1a1e:	54 01       	movw	r10, r8
     *
     * The 2nd saved duration starts the data
     */
    const unsigned int firstDataTiming = (pro.invertedSignal) ? (2) : (1);

    for (unsigned int i = firstDataTiming; i < changeCount - 1; i += 2) {
    1a20:	67 01       	movw	r12, r14
    1a22:	51 e0       	ldi	r21, 0x01	; 1
    1a24:	c5 1a       	sub	r12, r21
    1a26:	d1 08       	sbc	r13, r1
    1a28:	ac 15       	cp	r26, r12
    1a2a:	bd 05       	cpc	r27, r13
    1a2c:	e0 f5       	brcc	.+120    	; 0x1aa6 <_ZN8RCSwitch15receiveProtocolEij+0x16c>
        code <<= 1;
    1a2e:	88 0c       	add	r8, r8
    1a30:	99 1c       	adc	r9, r9
    1a32:	aa 1c       	adc	r10, r10
    1a34:	bb 1c       	adc	r11, r11
        if (diff(RCSwitch::timings[i], delay * pro.zero.high) < delayTolerance &&
    1a36:	80 81       	ld	r24, Z
    1a38:	91 81       	ldd	r25, Z+1	; 0x01
    1a3a:	ac 01       	movw	r20, r24
    1a3c:	6a 84       	ldd	r6, Y+10	; 0x0a
    1a3e:	7b 84       	ldd	r7, Y+11	; 0x0b
    1a40:	46 19       	sub	r20, r6
    1a42:	57 09       	sbc	r21, r7
    1a44:	57 ff       	sbrs	r21, 7
    1a46:	03 c0       	rjmp	.+6      	; 0x1a4e <_ZN8RCSwitch15receiveProtocolEij+0x114>
    1a48:	51 95       	neg	r21
    1a4a:	41 95       	neg	r20
    1a4c:	51 09       	sbc	r21, r1
    1a4e:	46 17       	cp	r20, r22
    1a50:	57 07       	cpc	r21, r23
    1a52:	60 f4       	brcc	.+24     	; 0x1a6c <_ZN8RCSwitch15receiveProtocolEij+0x132>
    1a54:	42 81       	ldd	r20, Z+2	; 0x02
    1a56:	53 81       	ldd	r21, Z+3	; 0x03
    1a58:	42 19       	sub	r20, r2
    1a5a:	53 09       	sbc	r21, r3
    1a5c:	57 ff       	sbrs	r21, 7
    1a5e:	03 c0       	rjmp	.+6      	; 0x1a66 <_ZN8RCSwitch15receiveProtocolEij+0x12c>
    1a60:	51 95       	neg	r21
    1a62:	41 95       	neg	r20
    1a64:	51 09       	sbc	r21, r1
    1a66:	46 17       	cp	r20, r22
    1a68:	57 07       	cpc	r21, r23
    1a6a:	d0 f0       	brcs	.+52     	; 0x1aa0 <_ZN8RCSwitch15receiveProtocolEij+0x166>
            diff(RCSwitch::timings[i + 1], delay * pro.zero.low) < delayTolerance) {
            // zero
        } else if (diff(RCSwitch::timings[i], delay * pro.one.high) < delayTolerance &&
    1a6c:	84 19       	sub	r24, r4
    1a6e:	95 09       	sbc	r25, r5
    1a70:	97 ff       	sbrs	r25, 7
    1a72:	03 c0       	rjmp	.+6      	; 0x1a7a <_ZN8RCSwitch15receiveProtocolEij+0x140>
    1a74:	91 95       	neg	r25
    1a76:	81 95       	neg	r24
    1a78:	91 09       	sbc	r25, r1
    1a7a:	86 17       	cp	r24, r22
    1a7c:	97 07       	cpc	r25, r23
    1a7e:	78 f5       	brcc	.+94     	; 0x1ade <_ZN8RCSwitch15receiveProtocolEij+0x1a4>
    1a80:	82 81       	ldd	r24, Z+2	; 0x02
    1a82:	93 81       	ldd	r25, Z+3	; 0x03
    1a84:	4c 85       	ldd	r20, Y+12	; 0x0c
    1a86:	5d 85       	ldd	r21, Y+13	; 0x0d
    1a88:	84 1b       	sub	r24, r20
    1a8a:	95 0b       	sbc	r25, r21
    1a8c:	97 ff       	sbrs	r25, 7
    1a8e:	03 c0       	rjmp	.+6      	; 0x1a96 <_ZN8RCSwitch15receiveProtocolEij+0x15c>
    1a90:	91 95       	neg	r25
    1a92:	81 95       	neg	r24
    1a94:	91 09       	sbc	r25, r1
    1a96:	86 17       	cp	r24, r22
    1a98:	97 07       	cpc	r25, r23
    1a9a:	08 f5       	brcc	.+66     	; 0x1ade <_ZN8RCSwitch15receiveProtocolEij+0x1a4>
                   diff(RCSwitch::timings[i + 1], delay * pro.one.low) < delayTolerance) {
            // one
            code |= 1;
    1a9c:	68 94       	set
    1a9e:	80 f8       	bld	r8, 0
     *
     * The 2nd saved duration starts the data
     */
    const unsigned int firstDataTiming = (pro.invertedSignal) ? (2) : (1);

    for (unsigned int i = firstDataTiming; i < changeCount - 1; i += 2) {
    1aa0:	12 96       	adiw	r26, 0x02	; 2
    1aa2:	34 96       	adiw	r30, 0x04	; 4
    1aa4:	c1 cf       	rjmp	.-126    	; 0x1a28 <_ZN8RCSwitch15receiveProtocolEij+0xee>
            // Failed
            return false;
        }
    }

    if (changeCount > 7) {    // ignore very short transmissions: no device sends them, so this must be noise
    1aa6:	58 e0       	ldi	r21, 0x08	; 8
    1aa8:	e5 16       	cp	r14, r21
    1aaa:	f1 04       	cpc	r15, r1
    1aac:	c0 f0       	brcs	.+48     	; 0x1ade <_ZN8RCSwitch15receiveProtocolEij+0x1a4>
        RCSwitch::nReceivedValue = code;
    1aae:	80 92 92 02 	sts	0x0292, r8	; 0x800292 <_ZN8RCSwitch14nReceivedValueE>
    1ab2:	90 92 93 02 	sts	0x0293, r9	; 0x800293 <_ZN8RCSwitch14nReceivedValueE+0x1>
    1ab6:	a0 92 94 02 	sts	0x0294, r10	; 0x800294 <_ZN8RCSwitch14nReceivedValueE+0x2>
    1aba:	b0 92 95 02 	sts	0x0295, r11	; 0x800295 <_ZN8RCSwitch14nReceivedValueE+0x3>
        RCSwitch::nReceivedBitlength = (changeCount - 1) / 2;
    1abe:	d6 94       	lsr	r13
    1ac0:	c7 94       	ror	r12
    1ac2:	d0 92 91 02 	sts	0x0291, r13	; 0x800291 <_ZN8RCSwitch18nReceivedBitlengthE+0x1>
    1ac6:	c0 92 90 02 	sts	0x0290, r12	; 0x800290 <_ZN8RCSwitch18nReceivedBitlengthE>
        RCSwitch::nReceivedDelay = delay;
    1aca:	30 93 8f 02 	sts	0x028F, r19	; 0x80028f <_ZN8RCSwitch14nReceivedDelayE+0x1>
    1ace:	20 93 8e 02 	sts	0x028E, r18	; 0x80028e <_ZN8RCSwitch14nReceivedDelayE>
        RCSwitch::nReceivedProtocol = p;
    1ad2:	10 93 8d 02 	sts	0x028D, r17	; 0x80028d <_ZN8RCSwitch17nReceivedProtocolE+0x1>
    1ad6:	00 93 8c 02 	sts	0x028C, r16	; 0x80028c <_ZN8RCSwitch17nReceivedProtocolE>
        return true;
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	01 c0       	rjmp	.+2      	; 0x1ae0 <_ZN8RCSwitch15receiveProtocolEij+0x1a6>
                   diff(RCSwitch::timings[i + 1], delay * pro.one.low) < delayTolerance) {
            // one
            code |= 1;
        } else {
            // Failed
            return false;
    1ade:	80 e0       	ldi	r24, 0x00	; 0
        RCSwitch::nReceivedProtocol = p;
        return true;
    }

    return false;
}
    1ae0:	2d 96       	adiw	r28, 0x0d	; 13
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	f8 94       	cli
    1ae6:	de bf       	out	0x3e, r29	; 62
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	cd bf       	out	0x3d, r28	; 61
    1aec:	df 91       	pop	r29
    1aee:	cf 91       	pop	r28
    1af0:	1f 91       	pop	r17
    1af2:	0f 91       	pop	r16
    1af4:	ff 90       	pop	r15
    1af6:	ef 90       	pop	r14
    1af8:	df 90       	pop	r13
    1afa:	cf 90       	pop	r12
    1afc:	bf 90       	pop	r11
    1afe:	af 90       	pop	r10
    1b00:	9f 90       	pop	r9
    1b02:	8f 90       	pop	r8
    1b04:	7f 90       	pop	r7
    1b06:	6f 90       	pop	r6
    1b08:	5f 90       	pop	r5
    1b0a:	4f 90       	pop	r4
    1b0c:	3f 90       	pop	r3
    1b0e:	2f 90       	pop	r2
    1b10:	08 95       	ret

00001b12 <_ZN8RCSwitch15handleInterruptEv>:

void RECEIVE_ATTR RCSwitch::handleInterrupt() {
    1b12:	cf 92       	push	r12
    1b14:	df 92       	push	r13
    1b16:	ef 92       	push	r14
    1b18:	ff 92       	push	r15
    1b1a:	0f 93       	push	r16
    1b1c:	1f 93       	push	r17
    1b1e:	cf 93       	push	r28
    1b20:	df 93       	push	r29

  static unsigned int changeCount = 0;
  static unsigned long lastTime = 0;
  static unsigned int repeatCount = 0;

  const long time = micros();
    1b22:	0e 94 29 11 	call	0x2252	; 0x2252 <micros>
    1b26:	6b 01       	movw	r12, r22
    1b28:	7c 01       	movw	r14, r24
  const unsigned int duration = time - lastTime;
    1b2a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <_ZZN8RCSwitch15handleInterruptEvE8lastTime>
    1b2e:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <_ZZN8RCSwitch15handleInterruptEvE8lastTime+0x1>
    1b32:	86 01       	movw	r16, r12
    1b34:	08 1b       	sub	r16, r24
    1b36:	19 0b       	sbc	r17, r25

  if (duration > RCSwitch::nSeparationLimit) {
    1b38:	0d 3c       	cpi	r16, 0xCD	; 205
    1b3a:	20 e1       	ldi	r18, 0x10	; 16
    1b3c:	12 07       	cpc	r17, r18
    1b3e:	90 f1       	brcs	.+100    	; 0x1ba4 <_ZN8RCSwitch15handleInterruptEv+0x92>
    // A long stretch without signal level change occurred. This could
    // be the gap between two transmission.
    if (diff(duration, RCSwitch::timings[0]) < 200) {
    1b40:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <_ZN8RCSwitch7timingsE>
    1b44:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <_ZN8RCSwitch7timingsE+0x1>
    1b48:	98 01       	movw	r18, r16
    1b4a:	28 1b       	sub	r18, r24
    1b4c:	39 0b       	sbc	r19, r25
    1b4e:	c9 01       	movw	r24, r18
    1b50:	37 ff       	sbrs	r19, 7
    1b52:	03 c0       	rjmp	.+6      	; 0x1b5a <_ZN8RCSwitch15handleInterruptEv+0x48>
    1b54:	91 95       	neg	r25
    1b56:	81 95       	neg	r24
    1b58:	91 09       	sbc	r25, r1
    1b5a:	88 3c       	cpi	r24, 0xC8	; 200
    1b5c:	91 05       	cpc	r25, r1
    1b5e:	f4 f4       	brge	.+60     	; 0x1b9c <_ZN8RCSwitch15handleInterruptEv+0x8a>
      // This long signal is close in length to the long signal which
      // started the previously recorded timings; this suggests that
      // it may indeed by a a gap between two transmissions (we assume
      // here that a sender will send the signal multiple times,
      // with roughly the same gap between them).
      repeatCount++;
    1b60:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount>
    1b64:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount+0x1>
    1b68:	01 96       	adiw	r24, 0x01	; 1
    1b6a:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount+0x1>
    1b6e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount>
      if (repeatCount == 2) {
    1b72:	02 97       	sbiw	r24, 0x02	; 2
    1b74:	99 f4       	brne	.+38     	; 0x1b9c <_ZN8RCSwitch15handleInterruptEv+0x8a>
    1b76:	c1 e0       	ldi	r28, 0x01	; 1
    1b78:	d0 e0       	ldi	r29, 0x00	; 0
        for(unsigned int i = 1; i <= numProto; i++) {
          if (receiveProtocol(i, changeCount)) {
    1b7a:	60 91 fe 01 	lds	r22, 0x01FE	; 0x8001fe <_ZZN8RCSwitch15handleInterruptEvE11changeCount>
    1b7e:	70 91 ff 01 	lds	r23, 0x01FF	; 0x8001ff <_ZZN8RCSwitch15handleInterruptEvE11changeCount+0x1>
    1b82:	ce 01       	movw	r24, r28
    1b84:	0e 94 9d 0c 	call	0x193a	; 0x193a <_ZN8RCSwitch15receiveProtocolEij>
    1b88:	81 11       	cpse	r24, r1
    1b8a:	04 c0       	rjmp	.+8      	; 0x1b94 <_ZN8RCSwitch15handleInterruptEv+0x82>
      // it may indeed by a a gap between two transmissions (we assume
      // here that a sender will send the signal multiple times,
      // with roughly the same gap between them).
      repeatCount++;
      if (repeatCount == 2) {
        for(unsigned int i = 1; i <= numProto; i++) {
    1b8c:	21 96       	adiw	r28, 0x01	; 1
    1b8e:	c7 30       	cpi	r28, 0x07	; 7
    1b90:	d1 05       	cpc	r29, r1
    1b92:	99 f7       	brne	.-26     	; 0x1b7a <_ZN8RCSwitch15handleInterruptEv+0x68>
          if (receiveProtocol(i, changeCount)) {
            // receive succeeded for protocol i
            break;
          }
        }
        repeatCount = 0;
    1b94:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount+0x1>
    1b98:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount>
      }
    }
    changeCount = 0;
    1b9c:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <_ZZN8RCSwitch15handleInterruptEvE11changeCount+0x1>
    1ba0:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <_ZZN8RCSwitch15handleInterruptEvE11changeCount>
  }
 
  // detect overflow
  if (changeCount >= RCSWITCH_MAX_CHANGES) {
    1ba4:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <_ZZN8RCSwitch15handleInterruptEvE11changeCount>
    1ba8:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <_ZZN8RCSwitch15handleInterruptEvE11changeCount+0x1>
    1bac:	83 34       	cpi	r24, 0x43	; 67
    1bae:	91 05       	cpc	r25, r1
    1bb0:	40 f0       	brcs	.+16     	; 0x1bc2 <_ZN8RCSwitch15handleInterruptEv+0xb0>
    changeCount = 0;
    1bb2:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <_ZZN8RCSwitch15handleInterruptEvE11changeCount+0x1>
    1bb6:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <_ZZN8RCSwitch15handleInterruptEvE11changeCount>
    repeatCount = 0;
    1bba:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount+0x1>
    1bbe:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount>
  }

  RCSwitch::timings[changeCount++] = duration;
    1bc2:	80 91 fe 01 	lds	r24, 0x01FE	; 0x8001fe <_ZZN8RCSwitch15handleInterruptEvE11changeCount>
    1bc6:	90 91 ff 01 	lds	r25, 0x01FF	; 0x8001ff <_ZZN8RCSwitch15handleInterruptEvE11changeCount+0x1>
    1bca:	9c 01       	movw	r18, r24
    1bcc:	2f 5f       	subi	r18, 0xFF	; 255
    1bce:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd0:	30 93 ff 01 	sts	0x01FF, r19	; 0x8001ff <_ZZN8RCSwitch15handleInterruptEvE11changeCount+0x1>
    1bd4:	20 93 fe 01 	sts	0x01FE, r18	; 0x8001fe <_ZZN8RCSwitch15handleInterruptEvE11changeCount>
    1bd8:	88 0f       	add	r24, r24
    1bda:	99 1f       	adc	r25, r25
    1bdc:	fc 01       	movw	r30, r24
    1bde:	ea 5f       	subi	r30, 0xFA	; 250
    1be0:	fd 4f       	sbci	r31, 0xFD	; 253
    1be2:	11 83       	std	Z+1, r17	; 0x01
    1be4:	00 83       	st	Z, r16
  lastTime = time;  
    1be6:	c0 92 02 02 	sts	0x0202, r12	; 0x800202 <_ZZN8RCSwitch15handleInterruptEvE8lastTime>
    1bea:	d0 92 03 02 	sts	0x0203, r13	; 0x800203 <_ZZN8RCSwitch15handleInterruptEvE8lastTime+0x1>
    1bee:	e0 92 04 02 	sts	0x0204, r14	; 0x800204 <_ZZN8RCSwitch15handleInterruptEvE8lastTime+0x2>
    1bf2:	f0 92 05 02 	sts	0x0205, r15	; 0x800205 <_ZZN8RCSwitch15handleInterruptEvE8lastTime+0x3>
}
    1bf6:	df 91       	pop	r29
    1bf8:	cf 91       	pop	r28
    1bfa:	1f 91       	pop	r17
    1bfc:	0f 91       	pop	r16
    1bfe:	ff 90       	pop	r15
    1c00:	ef 90       	pop	r14
    1c02:	df 90       	pop	r13
    1c04:	cf 90       	pop	r12
    1c06:	08 95       	ret

00001c08 <__subsf3>:
    1c08:	50 58       	subi	r21, 0x80	; 128

00001c0a <__addsf3>:
    1c0a:	bb 27       	eor	r27, r27
    1c0c:	aa 27       	eor	r26, r26
    1c0e:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__addsf3x>
    1c12:	0c 94 96 0f 	jmp	0x1f2c	; 0x1f2c <__fp_round>
    1c16:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <__fp_pscA>
    1c1a:	38 f0       	brcs	.+14     	; 0x1c2a <__addsf3+0x20>
    1c1c:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <__fp_pscB>
    1c20:	20 f0       	brcs	.+8      	; 0x1c2a <__addsf3+0x20>
    1c22:	39 f4       	brne	.+14     	; 0x1c32 <__addsf3+0x28>
    1c24:	9f 3f       	cpi	r25, 0xFF	; 255
    1c26:	19 f4       	brne	.+6      	; 0x1c2e <__addsf3+0x24>
    1c28:	26 f4       	brtc	.+8      	; 0x1c32 <__addsf3+0x28>
    1c2a:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <__fp_nan>
    1c2e:	0e f4       	brtc	.+2      	; 0x1c32 <__addsf3+0x28>
    1c30:	e0 95       	com	r30
    1c32:	e7 fb       	bst	r30, 7
    1c34:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__fp_inf>

00001c38 <__addsf3x>:
    1c38:	e9 2f       	mov	r30, r25
    1c3a:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__fp_split3>
    1c3e:	58 f3       	brcs	.-42     	; 0x1c16 <__addsf3+0xc>
    1c40:	ba 17       	cp	r27, r26
    1c42:	62 07       	cpc	r22, r18
    1c44:	73 07       	cpc	r23, r19
    1c46:	84 07       	cpc	r24, r20
    1c48:	95 07       	cpc	r25, r21
    1c4a:	20 f0       	brcs	.+8      	; 0x1c54 <__addsf3x+0x1c>
    1c4c:	79 f4       	brne	.+30     	; 0x1c6c <__addsf3x+0x34>
    1c4e:	a6 f5       	brtc	.+104    	; 0x1cb8 <__addsf3x+0x80>
    1c50:	0c 94 c9 0f 	jmp	0x1f92	; 0x1f92 <__fp_zero>
    1c54:	0e f4       	brtc	.+2      	; 0x1c58 <__addsf3x+0x20>
    1c56:	e0 95       	com	r30
    1c58:	0b 2e       	mov	r0, r27
    1c5a:	ba 2f       	mov	r27, r26
    1c5c:	a0 2d       	mov	r26, r0
    1c5e:	0b 01       	movw	r0, r22
    1c60:	b9 01       	movw	r22, r18
    1c62:	90 01       	movw	r18, r0
    1c64:	0c 01       	movw	r0, r24
    1c66:	ca 01       	movw	r24, r20
    1c68:	a0 01       	movw	r20, r0
    1c6a:	11 24       	eor	r1, r1
    1c6c:	ff 27       	eor	r31, r31
    1c6e:	59 1b       	sub	r21, r25
    1c70:	99 f0       	breq	.+38     	; 0x1c98 <__addsf3x+0x60>
    1c72:	59 3f       	cpi	r21, 0xF9	; 249
    1c74:	50 f4       	brcc	.+20     	; 0x1c8a <__addsf3x+0x52>
    1c76:	50 3e       	cpi	r21, 0xE0	; 224
    1c78:	68 f1       	brcs	.+90     	; 0x1cd4 <__addsf3x+0x9c>
    1c7a:	1a 16       	cp	r1, r26
    1c7c:	f0 40       	sbci	r31, 0x00	; 0
    1c7e:	a2 2f       	mov	r26, r18
    1c80:	23 2f       	mov	r18, r19
    1c82:	34 2f       	mov	r19, r20
    1c84:	44 27       	eor	r20, r20
    1c86:	58 5f       	subi	r21, 0xF8	; 248
    1c88:	f3 cf       	rjmp	.-26     	; 0x1c70 <__addsf3x+0x38>
    1c8a:	46 95       	lsr	r20
    1c8c:	37 95       	ror	r19
    1c8e:	27 95       	ror	r18
    1c90:	a7 95       	ror	r26
    1c92:	f0 40       	sbci	r31, 0x00	; 0
    1c94:	53 95       	inc	r21
    1c96:	c9 f7       	brne	.-14     	; 0x1c8a <__addsf3x+0x52>
    1c98:	7e f4       	brtc	.+30     	; 0x1cb8 <__addsf3x+0x80>
    1c9a:	1f 16       	cp	r1, r31
    1c9c:	ba 0b       	sbc	r27, r26
    1c9e:	62 0b       	sbc	r22, r18
    1ca0:	73 0b       	sbc	r23, r19
    1ca2:	84 0b       	sbc	r24, r20
    1ca4:	ba f0       	brmi	.+46     	; 0x1cd4 <__addsf3x+0x9c>
    1ca6:	91 50       	subi	r25, 0x01	; 1
    1ca8:	a1 f0       	breq	.+40     	; 0x1cd2 <__addsf3x+0x9a>
    1caa:	ff 0f       	add	r31, r31
    1cac:	bb 1f       	adc	r27, r27
    1cae:	66 1f       	adc	r22, r22
    1cb0:	77 1f       	adc	r23, r23
    1cb2:	88 1f       	adc	r24, r24
    1cb4:	c2 f7       	brpl	.-16     	; 0x1ca6 <__addsf3x+0x6e>
    1cb6:	0e c0       	rjmp	.+28     	; 0x1cd4 <__addsf3x+0x9c>
    1cb8:	ba 0f       	add	r27, r26
    1cba:	62 1f       	adc	r22, r18
    1cbc:	73 1f       	adc	r23, r19
    1cbe:	84 1f       	adc	r24, r20
    1cc0:	48 f4       	brcc	.+18     	; 0x1cd4 <__addsf3x+0x9c>
    1cc2:	87 95       	ror	r24
    1cc4:	77 95       	ror	r23
    1cc6:	67 95       	ror	r22
    1cc8:	b7 95       	ror	r27
    1cca:	f7 95       	ror	r31
    1ccc:	9e 3f       	cpi	r25, 0xFE	; 254
    1cce:	08 f0       	brcs	.+2      	; 0x1cd2 <__addsf3x+0x9a>
    1cd0:	b0 cf       	rjmp	.-160    	; 0x1c32 <__addsf3+0x28>
    1cd2:	93 95       	inc	r25
    1cd4:	88 0f       	add	r24, r24
    1cd6:	08 f0       	brcs	.+2      	; 0x1cda <__addsf3x+0xa2>
    1cd8:	99 27       	eor	r25, r25
    1cda:	ee 0f       	add	r30, r30
    1cdc:	97 95       	ror	r25
    1cde:	87 95       	ror	r24
    1ce0:	08 95       	ret

00001ce2 <__cmpsf2>:
    1ce2:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <__fp_cmp>
    1ce6:	08 f4       	brcc	.+2      	; 0x1cea <__cmpsf2+0x8>
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	08 95       	ret

00001cec <__divsf3>:
    1cec:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__divsf3x>
    1cf0:	0c 94 96 0f 	jmp	0x1f2c	; 0x1f2c <__fp_round>
    1cf4:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <__fp_pscB>
    1cf8:	58 f0       	brcs	.+22     	; 0x1d10 <__divsf3+0x24>
    1cfa:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <__fp_pscA>
    1cfe:	40 f0       	brcs	.+16     	; 0x1d10 <__divsf3+0x24>
    1d00:	29 f4       	brne	.+10     	; 0x1d0c <__divsf3+0x20>
    1d02:	5f 3f       	cpi	r21, 0xFF	; 255
    1d04:	29 f0       	breq	.+10     	; 0x1d10 <__divsf3+0x24>
    1d06:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__fp_inf>
    1d0a:	51 11       	cpse	r21, r1
    1d0c:	0c 94 ca 0f 	jmp	0x1f94	; 0x1f94 <__fp_szero>
    1d10:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <__fp_nan>

00001d14 <__divsf3x>:
    1d14:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__fp_split3>
    1d18:	68 f3       	brcs	.-38     	; 0x1cf4 <__divsf3+0x8>

00001d1a <__divsf3_pse>:
    1d1a:	99 23       	and	r25, r25
    1d1c:	b1 f3       	breq	.-20     	; 0x1d0a <__divsf3+0x1e>
    1d1e:	55 23       	and	r21, r21
    1d20:	91 f3       	breq	.-28     	; 0x1d06 <__divsf3+0x1a>
    1d22:	95 1b       	sub	r25, r21
    1d24:	55 0b       	sbc	r21, r21
    1d26:	bb 27       	eor	r27, r27
    1d28:	aa 27       	eor	r26, r26
    1d2a:	62 17       	cp	r22, r18
    1d2c:	73 07       	cpc	r23, r19
    1d2e:	84 07       	cpc	r24, r20
    1d30:	38 f0       	brcs	.+14     	; 0x1d40 <__divsf3_pse+0x26>
    1d32:	9f 5f       	subi	r25, 0xFF	; 255
    1d34:	5f 4f       	sbci	r21, 0xFF	; 255
    1d36:	22 0f       	add	r18, r18
    1d38:	33 1f       	adc	r19, r19
    1d3a:	44 1f       	adc	r20, r20
    1d3c:	aa 1f       	adc	r26, r26
    1d3e:	a9 f3       	breq	.-22     	; 0x1d2a <__divsf3_pse+0x10>
    1d40:	35 d0       	rcall	.+106    	; 0x1dac <__divsf3_pse+0x92>
    1d42:	0e 2e       	mov	r0, r30
    1d44:	3a f0       	brmi	.+14     	; 0x1d54 <__divsf3_pse+0x3a>
    1d46:	e0 e8       	ldi	r30, 0x80	; 128
    1d48:	32 d0       	rcall	.+100    	; 0x1dae <__divsf3_pse+0x94>
    1d4a:	91 50       	subi	r25, 0x01	; 1
    1d4c:	50 40       	sbci	r21, 0x00	; 0
    1d4e:	e6 95       	lsr	r30
    1d50:	00 1c       	adc	r0, r0
    1d52:	ca f7       	brpl	.-14     	; 0x1d46 <__divsf3_pse+0x2c>
    1d54:	2b d0       	rcall	.+86     	; 0x1dac <__divsf3_pse+0x92>
    1d56:	fe 2f       	mov	r31, r30
    1d58:	29 d0       	rcall	.+82     	; 0x1dac <__divsf3_pse+0x92>
    1d5a:	66 0f       	add	r22, r22
    1d5c:	77 1f       	adc	r23, r23
    1d5e:	88 1f       	adc	r24, r24
    1d60:	bb 1f       	adc	r27, r27
    1d62:	26 17       	cp	r18, r22
    1d64:	37 07       	cpc	r19, r23
    1d66:	48 07       	cpc	r20, r24
    1d68:	ab 07       	cpc	r26, r27
    1d6a:	b0 e8       	ldi	r27, 0x80	; 128
    1d6c:	09 f0       	breq	.+2      	; 0x1d70 <__divsf3_pse+0x56>
    1d6e:	bb 0b       	sbc	r27, r27
    1d70:	80 2d       	mov	r24, r0
    1d72:	bf 01       	movw	r22, r30
    1d74:	ff 27       	eor	r31, r31
    1d76:	93 58       	subi	r25, 0x83	; 131
    1d78:	5f 4f       	sbci	r21, 0xFF	; 255
    1d7a:	3a f0       	brmi	.+14     	; 0x1d8a <__divsf3_pse+0x70>
    1d7c:	9e 3f       	cpi	r25, 0xFE	; 254
    1d7e:	51 05       	cpc	r21, r1
    1d80:	78 f0       	brcs	.+30     	; 0x1da0 <__divsf3_pse+0x86>
    1d82:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__fp_inf>
    1d86:	0c 94 ca 0f 	jmp	0x1f94	; 0x1f94 <__fp_szero>
    1d8a:	5f 3f       	cpi	r21, 0xFF	; 255
    1d8c:	e4 f3       	brlt	.-8      	; 0x1d86 <__divsf3_pse+0x6c>
    1d8e:	98 3e       	cpi	r25, 0xE8	; 232
    1d90:	d4 f3       	brlt	.-12     	; 0x1d86 <__divsf3_pse+0x6c>
    1d92:	86 95       	lsr	r24
    1d94:	77 95       	ror	r23
    1d96:	67 95       	ror	r22
    1d98:	b7 95       	ror	r27
    1d9a:	f7 95       	ror	r31
    1d9c:	9f 5f       	subi	r25, 0xFF	; 255
    1d9e:	c9 f7       	brne	.-14     	; 0x1d92 <__divsf3_pse+0x78>
    1da0:	88 0f       	add	r24, r24
    1da2:	91 1d       	adc	r25, r1
    1da4:	96 95       	lsr	r25
    1da6:	87 95       	ror	r24
    1da8:	97 f9       	bld	r25, 7
    1daa:	08 95       	ret
    1dac:	e1 e0       	ldi	r30, 0x01	; 1
    1dae:	66 0f       	add	r22, r22
    1db0:	77 1f       	adc	r23, r23
    1db2:	88 1f       	adc	r24, r24
    1db4:	bb 1f       	adc	r27, r27
    1db6:	62 17       	cp	r22, r18
    1db8:	73 07       	cpc	r23, r19
    1dba:	84 07       	cpc	r24, r20
    1dbc:	ba 07       	cpc	r27, r26
    1dbe:	20 f0       	brcs	.+8      	; 0x1dc8 <__divsf3_pse+0xae>
    1dc0:	62 1b       	sub	r22, r18
    1dc2:	73 0b       	sbc	r23, r19
    1dc4:	84 0b       	sbc	r24, r20
    1dc6:	ba 0b       	sbc	r27, r26
    1dc8:	ee 1f       	adc	r30, r30
    1dca:	88 f7       	brcc	.-30     	; 0x1dae <__divsf3_pse+0x94>
    1dcc:	e0 95       	com	r30
    1dce:	08 95       	ret

00001dd0 <__fixsfsi>:
    1dd0:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fixunssfsi>
    1dd4:	68 94       	set
    1dd6:	b1 11       	cpse	r27, r1
    1dd8:	0c 94 ca 0f 	jmp	0x1f94	; 0x1f94 <__fp_szero>
    1ddc:	08 95       	ret

00001dde <__fixunssfsi>:
    1dde:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <__fp_splitA>
    1de2:	88 f0       	brcs	.+34     	; 0x1e06 <__fixunssfsi+0x28>
    1de4:	9f 57       	subi	r25, 0x7F	; 127
    1de6:	98 f0       	brcs	.+38     	; 0x1e0e <__fixunssfsi+0x30>
    1de8:	b9 2f       	mov	r27, r25
    1dea:	99 27       	eor	r25, r25
    1dec:	b7 51       	subi	r27, 0x17	; 23
    1dee:	b0 f0       	brcs	.+44     	; 0x1e1c <__fixunssfsi+0x3e>
    1df0:	e1 f0       	breq	.+56     	; 0x1e2a <__fixunssfsi+0x4c>
    1df2:	66 0f       	add	r22, r22
    1df4:	77 1f       	adc	r23, r23
    1df6:	88 1f       	adc	r24, r24
    1df8:	99 1f       	adc	r25, r25
    1dfa:	1a f0       	brmi	.+6      	; 0x1e02 <__fixunssfsi+0x24>
    1dfc:	ba 95       	dec	r27
    1dfe:	c9 f7       	brne	.-14     	; 0x1df2 <__fixunssfsi+0x14>
    1e00:	14 c0       	rjmp	.+40     	; 0x1e2a <__fixunssfsi+0x4c>
    1e02:	b1 30       	cpi	r27, 0x01	; 1
    1e04:	91 f0       	breq	.+36     	; 0x1e2a <__fixunssfsi+0x4c>
    1e06:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <__fp_zero>
    1e0a:	b1 e0       	ldi	r27, 0x01	; 1
    1e0c:	08 95       	ret
    1e0e:	0c 94 c9 0f 	jmp	0x1f92	; 0x1f92 <__fp_zero>
    1e12:	67 2f       	mov	r22, r23
    1e14:	78 2f       	mov	r23, r24
    1e16:	88 27       	eor	r24, r24
    1e18:	b8 5f       	subi	r27, 0xF8	; 248
    1e1a:	39 f0       	breq	.+14     	; 0x1e2a <__fixunssfsi+0x4c>
    1e1c:	b9 3f       	cpi	r27, 0xF9	; 249
    1e1e:	cc f3       	brlt	.-14     	; 0x1e12 <__fixunssfsi+0x34>
    1e20:	86 95       	lsr	r24
    1e22:	77 95       	ror	r23
    1e24:	67 95       	ror	r22
    1e26:	b3 95       	inc	r27
    1e28:	d9 f7       	brne	.-10     	; 0x1e20 <__fixunssfsi+0x42>
    1e2a:	3e f4       	brtc	.+14     	; 0x1e3a <__fixunssfsi+0x5c>
    1e2c:	90 95       	com	r25
    1e2e:	80 95       	com	r24
    1e30:	70 95       	com	r23
    1e32:	61 95       	neg	r22
    1e34:	7f 4f       	sbci	r23, 0xFF	; 255
    1e36:	8f 4f       	sbci	r24, 0xFF	; 255
    1e38:	9f 4f       	sbci	r25, 0xFF	; 255
    1e3a:	08 95       	ret

00001e3c <__floatunsisf>:
    1e3c:	e8 94       	clt
    1e3e:	09 c0       	rjmp	.+18     	; 0x1e52 <__floatsisf+0x12>

00001e40 <__floatsisf>:
    1e40:	97 fb       	bst	r25, 7
    1e42:	3e f4       	brtc	.+14     	; 0x1e52 <__floatsisf+0x12>
    1e44:	90 95       	com	r25
    1e46:	80 95       	com	r24
    1e48:	70 95       	com	r23
    1e4a:	61 95       	neg	r22
    1e4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e4e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e50:	9f 4f       	sbci	r25, 0xFF	; 255
    1e52:	99 23       	and	r25, r25
    1e54:	a9 f0       	breq	.+42     	; 0x1e80 <__floatsisf+0x40>
    1e56:	f9 2f       	mov	r31, r25
    1e58:	96 e9       	ldi	r25, 0x96	; 150
    1e5a:	bb 27       	eor	r27, r27
    1e5c:	93 95       	inc	r25
    1e5e:	f6 95       	lsr	r31
    1e60:	87 95       	ror	r24
    1e62:	77 95       	ror	r23
    1e64:	67 95       	ror	r22
    1e66:	b7 95       	ror	r27
    1e68:	f1 11       	cpse	r31, r1
    1e6a:	f8 cf       	rjmp	.-16     	; 0x1e5c <__floatsisf+0x1c>
    1e6c:	fa f4       	brpl	.+62     	; 0x1eac <__floatsisf+0x6c>
    1e6e:	bb 0f       	add	r27, r27
    1e70:	11 f4       	brne	.+4      	; 0x1e76 <__floatsisf+0x36>
    1e72:	60 ff       	sbrs	r22, 0
    1e74:	1b c0       	rjmp	.+54     	; 0x1eac <__floatsisf+0x6c>
    1e76:	6f 5f       	subi	r22, 0xFF	; 255
    1e78:	7f 4f       	sbci	r23, 0xFF	; 255
    1e7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e7e:	16 c0       	rjmp	.+44     	; 0x1eac <__floatsisf+0x6c>
    1e80:	88 23       	and	r24, r24
    1e82:	11 f0       	breq	.+4      	; 0x1e88 <__floatsisf+0x48>
    1e84:	96 e9       	ldi	r25, 0x96	; 150
    1e86:	11 c0       	rjmp	.+34     	; 0x1eaa <__floatsisf+0x6a>
    1e88:	77 23       	and	r23, r23
    1e8a:	21 f0       	breq	.+8      	; 0x1e94 <__floatsisf+0x54>
    1e8c:	9e e8       	ldi	r25, 0x8E	; 142
    1e8e:	87 2f       	mov	r24, r23
    1e90:	76 2f       	mov	r23, r22
    1e92:	05 c0       	rjmp	.+10     	; 0x1e9e <__floatsisf+0x5e>
    1e94:	66 23       	and	r22, r22
    1e96:	71 f0       	breq	.+28     	; 0x1eb4 <__floatsisf+0x74>
    1e98:	96 e8       	ldi	r25, 0x86	; 134
    1e9a:	86 2f       	mov	r24, r22
    1e9c:	70 e0       	ldi	r23, 0x00	; 0
    1e9e:	60 e0       	ldi	r22, 0x00	; 0
    1ea0:	2a f0       	brmi	.+10     	; 0x1eac <__floatsisf+0x6c>
    1ea2:	9a 95       	dec	r25
    1ea4:	66 0f       	add	r22, r22
    1ea6:	77 1f       	adc	r23, r23
    1ea8:	88 1f       	adc	r24, r24
    1eaa:	da f7       	brpl	.-10     	; 0x1ea2 <__floatsisf+0x62>
    1eac:	88 0f       	add	r24, r24
    1eae:	96 95       	lsr	r25
    1eb0:	87 95       	ror	r24
    1eb2:	97 f9       	bld	r25, 7
    1eb4:	08 95       	ret

00001eb6 <__fp_cmp>:
    1eb6:	99 0f       	add	r25, r25
    1eb8:	00 08       	sbc	r0, r0
    1eba:	55 0f       	add	r21, r21
    1ebc:	aa 0b       	sbc	r26, r26
    1ebe:	e0 e8       	ldi	r30, 0x80	; 128
    1ec0:	fe ef       	ldi	r31, 0xFE	; 254
    1ec2:	16 16       	cp	r1, r22
    1ec4:	17 06       	cpc	r1, r23
    1ec6:	e8 07       	cpc	r30, r24
    1ec8:	f9 07       	cpc	r31, r25
    1eca:	c0 f0       	brcs	.+48     	; 0x1efc <__fp_cmp+0x46>
    1ecc:	12 16       	cp	r1, r18
    1ece:	13 06       	cpc	r1, r19
    1ed0:	e4 07       	cpc	r30, r20
    1ed2:	f5 07       	cpc	r31, r21
    1ed4:	98 f0       	brcs	.+38     	; 0x1efc <__fp_cmp+0x46>
    1ed6:	62 1b       	sub	r22, r18
    1ed8:	73 0b       	sbc	r23, r19
    1eda:	84 0b       	sbc	r24, r20
    1edc:	95 0b       	sbc	r25, r21
    1ede:	39 f4       	brne	.+14     	; 0x1eee <__fp_cmp+0x38>
    1ee0:	0a 26       	eor	r0, r26
    1ee2:	61 f0       	breq	.+24     	; 0x1efc <__fp_cmp+0x46>
    1ee4:	23 2b       	or	r18, r19
    1ee6:	24 2b       	or	r18, r20
    1ee8:	25 2b       	or	r18, r21
    1eea:	21 f4       	brne	.+8      	; 0x1ef4 <__fp_cmp+0x3e>
    1eec:	08 95       	ret
    1eee:	0a 26       	eor	r0, r26
    1ef0:	09 f4       	brne	.+2      	; 0x1ef4 <__fp_cmp+0x3e>
    1ef2:	a1 40       	sbci	r26, 0x01	; 1
    1ef4:	a6 95       	lsr	r26
    1ef6:	8f ef       	ldi	r24, 0xFF	; 255
    1ef8:	81 1d       	adc	r24, r1
    1efa:	81 1d       	adc	r24, r1
    1efc:	08 95       	ret

00001efe <__fp_inf>:
    1efe:	97 f9       	bld	r25, 7
    1f00:	9f 67       	ori	r25, 0x7F	; 127
    1f02:	80 e8       	ldi	r24, 0x80	; 128
    1f04:	70 e0       	ldi	r23, 0x00	; 0
    1f06:	60 e0       	ldi	r22, 0x00	; 0
    1f08:	08 95       	ret

00001f0a <__fp_nan>:
    1f0a:	9f ef       	ldi	r25, 0xFF	; 255
    1f0c:	80 ec       	ldi	r24, 0xC0	; 192
    1f0e:	08 95       	ret

00001f10 <__fp_pscA>:
    1f10:	00 24       	eor	r0, r0
    1f12:	0a 94       	dec	r0
    1f14:	16 16       	cp	r1, r22
    1f16:	17 06       	cpc	r1, r23
    1f18:	18 06       	cpc	r1, r24
    1f1a:	09 06       	cpc	r0, r25
    1f1c:	08 95       	ret

00001f1e <__fp_pscB>:
    1f1e:	00 24       	eor	r0, r0
    1f20:	0a 94       	dec	r0
    1f22:	12 16       	cp	r1, r18
    1f24:	13 06       	cpc	r1, r19
    1f26:	14 06       	cpc	r1, r20
    1f28:	05 06       	cpc	r0, r21
    1f2a:	08 95       	ret

00001f2c <__fp_round>:
    1f2c:	09 2e       	mov	r0, r25
    1f2e:	03 94       	inc	r0
    1f30:	00 0c       	add	r0, r0
    1f32:	11 f4       	brne	.+4      	; 0x1f38 <__fp_round+0xc>
    1f34:	88 23       	and	r24, r24
    1f36:	52 f0       	brmi	.+20     	; 0x1f4c <__fp_round+0x20>
    1f38:	bb 0f       	add	r27, r27
    1f3a:	40 f4       	brcc	.+16     	; 0x1f4c <__fp_round+0x20>
    1f3c:	bf 2b       	or	r27, r31
    1f3e:	11 f4       	brne	.+4      	; 0x1f44 <__fp_round+0x18>
    1f40:	60 ff       	sbrs	r22, 0
    1f42:	04 c0       	rjmp	.+8      	; 0x1f4c <__fp_round+0x20>
    1f44:	6f 5f       	subi	r22, 0xFF	; 255
    1f46:	7f 4f       	sbci	r23, 0xFF	; 255
    1f48:	8f 4f       	sbci	r24, 0xFF	; 255
    1f4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f4c:	08 95       	ret

00001f4e <__fp_split3>:
    1f4e:	57 fd       	sbrc	r21, 7
    1f50:	90 58       	subi	r25, 0x80	; 128
    1f52:	44 0f       	add	r20, r20
    1f54:	55 1f       	adc	r21, r21
    1f56:	59 f0       	breq	.+22     	; 0x1f6e <__fp_splitA+0x10>
    1f58:	5f 3f       	cpi	r21, 0xFF	; 255
    1f5a:	71 f0       	breq	.+28     	; 0x1f78 <__fp_splitA+0x1a>
    1f5c:	47 95       	ror	r20

00001f5e <__fp_splitA>:
    1f5e:	88 0f       	add	r24, r24
    1f60:	97 fb       	bst	r25, 7
    1f62:	99 1f       	adc	r25, r25
    1f64:	61 f0       	breq	.+24     	; 0x1f7e <__fp_splitA+0x20>
    1f66:	9f 3f       	cpi	r25, 0xFF	; 255
    1f68:	79 f0       	breq	.+30     	; 0x1f88 <__fp_splitA+0x2a>
    1f6a:	87 95       	ror	r24
    1f6c:	08 95       	ret
    1f6e:	12 16       	cp	r1, r18
    1f70:	13 06       	cpc	r1, r19
    1f72:	14 06       	cpc	r1, r20
    1f74:	55 1f       	adc	r21, r21
    1f76:	f2 cf       	rjmp	.-28     	; 0x1f5c <__fp_split3+0xe>
    1f78:	46 95       	lsr	r20
    1f7a:	f1 df       	rcall	.-30     	; 0x1f5e <__fp_splitA>
    1f7c:	08 c0       	rjmp	.+16     	; 0x1f8e <__fp_splitA+0x30>
    1f7e:	16 16       	cp	r1, r22
    1f80:	17 06       	cpc	r1, r23
    1f82:	18 06       	cpc	r1, r24
    1f84:	99 1f       	adc	r25, r25
    1f86:	f1 cf       	rjmp	.-30     	; 0x1f6a <__fp_splitA+0xc>
    1f88:	86 95       	lsr	r24
    1f8a:	71 05       	cpc	r23, r1
    1f8c:	61 05       	cpc	r22, r1
    1f8e:	08 94       	sec
    1f90:	08 95       	ret

00001f92 <__fp_zero>:
    1f92:	e8 94       	clt

00001f94 <__fp_szero>:
    1f94:	bb 27       	eor	r27, r27
    1f96:	66 27       	eor	r22, r22
    1f98:	77 27       	eor	r23, r23
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	97 f9       	bld	r25, 7
    1f9e:	08 95       	ret

00001fa0 <__mulsf3>:
    1fa0:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <__mulsf3x>
    1fa4:	0c 94 96 0f 	jmp	0x1f2c	; 0x1f2c <__fp_round>
    1fa8:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <__fp_pscA>
    1fac:	38 f0       	brcs	.+14     	; 0x1fbc <__mulsf3+0x1c>
    1fae:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <__fp_pscB>
    1fb2:	20 f0       	brcs	.+8      	; 0x1fbc <__mulsf3+0x1c>
    1fb4:	95 23       	and	r25, r21
    1fb6:	11 f0       	breq	.+4      	; 0x1fbc <__mulsf3+0x1c>
    1fb8:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__fp_inf>
    1fbc:	0c 94 85 0f 	jmp	0x1f0a	; 0x1f0a <__fp_nan>
    1fc0:	11 24       	eor	r1, r1
    1fc2:	0c 94 ca 0f 	jmp	0x1f94	; 0x1f94 <__fp_szero>

00001fc6 <__mulsf3x>:
    1fc6:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__fp_split3>
    1fca:	70 f3       	brcs	.-36     	; 0x1fa8 <__mulsf3+0x8>

00001fcc <__mulsf3_pse>:
    1fcc:	95 9f       	mul	r25, r21
    1fce:	c1 f3       	breq	.-16     	; 0x1fc0 <__mulsf3+0x20>
    1fd0:	95 0f       	add	r25, r21
    1fd2:	50 e0       	ldi	r21, 0x00	; 0
    1fd4:	55 1f       	adc	r21, r21
    1fd6:	62 9f       	mul	r22, r18
    1fd8:	f0 01       	movw	r30, r0
    1fda:	72 9f       	mul	r23, r18
    1fdc:	bb 27       	eor	r27, r27
    1fde:	f0 0d       	add	r31, r0
    1fe0:	b1 1d       	adc	r27, r1
    1fe2:	63 9f       	mul	r22, r19
    1fe4:	aa 27       	eor	r26, r26
    1fe6:	f0 0d       	add	r31, r0
    1fe8:	b1 1d       	adc	r27, r1
    1fea:	aa 1f       	adc	r26, r26
    1fec:	64 9f       	mul	r22, r20
    1fee:	66 27       	eor	r22, r22
    1ff0:	b0 0d       	add	r27, r0
    1ff2:	a1 1d       	adc	r26, r1
    1ff4:	66 1f       	adc	r22, r22
    1ff6:	82 9f       	mul	r24, r18
    1ff8:	22 27       	eor	r18, r18
    1ffa:	b0 0d       	add	r27, r0
    1ffc:	a1 1d       	adc	r26, r1
    1ffe:	62 1f       	adc	r22, r18
    2000:	73 9f       	mul	r23, r19
    2002:	b0 0d       	add	r27, r0
    2004:	a1 1d       	adc	r26, r1
    2006:	62 1f       	adc	r22, r18
    2008:	83 9f       	mul	r24, r19
    200a:	a0 0d       	add	r26, r0
    200c:	61 1d       	adc	r22, r1
    200e:	22 1f       	adc	r18, r18
    2010:	74 9f       	mul	r23, r20
    2012:	33 27       	eor	r19, r19
    2014:	a0 0d       	add	r26, r0
    2016:	61 1d       	adc	r22, r1
    2018:	23 1f       	adc	r18, r19
    201a:	84 9f       	mul	r24, r20
    201c:	60 0d       	add	r22, r0
    201e:	21 1d       	adc	r18, r1
    2020:	82 2f       	mov	r24, r18
    2022:	76 2f       	mov	r23, r22
    2024:	6a 2f       	mov	r22, r26
    2026:	11 24       	eor	r1, r1
    2028:	9f 57       	subi	r25, 0x7F	; 127
    202a:	50 40       	sbci	r21, 0x00	; 0
    202c:	9a f0       	brmi	.+38     	; 0x2054 <__mulsf3_pse+0x88>
    202e:	f1 f0       	breq	.+60     	; 0x206c <__mulsf3_pse+0xa0>
    2030:	88 23       	and	r24, r24
    2032:	4a f0       	brmi	.+18     	; 0x2046 <__mulsf3_pse+0x7a>
    2034:	ee 0f       	add	r30, r30
    2036:	ff 1f       	adc	r31, r31
    2038:	bb 1f       	adc	r27, r27
    203a:	66 1f       	adc	r22, r22
    203c:	77 1f       	adc	r23, r23
    203e:	88 1f       	adc	r24, r24
    2040:	91 50       	subi	r25, 0x01	; 1
    2042:	50 40       	sbci	r21, 0x00	; 0
    2044:	a9 f7       	brne	.-22     	; 0x2030 <__mulsf3_pse+0x64>
    2046:	9e 3f       	cpi	r25, 0xFE	; 254
    2048:	51 05       	cpc	r21, r1
    204a:	80 f0       	brcs	.+32     	; 0x206c <__mulsf3_pse+0xa0>
    204c:	0c 94 7f 0f 	jmp	0x1efe	; 0x1efe <__fp_inf>
    2050:	0c 94 ca 0f 	jmp	0x1f94	; 0x1f94 <__fp_szero>
    2054:	5f 3f       	cpi	r21, 0xFF	; 255
    2056:	e4 f3       	brlt	.-8      	; 0x2050 <__mulsf3_pse+0x84>
    2058:	98 3e       	cpi	r25, 0xE8	; 232
    205a:	d4 f3       	brlt	.-12     	; 0x2050 <__mulsf3_pse+0x84>
    205c:	86 95       	lsr	r24
    205e:	77 95       	ror	r23
    2060:	67 95       	ror	r22
    2062:	b7 95       	ror	r27
    2064:	f7 95       	ror	r31
    2066:	e7 95       	ror	r30
    2068:	9f 5f       	subi	r25, 0xFF	; 255
    206a:	c1 f7       	brne	.-16     	; 0x205c <__mulsf3_pse+0x90>
    206c:	fe 2b       	or	r31, r30
    206e:	88 0f       	add	r24, r24
    2070:	91 1d       	adc	r25, r1
    2072:	96 95       	lsr	r25
    2074:	87 95       	ror	r24
    2076:	97 f9       	bld	r25, 7
    2078:	08 95       	ret

0000207a <__unordsf2>:
    207a:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <__fp_cmp>
    207e:	88 0b       	sbc	r24, r24
    2080:	99 0b       	sbc	r25, r25
    2082:	08 95       	ret

00002084 <initVariant>:
    2084:	08 95       	ret

00002086 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2086:	0e 94 93 11 	call	0x2326	; 0x2326 <init>

	initVariant();
    208a:	0e 94 42 10 	call	0x2084	; 0x2084 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    208e:	0e 94 27 01 	call	0x24e	; 0x24e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2092:	c0 e0       	ldi	r28, 0x00	; 0
    2094:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    2096:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <loop>
		if (serialEventRun) serialEventRun();
    209a:	20 97       	sbiw	r28, 0x00	; 0
    209c:	e1 f3       	breq	.-8      	; 0x2096 <main+0x10>
    209e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    20a2:	f9 cf       	rjmp	.-14     	; 0x2096 <main+0x10>

000020a4 <nothing>:
#include <avr/pgmspace.h>
#include <stdio.h>

#include "wiring_private.h"

static void nothing(void) {
    20a4:	08 95       	ret

000020a6 <attachInterrupt>:
#endif
};
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    20a6:	82 30       	cpi	r24, 0x02	; 2
    20a8:	e8 f4       	brcc	.+58     	; 0x20e4 <attachInterrupt+0x3e>
    intFunc[interruptNum] = userFunc;
    20aa:	e8 2f       	mov	r30, r24
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	ee 0f       	add	r30, r30
    20b0:	ff 1f       	adc	r31, r31
    20b2:	ee 5d       	subi	r30, 0xDE	; 222
    20b4:	fe 4f       	sbci	r31, 0xFE	; 254
    20b6:	71 83       	std	Z+1, r23	; 0x01
    20b8:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    20ba:	81 30       	cpi	r24, 0x01	; 1
    20bc:	41 f0       	breq	.+16     	; 0x20ce <attachInterrupt+0x28>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    20be:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    20c2:	8c 7f       	andi	r24, 0xFC	; 252
    20c4:	48 2b       	or	r20, r24
    20c6:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
      EIMSK |= (1 << INT0);
    20ca:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
    20cc:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    20ce:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    20d2:	83 7f       	andi	r24, 0xF3	; 243
    20d4:	44 0f       	add	r20, r20
    20d6:	55 1f       	adc	r21, r21
    20d8:	44 0f       	add	r20, r20
    20da:	55 1f       	adc	r21, r21
    20dc:	48 2b       	or	r20, r24
    20de:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
      EIMSK |= (1 << INT1);
    20e2:	e9 9a       	sbi	0x1d, 1	; 29
    20e4:	08 95       	ret

000020e6 <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    20e6:	82 30       	cpi	r24, 0x02	; 2
    20e8:	78 f4       	brcc	.+30     	; 0x2108 <detachInterrupt+0x22>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    20ea:	81 30       	cpi	r24, 0x01	; 1
    20ec:	11 f0       	breq	.+4      	; 0x20f2 <detachInterrupt+0xc>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
    20ee:	e8 98       	cbi	0x1d, 0	; 29
    #elif defined(GIMSK) && defined(INT0)
      GIMSK &= ~(1 << INT0);
    #else
      #error detachInterrupt not finished for this cpu
    #endif
      break;
    20f0:	01 c0       	rjmp	.+2      	; 0x20f4 <detachInterrupt+0xe>

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
    20f2:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    20f4:	e8 2f       	mov	r30, r24
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	ee 0f       	add	r30, r30
    20fa:	ff 1f       	adc	r31, r31
    20fc:	ee 5d       	subi	r30, 0xDE	; 222
    20fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2100:	82 e5       	ldi	r24, 0x52	; 82
    2102:	90 e1       	ldi	r25, 0x10	; 16
    2104:	91 83       	std	Z+1, r25	; 0x01
    2106:	80 83       	st	Z, r24
    2108:	08 95       	ret

0000210a <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    210a:	1f 92       	push	r1
    210c:	0f 92       	push	r0
    210e:	0f b6       	in	r0, 0x3f	; 63
    2110:	0f 92       	push	r0
    2112:	11 24       	eor	r1, r1
    2114:	2f 93       	push	r18
    2116:	3f 93       	push	r19
    2118:	4f 93       	push	r20
    211a:	5f 93       	push	r21
    211c:	6f 93       	push	r22
    211e:	7f 93       	push	r23
    2120:	8f 93       	push	r24
    2122:	9f 93       	push	r25
    2124:	af 93       	push	r26
    2126:	bf 93       	push	r27
    2128:	ef 93       	push	r30
    212a:	ff 93       	push	r31
    212c:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <intFunc>
    2130:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <intFunc+0x1>
    2134:	09 95       	icall
    2136:	ff 91       	pop	r31
    2138:	ef 91       	pop	r30
    213a:	bf 91       	pop	r27
    213c:	af 91       	pop	r26
    213e:	9f 91       	pop	r25
    2140:	8f 91       	pop	r24
    2142:	7f 91       	pop	r23
    2144:	6f 91       	pop	r22
    2146:	5f 91       	pop	r21
    2148:	4f 91       	pop	r20
    214a:	3f 91       	pop	r19
    214c:	2f 91       	pop	r18
    214e:	0f 90       	pop	r0
    2150:	0f be       	out	0x3f, r0	; 63
    2152:	0f 90       	pop	r0
    2154:	1f 90       	pop	r1
    2156:	18 95       	reti

00002158 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    2158:	1f 92       	push	r1
    215a:	0f 92       	push	r0
    215c:	0f b6       	in	r0, 0x3f	; 63
    215e:	0f 92       	push	r0
    2160:	11 24       	eor	r1, r1
    2162:	2f 93       	push	r18
    2164:	3f 93       	push	r19
    2166:	4f 93       	push	r20
    2168:	5f 93       	push	r21
    216a:	6f 93       	push	r22
    216c:	7f 93       	push	r23
    216e:	8f 93       	push	r24
    2170:	9f 93       	push	r25
    2172:	af 93       	push	r26
    2174:	bf 93       	push	r27
    2176:	ef 93       	push	r30
    2178:	ff 93       	push	r31
    217a:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <intFunc+0x2>
    217e:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <intFunc+0x3>
    2182:	09 95       	icall
    2184:	ff 91       	pop	r31
    2186:	ef 91       	pop	r30
    2188:	bf 91       	pop	r27
    218a:	af 91       	pop	r26
    218c:	9f 91       	pop	r25
    218e:	8f 91       	pop	r24
    2190:	7f 91       	pop	r23
    2192:	6f 91       	pop	r22
    2194:	5f 91       	pop	r21
    2196:	4f 91       	pop	r20
    2198:	3f 91       	pop	r19
    219a:	2f 91       	pop	r18
    219c:	0f 90       	pop	r0
    219e:	0f be       	out	0x3f, r0	; 63
    21a0:	0f 90       	pop	r0
    21a2:	1f 90       	pop	r1
    21a4:	18 95       	reti

000021a6 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    21a6:	1f 92       	push	r1
    21a8:	0f 92       	push	r0
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	0f 92       	push	r0
    21ae:	11 24       	eor	r1, r1
    21b0:	2f 93       	push	r18
    21b2:	3f 93       	push	r19
    21b4:	8f 93       	push	r24
    21b6:	9f 93       	push	r25
    21b8:	af 93       	push	r26
    21ba:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    21bc:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <timer0_millis>
    21c0:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <timer0_millis+0x1>
    21c4:	a0 91 99 02 	lds	r26, 0x0299	; 0x800299 <timer0_millis+0x2>
    21c8:	b0 91 9a 02 	lds	r27, 0x029A	; 0x80029a <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    21cc:	30 91 96 02 	lds	r19, 0x0296	; 0x800296 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    21d0:	26 e0       	ldi	r18, 0x06	; 6
    21d2:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    21d4:	2d 37       	cpi	r18, 0x7D	; 125
    21d6:	20 f4       	brcc	.+8      	; 0x21e0 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    21d8:	02 96       	adiw	r24, 0x02	; 2
    21da:	a1 1d       	adc	r26, r1
    21dc:	b1 1d       	adc	r27, r1
    21de:	05 c0       	rjmp	.+10     	; 0x21ea <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    21e0:	29 e8       	ldi	r18, 0x89	; 137
    21e2:	23 0f       	add	r18, r19
		m += 1;
    21e4:	03 96       	adiw	r24, 0x03	; 3
    21e6:	a1 1d       	adc	r26, r1
    21e8:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    21ea:	20 93 96 02 	sts	0x0296, r18	; 0x800296 <timer0_fract>
	timer0_millis = m;
    21ee:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <timer0_millis>
    21f2:	90 93 98 02 	sts	0x0298, r25	; 0x800298 <timer0_millis+0x1>
    21f6:	a0 93 99 02 	sts	0x0299, r26	; 0x800299 <timer0_millis+0x2>
    21fa:	b0 93 9a 02 	sts	0x029A, r27	; 0x80029a <timer0_millis+0x3>
	timer0_overflow_count++;
    21fe:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <timer0_overflow_count>
    2202:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <timer0_overflow_count+0x1>
    2206:	a0 91 9d 02 	lds	r26, 0x029D	; 0x80029d <timer0_overflow_count+0x2>
    220a:	b0 91 9e 02 	lds	r27, 0x029E	; 0x80029e <timer0_overflow_count+0x3>
    220e:	01 96       	adiw	r24, 0x01	; 1
    2210:	a1 1d       	adc	r26, r1
    2212:	b1 1d       	adc	r27, r1
    2214:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <timer0_overflow_count>
    2218:	90 93 9c 02 	sts	0x029C, r25	; 0x80029c <timer0_overflow_count+0x1>
    221c:	a0 93 9d 02 	sts	0x029D, r26	; 0x80029d <timer0_overflow_count+0x2>
    2220:	b0 93 9e 02 	sts	0x029E, r27	; 0x80029e <timer0_overflow_count+0x3>
}
    2224:	bf 91       	pop	r27
    2226:	af 91       	pop	r26
    2228:	9f 91       	pop	r25
    222a:	8f 91       	pop	r24
    222c:	3f 91       	pop	r19
    222e:	2f 91       	pop	r18
    2230:	0f 90       	pop	r0
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	0f 90       	pop	r0
    2236:	1f 90       	pop	r1
    2238:	18 95       	reti

0000223a <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    223a:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    223c:	f8 94       	cli
	m = timer0_millis;
    223e:	60 91 97 02 	lds	r22, 0x0297	; 0x800297 <timer0_millis>
    2242:	70 91 98 02 	lds	r23, 0x0298	; 0x800298 <timer0_millis+0x1>
    2246:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <timer0_millis+0x2>
    224a:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <timer0_millis+0x3>
	SREG = oldSREG;
    224e:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    2250:	08 95       	ret

00002252 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2252:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    2254:	f8 94       	cli
	m = timer0_overflow_count;
    2256:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <timer0_overflow_count>
    225a:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <timer0_overflow_count+0x1>
    225e:	a0 91 9d 02 	lds	r26, 0x029D	; 0x80029d <timer0_overflow_count+0x2>
    2262:	b0 91 9e 02 	lds	r27, 0x029E	; 0x80029e <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    2266:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2268:	a8 9b       	sbis	0x15, 0	; 21
    226a:	05 c0       	rjmp	.+10     	; 0x2276 <micros+0x24>
    226c:	2f 3f       	cpi	r18, 0xFF	; 255
    226e:	19 f0       	breq	.+6      	; 0x2276 <micros+0x24>
		m++;
    2270:	01 96       	adiw	r24, 0x01	; 1
    2272:	a1 1d       	adc	r26, r1
    2274:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2276:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2278:	ba 2f       	mov	r27, r26
    227a:	a9 2f       	mov	r26, r25
    227c:	98 2f       	mov	r25, r24
    227e:	88 27       	eor	r24, r24
    2280:	82 0f       	add	r24, r18
    2282:	91 1d       	adc	r25, r1
    2284:	a1 1d       	adc	r26, r1
    2286:	b1 1d       	adc	r27, r1
    2288:	bc 01       	movw	r22, r24
    228a:	cd 01       	movw	r24, r26
    228c:	43 e0       	ldi	r20, 0x03	; 3
    228e:	66 0f       	add	r22, r22
    2290:	77 1f       	adc	r23, r23
    2292:	88 1f       	adc	r24, r24
    2294:	99 1f       	adc	r25, r25
    2296:	4a 95       	dec	r20
    2298:	d1 f7       	brne	.-12     	; 0x228e <micros+0x3c>
}
    229a:	08 95       	ret

0000229c <delay>:

void delay(unsigned long ms)
{
    229c:	8f 92       	push	r8
    229e:	9f 92       	push	r9
    22a0:	af 92       	push	r10
    22a2:	bf 92       	push	r11
    22a4:	cf 92       	push	r12
    22a6:	df 92       	push	r13
    22a8:	ef 92       	push	r14
    22aa:	ff 92       	push	r15
    22ac:	6b 01       	movw	r12, r22
    22ae:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    22b0:	0e 94 29 11 	call	0x2252	; 0x2252 <micros>
    22b4:	4b 01       	movw	r8, r22
    22b6:	5c 01       	movw	r10, r24

	while (ms > 0) {
    22b8:	c1 14       	cp	r12, r1
    22ba:	d1 04       	cpc	r13, r1
    22bc:	e1 04       	cpc	r14, r1
    22be:	f1 04       	cpc	r15, r1
    22c0:	01 f1       	breq	.+64     	; 0x2302 <delay+0x66>
		yield();
    22c2:	0e 94 29 13 	call	0x2652	; 0x2652 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    22c6:	0e 94 29 11 	call	0x2252	; 0x2252 <micros>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	88 19       	sub	r24, r8
    22d0:	99 09       	sbc	r25, r9
    22d2:	aa 09       	sbc	r26, r10
    22d4:	bb 09       	sbc	r27, r11
    22d6:	88 3e       	cpi	r24, 0xE8	; 232
    22d8:	93 40       	sbci	r25, 0x03	; 3
    22da:	a1 05       	cpc	r26, r1
    22dc:	b1 05       	cpc	r27, r1
    22de:	60 f3       	brcs	.-40     	; 0x22b8 <delay+0x1c>
			ms--;
    22e0:	21 e0       	ldi	r18, 0x01	; 1
    22e2:	c2 1a       	sub	r12, r18
    22e4:	d1 08       	sbc	r13, r1
    22e6:	e1 08       	sbc	r14, r1
    22e8:	f1 08       	sbc	r15, r1
			start += 1000;
    22ea:	88 ee       	ldi	r24, 0xE8	; 232
    22ec:	88 0e       	add	r8, r24
    22ee:	83 e0       	ldi	r24, 0x03	; 3
    22f0:	98 1e       	adc	r9, r24
    22f2:	a1 1c       	adc	r10, r1
    22f4:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    22f6:	c1 14       	cp	r12, r1
    22f8:	d1 04       	cpc	r13, r1
    22fa:	e1 04       	cpc	r14, r1
    22fc:	f1 04       	cpc	r15, r1
    22fe:	19 f7       	brne	.-58     	; 0x22c6 <delay+0x2a>
    2300:	db cf       	rjmp	.-74     	; 0x22b8 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    2302:	ff 90       	pop	r15
    2304:	ef 90       	pop	r14
    2306:	df 90       	pop	r13
    2308:	cf 90       	pop	r12
    230a:	bf 90       	pop	r11
    230c:	af 90       	pop	r10
    230e:	9f 90       	pop	r9
    2310:	8f 90       	pop	r8
    2312:	08 95       	ret

00002314 <delayMicroseconds>:
#elif F_CPU >= 8000000L
	// for the 8 MHz internal clock

	// for a 1 and 2 microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 2us
	if (us <= 2) return; //  = 3 cycles, (4 when true)
    2314:	83 30       	cpi	r24, 0x03	; 3
    2316:	91 05       	cpc	r25, r1
    2318:	28 f0       	brcs	.+10     	; 0x2324 <delayMicroseconds+0x10>

	// the following loop takes 1/2 of a microsecond (4 cycles)
	// per iteration, so execute it twice for each microsecond of
	// delay requested.
	us <<= 1; //x2 us, = 2 cycles
    231a:	88 0f       	add	r24, r24
    231c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 17 (19) cycles above, remove 4, (4*4=16)
	// us is at least 6 so we can substract 4
	us -= 4; // = 2 cycles
    231e:	04 97       	sbiw	r24, 0x04	; 4
	

#endif

	// busy wait
	__asm__ __volatile__ (
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	f1 f7       	brne	.-4      	; 0x2320 <delayMicroseconds+0xc>
    2324:	08 95       	ret

00002326 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2326:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2328:	84 b5       	in	r24, 0x24	; 36
    232a:	82 60       	ori	r24, 0x02	; 2
    232c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    232e:	84 b5       	in	r24, 0x24	; 36
    2330:	81 60       	ori	r24, 0x01	; 1
    2332:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2334:	85 b5       	in	r24, 0x25	; 37
    2336:	82 60       	ori	r24, 0x02	; 2
    2338:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    233a:	85 b5       	in	r24, 0x25	; 37
    233c:	81 60       	ori	r24, 0x01	; 1
    233e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2340:	ee e6       	ldi	r30, 0x6E	; 110
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	80 81       	ld	r24, Z
    2346:	81 60       	ori	r24, 0x01	; 1
    2348:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    234a:	e1 e8       	ldi	r30, 0x81	; 129
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2350:	80 81       	ld	r24, Z
    2352:	82 60       	ori	r24, 0x02	; 2
    2354:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2356:	80 81       	ld	r24, Z
    2358:	81 60       	ori	r24, 0x01	; 1
    235a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    235c:	e0 e8       	ldi	r30, 0x80	; 128
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	80 81       	ld	r24, Z
    2362:	81 60       	ori	r24, 0x01	; 1
    2364:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2366:	e1 eb       	ldi	r30, 0xB1	; 177
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	84 60       	ori	r24, 0x04	; 4
    236e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2370:	e0 eb       	ldi	r30, 0xB0	; 176
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	81 60       	ori	r24, 0x01	; 1
    2378:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
    237a:	ea e7       	ldi	r30, 0x7A	; 122
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	80 81       	ld	r24, Z
    2380:	84 60       	ori	r24, 0x04	; 4
    2382:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2384:	80 81       	ld	r24, Z
    2386:	82 60       	ori	r24, 0x02	; 2
    2388:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS0);
    238a:	80 81       	ld	r24, Z
    238c:	8e 7f       	andi	r24, 0xFE	; 254
    238e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2390:	80 81       	ld	r24, Z
    2392:	80 68       	ori	r24, 0x80	; 128
    2394:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2396:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    239a:	08 95       	ret

0000239c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    239c:	83 30       	cpi	r24, 0x03	; 3
    239e:	81 f0       	breq	.+32     	; 0x23c0 <turnOffPWM+0x24>
    23a0:	28 f4       	brcc	.+10     	; 0x23ac <turnOffPWM+0x10>
    23a2:	81 30       	cpi	r24, 0x01	; 1
    23a4:	99 f0       	breq	.+38     	; 0x23cc <turnOffPWM+0x30>
    23a6:	82 30       	cpi	r24, 0x02	; 2
    23a8:	a1 f0       	breq	.+40     	; 0x23d2 <turnOffPWM+0x36>
    23aa:	08 95       	ret
    23ac:	87 30       	cpi	r24, 0x07	; 7
    23ae:	a9 f0       	breq	.+42     	; 0x23da <turnOffPWM+0x3e>
    23b0:	88 30       	cpi	r24, 0x08	; 8
    23b2:	b9 f0       	breq	.+46     	; 0x23e2 <turnOffPWM+0x46>
    23b4:	84 30       	cpi	r24, 0x04	; 4
    23b6:	d1 f4       	brne	.+52     	; 0x23ec <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    23b8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    23bc:	8f 7d       	andi	r24, 0xDF	; 223
    23be:	03 c0       	rjmp	.+6      	; 0x23c6 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    23c0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    23c4:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    23c6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    23ca:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    23cc:	84 b5       	in	r24, 0x24	; 36
    23ce:	8f 77       	andi	r24, 0x7F	; 127
    23d0:	02 c0       	rjmp	.+4      	; 0x23d6 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    23d2:	84 b5       	in	r24, 0x24	; 36
    23d4:	8f 7d       	andi	r24, 0xDF	; 223
    23d6:	84 bd       	out	0x24, r24	; 36
    23d8:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    23da:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    23de:	8f 77       	andi	r24, 0x7F	; 127
    23e0:	03 c0       	rjmp	.+6      	; 0x23e8 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    23e2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    23e6:	8f 7d       	andi	r24, 0xDF	; 223
    23e8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    23ec:	08 95       	ret

000023ee <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    23ee:	cf 93       	push	r28
    23f0:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	fc 01       	movw	r30, r24
    23f6:	ee 54       	subi	r30, 0x4E	; 78
    23f8:	fe 4f       	sbci	r31, 0xFE	; 254
    23fa:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    23fc:	fc 01       	movw	r30, r24
    23fe:	ea 53       	subi	r30, 0x3A	; 58
    2400:	fe 4f       	sbci	r31, 0xFE	; 254
    2402:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2404:	88 23       	and	r24, r24
    2406:	61 f1       	breq	.+88     	; 0x2460 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	88 0f       	add	r24, r24
    240c:	99 1f       	adc	r25, r25
    240e:	fc 01       	movw	r30, r24
    2410:	e2 51       	subi	r30, 0x12	; 18
    2412:	fe 4f       	sbci	r31, 0xFE	; 254
    2414:	c5 91       	lpm	r28, Z+
    2416:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2418:	fc 01       	movw	r30, r24
    241a:	ec 51       	subi	r30, 0x1C	; 28
    241c:	fe 4f       	sbci	r31, 0xFE	; 254
    241e:	a5 91       	lpm	r26, Z+
    2420:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2422:	61 11       	cpse	r22, r1
    2424:	09 c0       	rjmp	.+18     	; 0x2438 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2426:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2428:	f8 94       	cli
		*reg &= ~bit;
    242a:	88 81       	ld	r24, Y
    242c:	20 95       	com	r18
    242e:	82 23       	and	r24, r18
    2430:	88 83       	st	Y, r24
		*out &= ~bit;
    2432:	ec 91       	ld	r30, X
    2434:	2e 23       	and	r18, r30
    2436:	0b c0       	rjmp	.+22     	; 0x244e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2438:	62 30       	cpi	r22, 0x02	; 2
    243a:	61 f4       	brne	.+24     	; 0x2454 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    243c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    243e:	f8 94       	cli
		*reg &= ~bit;
    2440:	88 81       	ld	r24, Y
    2442:	32 2f       	mov	r19, r18
    2444:	30 95       	com	r19
    2446:	83 23       	and	r24, r19
    2448:	88 83       	st	Y, r24
		*out |= bit;
    244a:	ec 91       	ld	r30, X
    244c:	2e 2b       	or	r18, r30
    244e:	2c 93       	st	X, r18
		SREG = oldSREG;
    2450:	9f bf       	out	0x3f, r25	; 63
    2452:	06 c0       	rjmp	.+12     	; 0x2460 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2454:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2456:	f8 94       	cli
		*reg |= bit;
    2458:	e8 81       	ld	r30, Y
    245a:	2e 2b       	or	r18, r30
    245c:	28 83       	st	Y, r18
		SREG = oldSREG;
    245e:	8f bf       	out	0x3f, r24	; 63
	}
}
    2460:	df 91       	pop	r29
    2462:	cf 91       	pop	r28
    2464:	08 95       	ret

00002466 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2466:	1f 93       	push	r17
    2468:	cf 93       	push	r28
    246a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    246c:	28 2f       	mov	r18, r24
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	f9 01       	movw	r30, r18
    2472:	e2 56       	subi	r30, 0x62	; 98
    2474:	fe 4f       	sbci	r31, 0xFE	; 254
    2476:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2478:	f9 01       	movw	r30, r18
    247a:	ee 54       	subi	r30, 0x4E	; 78
    247c:	fe 4f       	sbci	r31, 0xFE	; 254
    247e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    2480:	f9 01       	movw	r30, r18
    2482:	ea 53       	subi	r30, 0x3A	; 58
    2484:	fe 4f       	sbci	r31, 0xFE	; 254
    2486:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2488:	cc 23       	and	r28, r28
    248a:	c1 f0       	breq	.+48     	; 0x24bc <digitalWrite+0x56>
    248c:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    248e:	81 11       	cpse	r24, r1
    2490:	0e 94 ce 11 	call	0x239c	; 0x239c <turnOffPWM>

	out = portOutputRegister(port);
    2494:	ec 2f       	mov	r30, r28
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	ee 0f       	add	r30, r30
    249a:	ff 1f       	adc	r31, r31
    249c:	ec 51       	subi	r30, 0x1C	; 28
    249e:	fe 4f       	sbci	r31, 0xFE	; 254
    24a0:	a5 91       	lpm	r26, Z+
    24a2:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    24a4:	9f b7       	in	r25, 0x3f	; 63
	cli();
    24a6:	f8 94       	cli

	if (val == LOW) {
    24a8:	11 11       	cpse	r17, r1
    24aa:	04 c0       	rjmp	.+8      	; 0x24b4 <digitalWrite+0x4e>
		*out &= ~bit;
    24ac:	8c 91       	ld	r24, X
    24ae:	d0 95       	com	r29
    24b0:	d8 23       	and	r29, r24
    24b2:	02 c0       	rjmp	.+4      	; 0x24b8 <digitalWrite+0x52>
	} else {
		*out |= bit;
    24b4:	ec 91       	ld	r30, X
    24b6:	de 2b       	or	r29, r30
    24b8:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    24ba:	9f bf       	out	0x3f, r25	; 63
}
    24bc:	df 91       	pop	r29
    24be:	cf 91       	pop	r28
    24c0:	1f 91       	pop	r17
    24c2:	08 95       	ret

000024c4 <_ZN6StringD1Ev>:
{
	init();
	char buf[1 + 8 * sizeof(unsigned int)];
	utoa(value, buf, base);
	*this = buf;
}
    24c4:	fc 01       	movw	r30, r24
    24c6:	80 81       	ld	r24, Z
    24c8:	91 81       	ldd	r25, Z+1	; 0x01
    24ca:	0c 94 1d 14 	jmp	0x283a	; 0x283a <free>

000024ce <_ZN6String10invalidateEv>:
    24ce:	cf 93       	push	r28
    24d0:	df 93       	push	r29
    24d2:	ec 01       	movw	r28, r24
    24d4:	88 81       	ld	r24, Y
    24d6:	99 81       	ldd	r25, Y+1	; 0x01
    24d8:	00 97       	sbiw	r24, 0x00	; 0
    24da:	11 f0       	breq	.+4      	; 0x24e0 <_ZN6String10invalidateEv+0x12>
    24dc:	0e 94 1d 14 	call	0x283a	; 0x283a <free>
    24e0:	19 82       	std	Y+1, r1	; 0x01
    24e2:	18 82       	st	Y, r1
    24e4:	1d 82       	std	Y+5, r1	; 0x05
    24e6:	1c 82       	std	Y+4, r1	; 0x04
    24e8:	1b 82       	std	Y+3, r1	; 0x03
    24ea:	1a 82       	std	Y+2, r1	; 0x02
    24ec:	df 91       	pop	r29
    24ee:	cf 91       	pop	r28
    24f0:	08 95       	ret

000024f2 <_ZN6String12changeBufferEj>:
    24f2:	0f 93       	push	r16
    24f4:	1f 93       	push	r17
    24f6:	cf 93       	push	r28
    24f8:	df 93       	push	r29
    24fa:	ec 01       	movw	r28, r24
    24fc:	8b 01       	movw	r16, r22
    24fe:	6f 5f       	subi	r22, 0xFF	; 255
    2500:	7f 4f       	sbci	r23, 0xFF	; 255
    2502:	88 81       	ld	r24, Y
    2504:	99 81       	ldd	r25, Y+1	; 0x01
    2506:	0e 94 a6 14 	call	0x294c	; 0x294c <realloc>
    250a:	00 97       	sbiw	r24, 0x00	; 0
    250c:	31 f0       	breq	.+12     	; 0x251a <_ZN6String12changeBufferEj+0x28>
    250e:	99 83       	std	Y+1, r25	; 0x01
    2510:	88 83       	st	Y, r24
    2512:	1b 83       	std	Y+3, r17	; 0x03
    2514:	0a 83       	std	Y+2, r16	; 0x02
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	01 c0       	rjmp	.+2      	; 0x251c <_ZN6String12changeBufferEj+0x2a>
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	df 91       	pop	r29
    251e:	cf 91       	pop	r28
    2520:	1f 91       	pop	r17
    2522:	0f 91       	pop	r16
    2524:	08 95       	ret

00002526 <_ZN6String7reserveEj>:
    2526:	cf 93       	push	r28
    2528:	df 93       	push	r29
    252a:	ec 01       	movw	r28, r24
    252c:	88 81       	ld	r24, Y
    252e:	99 81       	ldd	r25, Y+1	; 0x01
    2530:	89 2b       	or	r24, r25
    2532:	29 f0       	breq	.+10     	; 0x253e <_ZN6String7reserveEj+0x18>
    2534:	8a 81       	ldd	r24, Y+2	; 0x02
    2536:	9b 81       	ldd	r25, Y+3	; 0x03
    2538:	86 17       	cp	r24, r22
    253a:	97 07       	cpc	r25, r23
    253c:	60 f4       	brcc	.+24     	; 0x2556 <_ZN6String7reserveEj+0x30>
    253e:	ce 01       	movw	r24, r28
    2540:	0e 94 79 12 	call	0x24f2	; 0x24f2 <_ZN6String12changeBufferEj>
    2544:	88 23       	and	r24, r24
    2546:	41 f0       	breq	.+16     	; 0x2558 <_ZN6String7reserveEj+0x32>
    2548:	8c 81       	ldd	r24, Y+4	; 0x04
    254a:	9d 81       	ldd	r25, Y+5	; 0x05
    254c:	89 2b       	or	r24, r25
    254e:	19 f4       	brne	.+6      	; 0x2556 <_ZN6String7reserveEj+0x30>
    2550:	e8 81       	ld	r30, Y
    2552:	f9 81       	ldd	r31, Y+1	; 0x01
    2554:	10 82       	st	Z, r1
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	df 91       	pop	r29
    255a:	cf 91       	pop	r28
    255c:	08 95       	ret

0000255e <_ZN6String4copyEPKcj>:
    255e:	ef 92       	push	r14
    2560:	ff 92       	push	r15
    2562:	0f 93       	push	r16
    2564:	1f 93       	push	r17
    2566:	cf 93       	push	r28
    2568:	df 93       	push	r29
    256a:	ec 01       	movw	r28, r24
    256c:	7b 01       	movw	r14, r22
    256e:	8a 01       	movw	r16, r20
    2570:	ba 01       	movw	r22, r20
    2572:	0e 94 93 12 	call	0x2526	; 0x2526 <_ZN6String7reserveEj>
    2576:	81 11       	cpse	r24, r1
    2578:	04 c0       	rjmp	.+8      	; 0x2582 <_ZN6String4copyEPKcj+0x24>
    257a:	ce 01       	movw	r24, r28
    257c:	0e 94 67 12 	call	0x24ce	; 0x24ce <_ZN6String10invalidateEv>
    2580:	07 c0       	rjmp	.+14     	; 0x2590 <_ZN6String4copyEPKcj+0x32>
    2582:	1d 83       	std	Y+5, r17	; 0x05
    2584:	0c 83       	std	Y+4, r16	; 0x04
    2586:	b7 01       	movw	r22, r14
    2588:	88 81       	ld	r24, Y
    258a:	99 81       	ldd	r25, Y+1	; 0x01
    258c:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <strcpy>
    2590:	ce 01       	movw	r24, r28
    2592:	df 91       	pop	r29
    2594:	cf 91       	pop	r28
    2596:	1f 91       	pop	r17
    2598:	0f 91       	pop	r16
    259a:	ff 90       	pop	r15
    259c:	ef 90       	pop	r14
    259e:	08 95       	ret

000025a0 <_ZN6StringC1EPKc>:
    25a0:	fc 01       	movw	r30, r24
    25a2:	11 82       	std	Z+1, r1	; 0x01
    25a4:	10 82       	st	Z, r1
    25a6:	13 82       	std	Z+3, r1	; 0x03
    25a8:	12 82       	std	Z+2, r1	; 0x02
    25aa:	15 82       	std	Z+5, r1	; 0x05
    25ac:	14 82       	std	Z+4, r1	; 0x04
    25ae:	61 15       	cp	r22, r1
    25b0:	71 05       	cpc	r23, r1
    25b2:	51 f0       	breq	.+20     	; 0x25c8 <_ZN6StringC1EPKc+0x28>
    25b4:	fb 01       	movw	r30, r22
    25b6:	01 90       	ld	r0, Z+
    25b8:	00 20       	and	r0, r0
    25ba:	e9 f7       	brne	.-6      	; 0x25b6 <_ZN6StringC1EPKc+0x16>
    25bc:	31 97       	sbiw	r30, 0x01	; 1
    25be:	af 01       	movw	r20, r30
    25c0:	46 1b       	sub	r20, r22
    25c2:	57 0b       	sbc	r21, r23
    25c4:	0c 94 af 12 	jmp	0x255e	; 0x255e <_ZN6String4copyEPKcj>
    25c8:	08 95       	ret

000025ca <_ZN6StringaSEPKc>:
    25ca:	cf 93       	push	r28
    25cc:	df 93       	push	r29
    25ce:	ec 01       	movw	r28, r24
    25d0:	61 15       	cp	r22, r1
    25d2:	71 05       	cpc	r23, r1
    25d4:	59 f0       	breq	.+22     	; 0x25ec <_ZN6StringaSEPKc+0x22>
    25d6:	fb 01       	movw	r30, r22
    25d8:	01 90       	ld	r0, Z+
    25da:	00 20       	and	r0, r0
    25dc:	e9 f7       	brne	.-6      	; 0x25d8 <_ZN6StringaSEPKc+0xe>
    25de:	31 97       	sbiw	r30, 0x01	; 1
    25e0:	af 01       	movw	r20, r30
    25e2:	46 1b       	sub	r20, r22
    25e4:	57 0b       	sbc	r21, r23
    25e6:	0e 94 af 12 	call	0x255e	; 0x255e <_ZN6String4copyEPKcj>
    25ea:	02 c0       	rjmp	.+4      	; 0x25f0 <_ZN6StringaSEPKc+0x26>
    25ec:	0e 94 67 12 	call	0x24ce	; 0x24ce <_ZN6String10invalidateEv>
    25f0:	ce 01       	movw	r24, r28
    25f2:	df 91       	pop	r29
    25f4:	cf 91       	pop	r28
    25f6:	08 95       	ret

000025f8 <_ZN6StringC1Elh>:

String::String(long value, unsigned char base)
    25f8:	0f 93       	push	r16
    25fa:	1f 93       	push	r17
    25fc:	cf 93       	push	r28
    25fe:	df 93       	push	r29
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
    2604:	a2 97       	sbiw	r28, 0x22	; 34
    2606:	0f b6       	in	r0, 0x3f	; 63
    2608:	f8 94       	cli
    260a:	de bf       	out	0x3e, r29	; 62
    260c:	0f be       	out	0x3f, r0	; 63
    260e:	cd bf       	out	0x3d, r28	; 61
    2610:	8c 01       	movw	r16, r24
    2612:	cb 01       	movw	r24, r22
    2614:	ba 01       	movw	r22, r20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2616:	f8 01       	movw	r30, r16
    2618:	11 82       	std	Z+1, r1	; 0x01
    261a:	10 82       	st	Z, r1
	capacity = 0;
    261c:	13 82       	std	Z+3, r1	; 0x03
    261e:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2620:	15 82       	std	Z+5, r1	; 0x05
    2622:	14 82       	std	Z+4, r1	; 0x04
extern __inline__ __ATTR_GNU_INLINE__
char *ltoa (long __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__ltoa (long, char *, int);
	return __ltoa (__val, __s, __radix);
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	ae 01       	movw	r20, r28
    2628:	4f 5f       	subi	r20, 0xFF	; 255
    262a:	5f 4f       	sbci	r21, 0xFF	; 255
    262c:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <ltoa>
String::String(long value, unsigned char base)
{
	init();
	char buf[2 + 8 * sizeof(long)];
	ltoa(value, buf, base);
	*this = buf;
    2630:	be 01       	movw	r22, r28
    2632:	6f 5f       	subi	r22, 0xFF	; 255
    2634:	7f 4f       	sbci	r23, 0xFF	; 255
    2636:	c8 01       	movw	r24, r16
    2638:	0e 94 e5 12 	call	0x25ca	; 0x25ca <_ZN6StringaSEPKc>
}
    263c:	a2 96       	adiw	r28, 0x22	; 34
    263e:	0f b6       	in	r0, 0x3f	; 63
    2640:	f8 94       	cli
    2642:	de bf       	out	0x3e, r29	; 62
    2644:	0f be       	out	0x3f, r0	; 63
    2646:	cd bf       	out	0x3d, r28	; 61
    2648:	df 91       	pop	r29
    264a:	cf 91       	pop	r28
    264c:	1f 91       	pop	r17
    264e:	0f 91       	pop	r16
    2650:	08 95       	ret

00002652 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    2652:	08 95       	ret

00002654 <__udivmodhi4>:
    2654:	aa 1b       	sub	r26, r26
    2656:	bb 1b       	sub	r27, r27
    2658:	51 e1       	ldi	r21, 0x11	; 17
    265a:	07 c0       	rjmp	.+14     	; 0x266a <__udivmodhi4_ep>

0000265c <__udivmodhi4_loop>:
    265c:	aa 1f       	adc	r26, r26
    265e:	bb 1f       	adc	r27, r27
    2660:	a6 17       	cp	r26, r22
    2662:	b7 07       	cpc	r27, r23
    2664:	10 f0       	brcs	.+4      	; 0x266a <__udivmodhi4_ep>
    2666:	a6 1b       	sub	r26, r22
    2668:	b7 0b       	sbc	r27, r23

0000266a <__udivmodhi4_ep>:
    266a:	88 1f       	adc	r24, r24
    266c:	99 1f       	adc	r25, r25
    266e:	5a 95       	dec	r21
    2670:	a9 f7       	brne	.-22     	; 0x265c <__udivmodhi4_loop>
    2672:	80 95       	com	r24
    2674:	90 95       	com	r25
    2676:	bc 01       	movw	r22, r24
    2678:	cd 01       	movw	r24, r26
    267a:	08 95       	ret

0000267c <__divmodsi4>:
    267c:	05 2e       	mov	r0, r21
    267e:	97 fb       	bst	r25, 7
    2680:	1e f4       	brtc	.+6      	; 0x2688 <__divmodsi4+0xc>
    2682:	00 94       	com	r0
    2684:	0e 94 55 13 	call	0x26aa	; 0x26aa <__negsi2>
    2688:	57 fd       	sbrc	r21, 7
    268a:	07 d0       	rcall	.+14     	; 0x269a <__divmodsi4_neg2>
    268c:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__udivmodsi4>
    2690:	07 fc       	sbrc	r0, 7
    2692:	03 d0       	rcall	.+6      	; 0x269a <__divmodsi4_neg2>
    2694:	4e f4       	brtc	.+18     	; 0x26a8 <__divmodsi4_exit>
    2696:	0c 94 55 13 	jmp	0x26aa	; 0x26aa <__negsi2>

0000269a <__divmodsi4_neg2>:
    269a:	50 95       	com	r21
    269c:	40 95       	com	r20
    269e:	30 95       	com	r19
    26a0:	21 95       	neg	r18
    26a2:	3f 4f       	sbci	r19, 0xFF	; 255
    26a4:	4f 4f       	sbci	r20, 0xFF	; 255
    26a6:	5f 4f       	sbci	r21, 0xFF	; 255

000026a8 <__divmodsi4_exit>:
    26a8:	08 95       	ret

000026aa <__negsi2>:
    26aa:	90 95       	com	r25
    26ac:	80 95       	com	r24
    26ae:	70 95       	com	r23
    26b0:	61 95       	neg	r22
    26b2:	7f 4f       	sbci	r23, 0xFF	; 255
    26b4:	8f 4f       	sbci	r24, 0xFF	; 255
    26b6:	9f 4f       	sbci	r25, 0xFF	; 255
    26b8:	08 95       	ret

000026ba <__udivmodsi4>:
    26ba:	a1 e2       	ldi	r26, 0x21	; 33
    26bc:	1a 2e       	mov	r1, r26
    26be:	aa 1b       	sub	r26, r26
    26c0:	bb 1b       	sub	r27, r27
    26c2:	fd 01       	movw	r30, r26
    26c4:	0d c0       	rjmp	.+26     	; 0x26e0 <__udivmodsi4_ep>

000026c6 <__udivmodsi4_loop>:
    26c6:	aa 1f       	adc	r26, r26
    26c8:	bb 1f       	adc	r27, r27
    26ca:	ee 1f       	adc	r30, r30
    26cc:	ff 1f       	adc	r31, r31
    26ce:	a2 17       	cp	r26, r18
    26d0:	b3 07       	cpc	r27, r19
    26d2:	e4 07       	cpc	r30, r20
    26d4:	f5 07       	cpc	r31, r21
    26d6:	20 f0       	brcs	.+8      	; 0x26e0 <__udivmodsi4_ep>
    26d8:	a2 1b       	sub	r26, r18
    26da:	b3 0b       	sbc	r27, r19
    26dc:	e4 0b       	sbc	r30, r20
    26de:	f5 0b       	sbc	r31, r21

000026e0 <__udivmodsi4_ep>:
    26e0:	66 1f       	adc	r22, r22
    26e2:	77 1f       	adc	r23, r23
    26e4:	88 1f       	adc	r24, r24
    26e6:	99 1f       	adc	r25, r25
    26e8:	1a 94       	dec	r1
    26ea:	69 f7       	brne	.-38     	; 0x26c6 <__udivmodsi4_loop>
    26ec:	60 95       	com	r22
    26ee:	70 95       	com	r23
    26f0:	80 95       	com	r24
    26f2:	90 95       	com	r25
    26f4:	9b 01       	movw	r18, r22
    26f6:	ac 01       	movw	r20, r24
    26f8:	bd 01       	movw	r22, r26
    26fa:	cf 01       	movw	r24, r30
    26fc:	08 95       	ret

000026fe <__tablejump2__>:
    26fe:	ee 0f       	add	r30, r30
    2700:	ff 1f       	adc	r31, r31
    2702:	05 90       	lpm	r0, Z+
    2704:	f4 91       	lpm	r31, Z
    2706:	e0 2d       	mov	r30, r0
    2708:	09 94       	ijmp

0000270a <malloc>:
    270a:	0f 93       	push	r16
    270c:	1f 93       	push	r17
    270e:	cf 93       	push	r28
    2710:	df 93       	push	r29
    2712:	82 30       	cpi	r24, 0x02	; 2
    2714:	91 05       	cpc	r25, r1
    2716:	10 f4       	brcc	.+4      	; 0x271c <malloc+0x12>
    2718:	82 e0       	ldi	r24, 0x02	; 2
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	e0 91 a1 02 	lds	r30, 0x02A1	; 0x8002a1 <__flp>
    2720:	f0 91 a2 02 	lds	r31, 0x02A2	; 0x8002a2 <__flp+0x1>
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	a0 e0       	ldi	r26, 0x00	; 0
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	30 97       	sbiw	r30, 0x00	; 0
    272e:	19 f1       	breq	.+70     	; 0x2776 <malloc+0x6c>
    2730:	40 81       	ld	r20, Z
    2732:	51 81       	ldd	r21, Z+1	; 0x01
    2734:	02 81       	ldd	r16, Z+2	; 0x02
    2736:	13 81       	ldd	r17, Z+3	; 0x03
    2738:	48 17       	cp	r20, r24
    273a:	59 07       	cpc	r21, r25
    273c:	c8 f0       	brcs	.+50     	; 0x2770 <malloc+0x66>
    273e:	84 17       	cp	r24, r20
    2740:	95 07       	cpc	r25, r21
    2742:	69 f4       	brne	.+26     	; 0x275e <malloc+0x54>
    2744:	10 97       	sbiw	r26, 0x00	; 0
    2746:	31 f0       	breq	.+12     	; 0x2754 <malloc+0x4a>
    2748:	12 96       	adiw	r26, 0x02	; 2
    274a:	0c 93       	st	X, r16
    274c:	12 97       	sbiw	r26, 0x02	; 2
    274e:	13 96       	adiw	r26, 0x03	; 3
    2750:	1c 93       	st	X, r17
    2752:	27 c0       	rjmp	.+78     	; 0x27a2 <malloc+0x98>
    2754:	00 93 a1 02 	sts	0x02A1, r16	; 0x8002a1 <__flp>
    2758:	10 93 a2 02 	sts	0x02A2, r17	; 0x8002a2 <__flp+0x1>
    275c:	22 c0       	rjmp	.+68     	; 0x27a2 <malloc+0x98>
    275e:	21 15       	cp	r18, r1
    2760:	31 05       	cpc	r19, r1
    2762:	19 f0       	breq	.+6      	; 0x276a <malloc+0x60>
    2764:	42 17       	cp	r20, r18
    2766:	53 07       	cpc	r21, r19
    2768:	18 f4       	brcc	.+6      	; 0x2770 <malloc+0x66>
    276a:	9a 01       	movw	r18, r20
    276c:	bd 01       	movw	r22, r26
    276e:	ef 01       	movw	r28, r30
    2770:	df 01       	movw	r26, r30
    2772:	f8 01       	movw	r30, r16
    2774:	db cf       	rjmp	.-74     	; 0x272c <malloc+0x22>
    2776:	21 15       	cp	r18, r1
    2778:	31 05       	cpc	r19, r1
    277a:	f9 f0       	breq	.+62     	; 0x27ba <malloc+0xb0>
    277c:	28 1b       	sub	r18, r24
    277e:	39 0b       	sbc	r19, r25
    2780:	24 30       	cpi	r18, 0x04	; 4
    2782:	31 05       	cpc	r19, r1
    2784:	80 f4       	brcc	.+32     	; 0x27a6 <malloc+0x9c>
    2786:	8a 81       	ldd	r24, Y+2	; 0x02
    2788:	9b 81       	ldd	r25, Y+3	; 0x03
    278a:	61 15       	cp	r22, r1
    278c:	71 05       	cpc	r23, r1
    278e:	21 f0       	breq	.+8      	; 0x2798 <malloc+0x8e>
    2790:	fb 01       	movw	r30, r22
    2792:	93 83       	std	Z+3, r25	; 0x03
    2794:	82 83       	std	Z+2, r24	; 0x02
    2796:	04 c0       	rjmp	.+8      	; 0x27a0 <malloc+0x96>
    2798:	90 93 a2 02 	sts	0x02A2, r25	; 0x8002a2 <__flp+0x1>
    279c:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <__flp>
    27a0:	fe 01       	movw	r30, r28
    27a2:	32 96       	adiw	r30, 0x02	; 2
    27a4:	44 c0       	rjmp	.+136    	; 0x282e <malloc+0x124>
    27a6:	fe 01       	movw	r30, r28
    27a8:	e2 0f       	add	r30, r18
    27aa:	f3 1f       	adc	r31, r19
    27ac:	81 93       	st	Z+, r24
    27ae:	91 93       	st	Z+, r25
    27b0:	22 50       	subi	r18, 0x02	; 2
    27b2:	31 09       	sbc	r19, r1
    27b4:	39 83       	std	Y+1, r19	; 0x01
    27b6:	28 83       	st	Y, r18
    27b8:	3a c0       	rjmp	.+116    	; 0x282e <malloc+0x124>
    27ba:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <__brkval>
    27be:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <__brkval+0x1>
    27c2:	23 2b       	or	r18, r19
    27c4:	41 f4       	brne	.+16     	; 0x27d6 <malloc+0xcc>
    27c6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    27ca:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    27ce:	30 93 a0 02 	sts	0x02A0, r19	; 0x8002a0 <__brkval+0x1>
    27d2:	20 93 9f 02 	sts	0x029F, r18	; 0x80029f <__brkval>
    27d6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    27da:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    27de:	21 15       	cp	r18, r1
    27e0:	31 05       	cpc	r19, r1
    27e2:	41 f4       	brne	.+16     	; 0x27f4 <malloc+0xea>
    27e4:	2d b7       	in	r18, 0x3d	; 61
    27e6:	3e b7       	in	r19, 0x3e	; 62
    27e8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    27ec:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    27f0:	24 1b       	sub	r18, r20
    27f2:	35 0b       	sbc	r19, r21
    27f4:	e0 91 9f 02 	lds	r30, 0x029F	; 0x80029f <__brkval>
    27f8:	f0 91 a0 02 	lds	r31, 0x02A0	; 0x8002a0 <__brkval+0x1>
    27fc:	e2 17       	cp	r30, r18
    27fe:	f3 07       	cpc	r31, r19
    2800:	a0 f4       	brcc	.+40     	; 0x282a <malloc+0x120>
    2802:	2e 1b       	sub	r18, r30
    2804:	3f 0b       	sbc	r19, r31
    2806:	28 17       	cp	r18, r24
    2808:	39 07       	cpc	r19, r25
    280a:	78 f0       	brcs	.+30     	; 0x282a <malloc+0x120>
    280c:	ac 01       	movw	r20, r24
    280e:	4e 5f       	subi	r20, 0xFE	; 254
    2810:	5f 4f       	sbci	r21, 0xFF	; 255
    2812:	24 17       	cp	r18, r20
    2814:	35 07       	cpc	r19, r21
    2816:	48 f0       	brcs	.+18     	; 0x282a <malloc+0x120>
    2818:	4e 0f       	add	r20, r30
    281a:	5f 1f       	adc	r21, r31
    281c:	50 93 a0 02 	sts	0x02A0, r21	; 0x8002a0 <__brkval+0x1>
    2820:	40 93 9f 02 	sts	0x029F, r20	; 0x80029f <__brkval>
    2824:	81 93       	st	Z+, r24
    2826:	91 93       	st	Z+, r25
    2828:	02 c0       	rjmp	.+4      	; 0x282e <malloc+0x124>
    282a:	e0 e0       	ldi	r30, 0x00	; 0
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	cf 01       	movw	r24, r30
    2830:	df 91       	pop	r29
    2832:	cf 91       	pop	r28
    2834:	1f 91       	pop	r17
    2836:	0f 91       	pop	r16
    2838:	08 95       	ret

0000283a <free>:
    283a:	cf 93       	push	r28
    283c:	df 93       	push	r29
    283e:	00 97       	sbiw	r24, 0x00	; 0
    2840:	09 f4       	brne	.+2      	; 0x2844 <free+0xa>
    2842:	81 c0       	rjmp	.+258    	; 0x2946 <free+0x10c>
    2844:	fc 01       	movw	r30, r24
    2846:	32 97       	sbiw	r30, 0x02	; 2
    2848:	13 82       	std	Z+3, r1	; 0x03
    284a:	12 82       	std	Z+2, r1	; 0x02
    284c:	a0 91 a1 02 	lds	r26, 0x02A1	; 0x8002a1 <__flp>
    2850:	b0 91 a2 02 	lds	r27, 0x02A2	; 0x8002a2 <__flp+0x1>
    2854:	10 97       	sbiw	r26, 0x00	; 0
    2856:	81 f4       	brne	.+32     	; 0x2878 <free+0x3e>
    2858:	20 81       	ld	r18, Z
    285a:	31 81       	ldd	r19, Z+1	; 0x01
    285c:	82 0f       	add	r24, r18
    285e:	93 1f       	adc	r25, r19
    2860:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <__brkval>
    2864:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <__brkval+0x1>
    2868:	28 17       	cp	r18, r24
    286a:	39 07       	cpc	r19, r25
    286c:	51 f5       	brne	.+84     	; 0x28c2 <free+0x88>
    286e:	f0 93 a0 02 	sts	0x02A0, r31	; 0x8002a0 <__brkval+0x1>
    2872:	e0 93 9f 02 	sts	0x029F, r30	; 0x80029f <__brkval>
    2876:	67 c0       	rjmp	.+206    	; 0x2946 <free+0x10c>
    2878:	ed 01       	movw	r28, r26
    287a:	20 e0       	ldi	r18, 0x00	; 0
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	ce 17       	cp	r28, r30
    2880:	df 07       	cpc	r29, r31
    2882:	40 f4       	brcc	.+16     	; 0x2894 <free+0x5a>
    2884:	4a 81       	ldd	r20, Y+2	; 0x02
    2886:	5b 81       	ldd	r21, Y+3	; 0x03
    2888:	9e 01       	movw	r18, r28
    288a:	41 15       	cp	r20, r1
    288c:	51 05       	cpc	r21, r1
    288e:	f1 f0       	breq	.+60     	; 0x28cc <free+0x92>
    2890:	ea 01       	movw	r28, r20
    2892:	f5 cf       	rjmp	.-22     	; 0x287e <free+0x44>
    2894:	d3 83       	std	Z+3, r29	; 0x03
    2896:	c2 83       	std	Z+2, r28	; 0x02
    2898:	40 81       	ld	r20, Z
    289a:	51 81       	ldd	r21, Z+1	; 0x01
    289c:	84 0f       	add	r24, r20
    289e:	95 1f       	adc	r25, r21
    28a0:	c8 17       	cp	r28, r24
    28a2:	d9 07       	cpc	r29, r25
    28a4:	59 f4       	brne	.+22     	; 0x28bc <free+0x82>
    28a6:	88 81       	ld	r24, Y
    28a8:	99 81       	ldd	r25, Y+1	; 0x01
    28aa:	84 0f       	add	r24, r20
    28ac:	95 1f       	adc	r25, r21
    28ae:	02 96       	adiw	r24, 0x02	; 2
    28b0:	91 83       	std	Z+1, r25	; 0x01
    28b2:	80 83       	st	Z, r24
    28b4:	8a 81       	ldd	r24, Y+2	; 0x02
    28b6:	9b 81       	ldd	r25, Y+3	; 0x03
    28b8:	93 83       	std	Z+3, r25	; 0x03
    28ba:	82 83       	std	Z+2, r24	; 0x02
    28bc:	21 15       	cp	r18, r1
    28be:	31 05       	cpc	r19, r1
    28c0:	29 f4       	brne	.+10     	; 0x28cc <free+0x92>
    28c2:	f0 93 a2 02 	sts	0x02A2, r31	; 0x8002a2 <__flp+0x1>
    28c6:	e0 93 a1 02 	sts	0x02A1, r30	; 0x8002a1 <__flp>
    28ca:	3d c0       	rjmp	.+122    	; 0x2946 <free+0x10c>
    28cc:	e9 01       	movw	r28, r18
    28ce:	fb 83       	std	Y+3, r31	; 0x03
    28d0:	ea 83       	std	Y+2, r30	; 0x02
    28d2:	49 91       	ld	r20, Y+
    28d4:	59 91       	ld	r21, Y+
    28d6:	c4 0f       	add	r28, r20
    28d8:	d5 1f       	adc	r29, r21
    28da:	ec 17       	cp	r30, r28
    28dc:	fd 07       	cpc	r31, r29
    28de:	61 f4       	brne	.+24     	; 0x28f8 <free+0xbe>
    28e0:	80 81       	ld	r24, Z
    28e2:	91 81       	ldd	r25, Z+1	; 0x01
    28e4:	84 0f       	add	r24, r20
    28e6:	95 1f       	adc	r25, r21
    28e8:	02 96       	adiw	r24, 0x02	; 2
    28ea:	e9 01       	movw	r28, r18
    28ec:	99 83       	std	Y+1, r25	; 0x01
    28ee:	88 83       	st	Y, r24
    28f0:	82 81       	ldd	r24, Z+2	; 0x02
    28f2:	93 81       	ldd	r25, Z+3	; 0x03
    28f4:	9b 83       	std	Y+3, r25	; 0x03
    28f6:	8a 83       	std	Y+2, r24	; 0x02
    28f8:	e0 e0       	ldi	r30, 0x00	; 0
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	12 96       	adiw	r26, 0x02	; 2
    28fe:	8d 91       	ld	r24, X+
    2900:	9c 91       	ld	r25, X
    2902:	13 97       	sbiw	r26, 0x03	; 3
    2904:	00 97       	sbiw	r24, 0x00	; 0
    2906:	19 f0       	breq	.+6      	; 0x290e <free+0xd4>
    2908:	fd 01       	movw	r30, r26
    290a:	dc 01       	movw	r26, r24
    290c:	f7 cf       	rjmp	.-18     	; 0x28fc <free+0xc2>
    290e:	8d 91       	ld	r24, X+
    2910:	9c 91       	ld	r25, X
    2912:	11 97       	sbiw	r26, 0x01	; 1
    2914:	9d 01       	movw	r18, r26
    2916:	2e 5f       	subi	r18, 0xFE	; 254
    2918:	3f 4f       	sbci	r19, 0xFF	; 255
    291a:	82 0f       	add	r24, r18
    291c:	93 1f       	adc	r25, r19
    291e:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <__brkval>
    2922:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <__brkval+0x1>
    2926:	28 17       	cp	r18, r24
    2928:	39 07       	cpc	r19, r25
    292a:	69 f4       	brne	.+26     	; 0x2946 <free+0x10c>
    292c:	30 97       	sbiw	r30, 0x00	; 0
    292e:	29 f4       	brne	.+10     	; 0x293a <free+0x100>
    2930:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <__flp+0x1>
    2934:	10 92 a1 02 	sts	0x02A1, r1	; 0x8002a1 <__flp>
    2938:	02 c0       	rjmp	.+4      	; 0x293e <free+0x104>
    293a:	13 82       	std	Z+3, r1	; 0x03
    293c:	12 82       	std	Z+2, r1	; 0x02
    293e:	b0 93 a0 02 	sts	0x02A0, r27	; 0x8002a0 <__brkval+0x1>
    2942:	a0 93 9f 02 	sts	0x029F, r26	; 0x80029f <__brkval>
    2946:	df 91       	pop	r29
    2948:	cf 91       	pop	r28
    294a:	08 95       	ret

0000294c <realloc>:
    294c:	a0 e0       	ldi	r26, 0x00	; 0
    294e:	b0 e0       	ldi	r27, 0x00	; 0
    2950:	ec ea       	ldi	r30, 0xAC	; 172
    2952:	f4 e1       	ldi	r31, 0x14	; 20
    2954:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <__prologue_saves__+0x8>
    2958:	ec 01       	movw	r28, r24
    295a:	00 97       	sbiw	r24, 0x00	; 0
    295c:	21 f4       	brne	.+8      	; 0x2966 <realloc+0x1a>
    295e:	cb 01       	movw	r24, r22
    2960:	0e 94 85 13 	call	0x270a	; 0x270a <malloc>
    2964:	b4 c0       	rjmp	.+360    	; 0x2ace <realloc+0x182>
    2966:	fc 01       	movw	r30, r24
    2968:	e6 0f       	add	r30, r22
    296a:	f7 1f       	adc	r31, r23
    296c:	9c 01       	movw	r18, r24
    296e:	22 50       	subi	r18, 0x02	; 2
    2970:	31 09       	sbc	r19, r1
    2972:	e2 17       	cp	r30, r18
    2974:	f3 07       	cpc	r31, r19
    2976:	08 f4       	brcc	.+2      	; 0x297a <realloc+0x2e>
    2978:	a8 c0       	rjmp	.+336    	; 0x2aca <realloc+0x17e>
    297a:	d9 01       	movw	r26, r18
    297c:	0d 91       	ld	r16, X+
    297e:	1c 91       	ld	r17, X
    2980:	11 97       	sbiw	r26, 0x01	; 1
    2982:	06 17       	cp	r16, r22
    2984:	17 07       	cpc	r17, r23
    2986:	b0 f0       	brcs	.+44     	; 0x29b4 <realloc+0x68>
    2988:	05 30       	cpi	r16, 0x05	; 5
    298a:	11 05       	cpc	r17, r1
    298c:	08 f4       	brcc	.+2      	; 0x2990 <realloc+0x44>
    298e:	9b c0       	rjmp	.+310    	; 0x2ac6 <realloc+0x17a>
    2990:	c8 01       	movw	r24, r16
    2992:	04 97       	sbiw	r24, 0x04	; 4
    2994:	86 17       	cp	r24, r22
    2996:	97 07       	cpc	r25, r23
    2998:	08 f4       	brcc	.+2      	; 0x299c <realloc+0x50>
    299a:	95 c0       	rjmp	.+298    	; 0x2ac6 <realloc+0x17a>
    299c:	02 50       	subi	r16, 0x02	; 2
    299e:	11 09       	sbc	r17, r1
    29a0:	06 1b       	sub	r16, r22
    29a2:	17 0b       	sbc	r17, r23
    29a4:	01 93       	st	Z+, r16
    29a6:	11 93       	st	Z+, r17
    29a8:	6d 93       	st	X+, r22
    29aa:	7c 93       	st	X, r23
    29ac:	cf 01       	movw	r24, r30
    29ae:	0e 94 1d 14 	call	0x283a	; 0x283a <free>
    29b2:	89 c0       	rjmp	.+274    	; 0x2ac6 <realloc+0x17a>
    29b4:	5b 01       	movw	r10, r22
    29b6:	a0 1a       	sub	r10, r16
    29b8:	b1 0a       	sbc	r11, r17
    29ba:	4c 01       	movw	r8, r24
    29bc:	80 0e       	add	r8, r16
    29be:	91 1e       	adc	r9, r17
    29c0:	a0 91 a1 02 	lds	r26, 0x02A1	; 0x8002a1 <__flp>
    29c4:	b0 91 a2 02 	lds	r27, 0x02A2	; 0x8002a2 <__flp+0x1>
    29c8:	61 2c       	mov	r6, r1
    29ca:	71 2c       	mov	r7, r1
    29cc:	e1 2c       	mov	r14, r1
    29ce:	f1 2c       	mov	r15, r1
    29d0:	10 97       	sbiw	r26, 0x00	; 0
    29d2:	09 f4       	brne	.+2      	; 0x29d6 <realloc+0x8a>
    29d4:	46 c0       	rjmp	.+140    	; 0x2a62 <realloc+0x116>
    29d6:	8d 91       	ld	r24, X+
    29d8:	9c 91       	ld	r25, X
    29da:	11 97       	sbiw	r26, 0x01	; 1
    29dc:	a8 15       	cp	r26, r8
    29de:	b9 05       	cpc	r27, r9
    29e0:	b1 f5       	brne	.+108    	; 0x2a4e <realloc+0x102>
    29e2:	6c 01       	movw	r12, r24
    29e4:	42 e0       	ldi	r20, 0x02	; 2
    29e6:	c4 0e       	add	r12, r20
    29e8:	d1 1c       	adc	r13, r1
    29ea:	ca 14       	cp	r12, r10
    29ec:	db 04       	cpc	r13, r11
    29ee:	78 f1       	brcs	.+94     	; 0x2a4e <realloc+0x102>
    29f0:	4c 01       	movw	r8, r24
    29f2:	8a 18       	sub	r8, r10
    29f4:	9b 08       	sbc	r9, r11
    29f6:	64 01       	movw	r12, r8
    29f8:	42 e0       	ldi	r20, 0x02	; 2
    29fa:	c4 0e       	add	r12, r20
    29fc:	d1 1c       	adc	r13, r1
    29fe:	12 96       	adiw	r26, 0x02	; 2
    2a00:	bc 90       	ld	r11, X
    2a02:	12 97       	sbiw	r26, 0x02	; 2
    2a04:	13 96       	adiw	r26, 0x03	; 3
    2a06:	ac 91       	ld	r26, X
    2a08:	b5 e0       	ldi	r27, 0x05	; 5
    2a0a:	cb 16       	cp	r12, r27
    2a0c:	d1 04       	cpc	r13, r1
    2a0e:	40 f0       	brcs	.+16     	; 0x2a20 <realloc+0xd4>
    2a10:	b2 82       	std	Z+2, r11	; 0x02
    2a12:	a3 83       	std	Z+3, r26	; 0x03
    2a14:	91 82       	std	Z+1, r9	; 0x01
    2a16:	80 82       	st	Z, r8
    2a18:	d9 01       	movw	r26, r18
    2a1a:	6d 93       	st	X+, r22
    2a1c:	7c 93       	st	X, r23
    2a1e:	09 c0       	rjmp	.+18     	; 0x2a32 <realloc+0xe6>
    2a20:	0e 5f       	subi	r16, 0xFE	; 254
    2a22:	1f 4f       	sbci	r17, 0xFF	; 255
    2a24:	80 0f       	add	r24, r16
    2a26:	91 1f       	adc	r25, r17
    2a28:	f9 01       	movw	r30, r18
    2a2a:	91 83       	std	Z+1, r25	; 0x01
    2a2c:	80 83       	st	Z, r24
    2a2e:	eb 2d       	mov	r30, r11
    2a30:	fa 2f       	mov	r31, r26
    2a32:	e1 14       	cp	r14, r1
    2a34:	f1 04       	cpc	r15, r1
    2a36:	31 f0       	breq	.+12     	; 0x2a44 <realloc+0xf8>
    2a38:	d7 01       	movw	r26, r14
    2a3a:	13 96       	adiw	r26, 0x03	; 3
    2a3c:	fc 93       	st	X, r31
    2a3e:	ee 93       	st	-X, r30
    2a40:	12 97       	sbiw	r26, 0x02	; 2
    2a42:	41 c0       	rjmp	.+130    	; 0x2ac6 <realloc+0x17a>
    2a44:	f0 93 a2 02 	sts	0x02A2, r31	; 0x8002a2 <__flp+0x1>
    2a48:	e0 93 a1 02 	sts	0x02A1, r30	; 0x8002a1 <__flp>
    2a4c:	3c c0       	rjmp	.+120    	; 0x2ac6 <realloc+0x17a>
    2a4e:	68 16       	cp	r6, r24
    2a50:	79 06       	cpc	r7, r25
    2a52:	08 f4       	brcc	.+2      	; 0x2a56 <realloc+0x10a>
    2a54:	3c 01       	movw	r6, r24
    2a56:	7d 01       	movw	r14, r26
    2a58:	12 96       	adiw	r26, 0x02	; 2
    2a5a:	0d 90       	ld	r0, X+
    2a5c:	bc 91       	ld	r27, X
    2a5e:	a0 2d       	mov	r26, r0
    2a60:	b7 cf       	rjmp	.-146    	; 0x29d0 <realloc+0x84>
    2a62:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <__brkval>
    2a66:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <__brkval+0x1>
    2a6a:	88 16       	cp	r8, r24
    2a6c:	99 06       	cpc	r9, r25
    2a6e:	e1 f4       	brne	.+56     	; 0x2aa8 <realloc+0x15c>
    2a70:	66 16       	cp	r6, r22
    2a72:	77 06       	cpc	r7, r23
    2a74:	c8 f4       	brcc	.+50     	; 0x2aa8 <realloc+0x15c>
    2a76:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    2a7a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    2a7e:	00 97       	sbiw	r24, 0x00	; 0
    2a80:	41 f4       	brne	.+16     	; 0x2a92 <realloc+0x146>
    2a82:	8d b7       	in	r24, 0x3d	; 61
    2a84:	9e b7       	in	r25, 0x3e	; 62
    2a86:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2a8a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2a8e:	84 1b       	sub	r24, r20
    2a90:	95 0b       	sbc	r25, r21
    2a92:	e8 17       	cp	r30, r24
    2a94:	f9 07       	cpc	r31, r25
    2a96:	c8 f4       	brcc	.+50     	; 0x2aca <realloc+0x17e>
    2a98:	f0 93 a0 02 	sts	0x02A0, r31	; 0x8002a0 <__brkval+0x1>
    2a9c:	e0 93 9f 02 	sts	0x029F, r30	; 0x80029f <__brkval>
    2aa0:	f9 01       	movw	r30, r18
    2aa2:	71 83       	std	Z+1, r23	; 0x01
    2aa4:	60 83       	st	Z, r22
    2aa6:	0f c0       	rjmp	.+30     	; 0x2ac6 <realloc+0x17a>
    2aa8:	cb 01       	movw	r24, r22
    2aaa:	0e 94 85 13 	call	0x270a	; 0x270a <malloc>
    2aae:	7c 01       	movw	r14, r24
    2ab0:	00 97       	sbiw	r24, 0x00	; 0
    2ab2:	59 f0       	breq	.+22     	; 0x2aca <realloc+0x17e>
    2ab4:	a8 01       	movw	r20, r16
    2ab6:	be 01       	movw	r22, r28
    2ab8:	0e 94 9c 15 	call	0x2b38	; 0x2b38 <memcpy>
    2abc:	ce 01       	movw	r24, r28
    2abe:	0e 94 1d 14 	call	0x283a	; 0x283a <free>
    2ac2:	c7 01       	movw	r24, r14
    2ac4:	04 c0       	rjmp	.+8      	; 0x2ace <realloc+0x182>
    2ac6:	ce 01       	movw	r24, r28
    2ac8:	02 c0       	rjmp	.+4      	; 0x2ace <realloc+0x182>
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	cd b7       	in	r28, 0x3d	; 61
    2ad0:	de b7       	in	r29, 0x3e	; 62
    2ad2:	ee e0       	ldi	r30, 0x0E	; 14
    2ad4:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__epilogue_restores__+0x8>

00002ad8 <atol>:
    2ad8:	1f 93       	push	r17
    2ada:	fc 01       	movw	r30, r24
    2adc:	99 27       	eor	r25, r25
    2ade:	88 27       	eor	r24, r24
    2ae0:	bc 01       	movw	r22, r24
    2ae2:	e8 94       	clt
    2ae4:	11 91       	ld	r17, Z+
    2ae6:	10 32       	cpi	r17, 0x20	; 32
    2ae8:	e9 f3       	breq	.-6      	; 0x2ae4 <atol+0xc>
    2aea:	19 30       	cpi	r17, 0x09	; 9
    2aec:	10 f0       	brcs	.+4      	; 0x2af2 <atol+0x1a>
    2aee:	1e 30       	cpi	r17, 0x0E	; 14
    2af0:	c8 f3       	brcs	.-14     	; 0x2ae4 <atol+0xc>
    2af2:	1b 32       	cpi	r17, 0x2B	; 43
    2af4:	51 f0       	breq	.+20     	; 0x2b0a <atol+0x32>
    2af6:	1d 32       	cpi	r17, 0x2D	; 45
    2af8:	49 f4       	brne	.+18     	; 0x2b0c <atol+0x34>
    2afa:	68 94       	set
    2afc:	06 c0       	rjmp	.+12     	; 0x2b0a <atol+0x32>
    2afe:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <__mulsi_const_10>
    2b02:	61 0f       	add	r22, r17
    2b04:	71 1d       	adc	r23, r1
    2b06:	81 1d       	adc	r24, r1
    2b08:	91 1d       	adc	r25, r1
    2b0a:	11 91       	ld	r17, Z+
    2b0c:	10 53       	subi	r17, 0x30	; 48
    2b0e:	1a 30       	cpi	r17, 0x0A	; 10
    2b10:	b0 f3       	brcs	.-20     	; 0x2afe <atol+0x26>
    2b12:	3e f4       	brtc	.+14     	; 0x2b22 <atol+0x4a>
    2b14:	90 95       	com	r25
    2b16:	80 95       	com	r24
    2b18:	70 95       	com	r23
    2b1a:	61 95       	neg	r22
    2b1c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b1e:	8f 4f       	sbci	r24, 0xFF	; 255
    2b20:	9f 4f       	sbci	r25, 0xFF	; 255
    2b22:	1f 91       	pop	r17
    2b24:	08 95       	ret

00002b26 <memcpy_P>:
    2b26:	fb 01       	movw	r30, r22
    2b28:	dc 01       	movw	r26, r24
    2b2a:	02 c0       	rjmp	.+4      	; 0x2b30 <memcpy_P+0xa>
    2b2c:	05 90       	lpm	r0, Z+
    2b2e:	0d 92       	st	X+, r0
    2b30:	41 50       	subi	r20, 0x01	; 1
    2b32:	50 40       	sbci	r21, 0x00	; 0
    2b34:	d8 f7       	brcc	.-10     	; 0x2b2c <memcpy_P+0x6>
    2b36:	08 95       	ret

00002b38 <memcpy>:
    2b38:	fb 01       	movw	r30, r22
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	02 c0       	rjmp	.+4      	; 0x2b42 <memcpy+0xa>
    2b3e:	01 90       	ld	r0, Z+
    2b40:	0d 92       	st	X+, r0
    2b42:	41 50       	subi	r20, 0x01	; 1
    2b44:	50 40       	sbci	r21, 0x00	; 0
    2b46:	d8 f7       	brcc	.-10     	; 0x2b3e <memcpy+0x6>
    2b48:	08 95       	ret

00002b4a <strcpy>:
    2b4a:	fb 01       	movw	r30, r22
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	01 90       	ld	r0, Z+
    2b50:	0d 92       	st	X+, r0
    2b52:	00 20       	and	r0, r0
    2b54:	e1 f7       	brne	.-8      	; 0x2b4e <strcpy+0x4>
    2b56:	08 95       	ret

00002b58 <ltoa>:
    2b58:	25 32       	cpi	r18, 0x25	; 37
    2b5a:	31 05       	cpc	r19, r1
    2b5c:	20 f4       	brcc	.+8      	; 0x2b66 <ltoa+0xe>
    2b5e:	22 30       	cpi	r18, 0x02	; 2
    2b60:	10 f0       	brcs	.+4      	; 0x2b66 <ltoa+0xe>
    2b62:	0c 94 b7 15 	jmp	0x2b6e	; 0x2b6e <__ltoa_ncheck>
    2b66:	fa 01       	movw	r30, r20
    2b68:	10 82       	st	Z, r1
    2b6a:	ca 01       	movw	r24, r20
    2b6c:	08 95       	ret

00002b6e <__ltoa_ncheck>:
    2b6e:	bb 27       	eor	r27, r27
    2b70:	2a 30       	cpi	r18, 0x0A	; 10
    2b72:	51 f4       	brne	.+20     	; 0x2b88 <__ltoa_ncheck+0x1a>
    2b74:	99 23       	and	r25, r25
    2b76:	42 f4       	brpl	.+16     	; 0x2b88 <__ltoa_ncheck+0x1a>
    2b78:	bd e2       	ldi	r27, 0x2D	; 45
    2b7a:	90 95       	com	r25
    2b7c:	80 95       	com	r24
    2b7e:	70 95       	com	r23
    2b80:	61 95       	neg	r22
    2b82:	7f 4f       	sbci	r23, 0xFF	; 255
    2b84:	8f 4f       	sbci	r24, 0xFF	; 255
    2b86:	9f 4f       	sbci	r25, 0xFF	; 255
    2b88:	0c 94 dc 15 	jmp	0x2bb8	; 0x2bb8 <__ultoa_common>

00002b8c <__mulsi_const_10>:
    2b8c:	59 2f       	mov	r21, r25
    2b8e:	48 2f       	mov	r20, r24
    2b90:	37 2f       	mov	r19, r23
    2b92:	26 2f       	mov	r18, r22
    2b94:	66 0f       	add	r22, r22
    2b96:	77 1f       	adc	r23, r23
    2b98:	88 1f       	adc	r24, r24
    2b9a:	99 1f       	adc	r25, r25
    2b9c:	66 0f       	add	r22, r22
    2b9e:	77 1f       	adc	r23, r23
    2ba0:	88 1f       	adc	r24, r24
    2ba2:	99 1f       	adc	r25, r25
    2ba4:	62 0f       	add	r22, r18
    2ba6:	73 1f       	adc	r23, r19
    2ba8:	84 1f       	adc	r24, r20
    2baa:	95 1f       	adc	r25, r21
    2bac:	66 0f       	add	r22, r22
    2bae:	77 1f       	adc	r23, r23
    2bb0:	88 1f       	adc	r24, r24
    2bb2:	99 1f       	adc	r25, r25
    2bb4:	08 95       	ret

00002bb6 <__ultoa_ncheck>:
    2bb6:	bb 27       	eor	r27, r27

00002bb8 <__ultoa_common>:
    2bb8:	fa 01       	movw	r30, r20
    2bba:	a6 2f       	mov	r26, r22
    2bbc:	62 17       	cp	r22, r18
    2bbe:	71 05       	cpc	r23, r1
    2bc0:	81 05       	cpc	r24, r1
    2bc2:	91 05       	cpc	r25, r1
    2bc4:	33 0b       	sbc	r19, r19
    2bc6:	30 fb       	bst	r19, 0
    2bc8:	66 f0       	brts	.+24     	; 0x2be2 <__ultoa_common+0x2a>
    2bca:	aa 27       	eor	r26, r26
    2bcc:	66 0f       	add	r22, r22
    2bce:	77 1f       	adc	r23, r23
    2bd0:	88 1f       	adc	r24, r24
    2bd2:	99 1f       	adc	r25, r25
    2bd4:	aa 1f       	adc	r26, r26
    2bd6:	a2 17       	cp	r26, r18
    2bd8:	10 f0       	brcs	.+4      	; 0x2bde <__ultoa_common+0x26>
    2bda:	a2 1b       	sub	r26, r18
    2bdc:	63 95       	inc	r22
    2bde:	38 50       	subi	r19, 0x08	; 8
    2be0:	a9 f7       	brne	.-22     	; 0x2bcc <__ultoa_common+0x14>
    2be2:	a0 5d       	subi	r26, 0xD0	; 208
    2be4:	aa 33       	cpi	r26, 0x3A	; 58
    2be6:	08 f0       	brcs	.+2      	; 0x2bea <__ultoa_common+0x32>
    2be8:	a9 5d       	subi	r26, 0xD9	; 217
    2bea:	a1 93       	st	Z+, r26
    2bec:	36 f7       	brtc	.-52     	; 0x2bba <__ultoa_common+0x2>
    2bee:	b1 11       	cpse	r27, r1
    2bf0:	b1 93       	st	Z+, r27
    2bf2:	10 82       	st	Z, r1
    2bf4:	ca 01       	movw	r24, r20
    2bf6:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <strrev>

00002bfa <strrev>:
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	fc 01       	movw	r30, r24
    2bfe:	67 2f       	mov	r22, r23
    2c00:	71 91       	ld	r23, Z+
    2c02:	77 23       	and	r23, r23
    2c04:	e1 f7       	brne	.-8      	; 0x2bfe <strrev+0x4>
    2c06:	32 97       	sbiw	r30, 0x02	; 2
    2c08:	04 c0       	rjmp	.+8      	; 0x2c12 <strrev+0x18>
    2c0a:	7c 91       	ld	r23, X
    2c0c:	6d 93       	st	X+, r22
    2c0e:	70 83       	st	Z, r23
    2c10:	62 91       	ld	r22, -Z
    2c12:	ae 17       	cp	r26, r30
    2c14:	bf 07       	cpc	r27, r31
    2c16:	c8 f3       	brcs	.-14     	; 0x2c0a <strrev+0x10>
    2c18:	08 95       	ret

00002c1a <eeprom_read_block>:
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22

00002c1e <eeprom_read_blraw>:
    2c1e:	fc 01       	movw	r30, r24
    2c20:	f9 99       	sbic	0x1f, 1	; 31
    2c22:	fe cf       	rjmp	.-4      	; 0x2c20 <eeprom_read_blraw+0x2>
    2c24:	06 c0       	rjmp	.+12     	; 0x2c32 <eeprom_read_blraw+0x14>
    2c26:	f2 bd       	out	0x22, r31	; 34
    2c28:	e1 bd       	out	0x21, r30	; 33
    2c2a:	f8 9a       	sbi	0x1f, 0	; 31
    2c2c:	31 96       	adiw	r30, 0x01	; 1
    2c2e:	00 b4       	in	r0, 0x20	; 32
    2c30:	0d 92       	st	X+, r0
    2c32:	41 50       	subi	r20, 0x01	; 1
    2c34:	50 40       	sbci	r21, 0x00	; 0
    2c36:	b8 f7       	brcc	.-18     	; 0x2c26 <eeprom_read_blraw+0x8>
    2c38:	08 95       	ret

00002c3a <eeprom_read_byte>:
    2c3a:	f9 99       	sbic	0x1f, 1	; 31
    2c3c:	fe cf       	rjmp	.-4      	; 0x2c3a <eeprom_read_byte>
    2c3e:	92 bd       	out	0x22, r25	; 34
    2c40:	81 bd       	out	0x21, r24	; 33
    2c42:	f8 9a       	sbi	0x1f, 0	; 31
    2c44:	99 27       	eor	r25, r25
    2c46:	80 b5       	in	r24, 0x20	; 32
    2c48:	08 95       	ret

00002c4a <eeprom_update_block>:
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	a4 0f       	add	r26, r20
    2c4e:	b5 1f       	adc	r27, r21
    2c50:	41 50       	subi	r20, 0x01	; 1
    2c52:	50 40       	sbci	r21, 0x00	; 0
    2c54:	48 f0       	brcs	.+18     	; 0x2c68 <eeprom_update_block+0x1e>
    2c56:	cb 01       	movw	r24, r22
    2c58:	84 0f       	add	r24, r20
    2c5a:	95 1f       	adc	r25, r21
    2c5c:	2e 91       	ld	r18, -X
    2c5e:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <eeprom_update_r18>
    2c62:	41 50       	subi	r20, 0x01	; 1
    2c64:	50 40       	sbci	r21, 0x00	; 0
    2c66:	d0 f7       	brcc	.-12     	; 0x2c5c <eeprom_update_block+0x12>
    2c68:	08 95       	ret

00002c6a <eeprom_update_byte>:
    2c6a:	26 2f       	mov	r18, r22

00002c6c <eeprom_update_r18>:
    2c6c:	f9 99       	sbic	0x1f, 1	; 31
    2c6e:	fe cf       	rjmp	.-4      	; 0x2c6c <eeprom_update_r18>
    2c70:	92 bd       	out	0x22, r25	; 34
    2c72:	81 bd       	out	0x21, r24	; 33
    2c74:	f8 9a       	sbi	0x1f, 0	; 31
    2c76:	01 97       	sbiw	r24, 0x01	; 1
    2c78:	00 b4       	in	r0, 0x20	; 32
    2c7a:	02 16       	cp	r0, r18
    2c7c:	39 f0       	breq	.+14     	; 0x2c8c <eeprom_update_r18+0x20>
    2c7e:	1f ba       	out	0x1f, r1	; 31
    2c80:	20 bd       	out	0x20, r18	; 32
    2c82:	0f b6       	in	r0, 0x3f	; 63
    2c84:	f8 94       	cli
    2c86:	fa 9a       	sbi	0x1f, 2	; 31
    2c88:	f9 9a       	sbi	0x1f, 1	; 31
    2c8a:	0f be       	out	0x3f, r0	; 63
    2c8c:	08 95       	ret

00002c8e <eeprom_write_block>:
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	03 c0       	rjmp	.+6      	; 0x2c9a <eeprom_write_block+0xc>
    2c94:	2d 91       	ld	r18, X+
    2c96:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <eeprom_write_r18>
    2c9a:	41 50       	subi	r20, 0x01	; 1
    2c9c:	50 40       	sbci	r21, 0x00	; 0
    2c9e:	d0 f7       	brcc	.-12     	; 0x2c94 <eeprom_write_block+0x6>
    2ca0:	08 95       	ret

00002ca2 <eeprom_write_byte>:
    2ca2:	26 2f       	mov	r18, r22

00002ca4 <eeprom_write_r18>:
    2ca4:	f9 99       	sbic	0x1f, 1	; 31
    2ca6:	fe cf       	rjmp	.-4      	; 0x2ca4 <eeprom_write_r18>
    2ca8:	1f ba       	out	0x1f, r1	; 31
    2caa:	92 bd       	out	0x22, r25	; 34
    2cac:	81 bd       	out	0x21, r24	; 33
    2cae:	20 bd       	out	0x20, r18	; 32
    2cb0:	0f b6       	in	r0, 0x3f	; 63
    2cb2:	f8 94       	cli
    2cb4:	fa 9a       	sbi	0x1f, 2	; 31
    2cb6:	f9 9a       	sbi	0x1f, 1	; 31
    2cb8:	0f be       	out	0x3f, r0	; 63
    2cba:	01 96       	adiw	r24, 0x01	; 1
    2cbc:	08 95       	ret

00002cbe <__prologue_saves__>:
    2cbe:	2f 92       	push	r2
    2cc0:	3f 92       	push	r3
    2cc2:	4f 92       	push	r4
    2cc4:	5f 92       	push	r5
    2cc6:	6f 92       	push	r6
    2cc8:	7f 92       	push	r7
    2cca:	8f 92       	push	r8
    2ccc:	9f 92       	push	r9
    2cce:	af 92       	push	r10
    2cd0:	bf 92       	push	r11
    2cd2:	cf 92       	push	r12
    2cd4:	df 92       	push	r13
    2cd6:	ef 92       	push	r14
    2cd8:	ff 92       	push	r15
    2cda:	0f 93       	push	r16
    2cdc:	1f 93       	push	r17
    2cde:	cf 93       	push	r28
    2ce0:	df 93       	push	r29
    2ce2:	cd b7       	in	r28, 0x3d	; 61
    2ce4:	de b7       	in	r29, 0x3e	; 62
    2ce6:	ca 1b       	sub	r28, r26
    2ce8:	db 0b       	sbc	r29, r27
    2cea:	0f b6       	in	r0, 0x3f	; 63
    2cec:	f8 94       	cli
    2cee:	de bf       	out	0x3e, r29	; 62
    2cf0:	0f be       	out	0x3f, r0	; 63
    2cf2:	cd bf       	out	0x3d, r28	; 61
    2cf4:	09 94       	ijmp

00002cf6 <__epilogue_restores__>:
    2cf6:	2a 88       	ldd	r2, Y+18	; 0x12
    2cf8:	39 88       	ldd	r3, Y+17	; 0x11
    2cfa:	48 88       	ldd	r4, Y+16	; 0x10
    2cfc:	5f 84       	ldd	r5, Y+15	; 0x0f
    2cfe:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d00:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d02:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d04:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d06:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d08:	b9 84       	ldd	r11, Y+9	; 0x09
    2d0a:	c8 84       	ldd	r12, Y+8	; 0x08
    2d0c:	df 80       	ldd	r13, Y+7	; 0x07
    2d0e:	ee 80       	ldd	r14, Y+6	; 0x06
    2d10:	fd 80       	ldd	r15, Y+5	; 0x05
    2d12:	0c 81       	ldd	r16, Y+4	; 0x04
    2d14:	1b 81       	ldd	r17, Y+3	; 0x03
    2d16:	aa 81       	ldd	r26, Y+2	; 0x02
    2d18:	b9 81       	ldd	r27, Y+1	; 0x01
    2d1a:	ce 0f       	add	r28, r30
    2d1c:	d1 1d       	adc	r29, r1
    2d1e:	0f b6       	in	r0, 0x3f	; 63
    2d20:	f8 94       	cli
    2d22:	de bf       	out	0x3e, r29	; 62
    2d24:	0f be       	out	0x3f, r0	; 63
    2d26:	cd bf       	out	0x3d, r28	; 61
    2d28:	ed 01       	movw	r28, r26
    2d2a:	08 95       	ret

00002d2c <_exit>:
    2d2c:	f8 94       	cli

00002d2e <__stop_program>:
    2d2e:	ff cf       	rjmp	.-2      	; 0x2d2e <__stop_program>
