
low_power_sensor_inside.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000090  00800100  0000247a  0000250e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000247a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d7  00800190  00800190  0000259e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000259e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000025d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000640  00000000  00000000  00002610  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b0c8  00000000  00000000  00002c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001e58  00000000  00000000  0000dd18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003870  00000000  00000000  0000fb70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001620  00000000  00000000  000133e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002972  00000000  00000000  00014a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007f52  00000000  00000000  00017372  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000650  00000000  00000000  0001f2c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__ctors_end>
       4:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <__vector_1>
       8:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__vector_2>
       c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      10:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      14:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      18:	0c 94 72 07 	jmp	0xee4	; 0xee4 <__vector_6>
      1c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      20:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      24:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      28:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      2c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      30:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      34:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      38:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      3c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      40:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <__vector_16>
      44:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      48:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      4c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      50:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      54:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      58:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      5c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      60:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      64:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	5e 01       	movw	r10, r28
      6a:	01 1f       	adc	r16, r17
      6c:	01 03       	mulsu	r16, r17
      6e:	03 01       	movw	r0, r6
      70:	00 8a       	std	Z+16, r0	; 0x10
      72:	02 01       	movw	r0, r4
      74:	0a 01       	movw	r0, r20
      76:	02 02       	muls	r16, r18
      78:	01 00       	.word	0x0001	; ????
      7a:	64 00       	.word	0x0064	; ????
      7c:	1e 47       	sbci	r17, 0x7E	; 126
      7e:	04 0b       	sbc	r16, r20
      80:	09 06       	cpc	r0, r25
      82:	00 7c       	andi	r16, 0xC0	; 192
      84:	01 01       	movw	r0, r2
      86:	06 01       	movw	r0, r12
      88:	03 03       	mulsu	r16, r19
      8a:	01 00       	.word	0x0001	; ????
      8c:	f4 01       	movw	r30, r8
      8e:	06 0e       	add	r0, r22
      90:	01 02       	muls	r16, r17
      92:	02 01       	movw	r0, r4
      94:	00 c2       	rjmp	.+1024   	; 0x496 <_Z8sendDatall+0x4e>
      96:	01 17       	cp	r16, r17
      98:	01 01       	movw	r0, r2
      9a:	02 02       	muls	r16, r18
      9c:	01 01       	movw	r0, r2

0000009e <digital_pin_to_timer_PGM>:
      9e:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      ae:	00 00 00 00                                         ....

000000b2 <digital_pin_to_bit_mask_PGM>:
      b2:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      c2:	04 08 10 20                                         ... 

000000c6 <digital_pin_to_port_PGM>:
      c6:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      d6:	03 03 03 03                                         ....

000000da <port_to_input_PGM>:
      da:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000e4 <port_to_output_PGM>:
      e4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ee <port_to_mode_PGM>:
      ee:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000f8 <__ctors_start>:
      f8:	0b 05       	cpc	r16, r11

000000fa <__ctors_end>:
      fa:	11 24       	eor	r1, r1
      fc:	1f be       	out	0x3f, r1	; 63
      fe:	cf ef       	ldi	r28, 0xFF	; 255
     100:	d8 e0       	ldi	r29, 0x08	; 8
     102:	de bf       	out	0x3e, r29	; 62
     104:	cd bf       	out	0x3d, r28	; 61

00000106 <__do_copy_data>:
     106:	11 e0       	ldi	r17, 0x01	; 1
     108:	a0 e0       	ldi	r26, 0x00	; 0
     10a:	b1 e0       	ldi	r27, 0x01	; 1
     10c:	ea e7       	ldi	r30, 0x7A	; 122
     10e:	f4 e2       	ldi	r31, 0x24	; 36
     110:	02 c0       	rjmp	.+4      	; 0x116 <__do_copy_data+0x10>
     112:	05 90       	lpm	r0, Z+
     114:	0d 92       	st	X+, r0
     116:	a0 39       	cpi	r26, 0x90	; 144
     118:	b1 07       	cpc	r27, r17
     11a:	d9 f7       	brne	.-10     	; 0x112 <__do_copy_data+0xc>

0000011c <__do_clear_bss>:
     11c:	22 e0       	ldi	r18, 0x02	; 2
     11e:	a0 e9       	ldi	r26, 0x90	; 144
     120:	b1 e0       	ldi	r27, 0x01	; 1
     122:	01 c0       	rjmp	.+2      	; 0x126 <.do_clear_bss_start>

00000124 <.do_clear_bss_loop>:
     124:	1d 92       	st	X+, r1

00000126 <.do_clear_bss_start>:
     126:	a7 36       	cpi	r26, 0x67	; 103
     128:	b2 07       	cpc	r27, r18
     12a:	e1 f7       	brne	.-8      	; 0x124 <.do_clear_bss_loop>

0000012c <__do_global_ctors>:
     12c:	10 e0       	ldi	r17, 0x00	; 0
     12e:	cd e7       	ldi	r28, 0x7D	; 125
     130:	d0 e0       	ldi	r29, 0x00	; 0
     132:	04 c0       	rjmp	.+8      	; 0x13c <__do_global_ctors+0x10>
     134:	21 97       	sbiw	r28, 0x01	; 1
     136:	fe 01       	movw	r30, r28
     138:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <__tablejump2__>
     13c:	cc 37       	cpi	r28, 0x7C	; 124
     13e:	d1 07       	cpc	r29, r17
     140:	c9 f7       	brne	.-14     	; 0x134 <__do_global_ctors+0x8>
     142:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <main>
     146:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <_exit>

0000014a <__bad_interrupt>:
     14a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014e <setup>:
	return result;
}


//trace function
void trc(String msg){
     14e:	1f 93       	push	r17
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	00 d0       	rcall	.+0      	; 0x156 <setup+0x8>
     156:	00 d0       	rcall	.+0      	; 0x158 <setup+0xa>
     158:	00 d0       	rcall	.+0      	; 0x15a <setup+0xc>
     15a:	cd b7       	in	r28, 0x3d	; 61
     15c:	de b7       	in	r29, 0x3e	; 62
     15e:	10 e0       	ldi	r17, 0x00	; 0
     160:	60 e0       	ldi	r22, 0x00	; 0
     162:	81 2f       	mov	r24, r17
     164:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <pinMode>
     168:	60 e0       	ldi	r22, 0x00	; 0
     16a:	81 2f       	mov	r24, r17
     16c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <digitalWrite>
     170:	1f 5f       	subi	r17, 0xFF	; 255
     172:	14 31       	cpi	r17, 0x14	; 20
     174:	a9 f7       	brne	.-22     	; 0x160 <setup+0x12>
     176:	60 e0       	ldi	r22, 0x00	; 0
     178:	84 e0       	ldi	r24, 0x04	; 4
     17a:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <pinMode>
     17e:	60 e0       	ldi	r22, 0x00	; 0
     180:	87 e0       	ldi	r24, 0x07	; 7
     182:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <pinMode>
     186:	61 e0       	ldi	r22, 0x01	; 1
     188:	89 e0       	ldi	r24, 0x09	; 9
     18a:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <pinMode>
     18e:	61 e0       	ldi	r22, 0x01	; 1
     190:	89 e0       	ldi	r24, 0x09	; 9
     192:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <digitalWrite>
     196:	68 ec       	ldi	r22, 0xC8	; 200
     198:	70 e0       	ldi	r23, 0x00	; 0
     19a:	80 e0       	ldi	r24, 0x00	; 0
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <delay>
     1a2:	60 e0       	ldi	r22, 0x00	; 0
     1a4:	89 e0       	ldi	r24, 0x09	; 9
     1a6:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <digitalWrite>
     1aa:	60 e0       	ldi	r22, 0x00	; 0
     1ac:	89 e0       	ldi	r24, 0x09	; 9
     1ae:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <pinMode>
     1b2:	88 e5       	ldi	r24, 0x58	; 88
     1b4:	92 e0       	ldi	r25, 0x02	; 2
     1b6:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <SleepTimer+0x1>
     1ba:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <SleepTimer>
     1be:	66 e1       	ldi	r22, 0x16	; 22
     1c0:	71 e0       	ldi	r23, 0x01	; 1
     1c2:	ce 01       	movw	r24, r28
     1c4:	01 96       	adiw	r24, 0x01	; 1
     1c6:	0e 94 75 0e 	call	0x1cea	; 0x1cea <_ZN6StringC1EPKc>
     1ca:	ce 01       	movw	r24, r28
     1cc:	01 96       	adiw	r24, 0x01	; 1
     1ce:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <_ZN6StringD1Ev>
     1d2:	8c e0       	ldi	r24, 0x0C	; 12
     1d4:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <__data_end>
     1d8:	26 96       	adiw	r28, 0x06	; 6
     1da:	0f b6       	in	r0, 0x3f	; 63
     1dc:	f8 94       	cli
     1de:	de bf       	out	0x3e, r29	; 62
     1e0:	0f be       	out	0x3f, r0	; 63
     1e2:	cd bf       	out	0x3d, r28	; 61
     1e4:	df 91       	pop	r29
     1e6:	cf 91       	pop	r28
     1e8:	1f 91       	pop	r17
     1ea:	08 95       	ret

000001ec <_Z12sleepSecondsi>:
     1ec:	0f 93       	push	r16
     1ee:	1f 93       	push	r17
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
     1f4:	97 fd       	sbrc	r25, 7
     1f6:	07 96       	adiw	r24, 0x07	; 7
     1f8:	ec 01       	movw	r28, r24
     1fa:	83 e0       	ldi	r24, 0x03	; 3
     1fc:	d5 95       	asr	r29
     1fe:	c7 95       	ror	r28
     200:	8a 95       	dec	r24
     202:	e1 f7       	brne	.-8      	; 0x1fc <_Z12sleepSecondsi+0x10>
     204:	00 e0       	ldi	r16, 0x00	; 0
     206:	10 e0       	ldi	r17, 0x00	; 0
     208:	0c 17       	cp	r16, r28
     20a:	1d 07       	cpc	r17, r29
     20c:	54 f4       	brge	.+20     	; 0x222 <_Z12sleepSecondsi+0x36>
     20e:	20 e0       	ldi	r18, 0x00	; 0
     210:	40 e0       	ldi	r20, 0x00	; 0
     212:	69 e0       	ldi	r22, 0x09	; 9
     214:	81 ec       	ldi	r24, 0xC1	; 193
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	0e 94 28 07 	call	0xe50	; 0xe50 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t>
     21c:	0f 5f       	subi	r16, 0xFF	; 255
     21e:	1f 4f       	sbci	r17, 0xFF	; 255
     220:	f3 cf       	rjmp	.-26     	; 0x208 <_Z12sleepSecondsi+0x1c>
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	1f 91       	pop	r17
     228:	0f 91       	pop	r16
     22a:	08 95       	ret

0000022c <_Z19checkForFreshEEpromv>:
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	0e 94 c2 11 	call	0x2384	; 0x2384 <eeprom_read_byte>
     234:	81 50       	subi	r24, 0x01	; 1
     236:	8e 3f       	cpi	r24, 0xFE	; 254
     238:	50 f0       	brcs	.+20     	; 0x24e <_Z19checkForFreshEEpromv+0x22>
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ee_address>
     240:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <fresh_eeprom>
     244:	61 e0       	ldi	r22, 0x01	; 1
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	0c 94 f6 11 	jmp	0x23ec	; 0x23ec <eeprom_write_byte>
     24e:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <__data_end>
     252:	89 9f       	mul	r24, r25
     254:	80 2d       	mov	r24, r0
     256:	11 24       	eor	r1, r1
     258:	8f 5f       	subi	r24, 0xFF	; 255
     25a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ee_address>
     25e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <fresh_eeprom>
     262:	08 95       	ret

00000264 <_Z10readEEDatav>:
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	cd b7       	in	r28, 0x3d	; 61
     26a:	de b7       	in	r29, 0x3e	; 62
     26c:	2c 97       	sbiw	r28, 0x0c	; 12
     26e:	0f b6       	in	r0, 0x3f	; 63
     270:	f8 94       	cli
     272:	de bf       	out	0x3e, r29	; 62
     274:	0f be       	out	0x3f, r0	; 63
     276:	cd bf       	out	0x3d, r28	; 61
     278:	0e 94 16 01 	call	0x22c	; 0x22c <_Z19checkForFreshEEpromv>
     27c:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <ee_address>
     280:	70 e0       	ldi	r23, 0x00	; 0
     282:	4c e0       	ldi	r20, 0x0C	; 12
     284:	50 e0       	ldi	r21, 0x00	; 0
     286:	ce 01       	movw	r24, r28
     288:	01 96       	adiw	r24, 0x01	; 1
     28a:	0e 94 b2 11 	call	0x2364	; 0x2364 <eeprom_read_block>
     28e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <fresh_eeprom>
     292:	88 23       	and	r24, r24
     294:	81 f0       	breq	.+32     	; 0x2b6 <_Z10readEEDatav+0x52>
     296:	1a 82       	std	Y+2, r1	; 0x02
     298:	19 82       	std	Y+1, r1	; 0x01
     29a:	1c 86       	std	Y+12, r1	; 0x0c
     29c:	1b 86       	std	Y+11, r1	; 0x0b
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	a0 ec       	ldi	r26, 0xC0	; 192
     2a4:	bf e7       	ldi	r27, 0x7F	; 127
     2a6:	8b 83       	std	Y+3, r24	; 0x03
     2a8:	9c 83       	std	Y+4, r25	; 0x04
     2aa:	ad 83       	std	Y+5, r26	; 0x05
     2ac:	be 83       	std	Y+6, r27	; 0x06
     2ae:	8f 83       	std	Y+7, r24	; 0x07
     2b0:	98 87       	std	Y+8, r25	; 0x08
     2b2:	a9 87       	std	Y+9, r26	; 0x09
     2b4:	ba 87       	std	Y+10, r27	; 0x0a
     2b6:	8c e0       	ldi	r24, 0x0C	; 12
     2b8:	fe 01       	movw	r30, r28
     2ba:	31 96       	adiw	r30, 0x01	; 1
     2bc:	a1 e9       	ldi	r26, 0x91	; 145
     2be:	b1 e0       	ldi	r27, 0x01	; 1
     2c0:	01 90       	ld	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	8a 95       	dec	r24
     2c6:	e1 f7       	brne	.-8      	; 0x2c0 <_Z10readEEDatav+0x5c>
     2c8:	2c 96       	adiw	r28, 0x0c	; 12
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	f8 94       	cli
     2ce:	de bf       	out	0x3e, r29	; 62
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	cd bf       	out	0x3d, r28	; 61
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	08 95       	ret

000002da <_Z11writeEEDatab>:
     2da:	1f 93       	push	r17
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
     2e4:	2c 97       	sbiw	r28, 0x0c	; 12
     2e6:	0f b6       	in	r0, 0x3f	; 63
     2e8:	f8 94       	cli
     2ea:	de bf       	out	0x3e, r29	; 62
     2ec:	0f be       	out	0x3f, r0	; 63
     2ee:	cd bf       	out	0x3d, r28	; 61
     2f0:	88 23       	and	r24, r24
     2f2:	49 f0       	breq	.+18     	; 0x306 <_Z11writeEEDatab+0x2c>
     2f4:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <ee_data+0xa>
     2f8:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <ee_data+0xb>
     2fc:	01 96       	adiw	r24, 0x01	; 1
     2fe:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <ee_data+0xb>
     302:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <ee_data+0xa>
     306:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <ee_data>
     30a:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <ee_data+0x1>
     30e:	01 96       	adiw	r24, 0x01	; 1
     310:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <ee_data+0x1>
     314:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <ee_data>
     318:	40 91 90 01 	lds	r20, 0x0190	; 0x800190 <__data_end>
     31c:	50 e0       	ldi	r21, 0x00	; 0
     31e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <ee_address>
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	81 e9       	ldi	r24, 0x91	; 145
     326:	91 e0       	ldi	r25, 0x01	; 1
     328:	0e 94 ca 11 	call	0x2394	; 0x2394 <eeprom_update_block>
     32c:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <ee_data>
     330:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <ee_data+0x1>
     334:	80 33       	cpi	r24, 0x30	; 48
     336:	95 47       	sbci	r25, 0x75	; 117
     338:	68 f1       	brcs	.+90     	; 0x394 <_Z11writeEEDatab+0xba>
     33a:	80 e0       	ldi	r24, 0x00	; 0
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	0e 94 c2 11 	call	0x2384	; 0x2384 <eeprom_read_byte>
     342:	18 2f       	mov	r17, r24
     344:	68 2f       	mov	r22, r24
     346:	70 e0       	ldi	r23, 0x00	; 0
     348:	6f 5f       	subi	r22, 0xFF	; 255
     34a:	7f 4f       	sbci	r23, 0xFF	; 255
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	0e 94 da 11 	call	0x23b4	; 0x23b4 <eeprom_update_byte>
     354:	40 91 90 01 	lds	r20, 0x0190	; 0x800190 <__data_end>
     358:	14 9f       	mul	r17, r20
     35a:	60 2d       	mov	r22, r0
     35c:	11 24       	eor	r1, r1
     35e:	11 e0       	ldi	r17, 0x01	; 1
     360:	16 0f       	add	r17, r22
     362:	10 93 06 01 	sts	0x0106, r17	; 0x800106 <ee_address>
     366:	1a 82       	std	Y+2, r1	; 0x02
     368:	19 82       	std	Y+1, r1	; 0x01
     36a:	1c 86       	std	Y+12, r1	; 0x0c
     36c:	1b 86       	std	Y+11, r1	; 0x0b
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	a0 ec       	ldi	r26, 0xC0	; 192
     374:	bf e7       	ldi	r27, 0x7F	; 127
     376:	8b 83       	std	Y+3, r24	; 0x03
     378:	9c 83       	std	Y+4, r25	; 0x04
     37a:	ad 83       	std	Y+5, r26	; 0x05
     37c:	be 83       	std	Y+6, r27	; 0x06
     37e:	8f 83       	std	Y+7, r24	; 0x07
     380:	98 87       	std	Y+8, r25	; 0x08
     382:	a9 87       	std	Y+9, r26	; 0x09
     384:	ba 87       	std	Y+10, r27	; 0x0a
     386:	50 e0       	ldi	r21, 0x00	; 0
     388:	61 2f       	mov	r22, r17
     38a:	70 e0       	ldi	r23, 0x00	; 0
     38c:	ce 01       	movw	r24, r28
     38e:	01 96       	adiw	r24, 0x01	; 1
     390:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <eeprom_write_block>
     394:	2c 96       	adiw	r28, 0x0c	; 12
     396:	0f b6       	in	r0, 0x3f	; 63
     398:	f8 94       	cli
     39a:	de bf       	out	0x3e, r29	; 62
     39c:	0f be       	out	0x3f, r0	; 63
     39e:	cd bf       	out	0x3d, r28	; 61
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	1f 91       	pop	r17
     3a6:	08 95       	ret

000003a8 <_Z17measureTempAndHumv>:
     3a8:	cf 92       	push	r12
     3aa:	df 92       	push	r13
     3ac:	ef 92       	push	r14
     3ae:	ff 92       	push	r15
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	64 ef       	ldi	r22, 0xF4	; 244
     3b6:	71 e0       	ldi	r23, 0x01	; 1
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <delay>
     3c0:	c5 e0       	ldi	r28, 0x05	; 5
     3c2:	d0 e0       	ldi	r29, 0x00	; 0
     3c4:	60 e0       	ldi	r22, 0x00	; 0
     3c6:	8e e9       	ldi	r24, 0x9E	; 158
     3c8:	91 e0       	ldi	r25, 0x01	; 1
     3ca:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZN3DHT12readHumidityEb>
     3ce:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <humidity>
     3d2:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <humidity+0x1>
     3d6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <humidity+0x2>
     3da:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <humidity+0x3>
     3de:	40 e0       	ldi	r20, 0x00	; 0
     3e0:	60 e0       	ldi	r22, 0x00	; 0
     3e2:	8e e9       	ldi	r24, 0x9E	; 158
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	0e 94 87 06 	call	0xd0e	; 0xd0e <_ZN3DHT15readTemperatureEbb>
     3ea:	6b 01       	movw	r12, r22
     3ec:	7c 01       	movw	r14, r24
     3ee:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <temperature>
     3f2:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <temperature+0x1>
     3f6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <temperature+0x2>
     3fa:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <temperature+0x3>
     3fe:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <humidity>
     402:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <humidity+0x1>
     406:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <humidity+0x2>
     40a:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <humidity+0x3>
     40e:	9b 01       	movw	r18, r22
     410:	ac 01       	movw	r20, r24
     412:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__unordsf2>
     416:	81 11       	cpse	r24, r1
     418:	08 c0       	rjmp	.+16     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     41a:	a7 01       	movw	r20, r14
     41c:	96 01       	movw	r18, r12
     41e:	c7 01       	movw	r24, r14
     420:	b6 01       	movw	r22, r12
     422:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__unordsf2>
     426:	88 23       	and	r24, r24
     428:	41 f0       	breq	.+16     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     42a:	64 e3       	ldi	r22, 0x34	; 52
     42c:	78 e0       	ldi	r23, 0x08	; 8
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <delay>
     436:	21 97       	sbiw	r28, 0x01	; 1
     438:	29 f6       	brne	.-118    	; 0x3c4 <_Z17measureTempAndHumv+0x1c>
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	ff 90       	pop	r15
     440:	ef 90       	pop	r14
     442:	df 90       	pop	r13
     444:	cf 90       	pop	r12
     446:	08 95       	ret

00000448 <_Z8sendDatall>:
     448:	4f 92       	push	r4
     44a:	5f 92       	push	r5
     44c:	6f 92       	push	r6
     44e:	7f 92       	push	r7
     450:	8f 92       	push	r8
     452:	9f 92       	push	r9
     454:	af 92       	push	r10
     456:	bf 92       	push	r11
     458:	cf 92       	push	r12
     45a:	df 92       	push	r13
     45c:	ef 92       	push	r14
     45e:	ff 92       	push	r15
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	00 d0       	rcall	.+0      	; 0x466 <_Z8sendDatall+0x1e>
     466:	00 d0       	rcall	.+0      	; 0x468 <_Z8sendDatall+0x20>
     468:	00 d0       	rcall	.+0      	; 0x46a <_Z8sendDatall+0x22>
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
     46e:	6b 01       	movw	r12, r22
     470:	7c 01       	movw	r14, r24
     472:	49 01       	movw	r8, r18
     474:	5a 01       	movw	r10, r20
     476:	8b e2       	ldi	r24, 0x2B	; 43
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	0e 94 11 11 	call	0x2222	; 0x2222 <atol>
     47e:	2b 01       	movw	r4, r22
     480:	3c 01       	movw	r6, r24
     482:	62 e3       	ldi	r22, 0x32	; 50
     484:	71 e0       	ldi	r23, 0x01	; 1
     486:	ce 01       	movw	r24, r28
     488:	01 96       	adiw	r24, 0x01	; 1
     48a:	0e 94 75 0e 	call	0x1cea	; 0x1cea <_ZN6StringC1EPKc>
     48e:	ce 01       	movw	r24, r28
     490:	01 96       	adiw	r24, 0x01	; 1
     492:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <_ZN6StringD1Ev>
     496:	2a e0       	ldi	r18, 0x0A	; 10
     498:	b7 01       	movw	r22, r14
     49a:	a6 01       	movw	r20, r12
     49c:	ce 01       	movw	r24, r28
     49e:	01 96       	adiw	r24, 0x01	; 1
     4a0:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <_ZN6StringC1Elh>
     4a4:	ce 01       	movw	r24, r28
     4a6:	01 96       	adiw	r24, 0x01	; 1
     4a8:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <_ZN6StringD1Ev>
     4ac:	6d e3       	ldi	r22, 0x3D	; 61
     4ae:	71 e0       	ldi	r23, 0x01	; 1
     4b0:	ce 01       	movw	r24, r28
     4b2:	01 96       	adiw	r24, 0x01	; 1
     4b4:	0e 94 75 0e 	call	0x1cea	; 0x1cea <_ZN6StringC1EPKc>
     4b8:	ce 01       	movw	r24, r28
     4ba:	01 96       	adiw	r24, 0x01	; 1
     4bc:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <_ZN6StringD1Ev>
     4c0:	2a e0       	ldi	r18, 0x0A	; 10
     4c2:	b5 01       	movw	r22, r10
     4c4:	a4 01       	movw	r20, r8
     4c6:	ce 01       	movw	r24, r28
     4c8:	01 96       	adiw	r24, 0x01	; 1
     4ca:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <_ZN6StringC1Elh>
     4ce:	ce 01       	movw	r24, r28
     4d0:	01 96       	adiw	r24, 0x01	; 1
     4d2:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <_ZN6StringD1Ev>
     4d6:	4c 14       	cp	r4, r12
     4d8:	5d 04       	cpc	r5, r13
     4da:	6e 04       	cpc	r6, r14
     4dc:	7f 04       	cpc	r7, r15
     4de:	21 f0       	breq	.+8      	; 0x4e8 <_Z8sendDatall+0xa0>
     4e0:	c8 0c       	add	r12, r8
     4e2:	d9 1c       	adc	r13, r9
     4e4:	ea 1c       	adc	r14, r10
     4e6:	fb 1c       	adc	r15, r11
     4e8:	66 e4       	ldi	r22, 0x46	; 70
     4ea:	71 e0       	ldi	r23, 0x01	; 1
     4ec:	ce 01       	movw	r24, r28
     4ee:	01 96       	adiw	r24, 0x01	; 1
     4f0:	0e 94 75 0e 	call	0x1cea	; 0x1cea <_ZN6StringC1EPKc>
     4f4:	ce 01       	movw	r24, r28
     4f6:	01 96       	adiw	r24, 0x01	; 1
     4f8:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <_ZN6StringD1Ev>
     4fc:	2a e0       	ldi	r18, 0x0A	; 10
     4fe:	b7 01       	movw	r22, r14
     500:	a6 01       	movw	r20, r12
     502:	ce 01       	movw	r24, r28
     504:	01 96       	adiw	r24, 0x01	; 1
     506:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <_ZN6StringC1Elh>
     50a:	ce 01       	movw	r24, r28
     50c:	01 96       	adiw	r24, 0x01	; 1
     50e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <_ZN6StringD1Ev>
     512:	28 e1       	ldi	r18, 0x18	; 24
     514:	30 e0       	ldi	r19, 0x00	; 0
     516:	b7 01       	movw	r22, r14
     518:	a6 01       	movw	r20, r12
     51a:	82 eb       	ldi	r24, 0xB2	; 178
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	0e 94 30 08 	call	0x1060	; 0x1060 <_ZN8RCSwitch4sendEmj>
     522:	26 96       	adiw	r28, 0x06	; 6
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	f8 94       	cli
     528:	de bf       	out	0x3e, r29	; 62
     52a:	0f be       	out	0x3f, r0	; 63
     52c:	cd bf       	out	0x3d, r28	; 61
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	ff 90       	pop	r15
     534:	ef 90       	pop	r14
     536:	df 90       	pop	r13
     538:	cf 90       	pop	r12
     53a:	bf 90       	pop	r11
     53c:	af 90       	pop	r10
     53e:	9f 90       	pop	r9
     540:	8f 90       	pop	r8
     542:	7f 90       	pop	r7
     544:	6f 90       	pop	r6
     546:	5f 90       	pop	r5
     548:	4f 90       	pop	r4
     54a:	08 95       	ret

0000054c <_Z10TempAndHumv>:
     54c:	4f 92       	push	r4
     54e:	5f 92       	push	r5
     550:	6f 92       	push	r6
     552:	7f 92       	push	r7
     554:	8f 92       	push	r8
     556:	9f 92       	push	r9
     558:	af 92       	push	r10
     55a:	bf 92       	push	r11
     55c:	cf 92       	push	r12
     55e:	df 92       	push	r13
     560:	ef 92       	push	r14
     562:	ff 92       	push	r15
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
     56c:	2c 97       	sbiw	r28, 0x0c	; 12
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	f8 94       	cli
     572:	de bf       	out	0x3e, r29	; 62
     574:	0f be       	out	0x3f, r0	; 63
     576:	cd bf       	out	0x3d, r28	; 61
     578:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <_Z17measureTempAndHumv>
     57c:	c0 90 0c 01 	lds	r12, 0x010C	; 0x80010c <humidity>
     580:	d0 90 0d 01 	lds	r13, 0x010D	; 0x80010d <humidity+0x1>
     584:	e0 90 0e 01 	lds	r14, 0x010E	; 0x80010e <humidity+0x2>
     588:	f0 90 0f 01 	lds	r15, 0x010F	; 0x80010f <humidity+0x3>
     58c:	a7 01       	movw	r20, r14
     58e:	96 01       	movw	r18, r12
     590:	c7 01       	movw	r24, r14
     592:	b6 01       	movw	r22, r12
     594:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__unordsf2>
     598:	81 11       	cpse	r24, r1
     59a:	35 c0       	rjmp	.+106    	; 0x606 <_Z10TempAndHumv+0xba>
     59c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <temperature>
     5a0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <temperature+0x1>
     5a4:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <temperature+0x2>
     5a8:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <temperature+0x3>
     5ac:	89 87       	std	Y+9, r24	; 0x09
     5ae:	9a 87       	std	Y+10, r25	; 0x0a
     5b0:	ab 87       	std	Y+11, r26	; 0x0b
     5b2:	bc 87       	std	Y+12, r27	; 0x0c
     5b4:	9c 01       	movw	r18, r24
     5b6:	ad 01       	movw	r20, r26
     5b8:	bc 01       	movw	r22, r24
     5ba:	cd 01       	movw	r24, r26
     5bc:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__unordsf2>
     5c0:	81 11       	cpse	r24, r1
     5c2:	21 c0       	rjmp	.+66     	; 0x606 <_Z10TempAndHumv+0xba>
     5c4:	80 90 97 01 	lds	r8, 0x0197	; 0x800197 <ee_data+0x6>
     5c8:	90 90 98 01 	lds	r9, 0x0198	; 0x800198 <ee_data+0x7>
     5cc:	a0 90 99 01 	lds	r10, 0x0199	; 0x800199 <ee_data+0x8>
     5d0:	b0 90 9a 01 	lds	r11, 0x019A	; 0x80019a <ee_data+0x9>
     5d4:	a5 01       	movw	r20, r10
     5d6:	94 01       	movw	r18, r8
     5d8:	c5 01       	movw	r24, r10
     5da:	b4 01       	movw	r22, r8
     5dc:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__unordsf2>
     5e0:	81 11       	cpse	r24, r1
     5e2:	6c c0       	rjmp	.+216    	; 0x6bc <_Z10TempAndHumv+0x170>
     5e4:	40 90 93 01 	lds	r4, 0x0193	; 0x800193 <ee_data+0x2>
     5e8:	50 90 94 01 	lds	r5, 0x0194	; 0x800194 <ee_data+0x3>
     5ec:	60 90 95 01 	lds	r6, 0x0195	; 0x800195 <ee_data+0x4>
     5f0:	70 90 96 01 	lds	r7, 0x0196	; 0x800196 <ee_data+0x5>
     5f4:	a3 01       	movw	r20, r6
     5f6:	92 01       	movw	r18, r4
     5f8:	c3 01       	movw	r24, r6
     5fa:	b2 01       	movw	r22, r4
     5fc:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <__unordsf2>
     600:	88 23       	and	r24, r24
     602:	21 f1       	breq	.+72     	; 0x64c <_Z10TempAndHumv+0x100>
     604:	5b c0       	rjmp	.+182    	; 0x6bc <_Z10TempAndHumv+0x170>
     606:	68 e5       	ldi	r22, 0x58	; 88
     608:	71 e0       	ldi	r23, 0x01	; 1
     60a:	ce 01       	movw	r24, r28
     60c:	01 96       	adiw	r24, 0x01	; 1
     60e:	0e 94 75 0e 	call	0x1cea	; 0x1cea <_ZN6StringC1EPKc>
     612:	ce 01       	movw	r24, r28
     614:	01 96       	adiw	r24, 0x01	; 1
     616:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <_ZN6StringD1Ev>
     61a:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <temp_short_sleep>
     61e:	88 23       	and	r24, r24
     620:	89 f0       	breq	.+34     	; 0x644 <_Z10TempAndHumv+0xf8>
     622:	8a e4       	ldi	r24, 0x4A	; 74
     624:	91 e0       	ldi	r25, 0x01	; 1
     626:	0e 94 11 11 	call	0x2222	; 0x2222 <atol>
     62a:	6b 01       	movw	r12, r22
     62c:	7c 01       	movw	r14, r24
     62e:	8b e2       	ldi	r24, 0x2B	; 43
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	0e 94 11 11 	call	0x2222	; 0x2222 <atol>
     636:	a7 01       	movw	r20, r14
     638:	96 01       	movw	r18, r12
     63a:	0e 94 24 02 	call	0x448	; 0x448 <_Z8sendDatall>
     63e:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <temp_short_sleep>
     642:	35 c0       	rjmp	.+106    	; 0x6ae <_Z10TempAndHumv+0x162>
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <temp_short_sleep>
     64a:	31 c0       	rjmp	.+98     	; 0x6ae <_Z10TempAndHumv+0x162>
     64c:	c3 01       	movw	r24, r6
     64e:	b2 01       	movw	r22, r4
     650:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixsfsi>
     654:	2b 01       	movw	r4, r22
     656:	3c 01       	movw	r6, r24
     658:	69 85       	ldd	r22, Y+9	; 0x09
     65a:	7a 85       	ldd	r23, Y+10	; 0x0a
     65c:	8b 85       	ldd	r24, Y+11	; 0x0b
     65e:	9c 85       	ldd	r25, Y+12	; 0x0c
     660:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixsfsi>
     664:	46 1a       	sub	r4, r22
     666:	57 0a       	sbc	r5, r23
     668:	58 86       	std	Y+8, r5	; 0x08
     66a:	4f 82       	std	Y+7, r4	; 0x07
     66c:	c5 01       	movw	r24, r10
     66e:	b4 01       	movw	r22, r8
     670:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixsfsi>
     674:	4b 01       	movw	r8, r22
     676:	5c 01       	movw	r10, r24
     678:	c7 01       	movw	r24, r14
     67a:	b6 01       	movw	r22, r12
     67c:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixsfsi>
     680:	86 1a       	sub	r8, r22
     682:	97 0a       	sbc	r9, r23
     684:	9a 82       	std	Y+2, r9	; 0x02
     686:	89 82       	std	Y+1, r8	; 0x01
     688:	8f 81       	ldd	r24, Y+7	; 0x07
     68a:	98 85       	ldd	r25, Y+8	; 0x08
     68c:	0b 97       	sbiw	r24, 0x0b	; 11
     68e:	0c f4       	brge	.+2      	; 0x692 <_Z10TempAndHumv+0x146>
     690:	77 c0       	rjmp	.+238    	; 0x780 <_Z10TempAndHumv+0x234>
     692:	89 81       	ldd	r24, Y+1	; 0x01
     694:	9a 81       	ldd	r25, Y+2	; 0x02
     696:	0b 97       	sbiw	r24, 0x0b	; 11
     698:	0c f4       	brge	.+2      	; 0x69c <_Z10TempAndHumv+0x150>
     69a:	72 c0       	rjmp	.+228    	; 0x780 <_Z10TempAndHumv+0x234>
     69c:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <temp_short_sleep>
     6a0:	81 11       	cpse	r24, r1
     6a2:	ca c0       	rjmp	.+404    	; 0x838 <_Z10TempAndHumv+0x2ec>
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <temp_short_sleep>
     6aa:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z11writeEEDatab>
     6ae:	8c e3       	ldi	r24, 0x3C	; 60
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <SleepTimer+0x1>
     6b6:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <SleepTimer>
     6ba:	d6 c0       	rjmp	.+428    	; 0x868 <_Z10TempAndHumv+0x31c>
     6bc:	8a e4       	ldi	r24, 0x4A	; 74
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	0e 94 11 11 	call	0x2222	; 0x2222 <atol>
     6c4:	4b 01       	movw	r8, r22
     6c6:	5c 01       	movw	r10, r24
     6c8:	20 e0       	ldi	r18, 0x00	; 0
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	40 e2       	ldi	r20, 0x20	; 32
     6ce:	51 e4       	ldi	r21, 0x41	; 65
     6d0:	c7 01       	movw	r24, r14
     6d2:	b6 01       	movw	r22, r12
     6d4:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__mulsf3>
     6d8:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixsfsi>
     6dc:	07 2e       	mov	r0, r23
     6de:	00 0c       	add	r0, r0
     6e0:	88 0b       	sbc	r24, r24
     6e2:	99 0b       	sbc	r25, r25
     6e4:	a5 01       	movw	r20, r10
     6e6:	94 01       	movw	r18, r8
     6e8:	0e 94 24 02 	call	0x448	; 0x448 <_Z8sendDatall>
     6ec:	81 e5       	ldi	r24, 0x51	; 81
     6ee:	91 e0       	ldi	r25, 0x01	; 1
     6f0:	0e 94 11 11 	call	0x2222	; 0x2222 <atol>
     6f4:	6b 01       	movw	r12, r22
     6f6:	7c 01       	movw	r14, r24
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e2       	ldi	r20, 0x20	; 32
     6fe:	51 e4       	ldi	r21, 0x41	; 65
     700:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <temperature>
     704:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <temperature+0x1>
     708:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <temperature+0x2>
     70c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <temperature+0x3>
     710:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__mulsf3>
     714:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixsfsi>
     718:	07 2e       	mov	r0, r23
     71a:	00 0c       	add	r0, r0
     71c:	88 0b       	sbc	r24, r24
     71e:	99 0b       	sbc	r25, r25
     720:	a7 01       	movw	r20, r14
     722:	96 01       	movw	r18, r12
     724:	0e 94 24 02 	call	0x448	; 0x448 <_Z8sendDatall>
     728:	88 e5       	ldi	r24, 0x58	; 88
     72a:	92 e0       	ldi	r25, 0x02	; 2
     72c:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <SleepTimer+0x1>
     730:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <SleepTimer>
     734:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <temp_short_sleep>
     738:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <humidity>
     73c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <humidity+0x1>
     740:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <humidity+0x2>
     744:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <humidity+0x3>
     748:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <ee_data+0x6>
     74c:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <ee_data+0x7>
     750:	a0 93 99 01 	sts	0x0199, r26	; 0x800199 <ee_data+0x8>
     754:	b0 93 9a 01 	sts	0x019A, r27	; 0x80019a <ee_data+0x9>
     758:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <temperature>
     75c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <temperature+0x1>
     760:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <temperature+0x2>
     764:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <temperature+0x3>
     768:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <ee_data+0x2>
     76c:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <ee_data+0x3>
     770:	a0 93 95 01 	sts	0x0195, r26	; 0x800195 <ee_data+0x4>
     774:	b0 93 96 01 	sts	0x0196, r27	; 0x800196 <ee_data+0x5>
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z11writeEEDatab>
     77e:	74 c0       	rjmp	.+232    	; 0x868 <_Z10TempAndHumv+0x31c>
     780:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <temp_short_sleep>
     784:	c0 92 97 01 	sts	0x0197, r12	; 0x800197 <ee_data+0x6>
     788:	d0 92 98 01 	sts	0x0198, r13	; 0x800198 <ee_data+0x7>
     78c:	e0 92 99 01 	sts	0x0199, r14	; 0x800199 <ee_data+0x8>
     790:	f0 92 9a 01 	sts	0x019A, r15	; 0x80019a <ee_data+0x9>
     794:	89 85       	ldd	r24, Y+9	; 0x09
     796:	9a 85       	ldd	r25, Y+10	; 0x0a
     798:	ab 85       	ldd	r26, Y+11	; 0x0b
     79a:	bc 85       	ldd	r27, Y+12	; 0x0c
     79c:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <ee_data+0x2>
     7a0:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <ee_data+0x3>
     7a4:	a0 93 95 01 	sts	0x0195, r26	; 0x800195 <ee_data+0x4>
     7a8:	b0 93 96 01 	sts	0x0196, r27	; 0x800196 <ee_data+0x5>
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	0e 94 6d 01 	call	0x2da	; 0x2da <_Z11writeEEDatab>
     7b2:	8a e4       	ldi	r24, 0x4A	; 74
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	0e 94 11 11 	call	0x2222	; 0x2222 <atol>
     7ba:	6b 01       	movw	r12, r22
     7bc:	7c 01       	movw	r14, r24
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	40 e2       	ldi	r20, 0x20	; 32
     7c4:	51 e4       	ldi	r21, 0x41	; 65
     7c6:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <humidity>
     7ca:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <humidity+0x1>
     7ce:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <humidity+0x2>
     7d2:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <humidity+0x3>
     7d6:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__mulsf3>
     7da:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixsfsi>
     7de:	07 2e       	mov	r0, r23
     7e0:	00 0c       	add	r0, r0
     7e2:	88 0b       	sbc	r24, r24
     7e4:	99 0b       	sbc	r25, r25
     7e6:	a7 01       	movw	r20, r14
     7e8:	96 01       	movw	r18, r12
     7ea:	0e 94 24 02 	call	0x448	; 0x448 <_Z8sendDatall>
     7ee:	81 e5       	ldi	r24, 0x51	; 81
     7f0:	91 e0       	ldi	r25, 0x01	; 1
     7f2:	0e 94 11 11 	call	0x2222	; 0x2222 <atol>
     7f6:	6b 01       	movw	r12, r22
     7f8:	7c 01       	movw	r14, r24
     7fa:	20 e0       	ldi	r18, 0x00	; 0
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	40 e2       	ldi	r20, 0x20	; 32
     800:	51 e4       	ldi	r21, 0x41	; 65
     802:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <temperature>
     806:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <temperature+0x1>
     80a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <temperature+0x2>
     80e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <temperature+0x3>
     812:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__mulsf3>
     816:	0e 94 8d 0a 	call	0x151a	; 0x151a <__fixsfsi>
     81a:	07 2e       	mov	r0, r23
     81c:	00 0c       	add	r0, r0
     81e:	88 0b       	sbc	r24, r24
     820:	99 0b       	sbc	r25, r25
     822:	a7 01       	movw	r20, r14
     824:	96 01       	movw	r18, r12
     826:	0e 94 24 02 	call	0x448	; 0x448 <_Z8sendDatall>
     82a:	88 e5       	ldi	r24, 0x58	; 88
     82c:	92 e0       	ldi	r25, 0x02	; 2
     82e:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <SleepTimer+0x1>
     832:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <SleepTimer>
     836:	18 c0       	rjmp	.+48     	; 0x868 <_Z10TempAndHumv+0x31c>
     838:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <temp_short_sleep>
     83c:	c0 92 97 01 	sts	0x0197, r12	; 0x800197 <ee_data+0x6>
     840:	d0 92 98 01 	sts	0x0198, r13	; 0x800198 <ee_data+0x7>
     844:	e0 92 99 01 	sts	0x0199, r14	; 0x800199 <ee_data+0x8>
     848:	f0 92 9a 01 	sts	0x019A, r15	; 0x80019a <ee_data+0x9>
     84c:	89 85       	ldd	r24, Y+9	; 0x09
     84e:	9a 85       	ldd	r25, Y+10	; 0x0a
     850:	ab 85       	ldd	r26, Y+11	; 0x0b
     852:	bc 85       	ldd	r27, Y+12	; 0x0c
     854:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <ee_data+0x2>
     858:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <ee_data+0x3>
     85c:	a0 93 95 01 	sts	0x0195, r26	; 0x800195 <ee_data+0x4>
     860:	b0 93 96 01 	sts	0x0196, r27	; 0x800196 <ee_data+0x5>
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	a3 cf       	rjmp	.-186    	; 0x7ae <_Z10TempAndHumv+0x262>
     868:	2c 96       	adiw	r28, 0x0c	; 12
     86a:	0f b6       	in	r0, 0x3f	; 63
     86c:	f8 94       	cli
     86e:	de bf       	out	0x3e, r29	; 62
     870:	0f be       	out	0x3f, r0	; 63
     872:	cd bf       	out	0x3d, r28	; 61
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	ff 90       	pop	r15
     87a:	ef 90       	pop	r14
     87c:	df 90       	pop	r13
     87e:	cf 90       	pop	r12
     880:	bf 90       	pop	r11
     882:	af 90       	pop	r10
     884:	9f 90       	pop	r9
     886:	8f 90       	pop	r8
     888:	7f 90       	pop	r7
     88a:	6f 90       	pop	r6
     88c:	5f 90       	pop	r5
     88e:	4f 90       	pop	r4
     890:	08 95       	ret

00000892 <_Z10vccVoltagev>:
     892:	8e e4       	ldi	r24, 0x4E	; 78
     894:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     898:	6a e0       	ldi	r22, 0x0A	; 10
     89a:	70 e0       	ldi	r23, 0x00	; 0
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <delay>
     8a4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     8a8:	80 64       	ori	r24, 0x40	; 64
     8aa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     8ae:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     8b2:	86 fd       	sbrc	r24, 6
     8b4:	fc cf       	rjmp	.-8      	; 0x8ae <_Z10vccVoltagev+0x1c>
     8b6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     8ba:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	32 2f       	mov	r19, r18
     8c2:	22 27       	eor	r18, r18
     8c4:	a9 01       	movw	r20, r18
     8c6:	33 0f       	add	r19, r19
     8c8:	66 0b       	sbc	r22, r22
     8ca:	77 0b       	sbc	r23, r23
     8cc:	9a 01       	movw	r18, r20
     8ce:	ab 01       	movw	r20, r22
     8d0:	28 2b       	or	r18, r24
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	70 e3       	ldi	r23, 0x30	; 48
     8d6:	81 e1       	ldi	r24, 0x11	; 17
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__divmodsi4>
     8de:	ca 01       	movw	r24, r20
     8e0:	b9 01       	movw	r22, r18
     8e2:	08 95       	ret

000008e4 <loop>:
     8e4:	cf 92       	push	r12
     8e6:	df 92       	push	r13
     8e8:	ef 92       	push	r14
     8ea:	ff 92       	push	r15
     8ec:	cf 93       	push	r28
     8ee:	df 93       	push	r29
     8f0:	00 d0       	rcall	.+0      	; 0x8f2 <loop+0xe>
     8f2:	00 d0       	rcall	.+0      	; 0x8f4 <loop+0x10>
     8f4:	00 d0       	rcall	.+0      	; 0x8f6 <loop+0x12>
     8f6:	cd b7       	in	r28, 0x3d	; 61
     8f8:	de b7       	in	r29, 0x3e	; 62
     8fa:	61 e0       	ldi	r22, 0x01	; 1
     8fc:	87 e0       	ldi	r24, 0x07	; 7
     8fe:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <pinMode>
     902:	61 e0       	ldi	r22, 0x01	; 1
     904:	87 e0       	ldi	r24, 0x07	; 7
     906:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <digitalWrite>
     90a:	66 e0       	ldi	r22, 0x06	; 6
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	82 eb       	ldi	r24, 0xB2	; 178
     910:	91 e0       	ldi	r25, 0x01	; 1
     912:	0e 94 cc 07 	call	0xf98	; 0xf98 <_ZN8RCSwitch14enableTransmitEi>
     916:	6f e0       	ldi	r22, 0x0F	; 15
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	82 eb       	ldi	r24, 0xB2	; 178
     91c:	91 e0       	ldi	r25, 0x01	; 1
     91e:	0e 94 c8 07 	call	0xf90	; 0xf90 <_ZN8RCSwitch17setRepeatTransmitEi>
     922:	68 e7       	ldi	r22, 0x78	; 120
     924:	71 e0       	ldi	r23, 0x01	; 1
     926:	ce 01       	movw	r24, r28
     928:	01 96       	adiw	r24, 0x01	; 1
     92a:	0e 94 75 0e 	call	0x1cea	; 0x1cea <_ZN6StringC1EPKc>
     92e:	ce 01       	movw	r24, r28
     930:	01 96       	adiw	r24, 0x01	; 1
     932:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <_ZN6StringD1Ev>
     936:	0e 94 49 04 	call	0x892	; 0x892 <_Z10vccVoltagev>
     93a:	ab 01       	movw	r20, r22
     93c:	bc 01       	movw	r22, r24
     93e:	2a e0       	ldi	r18, 0x0A	; 10
     940:	ce 01       	movw	r24, r28
     942:	01 96       	adiw	r24, 0x01	; 1
     944:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <_ZN6StringC1Elh>
     948:	ce 01       	movw	r24, r28
     94a:	01 96       	adiw	r24, 0x01	; 1
     94c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <_ZN6StringD1Ev>
     950:	82 e8       	ldi	r24, 0x82	; 130
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	0e 94 11 11 	call	0x2222	; 0x2222 <atol>
     958:	6b 01       	movw	r12, r22
     95a:	7c 01       	movw	r14, r24
     95c:	0e 94 49 04 	call	0x892	; 0x892 <_Z10vccVoltagev>
     960:	a7 01       	movw	r20, r14
     962:	96 01       	movw	r18, r12
     964:	0e 94 24 02 	call	0x448	; 0x448 <_Z8sendDatall>
     968:	0e 94 32 01 	call	0x264	; 0x264 <_Z10readEEDatav>
     96c:	61 e0       	ldi	r22, 0x01	; 1
     96e:	84 e0       	ldi	r24, 0x04	; 4
     970:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <pinMode>
     974:	61 e0       	ldi	r22, 0x01	; 1
     976:	84 e0       	ldi	r24, 0x04	; 4
     978:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <digitalWrite>
     97c:	8e e9       	ldi	r24, 0x9E	; 158
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	0e 94 37 05 	call	0xa6e	; 0xa6e <_ZN3DHT5beginEv>
     984:	64 e6       	ldi	r22, 0x64	; 100
     986:	70 e0       	ldi	r23, 0x00	; 0
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <delay>
     990:	0e 94 a6 02 	call	0x54c	; 0x54c <_Z10TempAndHumv>
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	84 e0       	ldi	r24, 0x04	; 4
     998:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <digitalWrite>
     99c:	60 e0       	ldi	r22, 0x00	; 0
     99e:	83 e0       	ldi	r24, 0x03	; 3
     9a0:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <pinMode>
     9a4:	60 e0       	ldi	r22, 0x00	; 0
     9a6:	83 e0       	ldi	r24, 0x03	; 3
     9a8:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <digitalWrite>
     9ac:	60 e0       	ldi	r22, 0x00	; 0
     9ae:	84 e0       	ldi	r24, 0x04	; 4
     9b0:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <pinMode>
     9b4:	82 eb       	ldi	r24, 0xB2	; 178
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <_ZN8RCSwitch15disableTransmitEv>
     9bc:	60 e0       	ldi	r22, 0x00	; 0
     9be:	87 e0       	ldi	r24, 0x07	; 7
     9c0:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <pinMode>
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	87 e0       	ldi	r24, 0x07	; 7
     9c8:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <digitalWrite>
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	86 e0       	ldi	r24, 0x06	; 6
     9d0:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <pinMode>
     9d4:	60 e0       	ldi	r22, 0x00	; 0
     9d6:	86 e0       	ldi	r24, 0x06	; 6
     9d8:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <digitalWrite>
     9dc:	69 e8       	ldi	r22, 0x89	; 137
     9de:	71 e0       	ldi	r23, 0x01	; 1
     9e0:	ce 01       	movw	r24, r28
     9e2:	01 96       	adiw	r24, 0x01	; 1
     9e4:	0e 94 75 0e 	call	0x1cea	; 0x1cea <_ZN6StringC1EPKc>
     9e8:	ce 01       	movw	r24, r28
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <_ZN6StringD1Ev>
     9f0:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <SleepTimer>
     9f4:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <SleepTimer+0x1>
     9f8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_Z12sleepSecondsi>
     9fc:	26 96       	adiw	r28, 0x06	; 6
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	f8 94       	cli
     a02:	de bf       	out	0x3e, r29	; 62
     a04:	0f be       	out	0x3f, r0	; 63
     a06:	cd bf       	out	0x3d, r28	; 61
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	ff 90       	pop	r15
     a0e:	ef 90       	pop	r14
     a10:	df 90       	pop	r13
     a12:	cf 90       	pop	r12
     a14:	08 95       	ret

00000a16 <_GLOBAL__sub_I_mySwitch>:
// Here i comment out were the sensor will send its data from, this affects the sended RF values
#define Sensor_Bath // Config Code for Sensor Bath?
//#define Sensor_Balcony // Config Code for Sensor Balcony?
//#define Sensor_MasterBed // Config Code for Sensor MasterBedroom?

RCSwitch mySwitch = RCSwitch();
     a16:	82 eb       	ldi	r24, 0xB2	; 178
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	0e 94 a1 07 	call	0xf42	; 0xf42 <_ZN8RCSwitchC1Ev>
// SleepTimer: Time to deep sleep, adapted to error situation:
// No error during measurement: Sleep for TimeToSleep
// Error during measurement: Sleep for TimeToSleepError!
int SleepTimer;

DHT dht(DhtPin,DHTTYPE);
     a1e:	26 e0       	ldi	r18, 0x06	; 6
     a20:	46 e1       	ldi	r20, 0x16	; 22
     a22:	63 e0       	ldi	r22, 0x03	; 3
     a24:	8e e9       	ldi	r24, 0x9E	; 158
     a26:	91 e0       	ldi	r25, 0x01	; 1
     a28:	0c 94 16 05 	jmp	0xa2c	; 0xa2c <_ZN3DHTC1Ehhh>

00000a2c <_ZN3DHTC1Ehhh>:
    else if((percentHumidity > 85.0) && (temperature >= 80.0) && (temperature <= 87.0))
      hi += ((percentHumidity - 85.0) * 0.1) * ((87.0 - temperature) * 0.2);
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}
     a2c:	dc 01       	movw	r26, r24
     a2e:	15 96       	adiw	r26, 0x05	; 5
     a30:	6c 93       	st	X, r22
     a32:	15 97       	sbiw	r26, 0x05	; 5
     a34:	16 96       	adiw	r26, 0x06	; 6
     a36:	4c 93       	st	X, r20
     a38:	16 97       	sbiw	r26, 0x06	; 6
     a3a:	70 e0       	ldi	r23, 0x00	; 0
     a3c:	fb 01       	movw	r30, r22
     a3e:	ee 54       	subi	r30, 0x4E	; 78
     a40:	ff 4f       	sbci	r31, 0xFF	; 255
     a42:	e4 91       	lpm	r30, Z
     a44:	17 96       	adiw	r26, 0x07	; 7
     a46:	ec 93       	st	X, r30
     a48:	17 97       	sbiw	r26, 0x07	; 7
     a4a:	fb 01       	movw	r30, r22
     a4c:	ea 53       	subi	r30, 0x3A	; 58
     a4e:	ff 4f       	sbci	r31, 0xFF	; 255
     a50:	64 91       	lpm	r22, Z
     a52:	18 96       	adiw	r26, 0x08	; 8
     a54:	6c 93       	st	X, r22
     a56:	18 97       	sbiw	r26, 0x08	; 8
     a58:	40 e4       	ldi	r20, 0x40	; 64
     a5a:	5f e1       	ldi	r21, 0x1F	; 31
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	1d 96       	adiw	r26, 0x0d	; 13
     a62:	4d 93       	st	X+, r20
     a64:	5d 93       	st	X+, r21
     a66:	6d 93       	st	X+, r22
     a68:	7c 93       	st	X, r23
     a6a:	50 97       	sbiw	r26, 0x10	; 16
     a6c:	08 95       	ret

00000a6e <_ZN3DHT5beginEv>:
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	ec 01       	movw	r28, r24
     a74:	62 e0       	ldi	r22, 0x02	; 2
     a76:	8d 81       	ldd	r24, Y+5	; 0x05
     a78:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <pinMode>
     a7c:	80 e3       	ldi	r24, 0x30	; 48
     a7e:	98 ef       	ldi	r25, 0xF8	; 248
     a80:	af ef       	ldi	r26, 0xFF	; 255
     a82:	bf ef       	ldi	r27, 0xFF	; 255
     a84:	89 87       	std	Y+9, r24	; 0x09
     a86:	9a 87       	std	Y+10, r25	; 0x0a
     a88:	ab 87       	std	Y+11, r26	; 0x0b
     a8a:	bc 87       	std	Y+12, r27	; 0x0c
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	08 95       	ret

00000a92 <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
     a92:	8f 92       	push	r8
     a94:	9f 92       	push	r9
     a96:	af 92       	push	r10
     a98:	bf 92       	push	r11
     a9a:	cf 92       	push	r12
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	cf 93       	push	r28
     aa4:	dc 01       	movw	r26, r24
     aa6:	17 96       	adiw	r26, 0x07	; 7
     aa8:	cc 91       	ld	r28, X
     aaa:	17 97       	sbiw	r26, 0x07	; 7
  uint32_t count = 0;
  // On AVR platforms use direct GPIO port access as it's much faster and better
  // for catching pulses that are 10's of microseconds in length:
  #ifdef __AVR
    uint8_t portState = level ? _bit : 0;
     aac:	66 23       	and	r22, r22
     aae:	11 f0       	breq	.+4      	; 0xab4 <_ZN3DHT11expectPulseEb+0x22>
     ab0:	9c 2f       	mov	r25, r28
     ab2:	01 c0       	rjmp	.+2      	; 0xab6 <_ZN3DHT11expectPulseEb+0x24>
     ab4:	90 e0       	ldi	r25, 0x00	; 0
    while ((*portInputRegister(_port) & _bit) == portState) {
     ab6:	18 96       	adiw	r26, 0x08	; 8
     ab8:	2c 91       	ld	r18, X
     aba:	18 97       	sbiw	r26, 0x08	; 8
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	22 0f       	add	r18, r18
     ac0:	33 1f       	adc	r19, r19
     ac2:	26 52       	subi	r18, 0x26	; 38
     ac4:	3f 4f       	sbci	r19, 0xFF	; 255
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
  uint32_t count = 0;
     ac6:	40 e0       	ldi	r20, 0x00	; 0
     ac8:	50 e0       	ldi	r21, 0x00	; 0
     aca:	ba 01       	movw	r22, r20
  // On AVR platforms use direct GPIO port access as it's much faster and better
  // for catching pulses that are 10's of microseconds in length:
  #ifdef __AVR
    uint8_t portState = level ? _bit : 0;
    while ((*portInputRegister(_port) & _bit) == portState) {
     acc:	f9 01       	movw	r30, r18
     ace:	e5 90       	lpm	r14, Z+
     ad0:	f4 90       	lpm	r15, Z
     ad2:	f7 01       	movw	r30, r14
     ad4:	80 81       	ld	r24, Z
     ad6:	8c 23       	and	r24, r28
     ad8:	98 13       	cpse	r25, r24
     ada:	1a c0       	rjmp	.+52     	; 0xb10 <_ZN3DHT11expectPulseEb+0x7e>
      if (count++ >= _maxcycles) {
     adc:	4a 01       	movw	r8, r20
     ade:	5b 01       	movw	r10, r22
     ae0:	ff ef       	ldi	r31, 0xFF	; 255
     ae2:	8f 1a       	sub	r8, r31
     ae4:	9f 0a       	sbc	r9, r31
     ae6:	af 0a       	sbc	r10, r31
     ae8:	bf 0a       	sbc	r11, r31
     aea:	1d 96       	adiw	r26, 0x0d	; 13
     aec:	cd 90       	ld	r12, X+
     aee:	dd 90       	ld	r13, X+
     af0:	ed 90       	ld	r14, X+
     af2:	fc 90       	ld	r15, X
     af4:	50 97       	sbiw	r26, 0x10	; 16
     af6:	4c 15       	cp	r20, r12
     af8:	5d 05       	cpc	r21, r13
     afa:	6e 05       	cpc	r22, r14
     afc:	7f 05       	cpc	r23, r15
     afe:	18 f4       	brcc	.+6      	; 0xb06 <_ZN3DHT11expectPulseEb+0x74>
     b00:	b5 01       	movw	r22, r10
     b02:	a4 01       	movw	r20, r8
     b04:	e3 cf       	rjmp	.-58     	; 0xacc <_ZN3DHT11expectPulseEb+0x3a>
        return 0; // Exceeded timeout, fail.
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	03 c0       	rjmp	.+6      	; 0xb16 <_ZN3DHT11expectPulseEb+0x84>
     b10:	34 2f       	mov	r19, r20
     b12:	25 2f       	mov	r18, r21
     b14:	cb 01       	movw	r24, r22
      }
    }
  #endif

  return count;
}
     b16:	63 2f       	mov	r22, r19
     b18:	72 2f       	mov	r23, r18
     b1a:	cf 91       	pop	r28
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	df 90       	pop	r13
     b22:	cf 90       	pop	r12
     b24:	bf 90       	pop	r11
     b26:	af 90       	pop	r10
     b28:	9f 90       	pop	r9
     b2a:	8f 90       	pop	r8
     b2c:	08 95       	ret

00000b2e <_ZN3DHT4readEb>:
  }

  return isFahrenheit ? hi : convertFtoC(hi);
}

boolean DHT::read(bool force) {
     b2e:	8f 92       	push	r8
     b30:	9f 92       	push	r9
     b32:	af 92       	push	r10
     b34:	bf 92       	push	r11
     b36:	cf 92       	push	r12
     b38:	df 92       	push	r13
     b3a:	ef 92       	push	r14
     b3c:	ff 92       	push	r15
     b3e:	0f 93       	push	r16
     b40:	1f 93       	push	r17
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
     b46:	cd b7       	in	r28, 0x3d	; 61
     b48:	de b7       	in	r29, 0x3e	; 62
     b4a:	c0 54       	subi	r28, 0x40	; 64
     b4c:	d1 40       	sbci	r29, 0x01	; 1
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	f8 94       	cli
     b52:	de bf       	out	0x3e, r29	; 62
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	cd bf       	out	0x3d, r28	; 61
     b58:	8c 01       	movw	r16, r24
     b5a:	f6 2e       	mov	r15, r22
  // Check if sensor was read less than two seconds ago and return early
  // to use last reading.
  uint32_t currenttime = millis();
     b5c:	0e 94 c2 0c 	call	0x1984	; 0x1984 <millis>
  if (!force && ((currenttime - _lastreadtime) < 2000)) {
     b60:	f1 10       	cpse	r15, r1
     b62:	16 c0       	rjmp	.+44     	; 0xb90 <_ZN3DHT4readEb+0x62>
     b64:	f8 01       	movw	r30, r16
     b66:	c1 84       	ldd	r12, Z+9	; 0x09
     b68:	d2 84       	ldd	r13, Z+10	; 0x0a
     b6a:	e3 84       	ldd	r14, Z+11	; 0x0b
     b6c:	f4 84       	ldd	r15, Z+12	; 0x0c
     b6e:	9b 01       	movw	r18, r22
     b70:	ac 01       	movw	r20, r24
     b72:	2c 19       	sub	r18, r12
     b74:	3d 09       	sbc	r19, r13
     b76:	4e 09       	sbc	r20, r14
     b78:	5f 09       	sbc	r21, r15
     b7a:	69 01       	movw	r12, r18
     b7c:	7a 01       	movw	r14, r20
     b7e:	30 ed       	ldi	r19, 0xD0	; 208
     b80:	c3 16       	cp	r12, r19
     b82:	37 e0       	ldi	r19, 0x07	; 7
     b84:	d3 06       	cpc	r13, r19
     b86:	e1 04       	cpc	r14, r1
     b88:	f1 04       	cpc	r15, r1
     b8a:	10 f4       	brcc	.+4      	; 0xb90 <_ZN3DHT4readEb+0x62>
    return _lastresult; // return last correct measurement
     b8c:	81 89       	ldd	r24, Z+17	; 0x11
     b8e:	ab c0       	rjmp	.+342    	; 0xce6 <_ZN3DHT4readEb+0x1b8>
  }
  _lastreadtime = currenttime;
     b90:	f8 01       	movw	r30, r16
     b92:	61 87       	std	Z+9, r22	; 0x09
     b94:	72 87       	std	Z+10, r23	; 0x0a
     b96:	83 87       	std	Z+11, r24	; 0x0b
     b98:	94 87       	std	Z+12, r25	; 0x0c

  // Reset 40 bits of received data to zero.
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
     b9a:	14 82       	std	Z+4, r1	; 0x04
     b9c:	13 82       	std	Z+3, r1	; 0x03
     b9e:	12 82       	std	Z+2, r1	; 0x02
     ba0:	11 82       	std	Z+1, r1	; 0x01
     ba2:	10 82       	st	Z, r1
  // Send start signal.  See DHT datasheet for full signal diagram:
  //   http://www.adafruit.com/datasheets/Digital%20humidity%20and%20temperature%20sensor%20AM2302.pdf

  // Go into high impedance state to let pull-up raise data line level and
  // start the reading process.
  digitalWrite(_pin, HIGH);
     ba4:	61 e0       	ldi	r22, 0x01	; 1
     ba6:	85 81       	ldd	r24, Z+5	; 0x05
     ba8:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <digitalWrite>
  delay(250);
     bac:	6a ef       	ldi	r22, 0xFA	; 250
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <delay>

  // First set data line low for 20 milliseconds.
  pinMode(_pin, OUTPUT);
     bb8:	61 e0       	ldi	r22, 0x01	; 1
     bba:	f8 01       	movw	r30, r16
     bbc:	85 81       	ldd	r24, Z+5	; 0x05
     bbe:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <pinMode>
  digitalWrite(_pin, LOW);
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	f8 01       	movw	r30, r16
     bc6:	85 81       	ldd	r24, Z+5	; 0x05
     bc8:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <digitalWrite>
  delay(20);
     bcc:	64 e1       	ldi	r22, 0x14	; 20
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <delay>
};

class InterruptLock {
  public:
   InterruptLock() {
    noInterrupts();
     bd8:	f8 94       	cli
    // End the start signal by setting data line high for 40 microseconds.
    //digitalWrite(_pin, HIGH); // Commented out by Marc R. reason see https://github.com/adafruit/DHT-sensor-library/issues/48
    //delayMicroseconds(40);  // Commented out by Marc R.

    // Now start reading the data line to get the value from the DHT sensor.
    pinMode(_pin, INPUT_PULLUP);
     bda:	62 e0       	ldi	r22, 0x02	; 2
     bdc:	f8 01       	movw	r30, r16
     bde:	85 81       	ldd	r24, Z+5	; 0x05
     be0:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <pinMode>
    delayMicroseconds(50);  // Delay a bit to let sensor pull data line low.
     be4:	82 e3       	ldi	r24, 0x32	; 50
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <delayMicroseconds>

    // First expect a low signal for ~80 microseconds followed by a high signal
    // for ~80 microseconds again.
    if (expectPulse(LOW) == 0) {
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	c8 01       	movw	r24, r16
     bf0:	0e 94 49 05 	call	0xa92	; 0xa92 <_ZN3DHT11expectPulseEb>
     bf4:	67 2b       	or	r22, r23
     bf6:	68 2b       	or	r22, r24
     bf8:	69 2b       	or	r22, r25
     bfa:	21 f4       	brne	.+8      	; 0xc04 <_ZN3DHT4readEb+0xd6>
      DEBUG_PRINTLN(F("Timeout waiting for start signal low pulse."));
      _lastresult = false;
     bfc:	f8 01       	movw	r30, r16
     bfe:	11 8a       	std	Z+17, r1	; 0x11
   }
   ~InterruptLock() {
    interrupts();
     c00:	78 94       	sei
     c02:	42 c0       	rjmp	.+132    	; 0xc88 <_ZN3DHT4readEb+0x15a>
      return _lastresult;
    }
    if (expectPulse(HIGH) == 0) {
     c04:	61 e0       	ldi	r22, 0x01	; 1
     c06:	c8 01       	movw	r24, r16
     c08:	0e 94 49 05 	call	0xa92	; 0xa92 <_ZN3DHT11expectPulseEb>
     c0c:	67 2b       	or	r22, r23
     c0e:	68 2b       	or	r22, r24
     c10:	69 2b       	or	r22, r25
     c12:	a1 f3       	breq	.-24     	; 0xbfc <_ZN3DHT4readEb+0xce>
     c14:	9e 01       	movw	r18, r28
     c16:	2f 5f       	subi	r18, 0xFF	; 255
     c18:	3f 4f       	sbci	r19, 0xFF	; 255
     c1a:	79 01       	movw	r14, r18
     c1c:	5e 01       	movw	r10, r28
     c1e:	3f eb       	ldi	r19, 0xBF	; 191
     c20:	a3 1a       	sub	r10, r19
     c22:	3e ef       	ldi	r19, 0xFE	; 254
     c24:	b3 0a       	sbc	r11, r19
     c26:	67 01       	movw	r12, r14
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed all
    // the pulses are read into a array and then examined in a later step.
    for (int i=0; i<80; i+=2) {
      cycles[i]   = expectPulse(LOW);
     c28:	60 e0       	ldi	r22, 0x00	; 0
     c2a:	c8 01       	movw	r24, r16
     c2c:	0e 94 49 05 	call	0xa92	; 0xa92 <_ZN3DHT11expectPulseEb>
     c30:	f6 01       	movw	r30, r12
     c32:	60 83       	st	Z, r22
     c34:	71 83       	std	Z+1, r23	; 0x01
     c36:	82 83       	std	Z+2, r24	; 0x02
     c38:	93 83       	std	Z+3, r25	; 0x03
      cycles[i+1] = expectPulse(HIGH);
     c3a:	61 e0       	ldi	r22, 0x01	; 1
     c3c:	c8 01       	movw	r24, r16
     c3e:	0e 94 49 05 	call	0xa92	; 0xa92 <_ZN3DHT11expectPulseEb>
     c42:	f6 01       	movw	r30, r12
     c44:	64 83       	std	Z+4, r22	; 0x04
     c46:	75 83       	std	Z+5, r23	; 0x05
     c48:	86 83       	std	Z+6, r24	; 0x06
     c4a:	97 83       	std	Z+7, r25	; 0x07
     c4c:	f8 e0       	ldi	r31, 0x08	; 8
     c4e:	cf 0e       	add	r12, r31
     c50:	d1 1c       	adc	r13, r1
    // then it's a 1.  We measure the cycle count of the initial 50us low pulse
    // and use that to compare to the cycle count of the high pulse to determine
    // if the bit is a 0 (high state cycle count < low state cycle count), or a
    // 1 (high state cycle count > low state cycle count). Note that for speed all
    // the pulses are read into a array and then examined in a later step.
    for (int i=0; i<80; i+=2) {
     c52:	ca 14       	cp	r12, r10
     c54:	db 04       	cpc	r13, r11
     c56:	41 f7       	brne	.-48     	; 0xc28 <_ZN3DHT4readEb+0xfa>
     c58:	78 94       	sei
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i=0; i<40; ++i) {
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	30 e0       	ldi	r19, 0x00	; 0
    uint32_t lowCycles  = cycles[2*i];
     c5e:	f7 01       	movw	r30, r14
     c60:	80 80       	ld	r8, Z
     c62:	91 80       	ldd	r9, Z+1	; 0x01
     c64:	a2 80       	ldd	r10, Z+2	; 0x02
     c66:	b3 80       	ldd	r11, Z+3	; 0x03
    uint32_t highCycles = cycles[2*i+1];
     c68:	44 81       	ldd	r20, Z+4	; 0x04
     c6a:	55 81       	ldd	r21, Z+5	; 0x05
     c6c:	66 81       	ldd	r22, Z+6	; 0x06
     c6e:	77 81       	ldd	r23, Z+7	; 0x07
    if ((lowCycles == 0) || (highCycles == 0)) {
     c70:	81 14       	cp	r8, r1
     c72:	91 04       	cpc	r9, r1
     c74:	a1 04       	cpc	r10, r1
     c76:	b1 04       	cpc	r11, r1
     c78:	29 f0       	breq	.+10     	; 0xc84 <_ZN3DHT4readEb+0x156>
     c7a:	41 15       	cp	r20, r1
     c7c:	51 05       	cpc	r21, r1
     c7e:	61 05       	cpc	r22, r1
     c80:	71 05       	cpc	r23, r1
     c82:	21 f4       	brne	.+8      	; 0xc8c <_ZN3DHT4readEb+0x15e>
      DEBUG_PRINTLN(F("Timeout waiting for pulse."));
      _lastresult = false;
     c84:	f8 01       	movw	r30, r16
     c86:	11 8a       	std	Z+17, r1	; 0x11
      return _lastresult;
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	2d c0       	rjmp	.+90     	; 0xce6 <_ZN3DHT4readEb+0x1b8>
    }
    data[i/8] <<= 1;
     c8c:	f9 01       	movw	r30, r18
     c8e:	83 e0       	ldi	r24, 0x03	; 3
     c90:	f5 95       	asr	r31
     c92:	e7 95       	ror	r30
     c94:	8a 95       	dec	r24
     c96:	e1 f7       	brne	.-8      	; 0xc90 <_ZN3DHT4readEb+0x162>
     c98:	e0 0f       	add	r30, r16
     c9a:	f1 1f       	adc	r31, r17
     c9c:	80 81       	ld	r24, Z
     c9e:	88 0f       	add	r24, r24
    // Now compare the low and high cycle times to see if the bit is a 0 or 1.
    if (highCycles > lowCycles) {
     ca0:	84 16       	cp	r8, r20
     ca2:	95 06       	cpc	r9, r21
     ca4:	a6 06       	cpc	r10, r22
     ca6:	b7 06       	cpc	r11, r23
     ca8:	08 f4       	brcc	.+2      	; 0xcac <_ZN3DHT4readEb+0x17e>
      // High cycles are greater than 50us low cycle count, must be a 1.
      data[i/8] |= 1;
     caa:	81 60       	ori	r24, 0x01	; 1
     cac:	80 83       	st	Z, r24
    }
  } // Timing critical code is now complete.

  // Inspect pulses and determine which ones are 0 (high state cycle count < low
  // state cycle count), or 1 (high state cycle count > low state cycle count).
  for (int i=0; i<40; ++i) {
     cae:	2f 5f       	subi	r18, 0xFF	; 255
     cb0:	3f 4f       	sbci	r19, 0xFF	; 255
     cb2:	f8 e0       	ldi	r31, 0x08	; 8
     cb4:	ef 0e       	add	r14, r31
     cb6:	f1 1c       	adc	r15, r1
     cb8:	28 32       	cpi	r18, 0x28	; 40
     cba:	31 05       	cpc	r19, r1
     cbc:	81 f6       	brne	.-96     	; 0xc5e <_ZN3DHT4readEb+0x130>
  DEBUG_PRINT(data[3], HEX); DEBUG_PRINT(F(", "));
  DEBUG_PRINT(data[4], HEX); DEBUG_PRINT(F(" =? "));
  DEBUG_PRINTLN((data[0] + data[1] + data[2] + data[3]) & 0xFF, HEX);

  // Check we read 40 bits and that the checksum matches.
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
     cbe:	f8 01       	movw	r30, r16
     cc0:	24 81       	ldd	r18, Z+4	; 0x04
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	40 81       	ld	r20, Z
     cc6:	81 81       	ldd	r24, Z+1	; 0x01
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	84 0f       	add	r24, r20
     ccc:	91 1d       	adc	r25, r1
     cce:	42 81       	ldd	r20, Z+2	; 0x02
     cd0:	84 0f       	add	r24, r20
     cd2:	91 1d       	adc	r25, r1
     cd4:	43 81       	ldd	r20, Z+3	; 0x03
     cd6:	84 0f       	add	r24, r20
     cd8:	91 1d       	adc	r25, r1
     cda:	99 27       	eor	r25, r25
     cdc:	28 17       	cp	r18, r24
     cde:	39 07       	cpc	r19, r25
     ce0:	89 f6       	brne	.-94     	; 0xc84 <_ZN3DHT4readEb+0x156>
    _lastresult = true;
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	81 8b       	std	Z+17, r24	; 0x11
  else {
    DEBUG_PRINTLN(F("Checksum failure!"));
    _lastresult = false;
    return _lastresult;
  }
}
     ce6:	c0 5c       	subi	r28, 0xC0	; 192
     ce8:	de 4f       	sbci	r29, 0xFE	; 254
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	f8 94       	cli
     cee:	de bf       	out	0x3e, r29	; 62
     cf0:	0f be       	out	0x3f, r0	; 63
     cf2:	cd bf       	out	0x3d, r28	; 61
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	1f 91       	pop	r17
     cfa:	0f 91       	pop	r16
     cfc:	ff 90       	pop	r15
     cfe:	ef 90       	pop	r14
     d00:	df 90       	pop	r13
     d02:	cf 90       	pop	r12
     d04:	bf 90       	pop	r11
     d06:	af 90       	pop	r10
     d08:	9f 90       	pop	r9
     d0a:	8f 90       	pop	r8
     d0c:	08 95       	ret

00000d0e <_ZN3DHT15readTemperatureEbb>:
  _lastreadtime = -MIN_INTERVAL;
  DEBUG_PRINT("Max clock cycles: "); DEBUG_PRINTLN(_maxcycles, DEC);
}

//boolean S == Scale.  True == Fahrenheit; False == Celcius
float DHT::readTemperature(bool S, bool force) {
     d0e:	cf 92       	push	r12
     d10:	df 92       	push	r13
     d12:	ef 92       	push	r14
     d14:	ff 92       	push	r15
     d16:	0f 93       	push	r16
     d18:	1f 93       	push	r17
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	ec 01       	movw	r28, r24
     d20:	16 2f       	mov	r17, r22
  float f = NAN;

  if (read(force)) {
     d22:	64 2f       	mov	r22, r20
     d24:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN3DHT4readEb>
     d28:	88 23       	and	r24, r24
     d2a:	09 f4       	brne	.+2      	; 0xd2e <_ZN3DHT15readTemperatureEbb+0x20>
     d2c:	40 c0       	rjmp	.+128    	; 0xdae <_ZN3DHT15readTemperatureEbb+0xa0>
    switch (_type) {
     d2e:	8e 81       	ldd	r24, Y+6	; 0x06
     d30:	8b 30       	cpi	r24, 0x0B	; 11
     d32:	29 f0       	breq	.+10     	; 0xd3e <_ZN3DHT15readTemperatureEbb+0x30>
     d34:	e0 f1       	brcs	.+120    	; 0xdae <_ZN3DHT15readTemperatureEbb+0xa0>
     d36:	85 51       	subi	r24, 0x15	; 21
     d38:	82 30       	cpi	r24, 0x02	; 2
     d3a:	40 f0       	brcs	.+16     	; 0xd4c <_ZN3DHT15readTemperatureEbb+0x3e>
     d3c:	38 c0       	rjmp	.+112    	; 0xdae <_ZN3DHT15readTemperatureEbb+0xa0>
    case DHT11:
      f = data[2];
     d3e:	6a 81       	ldd	r22, Y+2	; 0x02
     d40:	70 e0       	ldi	r23, 0x00	; 0
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__floatunsisf>
     d4a:	22 c0       	rjmp	.+68     	; 0xd90 <_ZN3DHT15readTemperatureEbb+0x82>
        f = convertCtoF(f);
      }
      break;
    case DHT22:
    case DHT21:
      f = data[2] & 0x7F;
     d4c:	0a 81       	ldd	r16, Y+2	; 0x02
     d4e:	60 2f       	mov	r22, r16
     d50:	6f 77       	andi	r22, 0x7F	; 127
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	0e 94 c5 0a 	call	0x158a	; 0x158a <__floatsisf>
      f *= 256;
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	40 e8       	ldi	r20, 0x80	; 128
     d62:	53 e4       	ldi	r21, 0x43	; 67
     d64:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__mulsf3>
     d68:	6b 01       	movw	r12, r22
     d6a:	7c 01       	movw	r14, r24
      f += data[3];
     d6c:	6b 81       	ldd	r22, Y+3	; 0x03
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0e 94 c5 0a 	call	0x158a	; 0x158a <__floatsisf>
     d78:	a7 01       	movw	r20, r14
     d7a:	96 01       	movw	r18, r12
     d7c:	0e 94 21 0a 	call	0x1442	; 0x1442 <__addsf3>
      f *= 0.1;
     d80:	2d ec       	ldi	r18, 0xCD	; 205
     d82:	3c ec       	ldi	r19, 0xCC	; 204
     d84:	4c ec       	ldi	r20, 0xCC	; 204
     d86:	5d e3       	ldi	r21, 0x3D	; 61
     d88:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__mulsf3>
      if (data[2] & 0x80) {
     d8c:	07 fd       	sbrc	r16, 7
        f *= -1;
     d8e:	90 58       	subi	r25, 0x80	; 128
      }
      if(S) {
     d90:	11 23       	and	r17, r17
     d92:	89 f0       	breq	.+34     	; 0xdb6 <_ZN3DHT15readTemperatureEbb+0xa8>
  }
  return f;
}

float DHT::convertCtoF(float c) {
  return c * 1.8 + 32;
     d94:	26 e6       	ldi	r18, 0x66	; 102
     d96:	36 e6       	ldi	r19, 0x66	; 102
     d98:	46 ee       	ldi	r20, 0xE6	; 230
     d9a:	5f e3       	ldi	r21, 0x3F	; 63
     d9c:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__mulsf3>
     da0:	20 e0       	ldi	r18, 0x00	; 0
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	40 e0       	ldi	r20, 0x00	; 0
     da6:	52 e4       	ldi	r21, 0x42	; 66
     da8:	0e 94 21 0a 	call	0x1442	; 0x1442 <__addsf3>
     dac:	04 c0       	rjmp	.+8      	; 0xdb6 <_ZN3DHT15readTemperatureEbb+0xa8>
  DEBUG_PRINT("Max clock cycles: "); DEBUG_PRINTLN(_maxcycles, DEC);
}

//boolean S == Scale.  True == Fahrenheit; False == Celcius
float DHT::readTemperature(bool S, bool force) {
  float f = NAN;
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	80 ec       	ldi	r24, 0xC0	; 192
     db4:	9f e7       	ldi	r25, 0x7F	; 127
      }
      break;
    }
  }
  return f;
}
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	1f 91       	pop	r17
     dbc:	0f 91       	pop	r16
     dbe:	ff 90       	pop	r15
     dc0:	ef 90       	pop	r14
     dc2:	df 90       	pop	r13
     dc4:	cf 90       	pop	r12
     dc6:	08 95       	ret

00000dc8 <_ZN3DHT12readHumidityEb>:

float DHT::convertFtoC(float f) {
  return (f - 32) * 0.55555;
}

float DHT::readHumidity(bool force) {
     dc8:	cf 92       	push	r12
     dca:	df 92       	push	r13
     dcc:	ef 92       	push	r14
     dce:	ff 92       	push	r15
     dd0:	cf 93       	push	r28
     dd2:	df 93       	push	r29
     dd4:	ec 01       	movw	r28, r24
  float f = NAN;
  if (read()) {
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	0e 94 97 05 	call	0xb2e	; 0xb2e <_ZN3DHT4readEb>
     ddc:	88 23       	and	r24, r24
     dde:	69 f1       	breq	.+90     	; 0xe3a <_ZN3DHT12readHumidityEb+0x72>
    switch (_type) {
     de0:	8e 81       	ldd	r24, Y+6	; 0x06
     de2:	8b 30       	cpi	r24, 0x0B	; 11
     de4:	19 f1       	breq	.+70     	; 0xe2c <_ZN3DHT12readHumidityEb+0x64>
     de6:	48 f1       	brcs	.+82     	; 0xe3a <_ZN3DHT12readHumidityEb+0x72>
     de8:	85 51       	subi	r24, 0x15	; 21
     dea:	82 30       	cpi	r24, 0x02	; 2
     dec:	30 f5       	brcc	.+76     	; 0xe3a <_ZN3DHT12readHumidityEb+0x72>
    case DHT11:
      f = data[0];
      break;
    case DHT22:
    case DHT21:
      f = data[0];
     dee:	68 81       	ld	r22, Y
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__floatunsisf>
      f *= 256;
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	40 e8       	ldi	r20, 0x80	; 128
     e00:	53 e4       	ldi	r21, 0x43	; 67
     e02:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__mulsf3>
     e06:	6b 01       	movw	r12, r22
     e08:	7c 01       	movw	r14, r24
      f += data[1];
     e0a:	69 81       	ldd	r22, Y+1	; 0x01
     e0c:	70 e0       	ldi	r23, 0x00	; 0
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 c5 0a 	call	0x158a	; 0x158a <__floatsisf>
     e16:	a7 01       	movw	r20, r14
     e18:	96 01       	movw	r18, r12
     e1a:	0e 94 21 0a 	call	0x1442	; 0x1442 <__addsf3>
      f *= 0.1;
     e1e:	2d ec       	ldi	r18, 0xCD	; 205
     e20:	3c ec       	ldi	r19, 0xCC	; 204
     e22:	4c ec       	ldi	r20, 0xCC	; 204
     e24:	5d e3       	ldi	r21, 0x3D	; 61
     e26:	0e 94 75 0b 	call	0x16ea	; 0x16ea <__mulsf3>
      break;
     e2a:	0b c0       	rjmp	.+22     	; 0xe42 <_ZN3DHT12readHumidityEb+0x7a>
float DHT::readHumidity(bool force) {
  float f = NAN;
  if (read()) {
    switch (_type) {
    case DHT11:
      f = data[0];
     e2c:	68 81       	ld	r22, Y
     e2e:	70 e0       	ldi	r23, 0x00	; 0
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__floatunsisf>
      break;
     e38:	04 c0       	rjmp	.+8      	; 0xe42 <_ZN3DHT12readHumidityEb+0x7a>
float DHT::convertFtoC(float f) {
  return (f - 32) * 0.55555;
}

float DHT::readHumidity(bool force) {
  float f = NAN;
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	80 ec       	ldi	r24, 0xC0	; 192
     e40:	9f e7       	ldi	r25, 0x7F	; 127
      f *= 0.1;
      break;
    }
  }
  return f;
}
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	ff 90       	pop	r15
     e48:	ef 90       	pop	r14
     e4a:	df 90       	pop	r13
     e4c:	cf 90       	pop	r12
     e4e:	08 95       	ret

00000e50 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t>:
		if (clockSource & CS22) TCCR2B |= (1 << CS22);
		if (clockSource & CS21) TCCR2B |= (1 << CS21);
		if (clockSource & CS20) TCCR2B |= (1 << CS20);	
	}
	#endif
}
     e50:	41 11       	cpse	r20, r1
     e52:	05 c0       	rjmp	.+10     	; 0xe5e <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0xe>
     e54:	ea e7       	ldi	r30, 0x7A	; 122
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	8f 77       	andi	r24, 0x7F	; 127
     e5c:	80 83       	st	Z, r24
     e5e:	6a 30       	cpi	r22, 0x0A	; 10
     e60:	a9 f0       	breq	.+42     	; 0xe8c <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x3c>
     e62:	63 fd       	sbrc	r22, 3
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x1a>
     e66:	88 e0       	ldi	r24, 0x08	; 8
     e68:	01 c0       	rjmp	.+2      	; 0xe6c <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x1c>
     e6a:	88 e2       	ldi	r24, 0x28	; 40
     e6c:	67 70       	andi	r22, 0x07	; 7
     e6e:	68 2b       	or	r22, r24
     e70:	88 e1       	ldi	r24, 0x18	; 24
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	f8 94       	cli
     e76:	a8 95       	wdr
     e78:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     e82:	e0 e6       	ldi	r30, 0x60	; 96
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	80 64       	ori	r24, 0x40	; 64
     e8a:	80 83       	st	Z, r24
     e8c:	21 11       	cpse	r18, r1
     e8e:	14 c0       	rjmp	.+40     	; 0xeb8 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x68>
     e90:	83 b7       	in	r24, 0x33	; 51
     e92:	81 7f       	andi	r24, 0xF1	; 241
     e94:	84 60       	ori	r24, 0x04	; 4
     e96:	83 bf       	out	0x33, r24	; 51
     e98:	f8 94       	cli
     e9a:	83 b7       	in	r24, 0x33	; 51
     e9c:	81 60       	ori	r24, 0x01	; 1
     e9e:	83 bf       	out	0x33, r24	; 51
     ea0:	85 b7       	in	r24, 0x35	; 53
     ea2:	80 66       	ori	r24, 0x60	; 96
     ea4:	85 bf       	out	0x35, r24	; 53
     ea6:	8f 7d       	andi	r24, 0xDF	; 223
     ea8:	85 bf       	out	0x35, r24	; 53
     eaa:	78 94       	sei
     eac:	88 95       	sleep
     eae:	83 b7       	in	r24, 0x33	; 51
     eb0:	8e 7f       	andi	r24, 0xFE	; 254
     eb2:	83 bf       	out	0x33, r24	; 51
     eb4:	78 94       	sei
     eb6:	0e c0       	rjmp	.+28     	; 0xed4 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x84>
     eb8:	83 b7       	in	r24, 0x33	; 51
     eba:	81 7f       	andi	r24, 0xF1	; 241
     ebc:	84 60       	ori	r24, 0x04	; 4
     ebe:	83 bf       	out	0x33, r24	; 51
     ec0:	f8 94       	cli
     ec2:	83 b7       	in	r24, 0x33	; 51
     ec4:	81 60       	ori	r24, 0x01	; 1
     ec6:	83 bf       	out	0x33, r24	; 51
     ec8:	78 94       	sei
     eca:	88 95       	sleep
     ecc:	83 b7       	in	r24, 0x33	; 51
     ece:	8e 7f       	andi	r24, 0xFE	; 254
     ed0:	83 bf       	out	0x33, r24	; 51
     ed2:	78 94       	sei
     ed4:	41 11       	cpse	r20, r1
     ed6:	05 c0       	rjmp	.+10     	; 0xee2 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x92>
     ed8:	ea e7       	ldi	r30, 0x7A	; 122
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	80 68       	ori	r24, 0x80	; 128
     ee0:	80 83       	st	Z, r24
     ee2:	08 95       	ret

00000ee4 <__vector_6>:
*		       required to allow automatic WDIF and WDIE bit clearance in 
*			   hardware.
*
*******************************************************************************/
ISR (WDT_vect)
{
     ee4:	1f 92       	push	r1
     ee6:	0f 92       	push	r0
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	0f 92       	push	r0
     eec:	11 24       	eor	r1, r1
     eee:	8f 93       	push	r24
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "n"  (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	a8 95       	wdr
     ef6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     efa:	88 61       	ori	r24, 0x18	; 24
     efc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     f00:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     f04:	0f be       	out	0x3f, r0	; 63
	// WDIE & WDIF is cleared in hardware upon entering this ISR
	wdt_disable();
}
     f06:	8f 91       	pop	r24
     f08:	0f 90       	pop	r0
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	0f 90       	pop	r0
     f0e:	1f 90       	pop	r1
     f10:	18 95       	reti

00000f12 <_ZN8RCSwitch11setProtocolEi>:
  return RCSwitch::nReceivedProtocol;
}

unsigned int* RCSwitch::getReceivedRawdata() {
  return RCSwitch::timings;
}
     f12:	9b 01       	movw	r18, r22
     f14:	21 50       	subi	r18, 0x01	; 1
     f16:	31 09       	sbc	r19, r1
     f18:	26 30       	cpi	r18, 0x06	; 6
     f1a:	31 05       	cpc	r19, r1
     f1c:	10 f0       	brcs	.+4      	; 0xf22 <_ZN8RCSwitch11setProtocolEi+0x10>
     f1e:	61 e0       	ldi	r22, 0x01	; 1
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	61 50       	subi	r22, 0x01	; 1
     f24:	71 09       	sbc	r23, r1
     f26:	49 e0       	ldi	r20, 0x09	; 9
     f28:	46 9f       	mul	r20, r22
     f2a:	90 01       	movw	r18, r0
     f2c:	47 9f       	mul	r20, r23
     f2e:	30 0d       	add	r19, r0
     f30:	11 24       	eor	r1, r1
     f32:	b9 01       	movw	r22, r18
     f34:	68 59       	subi	r22, 0x98	; 152
     f36:	7f 4f       	sbci	r23, 0xFF	; 255
     f38:	49 e0       	ldi	r20, 0x09	; 9
     f3a:	50 e0       	ldi	r21, 0x00	; 0
     f3c:	06 96       	adiw	r24, 0x06	; 6
     f3e:	0c 94 38 11 	jmp	0x2270	; 0x2270 <memcpy_P>

00000f42 <_ZN8RCSwitchC1Ev>:
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	ec 01       	movw	r28, r24
     f4c:	0f ef       	ldi	r16, 0xFF	; 255
     f4e:	1f ef       	ldi	r17, 0xFF	; 255
     f50:	1b 83       	std	Y+3, r17	; 0x03
     f52:	0a 83       	std	Y+2, r16	; 0x02
     f54:	8a e0       	ldi	r24, 0x0A	; 10
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	9d 83       	std	Y+5, r25	; 0x05
     f5a:	8c 83       	std	Y+4, r24	; 0x04
     f5c:	61 e0       	ldi	r22, 0x01	; 1
     f5e:	70 e0       	ldi	r23, 0x00	; 0
     f60:	ce 01       	movw	r24, r28
     f62:	0e 94 89 07 	call	0xf12	; 0xf12 <_ZN8RCSwitch11setProtocolEi>
     f66:	19 83       	std	Y+1, r17	; 0x01
     f68:	08 83       	st	Y, r16
     f6a:	8c e3       	ldi	r24, 0x3C	; 60
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_ZN8RCSwitch17nReceiveToleranceE+0x1>
     f72:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_ZN8RCSwitch17nReceiveToleranceE>
     f76:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <_ZN8RCSwitch14nReceivedValueE>
     f7a:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <_ZN8RCSwitch14nReceivedValueE+0x1>
     f7e:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <_ZN8RCSwitch14nReceivedValueE+0x2>
     f82:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <_ZN8RCSwitch14nReceivedValueE+0x3>
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	1f 91       	pop	r17
     f8c:	0f 91       	pop	r16
     f8e:	08 95       	ret

00000f90 <_ZN8RCSwitch17setRepeatTransmitEi>:
     f90:	fc 01       	movw	r30, r24
     f92:	75 83       	std	Z+5, r23	; 0x05
     f94:	64 83       	std	Z+4, r22	; 0x04
     f96:	08 95       	ret

00000f98 <_ZN8RCSwitch14enableTransmitEi>:
     f98:	fc 01       	movw	r30, r24
     f9a:	86 2f       	mov	r24, r22
     f9c:	62 83       	std	Z+2, r22	; 0x02
     f9e:	73 83       	std	Z+3, r23	; 0x03
     fa0:	61 e0       	ldi	r22, 0x01	; 1
     fa2:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <pinMode>

00000fa6 <_ZN8RCSwitch15disableTransmitEv>:
     fa6:	2f ef       	ldi	r18, 0xFF	; 255
     fa8:	3f ef       	ldi	r19, 0xFF	; 255
     faa:	fc 01       	movw	r30, r24
     fac:	33 83       	std	Z+3, r19	; 0x03
     fae:	22 83       	std	Z+2, r18	; 0x02
     fb0:	08 95       	ret

00000fb2 <_ZN8RCSwitch8transmitENS_7HighLowE>:
     fb2:	ff 92       	push	r15
     fb4:	0f 93       	push	r16
     fb6:	1f 93       	push	r17
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	ec 01       	movw	r28, r24
     fbe:	f6 2e       	mov	r15, r22
     fc0:	07 2f       	mov	r16, r23
     fc2:	8e 85       	ldd	r24, Y+14	; 0x0e
     fc4:	88 23       	and	r24, r24
     fc6:	19 f0       	breq	.+6      	; 0xfce <_ZN8RCSwitch8transmitENS_7HighLowE+0x1c>
     fc8:	60 e0       	ldi	r22, 0x00	; 0
     fca:	11 e0       	ldi	r17, 0x01	; 1
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <_ZN8RCSwitch8transmitENS_7HighLowE+0x20>
     fce:	61 e0       	ldi	r22, 0x01	; 1
     fd0:	10 e0       	ldi	r17, 0x00	; 0
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <digitalWrite>
     fd8:	8e 81       	ldd	r24, Y+6	; 0x06
     fda:	9f 81       	ldd	r25, Y+7	; 0x07
     fdc:	9c 01       	movw	r18, r24
     fde:	f2 9e       	mul	r15, r18
     fe0:	c0 01       	movw	r24, r0
     fe2:	f3 9e       	mul	r15, r19
     fe4:	90 0d       	add	r25, r0
     fe6:	11 24       	eor	r1, r1
     fe8:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <delayMicroseconds>
     fec:	61 2f       	mov	r22, r17
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <digitalWrite>
     ff4:	8e 81       	ldd	r24, Y+6	; 0x06
     ff6:	9f 81       	ldd	r25, Y+7	; 0x07
     ff8:	9c 01       	movw	r18, r24
     ffa:	02 9f       	mul	r16, r18
     ffc:	c0 01       	movw	r24, r0
     ffe:	03 9f       	mul	r16, r19
    1000:	90 0d       	add	r25, r0
    1002:	11 24       	eor	r1, r1
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	1f 91       	pop	r17
    100a:	0f 91       	pop	r16
    100c:	ff 90       	pop	r15
    100e:	0c 94 2f 0d 	jmp	0x1a5e	; 0x1a5e <delayMicroseconds>

00001012 <_ZN8RCSwitch13enableReceiveEv>:
    1012:	fc 01       	movw	r30, r24
    1014:	80 81       	ld	r24, Z
    1016:	91 81       	ldd	r25, Z+1	; 0x01
    1018:	8f 3f       	cpi	r24, 0xFF	; 255
    101a:	ff ef       	ldi	r31, 0xFF	; 255
    101c:	9f 07       	cpc	r25, r31
    101e:	91 f0       	breq	.+36     	; 0x1044 <_ZN8RCSwitch13enableReceiveEv+0x32>
    1020:	10 92 56 02 	sts	0x0256, r1	; 0x800256 <_ZN8RCSwitch14nReceivedValueE>
    1024:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <_ZN8RCSwitch14nReceivedValueE+0x1>
    1028:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <_ZN8RCSwitch14nReceivedValueE+0x2>
    102c:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <_ZN8RCSwitch14nReceivedValueE+0x3>
    1030:	10 92 55 02 	sts	0x0255, r1	; 0x800255 <_ZN8RCSwitch18nReceivedBitlengthE+0x1>
    1034:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <_ZN8RCSwitch18nReceivedBitlengthE>
    1038:	41 e0       	ldi	r20, 0x01	; 1
    103a:	50 e0       	ldi	r21, 0x00	; 0
    103c:	65 ea       	ldi	r22, 0xA5	; 165
    103e:	79 e0       	ldi	r23, 0x09	; 9
    1040:	0c 94 f8 0b 	jmp	0x17f0	; 0x17f0 <attachInterrupt>
    1044:	08 95       	ret

00001046 <_ZN8RCSwitch14disableReceiveEv>:
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
    104a:	ec 01       	movw	r28, r24
    104c:	88 81       	ld	r24, Y
    104e:	0e 94 18 0c 	call	0x1830	; 0x1830 <detachInterrupt>
    1052:	8f ef       	ldi	r24, 0xFF	; 255
    1054:	9f ef       	ldi	r25, 0xFF	; 255
    1056:	99 83       	std	Y+1, r25	; 0x01
    1058:	88 83       	st	Y, r24
    105a:	df 91       	pop	r29
    105c:	cf 91       	pop	r28
    105e:	08 95       	ret

00001060 <_ZN8RCSwitch4sendEmj>:
    1060:	2f 92       	push	r2
    1062:	3f 92       	push	r3
    1064:	4f 92       	push	r4
    1066:	5f 92       	push	r5
    1068:	6f 92       	push	r6
    106a:	7f 92       	push	r7
    106c:	8f 92       	push	r8
    106e:	9f 92       	push	r9
    1070:	af 92       	push	r10
    1072:	bf 92       	push	r11
    1074:	cf 92       	push	r12
    1076:	df 92       	push	r13
    1078:	ef 92       	push	r14
    107a:	ff 92       	push	r15
    107c:	0f 93       	push	r16
    107e:	1f 93       	push	r17
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	dc 01       	movw	r26, r24
    1086:	12 96       	adiw	r26, 0x02	; 2
    1088:	ed 91       	ld	r30, X+
    108a:	fc 91       	ld	r31, X
    108c:	13 97       	sbiw	r26, 0x03	; 3
    108e:	31 96       	adiw	r30, 0x01	; 1
    1090:	09 f4       	brne	.+2      	; 0x1094 <_ZN8RCSwitch4sendEmj+0x34>
    1092:	5c c0       	rjmp	.+184    	; 0x114c <_ZN8RCSwitch4sendEmj+0xec>
    1094:	19 01       	movw	r2, r18
    1096:	6a 01       	movw	r12, r20
    1098:	7b 01       	movw	r14, r22
    109a:	ec 01       	movw	r28, r24
    109c:	48 80       	ld	r4, Y
    109e:	59 80       	ldd	r5, Y+1	; 0x01
    10a0:	8f ef       	ldi	r24, 0xFF	; 255
    10a2:	48 16       	cp	r4, r24
    10a4:	58 06       	cpc	r5, r24
    10a6:	19 f0       	breq	.+6      	; 0x10ae <_ZN8RCSwitch4sendEmj+0x4e>
    10a8:	ce 01       	movw	r24, r28
    10aa:	0e 94 23 08 	call	0x1046	; 0x1046 <_ZN8RCSwitch14disableReceiveEv>
    10ae:	61 2c       	mov	r6, r1
    10b0:	71 2c       	mov	r7, r1
    10b2:	81 2c       	mov	r8, r1
    10b4:	91 2c       	mov	r9, r1
    10b6:	54 01       	movw	r10, r8
    10b8:	83 94       	inc	r8
    10ba:	8c 81       	ldd	r24, Y+4	; 0x04
    10bc:	9d 81       	ldd	r25, Y+5	; 0x05
    10be:	68 16       	cp	r6, r24
    10c0:	79 06       	cpc	r7, r25
    10c2:	4c f5       	brge	.+82     	; 0x1116 <_ZN8RCSwitch4sendEmj+0xb6>
    10c4:	81 01       	movw	r16, r2
    10c6:	01 50       	subi	r16, 0x01	; 1
    10c8:	11 09       	sbc	r17, r1
    10ca:	17 fd       	sbrc	r17, 7
    10cc:	1b c0       	rjmp	.+54     	; 0x1104 <_ZN8RCSwitch4sendEmj+0xa4>
    10ce:	d5 01       	movw	r26, r10
    10d0:	c4 01       	movw	r24, r8
    10d2:	00 2e       	mov	r0, r16
    10d4:	04 c0       	rjmp	.+8      	; 0x10de <_ZN8RCSwitch4sendEmj+0x7e>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	aa 1f       	adc	r26, r26
    10dc:	bb 1f       	adc	r27, r27
    10de:	0a 94       	dec	r0
    10e0:	d2 f7       	brpl	.-12     	; 0x10d6 <_ZN8RCSwitch4sendEmj+0x76>
    10e2:	8c 21       	and	r24, r12
    10e4:	9d 21       	and	r25, r13
    10e6:	ae 21       	and	r26, r14
    10e8:	bf 21       	and	r27, r15
    10ea:	89 2b       	or	r24, r25
    10ec:	8a 2b       	or	r24, r26
    10ee:	8b 2b       	or	r24, r27
    10f0:	19 f0       	breq	.+6      	; 0x10f8 <_ZN8RCSwitch4sendEmj+0x98>
    10f2:	6c 85       	ldd	r22, Y+12	; 0x0c
    10f4:	7d 85       	ldd	r23, Y+13	; 0x0d
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <_ZN8RCSwitch4sendEmj+0x9c>
    10f8:	6a 85       	ldd	r22, Y+10	; 0x0a
    10fa:	7b 85       	ldd	r23, Y+11	; 0x0b
    10fc:	ce 01       	movw	r24, r28
    10fe:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <_ZN8RCSwitch8transmitENS_7HighLowE>
    1102:	e1 cf       	rjmp	.-62     	; 0x10c6 <_ZN8RCSwitch4sendEmj+0x66>
    1104:	68 85       	ldd	r22, Y+8	; 0x08
    1106:	79 85       	ldd	r23, Y+9	; 0x09
    1108:	ce 01       	movw	r24, r28
    110a:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <_ZN8RCSwitch8transmitENS_7HighLowE>
    110e:	af ef       	ldi	r26, 0xFF	; 255
    1110:	6a 1a       	sub	r6, r26
    1112:	7a 0a       	sbc	r7, r26
    1114:	d2 cf       	rjmp	.-92     	; 0x10ba <_ZN8RCSwitch4sendEmj+0x5a>
    1116:	bf ef       	ldi	r27, 0xFF	; 255
    1118:	4b 16       	cp	r4, r27
    111a:	5b 06       	cpc	r5, r27
    111c:	b9 f0       	breq	.+46     	; 0x114c <_ZN8RCSwitch4sendEmj+0xec>
    111e:	59 82       	std	Y+1, r5	; 0x01
    1120:	48 82       	st	Y, r4
    1122:	ce 01       	movw	r24, r28
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	1f 91       	pop	r17
    112a:	0f 91       	pop	r16
    112c:	ff 90       	pop	r15
    112e:	ef 90       	pop	r14
    1130:	df 90       	pop	r13
    1132:	cf 90       	pop	r12
    1134:	bf 90       	pop	r11
    1136:	af 90       	pop	r10
    1138:	9f 90       	pop	r9
    113a:	8f 90       	pop	r8
    113c:	7f 90       	pop	r7
    113e:	6f 90       	pop	r6
    1140:	5f 90       	pop	r5
    1142:	4f 90       	pop	r4
    1144:	3f 90       	pop	r3
    1146:	2f 90       	pop	r2
    1148:	0c 94 09 08 	jmp	0x1012	; 0x1012 <_ZN8RCSwitch13enableReceiveEv>
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	1f 91       	pop	r17
    1152:	0f 91       	pop	r16
    1154:	ff 90       	pop	r15
    1156:	ef 90       	pop	r14
    1158:	df 90       	pop	r13
    115a:	cf 90       	pop	r12
    115c:	bf 90       	pop	r11
    115e:	af 90       	pop	r10
    1160:	9f 90       	pop	r9
    1162:	8f 90       	pop	r8
    1164:	7f 90       	pop	r7
    1166:	6f 90       	pop	r6
    1168:	5f 90       	pop	r5
    116a:	4f 90       	pop	r4
    116c:	3f 90       	pop	r3
    116e:	2f 90       	pop	r2
    1170:	08 95       	ret

00001172 <_ZN8RCSwitch15receiveProtocolEij>:
}

/**
 *
 */
bool RECEIVE_ATTR RCSwitch::receiveProtocol(const int p, unsigned int changeCount) {
    1172:	2f 92       	push	r2
    1174:	3f 92       	push	r3
    1176:	4f 92       	push	r4
    1178:	5f 92       	push	r5
    117a:	6f 92       	push	r6
    117c:	7f 92       	push	r7
    117e:	8f 92       	push	r8
    1180:	9f 92       	push	r9
    1182:	af 92       	push	r10
    1184:	bf 92       	push	r11
    1186:	cf 92       	push	r12
    1188:	df 92       	push	r13
    118a:	ef 92       	push	r14
    118c:	ff 92       	push	r15
    118e:	0f 93       	push	r16
    1190:	1f 93       	push	r17
    1192:	cf 93       	push	r28
    1194:	df 93       	push	r29
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	2d 97       	sbiw	r28, 0x0d	; 13
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	cd bf       	out	0x3d, r28	; 61
    11a6:	8c 01       	movw	r16, r24
    11a8:	7b 01       	movw	r14, r22
#ifdef ESP8266
    const Protocol &pro = proto[p-1];
#else
    Protocol pro;
    memcpy_P(&pro, &proto[p-1], sizeof(Protocol));
    11aa:	01 97       	sbiw	r24, 0x01	; 1
    11ac:	29 e0       	ldi	r18, 0x09	; 9
    11ae:	28 9f       	mul	r18, r24
    11b0:	b0 01       	movw	r22, r0
    11b2:	29 9f       	mul	r18, r25
    11b4:	70 0d       	add	r23, r0
    11b6:	11 24       	eor	r1, r1
    11b8:	68 59       	subi	r22, 0x98	; 152
    11ba:	7f 4f       	sbci	r23, 0xFF	; 255
    11bc:	49 e0       	ldi	r20, 0x09	; 9
    11be:	50 e0       	ldi	r21, 0x00	; 0
    11c0:	ce 01       	movw	r24, r28
    11c2:	01 96       	adiw	r24, 0x01	; 1
    11c4:	0e 94 38 11 	call	0x2270	; 0x2270 <memcpy_P>
#endif

    unsigned long code = 0;
    //Assuming the longer pulse length is the pulse captured in timings[0]
    const unsigned int syncLengthInPulses =  ((pro.syncFactor.low) > (pro.syncFactor.high)) ? (pro.syncFactor.low) : (pro.syncFactor.high);
    const unsigned int delay = RCSwitch::timings[0] / syncLengthInPulses;
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	6c 81       	ldd	r22, Y+4	; 0x04
    11cc:	68 17       	cp	r22, r24
    11ce:	08 f4       	brcc	.+2      	; 0x11d2 <_ZN8RCSwitch15receiveProtocolEij+0x60>
    11d0:	68 2f       	mov	r22, r24
    11d2:	70 e0       	ldi	r23, 0x00	; 0
    11d4:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_ZN8RCSwitch7timingsE>
    11d8:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <_ZN8RCSwitch7timingsE+0x1>
    11dc:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__udivmodhi4>
    11e0:	9b 01       	movw	r18, r22
    const unsigned int delayTolerance = delay * RCSwitch::nReceiveTolerance / 100;
    11e2:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <_ZN8RCSwitch17nReceiveToleranceE>
    11e6:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <_ZN8RCSwitch17nReceiveToleranceE+0x1>
    11ea:	64 9f       	mul	r22, r20
    11ec:	c0 01       	movw	r24, r0
    11ee:	65 9f       	mul	r22, r21
    11f0:	90 0d       	add	r25, r0
    11f2:	74 9f       	mul	r23, r20
    11f4:	90 0d       	add	r25, r0
    11f6:	11 24       	eor	r1, r1
    11f8:	64 e6       	ldi	r22, 0x64	; 100
    11fa:	70 e0       	ldi	r23, 0x00	; 0
    11fc:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__udivmodhi4>
     *
     * |-filtered out-|--1st dur--|--Start data--|
     *
     * The 2nd saved duration starts the data
     */
    const unsigned int firstDataTiming = (pro.invertedSignal) ? (2) : (1);
    1200:	89 85       	ldd	r24, Y+9	; 0x09
    1202:	81 11       	cpse	r24, r1
    1204:	03 c0       	rjmp	.+6      	; 0x120c <_ZN8RCSwitch15receiveProtocolEij+0x9a>
    1206:	a1 e0       	ldi	r26, 0x01	; 1
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <_ZN8RCSwitch15receiveProtocolEij+0x9e>
    120c:	a2 e0       	ldi	r26, 0x02	; 2
    120e:	b0 e0       	ldi	r27, 0x00	; 0

    for (unsigned int i = firstDataTiming; i < changeCount - 1; i += 2) {
        code <<= 1;
        if (diff(RCSwitch::timings[i], delay * pro.zero.high) < delayTolerance &&
    1210:	8d 81       	ldd	r24, Y+5	; 0x05
    1212:	82 9f       	mul	r24, r18
    1214:	30 01       	movw	r6, r0
    1216:	83 9f       	mul	r24, r19
    1218:	70 0c       	add	r7, r0
    121a:	11 24       	eor	r1, r1
    121c:	7b 86       	std	Y+11, r7	; 0x0b
    121e:	6a 86       	std	Y+10, r6	; 0x0a
            diff(RCSwitch::timings[i + 1], delay * pro.zero.low) < delayTolerance) {
    1220:	8e 81       	ldd	r24, Y+6	; 0x06
    1222:	82 9f       	mul	r24, r18
    1224:	10 01       	movw	r2, r0
    1226:	83 9f       	mul	r24, r19
    1228:	30 0c       	add	r3, r0
    122a:	11 24       	eor	r1, r1
            // zero
        } else if (diff(RCSwitch::timings[i], delay * pro.one.high) < delayTolerance &&
    122c:	8f 81       	ldd	r24, Y+7	; 0x07
    122e:	82 9f       	mul	r24, r18
    1230:	20 01       	movw	r4, r0
    1232:	83 9f       	mul	r24, r19
    1234:	50 0c       	add	r5, r0
    1236:	11 24       	eor	r1, r1
                   diff(RCSwitch::timings[i + 1], delay * pro.one.low) < delayTolerance) {
    1238:	88 85       	ldd	r24, Y+8	; 0x08
    123a:	82 9f       	mul	r24, r18
    123c:	a0 01       	movw	r20, r0
    123e:	83 9f       	mul	r24, r19
    1240:	50 0d       	add	r21, r0
    1242:	11 24       	eor	r1, r1
    1244:	5d 87       	std	Y+13, r21	; 0x0d
    1246:	4c 87       	std	Y+12, r20	; 0x0c
    1248:	fd 01       	movw	r30, r26
    124a:	ee 0f       	add	r30, r30
    124c:	ff 1f       	adc	r31, r31
    124e:	e6 53       	subi	r30, 0x36	; 54
    1250:	fe 4f       	sbci	r31, 0xFE	; 254
    1252:	81 2c       	mov	r8, r1
    1254:	91 2c       	mov	r9, r1
    1256:	54 01       	movw	r10, r8
     *
     * The 2nd saved duration starts the data
     */
    const unsigned int firstDataTiming = (pro.invertedSignal) ? (2) : (1);

    for (unsigned int i = firstDataTiming; i < changeCount - 1; i += 2) {
    1258:	67 01       	movw	r12, r14
    125a:	51 e0       	ldi	r21, 0x01	; 1
    125c:	c5 1a       	sub	r12, r21
    125e:	d1 08       	sbc	r13, r1
    1260:	ac 15       	cp	r26, r12
    1262:	bd 05       	cpc	r27, r13
    1264:	e0 f5       	brcc	.+120    	; 0x12de <_ZN8RCSwitch15receiveProtocolEij+0x16c>
        code <<= 1;
    1266:	88 0c       	add	r8, r8
    1268:	99 1c       	adc	r9, r9
    126a:	aa 1c       	adc	r10, r10
    126c:	bb 1c       	adc	r11, r11
        if (diff(RCSwitch::timings[i], delay * pro.zero.high) < delayTolerance &&
    126e:	80 81       	ld	r24, Z
    1270:	91 81       	ldd	r25, Z+1	; 0x01
    1272:	ac 01       	movw	r20, r24
    1274:	6a 84       	ldd	r6, Y+10	; 0x0a
    1276:	7b 84       	ldd	r7, Y+11	; 0x0b
    1278:	46 19       	sub	r20, r6
    127a:	57 09       	sbc	r21, r7
    127c:	57 ff       	sbrs	r21, 7
    127e:	03 c0       	rjmp	.+6      	; 0x1286 <_ZN8RCSwitch15receiveProtocolEij+0x114>
    1280:	51 95       	neg	r21
    1282:	41 95       	neg	r20
    1284:	51 09       	sbc	r21, r1
    1286:	46 17       	cp	r20, r22
    1288:	57 07       	cpc	r21, r23
    128a:	60 f4       	brcc	.+24     	; 0x12a4 <_ZN8RCSwitch15receiveProtocolEij+0x132>
    128c:	42 81       	ldd	r20, Z+2	; 0x02
    128e:	53 81       	ldd	r21, Z+3	; 0x03
    1290:	42 19       	sub	r20, r2
    1292:	53 09       	sbc	r21, r3
    1294:	57 ff       	sbrs	r21, 7
    1296:	03 c0       	rjmp	.+6      	; 0x129e <_ZN8RCSwitch15receiveProtocolEij+0x12c>
    1298:	51 95       	neg	r21
    129a:	41 95       	neg	r20
    129c:	51 09       	sbc	r21, r1
    129e:	46 17       	cp	r20, r22
    12a0:	57 07       	cpc	r21, r23
    12a2:	d0 f0       	brcs	.+52     	; 0x12d8 <_ZN8RCSwitch15receiveProtocolEij+0x166>
            diff(RCSwitch::timings[i + 1], delay * pro.zero.low) < delayTolerance) {
            // zero
        } else if (diff(RCSwitch::timings[i], delay * pro.one.high) < delayTolerance &&
    12a4:	84 19       	sub	r24, r4
    12a6:	95 09       	sbc	r25, r5
    12a8:	97 ff       	sbrs	r25, 7
    12aa:	03 c0       	rjmp	.+6      	; 0x12b2 <_ZN8RCSwitch15receiveProtocolEij+0x140>
    12ac:	91 95       	neg	r25
    12ae:	81 95       	neg	r24
    12b0:	91 09       	sbc	r25, r1
    12b2:	86 17       	cp	r24, r22
    12b4:	97 07       	cpc	r25, r23
    12b6:	78 f5       	brcc	.+94     	; 0x1316 <_ZN8RCSwitch15receiveProtocolEij+0x1a4>
    12b8:	82 81       	ldd	r24, Z+2	; 0x02
    12ba:	93 81       	ldd	r25, Z+3	; 0x03
    12bc:	4c 85       	ldd	r20, Y+12	; 0x0c
    12be:	5d 85       	ldd	r21, Y+13	; 0x0d
    12c0:	84 1b       	sub	r24, r20
    12c2:	95 0b       	sbc	r25, r21
    12c4:	97 ff       	sbrs	r25, 7
    12c6:	03 c0       	rjmp	.+6      	; 0x12ce <_ZN8RCSwitch15receiveProtocolEij+0x15c>
    12c8:	91 95       	neg	r25
    12ca:	81 95       	neg	r24
    12cc:	91 09       	sbc	r25, r1
    12ce:	86 17       	cp	r24, r22
    12d0:	97 07       	cpc	r25, r23
    12d2:	08 f5       	brcc	.+66     	; 0x1316 <_ZN8RCSwitch15receiveProtocolEij+0x1a4>
                   diff(RCSwitch::timings[i + 1], delay * pro.one.low) < delayTolerance) {
            // one
            code |= 1;
    12d4:	68 94       	set
    12d6:	80 f8       	bld	r8, 0
     *
     * The 2nd saved duration starts the data
     */
    const unsigned int firstDataTiming = (pro.invertedSignal) ? (2) : (1);

    for (unsigned int i = firstDataTiming; i < changeCount - 1; i += 2) {
    12d8:	12 96       	adiw	r26, 0x02	; 2
    12da:	34 96       	adiw	r30, 0x04	; 4
    12dc:	c1 cf       	rjmp	.-126    	; 0x1260 <_ZN8RCSwitch15receiveProtocolEij+0xee>
            // Failed
            return false;
        }
    }

    if (changeCount > 7) {    // ignore very short transmissions: no device sends them, so this must be noise
    12de:	58 e0       	ldi	r21, 0x08	; 8
    12e0:	e5 16       	cp	r14, r21
    12e2:	f1 04       	cpc	r15, r1
    12e4:	c0 f0       	brcs	.+48     	; 0x1316 <_ZN8RCSwitch15receiveProtocolEij+0x1a4>
        RCSwitch::nReceivedValue = code;
    12e6:	80 92 56 02 	sts	0x0256, r8	; 0x800256 <_ZN8RCSwitch14nReceivedValueE>
    12ea:	90 92 57 02 	sts	0x0257, r9	; 0x800257 <_ZN8RCSwitch14nReceivedValueE+0x1>
    12ee:	a0 92 58 02 	sts	0x0258, r10	; 0x800258 <_ZN8RCSwitch14nReceivedValueE+0x2>
    12f2:	b0 92 59 02 	sts	0x0259, r11	; 0x800259 <_ZN8RCSwitch14nReceivedValueE+0x3>
        RCSwitch::nReceivedBitlength = (changeCount - 1) / 2;
    12f6:	d6 94       	lsr	r13
    12f8:	c7 94       	ror	r12
    12fa:	d0 92 55 02 	sts	0x0255, r13	; 0x800255 <_ZN8RCSwitch18nReceivedBitlengthE+0x1>
    12fe:	c0 92 54 02 	sts	0x0254, r12	; 0x800254 <_ZN8RCSwitch18nReceivedBitlengthE>
        RCSwitch::nReceivedDelay = delay;
    1302:	30 93 53 02 	sts	0x0253, r19	; 0x800253 <_ZN8RCSwitch14nReceivedDelayE+0x1>
    1306:	20 93 52 02 	sts	0x0252, r18	; 0x800252 <_ZN8RCSwitch14nReceivedDelayE>
        RCSwitch::nReceivedProtocol = p;
    130a:	10 93 51 02 	sts	0x0251, r17	; 0x800251 <_ZN8RCSwitch17nReceivedProtocolE+0x1>
    130e:	00 93 50 02 	sts	0x0250, r16	; 0x800250 <_ZN8RCSwitch17nReceivedProtocolE>
        return true;
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	01 c0       	rjmp	.+2      	; 0x1318 <_ZN8RCSwitch15receiveProtocolEij+0x1a6>
                   diff(RCSwitch::timings[i + 1], delay * pro.one.low) < delayTolerance) {
            // one
            code |= 1;
        } else {
            // Failed
            return false;
    1316:	80 e0       	ldi	r24, 0x00	; 0
        RCSwitch::nReceivedProtocol = p;
        return true;
    }

    return false;
}
    1318:	2d 96       	adiw	r28, 0x0d	; 13
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	de bf       	out	0x3e, r29	; 62
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	cd bf       	out	0x3d, r28	; 61
    1324:	df 91       	pop	r29
    1326:	cf 91       	pop	r28
    1328:	1f 91       	pop	r17
    132a:	0f 91       	pop	r16
    132c:	ff 90       	pop	r15
    132e:	ef 90       	pop	r14
    1330:	df 90       	pop	r13
    1332:	cf 90       	pop	r12
    1334:	bf 90       	pop	r11
    1336:	af 90       	pop	r10
    1338:	9f 90       	pop	r9
    133a:	8f 90       	pop	r8
    133c:	7f 90       	pop	r7
    133e:	6f 90       	pop	r6
    1340:	5f 90       	pop	r5
    1342:	4f 90       	pop	r4
    1344:	3f 90       	pop	r3
    1346:	2f 90       	pop	r2
    1348:	08 95       	ret

0000134a <_ZN8RCSwitch15handleInterruptEv>:

void RECEIVE_ATTR RCSwitch::handleInterrupt() {
    134a:	cf 92       	push	r12
    134c:	df 92       	push	r13
    134e:	ef 92       	push	r14
    1350:	ff 92       	push	r15
    1352:	0f 93       	push	r16
    1354:	1f 93       	push	r17
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29

  static unsigned int changeCount = 0;
  static unsigned long lastTime = 0;
  static unsigned int repeatCount = 0;

  const long time = micros();
    135a:	0e 94 ce 0c 	call	0x199c	; 0x199c <micros>
    135e:	6b 01       	movw	r12, r22
    1360:	7c 01       	movw	r14, r24
  const unsigned int duration = time - lastTime;
    1362:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <_ZZN8RCSwitch15handleInterruptEvE8lastTime>
    1366:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <_ZZN8RCSwitch15handleInterruptEvE8lastTime+0x1>
    136a:	86 01       	movw	r16, r12
    136c:	08 1b       	sub	r16, r24
    136e:	19 0b       	sbc	r17, r25

  if (duration > RCSwitch::nSeparationLimit) {
    1370:	0d 3c       	cpi	r16, 0xCD	; 205
    1372:	20 e1       	ldi	r18, 0x10	; 16
    1374:	12 07       	cpc	r17, r18
    1376:	90 f1       	brcs	.+100    	; 0x13dc <_ZN8RCSwitch15handleInterruptEv+0x92>
    // A long stretch without signal level change occurred. This could
    // be the gap between two transmission.
    if (diff(duration, RCSwitch::timings[0]) < 200) {
    1378:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <_ZN8RCSwitch7timingsE>
    137c:	90 91 cb 01 	lds	r25, 0x01CB	; 0x8001cb <_ZN8RCSwitch7timingsE+0x1>
    1380:	98 01       	movw	r18, r16
    1382:	28 1b       	sub	r18, r24
    1384:	39 0b       	sbc	r19, r25
    1386:	c9 01       	movw	r24, r18
    1388:	37 ff       	sbrs	r19, 7
    138a:	03 c0       	rjmp	.+6      	; 0x1392 <_ZN8RCSwitch15handleInterruptEv+0x48>
    138c:	91 95       	neg	r25
    138e:	81 95       	neg	r24
    1390:	91 09       	sbc	r25, r1
    1392:	88 3c       	cpi	r24, 0xC8	; 200
    1394:	91 05       	cpc	r25, r1
    1396:	f4 f4       	brge	.+60     	; 0x13d4 <_ZN8RCSwitch15handleInterruptEv+0x8a>
      // This long signal is close in length to the long signal which
      // started the previously recorded timings; this suggests that
      // it may indeed by a a gap between two transmissions (we assume
      // here that a sender will send the signal multiple times,
      // with roughly the same gap between them).
      repeatCount++;
    1398:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount>
    139c:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount+0x1>
    13a0:	01 96       	adiw	r24, 0x01	; 1
    13a2:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount+0x1>
    13a6:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount>
      if (repeatCount == 2) {
    13aa:	02 97       	sbiw	r24, 0x02	; 2
    13ac:	99 f4       	brne	.+38     	; 0x13d4 <_ZN8RCSwitch15handleInterruptEv+0x8a>
    13ae:	c1 e0       	ldi	r28, 0x01	; 1
    13b0:	d0 e0       	ldi	r29, 0x00	; 0
        for(unsigned int i = 1; i <= numProto; i++) {
          if (receiveProtocol(i, changeCount)) {
    13b2:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <_ZZN8RCSwitch15handleInterruptEvE11changeCount>
    13b6:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <_ZZN8RCSwitch15handleInterruptEvE11changeCount+0x1>
    13ba:	ce 01       	movw	r24, r28
    13bc:	0e 94 b9 08 	call	0x1172	; 0x1172 <_ZN8RCSwitch15receiveProtocolEij>
    13c0:	81 11       	cpse	r24, r1
    13c2:	04 c0       	rjmp	.+8      	; 0x13cc <_ZN8RCSwitch15handleInterruptEv+0x82>
      // it may indeed by a a gap between two transmissions (we assume
      // here that a sender will send the signal multiple times,
      // with roughly the same gap between them).
      repeatCount++;
      if (repeatCount == 2) {
        for(unsigned int i = 1; i <= numProto; i++) {
    13c4:	21 96       	adiw	r28, 0x01	; 1
    13c6:	c7 30       	cpi	r28, 0x07	; 7
    13c8:	d1 05       	cpc	r29, r1
    13ca:	99 f7       	brne	.-26     	; 0x13b2 <_ZN8RCSwitch15handleInterruptEv+0x68>
          if (receiveProtocol(i, changeCount)) {
            // receive succeeded for protocol i
            break;
          }
        }
        repeatCount = 0;
    13cc:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount+0x1>
    13d0:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount>
      }
    }
    changeCount = 0;
    13d4:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <_ZZN8RCSwitch15handleInterruptEvE11changeCount+0x1>
    13d8:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <_ZZN8RCSwitch15handleInterruptEvE11changeCount>
  }
 
  // detect overflow
  if (changeCount >= RCSWITCH_MAX_CHANGES) {
    13dc:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <_ZZN8RCSwitch15handleInterruptEvE11changeCount>
    13e0:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <_ZZN8RCSwitch15handleInterruptEvE11changeCount+0x1>
    13e4:	83 34       	cpi	r24, 0x43	; 67
    13e6:	91 05       	cpc	r25, r1
    13e8:	40 f0       	brcs	.+16     	; 0x13fa <_ZN8RCSwitch15handleInterruptEv+0xb0>
    changeCount = 0;
    13ea:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <_ZZN8RCSwitch15handleInterruptEvE11changeCount+0x1>
    13ee:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <_ZZN8RCSwitch15handleInterruptEvE11changeCount>
    repeatCount = 0;
    13f2:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount+0x1>
    13f6:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount>
  }

  RCSwitch::timings[changeCount++] = duration;
    13fa:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <_ZZN8RCSwitch15handleInterruptEvE11changeCount>
    13fe:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <_ZZN8RCSwitch15handleInterruptEvE11changeCount+0x1>
    1402:	9c 01       	movw	r18, r24
    1404:	2f 5f       	subi	r18, 0xFF	; 255
    1406:	3f 4f       	sbci	r19, 0xFF	; 255
    1408:	30 93 c3 01 	sts	0x01C3, r19	; 0x8001c3 <_ZZN8RCSwitch15handleInterruptEvE11changeCount+0x1>
    140c:	20 93 c2 01 	sts	0x01C2, r18	; 0x8001c2 <_ZZN8RCSwitch15handleInterruptEvE11changeCount>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	fc 01       	movw	r30, r24
    1416:	e6 53       	subi	r30, 0x36	; 54
    1418:	fe 4f       	sbci	r31, 0xFE	; 254
    141a:	11 83       	std	Z+1, r17	; 0x01
    141c:	00 83       	st	Z, r16
  lastTime = time;  
    141e:	c0 92 c6 01 	sts	0x01C6, r12	; 0x8001c6 <_ZZN8RCSwitch15handleInterruptEvE8lastTime>
    1422:	d0 92 c7 01 	sts	0x01C7, r13	; 0x8001c7 <_ZZN8RCSwitch15handleInterruptEvE8lastTime+0x1>
    1426:	e0 92 c8 01 	sts	0x01C8, r14	; 0x8001c8 <_ZZN8RCSwitch15handleInterruptEvE8lastTime+0x2>
    142a:	f0 92 c9 01 	sts	0x01C9, r15	; 0x8001c9 <_ZZN8RCSwitch15handleInterruptEvE8lastTime+0x3>
}
    142e:	df 91       	pop	r29
    1430:	cf 91       	pop	r28
    1432:	1f 91       	pop	r17
    1434:	0f 91       	pop	r16
    1436:	ff 90       	pop	r15
    1438:	ef 90       	pop	r14
    143a:	df 90       	pop	r13
    143c:	cf 90       	pop	r12
    143e:	08 95       	ret

00001440 <__subsf3>:
    1440:	50 58       	subi	r21, 0x80	; 128

00001442 <__addsf3>:
    1442:	bb 27       	eor	r27, r27
    1444:	aa 27       	eor	r26, r26
    1446:	0e 94 38 0a 	call	0x1470	; 0x1470 <__addsf3x>
    144a:	0c 94 3b 0b 	jmp	0x1676	; 0x1676 <__fp_round>
    144e:	0e 94 2d 0b 	call	0x165a	; 0x165a <__fp_pscA>
    1452:	38 f0       	brcs	.+14     	; 0x1462 <__addsf3+0x20>
    1454:	0e 94 34 0b 	call	0x1668	; 0x1668 <__fp_pscB>
    1458:	20 f0       	brcs	.+8      	; 0x1462 <__addsf3+0x20>
    145a:	39 f4       	brne	.+14     	; 0x146a <__addsf3+0x28>
    145c:	9f 3f       	cpi	r25, 0xFF	; 255
    145e:	19 f4       	brne	.+6      	; 0x1466 <__addsf3+0x24>
    1460:	26 f4       	brtc	.+8      	; 0x146a <__addsf3+0x28>
    1462:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__fp_nan>
    1466:	0e f4       	brtc	.+2      	; 0x146a <__addsf3+0x28>
    1468:	e0 95       	com	r30
    146a:	e7 fb       	bst	r30, 7
    146c:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__fp_inf>

00001470 <__addsf3x>:
    1470:	e9 2f       	mov	r30, r25
    1472:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fp_split3>
    1476:	58 f3       	brcs	.-42     	; 0x144e <__addsf3+0xc>
    1478:	ba 17       	cp	r27, r26
    147a:	62 07       	cpc	r22, r18
    147c:	73 07       	cpc	r23, r19
    147e:	84 07       	cpc	r24, r20
    1480:	95 07       	cpc	r25, r21
    1482:	20 f0       	brcs	.+8      	; 0x148c <__addsf3x+0x1c>
    1484:	79 f4       	brne	.+30     	; 0x14a4 <__addsf3x+0x34>
    1486:	a6 f5       	brtc	.+104    	; 0x14f0 <__addsf3x+0x80>
    1488:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__fp_zero>
    148c:	0e f4       	brtc	.+2      	; 0x1490 <__addsf3x+0x20>
    148e:	e0 95       	com	r30
    1490:	0b 2e       	mov	r0, r27
    1492:	ba 2f       	mov	r27, r26
    1494:	a0 2d       	mov	r26, r0
    1496:	0b 01       	movw	r0, r22
    1498:	b9 01       	movw	r22, r18
    149a:	90 01       	movw	r18, r0
    149c:	0c 01       	movw	r0, r24
    149e:	ca 01       	movw	r24, r20
    14a0:	a0 01       	movw	r20, r0
    14a2:	11 24       	eor	r1, r1
    14a4:	ff 27       	eor	r31, r31
    14a6:	59 1b       	sub	r21, r25
    14a8:	99 f0       	breq	.+38     	; 0x14d0 <__addsf3x+0x60>
    14aa:	59 3f       	cpi	r21, 0xF9	; 249
    14ac:	50 f4       	brcc	.+20     	; 0x14c2 <__addsf3x+0x52>
    14ae:	50 3e       	cpi	r21, 0xE0	; 224
    14b0:	68 f1       	brcs	.+90     	; 0x150c <__addsf3x+0x9c>
    14b2:	1a 16       	cp	r1, r26
    14b4:	f0 40       	sbci	r31, 0x00	; 0
    14b6:	a2 2f       	mov	r26, r18
    14b8:	23 2f       	mov	r18, r19
    14ba:	34 2f       	mov	r19, r20
    14bc:	44 27       	eor	r20, r20
    14be:	58 5f       	subi	r21, 0xF8	; 248
    14c0:	f3 cf       	rjmp	.-26     	; 0x14a8 <__addsf3x+0x38>
    14c2:	46 95       	lsr	r20
    14c4:	37 95       	ror	r19
    14c6:	27 95       	ror	r18
    14c8:	a7 95       	ror	r26
    14ca:	f0 40       	sbci	r31, 0x00	; 0
    14cc:	53 95       	inc	r21
    14ce:	c9 f7       	brne	.-14     	; 0x14c2 <__addsf3x+0x52>
    14d0:	7e f4       	brtc	.+30     	; 0x14f0 <__addsf3x+0x80>
    14d2:	1f 16       	cp	r1, r31
    14d4:	ba 0b       	sbc	r27, r26
    14d6:	62 0b       	sbc	r22, r18
    14d8:	73 0b       	sbc	r23, r19
    14da:	84 0b       	sbc	r24, r20
    14dc:	ba f0       	brmi	.+46     	; 0x150c <__addsf3x+0x9c>
    14de:	91 50       	subi	r25, 0x01	; 1
    14e0:	a1 f0       	breq	.+40     	; 0x150a <__addsf3x+0x9a>
    14e2:	ff 0f       	add	r31, r31
    14e4:	bb 1f       	adc	r27, r27
    14e6:	66 1f       	adc	r22, r22
    14e8:	77 1f       	adc	r23, r23
    14ea:	88 1f       	adc	r24, r24
    14ec:	c2 f7       	brpl	.-16     	; 0x14de <__addsf3x+0x6e>
    14ee:	0e c0       	rjmp	.+28     	; 0x150c <__addsf3x+0x9c>
    14f0:	ba 0f       	add	r27, r26
    14f2:	62 1f       	adc	r22, r18
    14f4:	73 1f       	adc	r23, r19
    14f6:	84 1f       	adc	r24, r20
    14f8:	48 f4       	brcc	.+18     	; 0x150c <__addsf3x+0x9c>
    14fa:	87 95       	ror	r24
    14fc:	77 95       	ror	r23
    14fe:	67 95       	ror	r22
    1500:	b7 95       	ror	r27
    1502:	f7 95       	ror	r31
    1504:	9e 3f       	cpi	r25, 0xFE	; 254
    1506:	08 f0       	brcs	.+2      	; 0x150a <__addsf3x+0x9a>
    1508:	b0 cf       	rjmp	.-160    	; 0x146a <__addsf3+0x28>
    150a:	93 95       	inc	r25
    150c:	88 0f       	add	r24, r24
    150e:	08 f0       	brcs	.+2      	; 0x1512 <__addsf3x+0xa2>
    1510:	99 27       	eor	r25, r25
    1512:	ee 0f       	add	r30, r30
    1514:	97 95       	ror	r25
    1516:	87 95       	ror	r24
    1518:	08 95       	ret

0000151a <__fixsfsi>:
    151a:	0e 94 94 0a 	call	0x1528	; 0x1528 <__fixunssfsi>
    151e:	68 94       	set
    1520:	b1 11       	cpse	r27, r1
    1522:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <__fp_szero>
    1526:	08 95       	ret

00001528 <__fixunssfsi>:
    1528:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__fp_splitA>
    152c:	88 f0       	brcs	.+34     	; 0x1550 <__fixunssfsi+0x28>
    152e:	9f 57       	subi	r25, 0x7F	; 127
    1530:	98 f0       	brcs	.+38     	; 0x1558 <__fixunssfsi+0x30>
    1532:	b9 2f       	mov	r27, r25
    1534:	99 27       	eor	r25, r25
    1536:	b7 51       	subi	r27, 0x17	; 23
    1538:	b0 f0       	brcs	.+44     	; 0x1566 <__fixunssfsi+0x3e>
    153a:	e1 f0       	breq	.+56     	; 0x1574 <__fixunssfsi+0x4c>
    153c:	66 0f       	add	r22, r22
    153e:	77 1f       	adc	r23, r23
    1540:	88 1f       	adc	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	1a f0       	brmi	.+6      	; 0x154c <__fixunssfsi+0x24>
    1546:	ba 95       	dec	r27
    1548:	c9 f7       	brne	.-14     	; 0x153c <__fixunssfsi+0x14>
    154a:	14 c0       	rjmp	.+40     	; 0x1574 <__fixunssfsi+0x4c>
    154c:	b1 30       	cpi	r27, 0x01	; 1
    154e:	91 f0       	breq	.+36     	; 0x1574 <__fixunssfsi+0x4c>
    1550:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <__fp_zero>
    1554:	b1 e0       	ldi	r27, 0x01	; 1
    1556:	08 95       	ret
    1558:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__fp_zero>
    155c:	67 2f       	mov	r22, r23
    155e:	78 2f       	mov	r23, r24
    1560:	88 27       	eor	r24, r24
    1562:	b8 5f       	subi	r27, 0xF8	; 248
    1564:	39 f0       	breq	.+14     	; 0x1574 <__fixunssfsi+0x4c>
    1566:	b9 3f       	cpi	r27, 0xF9	; 249
    1568:	cc f3       	brlt	.-14     	; 0x155c <__fixunssfsi+0x34>
    156a:	86 95       	lsr	r24
    156c:	77 95       	ror	r23
    156e:	67 95       	ror	r22
    1570:	b3 95       	inc	r27
    1572:	d9 f7       	brne	.-10     	; 0x156a <__fixunssfsi+0x42>
    1574:	3e f4       	brtc	.+14     	; 0x1584 <__fixunssfsi+0x5c>
    1576:	90 95       	com	r25
    1578:	80 95       	com	r24
    157a:	70 95       	com	r23
    157c:	61 95       	neg	r22
    157e:	7f 4f       	sbci	r23, 0xFF	; 255
    1580:	8f 4f       	sbci	r24, 0xFF	; 255
    1582:	9f 4f       	sbci	r25, 0xFF	; 255
    1584:	08 95       	ret

00001586 <__floatunsisf>:
    1586:	e8 94       	clt
    1588:	09 c0       	rjmp	.+18     	; 0x159c <__floatsisf+0x12>

0000158a <__floatsisf>:
    158a:	97 fb       	bst	r25, 7
    158c:	3e f4       	brtc	.+14     	; 0x159c <__floatsisf+0x12>
    158e:	90 95       	com	r25
    1590:	80 95       	com	r24
    1592:	70 95       	com	r23
    1594:	61 95       	neg	r22
    1596:	7f 4f       	sbci	r23, 0xFF	; 255
    1598:	8f 4f       	sbci	r24, 0xFF	; 255
    159a:	9f 4f       	sbci	r25, 0xFF	; 255
    159c:	99 23       	and	r25, r25
    159e:	a9 f0       	breq	.+42     	; 0x15ca <__floatsisf+0x40>
    15a0:	f9 2f       	mov	r31, r25
    15a2:	96 e9       	ldi	r25, 0x96	; 150
    15a4:	bb 27       	eor	r27, r27
    15a6:	93 95       	inc	r25
    15a8:	f6 95       	lsr	r31
    15aa:	87 95       	ror	r24
    15ac:	77 95       	ror	r23
    15ae:	67 95       	ror	r22
    15b0:	b7 95       	ror	r27
    15b2:	f1 11       	cpse	r31, r1
    15b4:	f8 cf       	rjmp	.-16     	; 0x15a6 <__floatsisf+0x1c>
    15b6:	fa f4       	brpl	.+62     	; 0x15f6 <__floatsisf+0x6c>
    15b8:	bb 0f       	add	r27, r27
    15ba:	11 f4       	brne	.+4      	; 0x15c0 <__floatsisf+0x36>
    15bc:	60 ff       	sbrs	r22, 0
    15be:	1b c0       	rjmp	.+54     	; 0x15f6 <__floatsisf+0x6c>
    15c0:	6f 5f       	subi	r22, 0xFF	; 255
    15c2:	7f 4f       	sbci	r23, 0xFF	; 255
    15c4:	8f 4f       	sbci	r24, 0xFF	; 255
    15c6:	9f 4f       	sbci	r25, 0xFF	; 255
    15c8:	16 c0       	rjmp	.+44     	; 0x15f6 <__floatsisf+0x6c>
    15ca:	88 23       	and	r24, r24
    15cc:	11 f0       	breq	.+4      	; 0x15d2 <__floatsisf+0x48>
    15ce:	96 e9       	ldi	r25, 0x96	; 150
    15d0:	11 c0       	rjmp	.+34     	; 0x15f4 <__floatsisf+0x6a>
    15d2:	77 23       	and	r23, r23
    15d4:	21 f0       	breq	.+8      	; 0x15de <__floatsisf+0x54>
    15d6:	9e e8       	ldi	r25, 0x8E	; 142
    15d8:	87 2f       	mov	r24, r23
    15da:	76 2f       	mov	r23, r22
    15dc:	05 c0       	rjmp	.+10     	; 0x15e8 <__floatsisf+0x5e>
    15de:	66 23       	and	r22, r22
    15e0:	71 f0       	breq	.+28     	; 0x15fe <__floatsisf+0x74>
    15e2:	96 e8       	ldi	r25, 0x86	; 134
    15e4:	86 2f       	mov	r24, r22
    15e6:	70 e0       	ldi	r23, 0x00	; 0
    15e8:	60 e0       	ldi	r22, 0x00	; 0
    15ea:	2a f0       	brmi	.+10     	; 0x15f6 <__floatsisf+0x6c>
    15ec:	9a 95       	dec	r25
    15ee:	66 0f       	add	r22, r22
    15f0:	77 1f       	adc	r23, r23
    15f2:	88 1f       	adc	r24, r24
    15f4:	da f7       	brpl	.-10     	; 0x15ec <__floatsisf+0x62>
    15f6:	88 0f       	add	r24, r24
    15f8:	96 95       	lsr	r25
    15fa:	87 95       	ror	r24
    15fc:	97 f9       	bld	r25, 7
    15fe:	08 95       	ret

00001600 <__fp_cmp>:
    1600:	99 0f       	add	r25, r25
    1602:	00 08       	sbc	r0, r0
    1604:	55 0f       	add	r21, r21
    1606:	aa 0b       	sbc	r26, r26
    1608:	e0 e8       	ldi	r30, 0x80	; 128
    160a:	fe ef       	ldi	r31, 0xFE	; 254
    160c:	16 16       	cp	r1, r22
    160e:	17 06       	cpc	r1, r23
    1610:	e8 07       	cpc	r30, r24
    1612:	f9 07       	cpc	r31, r25
    1614:	c0 f0       	brcs	.+48     	; 0x1646 <__fp_cmp+0x46>
    1616:	12 16       	cp	r1, r18
    1618:	13 06       	cpc	r1, r19
    161a:	e4 07       	cpc	r30, r20
    161c:	f5 07       	cpc	r31, r21
    161e:	98 f0       	brcs	.+38     	; 0x1646 <__fp_cmp+0x46>
    1620:	62 1b       	sub	r22, r18
    1622:	73 0b       	sbc	r23, r19
    1624:	84 0b       	sbc	r24, r20
    1626:	95 0b       	sbc	r25, r21
    1628:	39 f4       	brne	.+14     	; 0x1638 <__fp_cmp+0x38>
    162a:	0a 26       	eor	r0, r26
    162c:	61 f0       	breq	.+24     	; 0x1646 <__fp_cmp+0x46>
    162e:	23 2b       	or	r18, r19
    1630:	24 2b       	or	r18, r20
    1632:	25 2b       	or	r18, r21
    1634:	21 f4       	brne	.+8      	; 0x163e <__fp_cmp+0x3e>
    1636:	08 95       	ret
    1638:	0a 26       	eor	r0, r26
    163a:	09 f4       	brne	.+2      	; 0x163e <__fp_cmp+0x3e>
    163c:	a1 40       	sbci	r26, 0x01	; 1
    163e:	a6 95       	lsr	r26
    1640:	8f ef       	ldi	r24, 0xFF	; 255
    1642:	81 1d       	adc	r24, r1
    1644:	81 1d       	adc	r24, r1
    1646:	08 95       	ret

00001648 <__fp_inf>:
    1648:	97 f9       	bld	r25, 7
    164a:	9f 67       	ori	r25, 0x7F	; 127
    164c:	80 e8       	ldi	r24, 0x80	; 128
    164e:	70 e0       	ldi	r23, 0x00	; 0
    1650:	60 e0       	ldi	r22, 0x00	; 0
    1652:	08 95       	ret

00001654 <__fp_nan>:
    1654:	9f ef       	ldi	r25, 0xFF	; 255
    1656:	80 ec       	ldi	r24, 0xC0	; 192
    1658:	08 95       	ret

0000165a <__fp_pscA>:
    165a:	00 24       	eor	r0, r0
    165c:	0a 94       	dec	r0
    165e:	16 16       	cp	r1, r22
    1660:	17 06       	cpc	r1, r23
    1662:	18 06       	cpc	r1, r24
    1664:	09 06       	cpc	r0, r25
    1666:	08 95       	ret

00001668 <__fp_pscB>:
    1668:	00 24       	eor	r0, r0
    166a:	0a 94       	dec	r0
    166c:	12 16       	cp	r1, r18
    166e:	13 06       	cpc	r1, r19
    1670:	14 06       	cpc	r1, r20
    1672:	05 06       	cpc	r0, r21
    1674:	08 95       	ret

00001676 <__fp_round>:
    1676:	09 2e       	mov	r0, r25
    1678:	03 94       	inc	r0
    167a:	00 0c       	add	r0, r0
    167c:	11 f4       	brne	.+4      	; 0x1682 <__fp_round+0xc>
    167e:	88 23       	and	r24, r24
    1680:	52 f0       	brmi	.+20     	; 0x1696 <__fp_round+0x20>
    1682:	bb 0f       	add	r27, r27
    1684:	40 f4       	brcc	.+16     	; 0x1696 <__fp_round+0x20>
    1686:	bf 2b       	or	r27, r31
    1688:	11 f4       	brne	.+4      	; 0x168e <__fp_round+0x18>
    168a:	60 ff       	sbrs	r22, 0
    168c:	04 c0       	rjmp	.+8      	; 0x1696 <__fp_round+0x20>
    168e:	6f 5f       	subi	r22, 0xFF	; 255
    1690:	7f 4f       	sbci	r23, 0xFF	; 255
    1692:	8f 4f       	sbci	r24, 0xFF	; 255
    1694:	9f 4f       	sbci	r25, 0xFF	; 255
    1696:	08 95       	ret

00001698 <__fp_split3>:
    1698:	57 fd       	sbrc	r21, 7
    169a:	90 58       	subi	r25, 0x80	; 128
    169c:	44 0f       	add	r20, r20
    169e:	55 1f       	adc	r21, r21
    16a0:	59 f0       	breq	.+22     	; 0x16b8 <__fp_splitA+0x10>
    16a2:	5f 3f       	cpi	r21, 0xFF	; 255
    16a4:	71 f0       	breq	.+28     	; 0x16c2 <__fp_splitA+0x1a>
    16a6:	47 95       	ror	r20

000016a8 <__fp_splitA>:
    16a8:	88 0f       	add	r24, r24
    16aa:	97 fb       	bst	r25, 7
    16ac:	99 1f       	adc	r25, r25
    16ae:	61 f0       	breq	.+24     	; 0x16c8 <__fp_splitA+0x20>
    16b0:	9f 3f       	cpi	r25, 0xFF	; 255
    16b2:	79 f0       	breq	.+30     	; 0x16d2 <__fp_splitA+0x2a>
    16b4:	87 95       	ror	r24
    16b6:	08 95       	ret
    16b8:	12 16       	cp	r1, r18
    16ba:	13 06       	cpc	r1, r19
    16bc:	14 06       	cpc	r1, r20
    16be:	55 1f       	adc	r21, r21
    16c0:	f2 cf       	rjmp	.-28     	; 0x16a6 <__fp_split3+0xe>
    16c2:	46 95       	lsr	r20
    16c4:	f1 df       	rcall	.-30     	; 0x16a8 <__fp_splitA>
    16c6:	08 c0       	rjmp	.+16     	; 0x16d8 <__fp_splitA+0x30>
    16c8:	16 16       	cp	r1, r22
    16ca:	17 06       	cpc	r1, r23
    16cc:	18 06       	cpc	r1, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	f1 cf       	rjmp	.-30     	; 0x16b4 <__fp_splitA+0xc>
    16d2:	86 95       	lsr	r24
    16d4:	71 05       	cpc	r23, r1
    16d6:	61 05       	cpc	r22, r1
    16d8:	08 94       	sec
    16da:	08 95       	ret

000016dc <__fp_zero>:
    16dc:	e8 94       	clt

000016de <__fp_szero>:
    16de:	bb 27       	eor	r27, r27
    16e0:	66 27       	eor	r22, r22
    16e2:	77 27       	eor	r23, r23
    16e4:	cb 01       	movw	r24, r22
    16e6:	97 f9       	bld	r25, 7
    16e8:	08 95       	ret

000016ea <__mulsf3>:
    16ea:	0e 94 88 0b 	call	0x1710	; 0x1710 <__mulsf3x>
    16ee:	0c 94 3b 0b 	jmp	0x1676	; 0x1676 <__fp_round>
    16f2:	0e 94 2d 0b 	call	0x165a	; 0x165a <__fp_pscA>
    16f6:	38 f0       	brcs	.+14     	; 0x1706 <__mulsf3+0x1c>
    16f8:	0e 94 34 0b 	call	0x1668	; 0x1668 <__fp_pscB>
    16fc:	20 f0       	brcs	.+8      	; 0x1706 <__mulsf3+0x1c>
    16fe:	95 23       	and	r25, r21
    1700:	11 f0       	breq	.+4      	; 0x1706 <__mulsf3+0x1c>
    1702:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__fp_inf>
    1706:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__fp_nan>
    170a:	11 24       	eor	r1, r1
    170c:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <__fp_szero>

00001710 <__mulsf3x>:
    1710:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__fp_split3>
    1714:	70 f3       	brcs	.-36     	; 0x16f2 <__mulsf3+0x8>

00001716 <__mulsf3_pse>:
    1716:	95 9f       	mul	r25, r21
    1718:	c1 f3       	breq	.-16     	; 0x170a <__mulsf3+0x20>
    171a:	95 0f       	add	r25, r21
    171c:	50 e0       	ldi	r21, 0x00	; 0
    171e:	55 1f       	adc	r21, r21
    1720:	62 9f       	mul	r22, r18
    1722:	f0 01       	movw	r30, r0
    1724:	72 9f       	mul	r23, r18
    1726:	bb 27       	eor	r27, r27
    1728:	f0 0d       	add	r31, r0
    172a:	b1 1d       	adc	r27, r1
    172c:	63 9f       	mul	r22, r19
    172e:	aa 27       	eor	r26, r26
    1730:	f0 0d       	add	r31, r0
    1732:	b1 1d       	adc	r27, r1
    1734:	aa 1f       	adc	r26, r26
    1736:	64 9f       	mul	r22, r20
    1738:	66 27       	eor	r22, r22
    173a:	b0 0d       	add	r27, r0
    173c:	a1 1d       	adc	r26, r1
    173e:	66 1f       	adc	r22, r22
    1740:	82 9f       	mul	r24, r18
    1742:	22 27       	eor	r18, r18
    1744:	b0 0d       	add	r27, r0
    1746:	a1 1d       	adc	r26, r1
    1748:	62 1f       	adc	r22, r18
    174a:	73 9f       	mul	r23, r19
    174c:	b0 0d       	add	r27, r0
    174e:	a1 1d       	adc	r26, r1
    1750:	62 1f       	adc	r22, r18
    1752:	83 9f       	mul	r24, r19
    1754:	a0 0d       	add	r26, r0
    1756:	61 1d       	adc	r22, r1
    1758:	22 1f       	adc	r18, r18
    175a:	74 9f       	mul	r23, r20
    175c:	33 27       	eor	r19, r19
    175e:	a0 0d       	add	r26, r0
    1760:	61 1d       	adc	r22, r1
    1762:	23 1f       	adc	r18, r19
    1764:	84 9f       	mul	r24, r20
    1766:	60 0d       	add	r22, r0
    1768:	21 1d       	adc	r18, r1
    176a:	82 2f       	mov	r24, r18
    176c:	76 2f       	mov	r23, r22
    176e:	6a 2f       	mov	r22, r26
    1770:	11 24       	eor	r1, r1
    1772:	9f 57       	subi	r25, 0x7F	; 127
    1774:	50 40       	sbci	r21, 0x00	; 0
    1776:	9a f0       	brmi	.+38     	; 0x179e <__mulsf3_pse+0x88>
    1778:	f1 f0       	breq	.+60     	; 0x17b6 <__mulsf3_pse+0xa0>
    177a:	88 23       	and	r24, r24
    177c:	4a f0       	brmi	.+18     	; 0x1790 <__mulsf3_pse+0x7a>
    177e:	ee 0f       	add	r30, r30
    1780:	ff 1f       	adc	r31, r31
    1782:	bb 1f       	adc	r27, r27
    1784:	66 1f       	adc	r22, r22
    1786:	77 1f       	adc	r23, r23
    1788:	88 1f       	adc	r24, r24
    178a:	91 50       	subi	r25, 0x01	; 1
    178c:	50 40       	sbci	r21, 0x00	; 0
    178e:	a9 f7       	brne	.-22     	; 0x177a <__mulsf3_pse+0x64>
    1790:	9e 3f       	cpi	r25, 0xFE	; 254
    1792:	51 05       	cpc	r21, r1
    1794:	80 f0       	brcs	.+32     	; 0x17b6 <__mulsf3_pse+0xa0>
    1796:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__fp_inf>
    179a:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <__fp_szero>
    179e:	5f 3f       	cpi	r21, 0xFF	; 255
    17a0:	e4 f3       	brlt	.-8      	; 0x179a <__mulsf3_pse+0x84>
    17a2:	98 3e       	cpi	r25, 0xE8	; 232
    17a4:	d4 f3       	brlt	.-12     	; 0x179a <__mulsf3_pse+0x84>
    17a6:	86 95       	lsr	r24
    17a8:	77 95       	ror	r23
    17aa:	67 95       	ror	r22
    17ac:	b7 95       	ror	r27
    17ae:	f7 95       	ror	r31
    17b0:	e7 95       	ror	r30
    17b2:	9f 5f       	subi	r25, 0xFF	; 255
    17b4:	c1 f7       	brne	.-16     	; 0x17a6 <__mulsf3_pse+0x90>
    17b6:	fe 2b       	or	r31, r30
    17b8:	88 0f       	add	r24, r24
    17ba:	91 1d       	adc	r25, r1
    17bc:	96 95       	lsr	r25
    17be:	87 95       	ror	r24
    17c0:	97 f9       	bld	r25, 7
    17c2:	08 95       	ret

000017c4 <__unordsf2>:
    17c4:	0e 94 00 0b 	call	0x1600	; 0x1600 <__fp_cmp>
    17c8:	88 0b       	sbc	r24, r24
    17ca:	99 0b       	sbc	r25, r25
    17cc:	08 95       	ret

000017ce <initVariant>:
    17ce:	08 95       	ret

000017d0 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    17d0:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <init>

	initVariant();
    17d4:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    17d8:	0e 94 a7 00 	call	0x14e	; 0x14e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    17dc:	c0 e0       	ldi	r28, 0x00	; 0
    17de:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    17e0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <loop>
		if (serialEventRun) serialEventRun();
    17e4:	20 97       	sbiw	r28, 0x00	; 0
    17e6:	e1 f3       	breq	.-8      	; 0x17e0 <main+0x10>
    17e8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    17ec:	f9 cf       	rjmp	.-14     	; 0x17e0 <main+0x10>

000017ee <nothing>:
#include <avr/pgmspace.h>
#include <stdio.h>

#include "wiring_private.h"

static void nothing(void) {
    17ee:	08 95       	ret

000017f0 <attachInterrupt>:
#endif
};
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    17f0:	82 30       	cpi	r24, 0x02	; 2
    17f2:	e8 f4       	brcc	.+58     	; 0x182e <attachInterrupt+0x3e>
    intFunc[interruptNum] = userFunc;
    17f4:	e8 2f       	mov	r30, r24
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	ee 0f       	add	r30, r30
    17fa:	ff 1f       	adc	r31, r31
    17fc:	ee 5e       	subi	r30, 0xEE	; 238
    17fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1800:	71 83       	std	Z+1, r23	; 0x01
    1802:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    1804:	81 30       	cpi	r24, 0x01	; 1
    1806:	41 f0       	breq	.+16     	; 0x1818 <attachInterrupt+0x28>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    1808:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    180c:	8c 7f       	andi	r24, 0xFC	; 252
    180e:	48 2b       	or	r20, r24
    1810:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
      EIMSK |= (1 << INT0);
    1814:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
    1816:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    1818:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    181c:	83 7f       	andi	r24, 0xF3	; 243
    181e:	44 0f       	add	r20, r20
    1820:	55 1f       	adc	r21, r21
    1822:	44 0f       	add	r20, r20
    1824:	55 1f       	adc	r21, r21
    1826:	48 2b       	or	r20, r24
    1828:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
      EIMSK |= (1 << INT1);
    182c:	e9 9a       	sbi	0x1d, 1	; 29
    182e:	08 95       	ret

00001830 <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    1830:	82 30       	cpi	r24, 0x02	; 2
    1832:	78 f4       	brcc	.+30     	; 0x1852 <detachInterrupt+0x22>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	11 f0       	breq	.+4      	; 0x183c <detachInterrupt+0xc>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
    1838:	e8 98       	cbi	0x1d, 0	; 29
    #elif defined(GIMSK) && defined(INT0)
      GIMSK &= ~(1 << INT0);
    #else
      #error detachInterrupt not finished for this cpu
    #endif
      break;
    183a:	01 c0       	rjmp	.+2      	; 0x183e <detachInterrupt+0xe>

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
    183c:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    183e:	e8 2f       	mov	r30, r24
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	ee 0f       	add	r30, r30
    1844:	ff 1f       	adc	r31, r31
    1846:	ee 5e       	subi	r30, 0xEE	; 238
    1848:	fe 4f       	sbci	r31, 0xFE	; 254
    184a:	87 ef       	ldi	r24, 0xF7	; 247
    184c:	9b e0       	ldi	r25, 0x0B	; 11
    184e:	91 83       	std	Z+1, r25	; 0x01
    1850:	80 83       	st	Z, r24
    1852:	08 95       	ret

00001854 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    1854:	1f 92       	push	r1
    1856:	0f 92       	push	r0
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	0f 92       	push	r0
    185c:	11 24       	eor	r1, r1
    185e:	2f 93       	push	r18
    1860:	3f 93       	push	r19
    1862:	4f 93       	push	r20
    1864:	5f 93       	push	r21
    1866:	6f 93       	push	r22
    1868:	7f 93       	push	r23
    186a:	8f 93       	push	r24
    186c:	9f 93       	push	r25
    186e:	af 93       	push	r26
    1870:	bf 93       	push	r27
    1872:	ef 93       	push	r30
    1874:	ff 93       	push	r31
    1876:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <intFunc>
    187a:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <intFunc+0x1>
    187e:	09 95       	icall
    1880:	ff 91       	pop	r31
    1882:	ef 91       	pop	r30
    1884:	bf 91       	pop	r27
    1886:	af 91       	pop	r26
    1888:	9f 91       	pop	r25
    188a:	8f 91       	pop	r24
    188c:	7f 91       	pop	r23
    188e:	6f 91       	pop	r22
    1890:	5f 91       	pop	r21
    1892:	4f 91       	pop	r20
    1894:	3f 91       	pop	r19
    1896:	2f 91       	pop	r18
    1898:	0f 90       	pop	r0
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	0f 90       	pop	r0
    189e:	1f 90       	pop	r1
    18a0:	18 95       	reti

000018a2 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    18a2:	1f 92       	push	r1
    18a4:	0f 92       	push	r0
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	0f 92       	push	r0
    18aa:	11 24       	eor	r1, r1
    18ac:	2f 93       	push	r18
    18ae:	3f 93       	push	r19
    18b0:	4f 93       	push	r20
    18b2:	5f 93       	push	r21
    18b4:	6f 93       	push	r22
    18b6:	7f 93       	push	r23
    18b8:	8f 93       	push	r24
    18ba:	9f 93       	push	r25
    18bc:	af 93       	push	r26
    18be:	bf 93       	push	r27
    18c0:	ef 93       	push	r30
    18c2:	ff 93       	push	r31
    18c4:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <intFunc+0x2>
    18c8:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <intFunc+0x3>
    18cc:	09 95       	icall
    18ce:	ff 91       	pop	r31
    18d0:	ef 91       	pop	r30
    18d2:	bf 91       	pop	r27
    18d4:	af 91       	pop	r26
    18d6:	9f 91       	pop	r25
    18d8:	8f 91       	pop	r24
    18da:	7f 91       	pop	r23
    18dc:	6f 91       	pop	r22
    18de:	5f 91       	pop	r21
    18e0:	4f 91       	pop	r20
    18e2:	3f 91       	pop	r19
    18e4:	2f 91       	pop	r18
    18e6:	0f 90       	pop	r0
    18e8:	0f be       	out	0x3f, r0	; 63
    18ea:	0f 90       	pop	r0
    18ec:	1f 90       	pop	r1
    18ee:	18 95       	reti

000018f0 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    18f0:	1f 92       	push	r1
    18f2:	0f 92       	push	r0
    18f4:	0f b6       	in	r0, 0x3f	; 63
    18f6:	0f 92       	push	r0
    18f8:	11 24       	eor	r1, r1
    18fa:	2f 93       	push	r18
    18fc:	3f 93       	push	r19
    18fe:	8f 93       	push	r24
    1900:	9f 93       	push	r25
    1902:	af 93       	push	r26
    1904:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1906:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <timer0_millis>
    190a:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <timer0_millis+0x1>
    190e:	a0 91 5d 02 	lds	r26, 0x025D	; 0x80025d <timer0_millis+0x2>
    1912:	b0 91 5e 02 	lds	r27, 0x025E	; 0x80025e <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    1916:	30 91 5a 02 	lds	r19, 0x025A	; 0x80025a <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    191a:	26 e0       	ldi	r18, 0x06	; 6
    191c:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    191e:	2d 37       	cpi	r18, 0x7D	; 125
    1920:	20 f4       	brcc	.+8      	; 0x192a <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1922:	02 96       	adiw	r24, 0x02	; 2
    1924:	a1 1d       	adc	r26, r1
    1926:	b1 1d       	adc	r27, r1
    1928:	05 c0       	rjmp	.+10     	; 0x1934 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    192a:	29 e8       	ldi	r18, 0x89	; 137
    192c:	23 0f       	add	r18, r19
		m += 1;
    192e:	03 96       	adiw	r24, 0x03	; 3
    1930:	a1 1d       	adc	r26, r1
    1932:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1934:	20 93 5a 02 	sts	0x025A, r18	; 0x80025a <timer0_fract>
	timer0_millis = m;
    1938:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <timer0_millis>
    193c:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <timer0_millis+0x1>
    1940:	a0 93 5d 02 	sts	0x025D, r26	; 0x80025d <timer0_millis+0x2>
    1944:	b0 93 5e 02 	sts	0x025E, r27	; 0x80025e <timer0_millis+0x3>
	timer0_overflow_count++;
    1948:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <timer0_overflow_count>
    194c:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <timer0_overflow_count+0x1>
    1950:	a0 91 61 02 	lds	r26, 0x0261	; 0x800261 <timer0_overflow_count+0x2>
    1954:	b0 91 62 02 	lds	r27, 0x0262	; 0x800262 <timer0_overflow_count+0x3>
    1958:	01 96       	adiw	r24, 0x01	; 1
    195a:	a1 1d       	adc	r26, r1
    195c:	b1 1d       	adc	r27, r1
    195e:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <timer0_overflow_count>
    1962:	90 93 60 02 	sts	0x0260, r25	; 0x800260 <timer0_overflow_count+0x1>
    1966:	a0 93 61 02 	sts	0x0261, r26	; 0x800261 <timer0_overflow_count+0x2>
    196a:	b0 93 62 02 	sts	0x0262, r27	; 0x800262 <timer0_overflow_count+0x3>
}
    196e:	bf 91       	pop	r27
    1970:	af 91       	pop	r26
    1972:	9f 91       	pop	r25
    1974:	8f 91       	pop	r24
    1976:	3f 91       	pop	r19
    1978:	2f 91       	pop	r18
    197a:	0f 90       	pop	r0
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	0f 90       	pop	r0
    1980:	1f 90       	pop	r1
    1982:	18 95       	reti

00001984 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    1984:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1986:	f8 94       	cli
	m = timer0_millis;
    1988:	60 91 5b 02 	lds	r22, 0x025B	; 0x80025b <timer0_millis>
    198c:	70 91 5c 02 	lds	r23, 0x025C	; 0x80025c <timer0_millis+0x1>
    1990:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <timer0_millis+0x2>
    1994:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <timer0_millis+0x3>
	SREG = oldSREG;
    1998:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    199a:	08 95       	ret

0000199c <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    199c:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    199e:	f8 94       	cli
	m = timer0_overflow_count;
    19a0:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <timer0_overflow_count>
    19a4:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <timer0_overflow_count+0x1>
    19a8:	a0 91 61 02 	lds	r26, 0x0261	; 0x800261 <timer0_overflow_count+0x2>
    19ac:	b0 91 62 02 	lds	r27, 0x0262	; 0x800262 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    19b0:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    19b2:	a8 9b       	sbis	0x15, 0	; 21
    19b4:	05 c0       	rjmp	.+10     	; 0x19c0 <micros+0x24>
    19b6:	2f 3f       	cpi	r18, 0xFF	; 255
    19b8:	19 f0       	breq	.+6      	; 0x19c0 <micros+0x24>
		m++;
    19ba:	01 96       	adiw	r24, 0x01	; 1
    19bc:	a1 1d       	adc	r26, r1
    19be:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    19c0:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    19c2:	ba 2f       	mov	r27, r26
    19c4:	a9 2f       	mov	r26, r25
    19c6:	98 2f       	mov	r25, r24
    19c8:	88 27       	eor	r24, r24
    19ca:	82 0f       	add	r24, r18
    19cc:	91 1d       	adc	r25, r1
    19ce:	a1 1d       	adc	r26, r1
    19d0:	b1 1d       	adc	r27, r1
    19d2:	bc 01       	movw	r22, r24
    19d4:	cd 01       	movw	r24, r26
    19d6:	43 e0       	ldi	r20, 0x03	; 3
    19d8:	66 0f       	add	r22, r22
    19da:	77 1f       	adc	r23, r23
    19dc:	88 1f       	adc	r24, r24
    19de:	99 1f       	adc	r25, r25
    19e0:	4a 95       	dec	r20
    19e2:	d1 f7       	brne	.-12     	; 0x19d8 <micros+0x3c>
}
    19e4:	08 95       	ret

000019e6 <delay>:

void delay(unsigned long ms)
{
    19e6:	8f 92       	push	r8
    19e8:	9f 92       	push	r9
    19ea:	af 92       	push	r10
    19ec:	bf 92       	push	r11
    19ee:	cf 92       	push	r12
    19f0:	df 92       	push	r13
    19f2:	ef 92       	push	r14
    19f4:	ff 92       	push	r15
    19f6:	6b 01       	movw	r12, r22
    19f8:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    19fa:	0e 94 ce 0c 	call	0x199c	; 0x199c <micros>
    19fe:	4b 01       	movw	r8, r22
    1a00:	5c 01       	movw	r10, r24

	while (ms > 0) {
    1a02:	c1 14       	cp	r12, r1
    1a04:	d1 04       	cpc	r13, r1
    1a06:	e1 04       	cpc	r14, r1
    1a08:	f1 04       	cpc	r15, r1
    1a0a:	01 f1       	breq	.+64     	; 0x1a4c <delay+0x66>
		yield();
    1a0c:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    1a10:	0e 94 ce 0c 	call	0x199c	; 0x199c <micros>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	88 19       	sub	r24, r8
    1a1a:	99 09       	sbc	r25, r9
    1a1c:	aa 09       	sbc	r26, r10
    1a1e:	bb 09       	sbc	r27, r11
    1a20:	88 3e       	cpi	r24, 0xE8	; 232
    1a22:	93 40       	sbci	r25, 0x03	; 3
    1a24:	a1 05       	cpc	r26, r1
    1a26:	b1 05       	cpc	r27, r1
    1a28:	60 f3       	brcs	.-40     	; 0x1a02 <delay+0x1c>
			ms--;
    1a2a:	21 e0       	ldi	r18, 0x01	; 1
    1a2c:	c2 1a       	sub	r12, r18
    1a2e:	d1 08       	sbc	r13, r1
    1a30:	e1 08       	sbc	r14, r1
    1a32:	f1 08       	sbc	r15, r1
			start += 1000;
    1a34:	88 ee       	ldi	r24, 0xE8	; 232
    1a36:	88 0e       	add	r8, r24
    1a38:	83 e0       	ldi	r24, 0x03	; 3
    1a3a:	98 1e       	adc	r9, r24
    1a3c:	a1 1c       	adc	r10, r1
    1a3e:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    1a40:	c1 14       	cp	r12, r1
    1a42:	d1 04       	cpc	r13, r1
    1a44:	e1 04       	cpc	r14, r1
    1a46:	f1 04       	cpc	r15, r1
    1a48:	19 f7       	brne	.-58     	; 0x1a10 <delay+0x2a>
    1a4a:	db cf       	rjmp	.-74     	; 0x1a02 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    1a4c:	ff 90       	pop	r15
    1a4e:	ef 90       	pop	r14
    1a50:	df 90       	pop	r13
    1a52:	cf 90       	pop	r12
    1a54:	bf 90       	pop	r11
    1a56:	af 90       	pop	r10
    1a58:	9f 90       	pop	r9
    1a5a:	8f 90       	pop	r8
    1a5c:	08 95       	ret

00001a5e <delayMicroseconds>:
#elif F_CPU >= 8000000L
	// for the 8 MHz internal clock

	// for a 1 and 2 microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 2us
	if (us <= 2) return; //  = 3 cycles, (4 when true)
    1a5e:	83 30       	cpi	r24, 0x03	; 3
    1a60:	91 05       	cpc	r25, r1
    1a62:	28 f0       	brcs	.+10     	; 0x1a6e <delayMicroseconds+0x10>

	// the following loop takes 1/2 of a microsecond (4 cycles)
	// per iteration, so execute it twice for each microsecond of
	// delay requested.
	us <<= 1; //x2 us, = 2 cycles
    1a64:	88 0f       	add	r24, r24
    1a66:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 17 (19) cycles above, remove 4, (4*4=16)
	// us is at least 6 so we can substract 4
	us -= 4; // = 2 cycles
    1a68:	04 97       	sbiw	r24, 0x04	; 4
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
    1a6c:	f1 f7       	brne	.-4      	; 0x1a6a <delayMicroseconds+0xc>
    1a6e:	08 95       	ret

00001a70 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1a70:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1a72:	84 b5       	in	r24, 0x24	; 36
    1a74:	82 60       	ori	r24, 0x02	; 2
    1a76:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1a78:	84 b5       	in	r24, 0x24	; 36
    1a7a:	81 60       	ori	r24, 0x01	; 1
    1a7c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1a7e:	85 b5       	in	r24, 0x25	; 37
    1a80:	82 60       	ori	r24, 0x02	; 2
    1a82:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1a84:	85 b5       	in	r24, 0x25	; 37
    1a86:	81 60       	ori	r24, 0x01	; 1
    1a88:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1a8a:	ee e6       	ldi	r30, 0x6E	; 110
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	81 60       	ori	r24, 0x01	; 1
    1a92:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1a94:	e1 e8       	ldi	r30, 0x81	; 129
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1a9a:	80 81       	ld	r24, Z
    1a9c:	82 60       	ori	r24, 0x02	; 2
    1a9e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1aa0:	80 81       	ld	r24, Z
    1aa2:	81 60       	ori	r24, 0x01	; 1
    1aa4:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1aa6:	e0 e8       	ldi	r30, 0x80	; 128
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	81 60       	ori	r24, 0x01	; 1
    1aae:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1ab0:	e1 eb       	ldi	r30, 0xB1	; 177
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	84 60       	ori	r24, 0x04	; 4
    1ab8:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1aba:	e0 eb       	ldi	r30, 0xB0	; 176
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	81 60       	ori	r24, 0x01	; 1
    1ac2:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1ac4:	ea e7       	ldi	r30, 0x7A	; 122
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	84 60       	ori	r24, 0x04	; 4
    1acc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1ace:	80 81       	ld	r24, Z
    1ad0:	82 60       	ori	r24, 0x02	; 2
    1ad2:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS0);
    1ad4:	80 81       	ld	r24, Z
    1ad6:	8e 7f       	andi	r24, 0xFE	; 254
    1ad8:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1ada:	80 81       	ld	r24, Z
    1adc:	80 68       	ori	r24, 0x80	; 128
    1ade:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1ae0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1ae4:	08 95       	ret

00001ae6 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1ae6:	83 30       	cpi	r24, 0x03	; 3
    1ae8:	81 f0       	breq	.+32     	; 0x1b0a <turnOffPWM+0x24>
    1aea:	28 f4       	brcc	.+10     	; 0x1af6 <turnOffPWM+0x10>
    1aec:	81 30       	cpi	r24, 0x01	; 1
    1aee:	99 f0       	breq	.+38     	; 0x1b16 <turnOffPWM+0x30>
    1af0:	82 30       	cpi	r24, 0x02	; 2
    1af2:	a1 f0       	breq	.+40     	; 0x1b1c <turnOffPWM+0x36>
    1af4:	08 95       	ret
    1af6:	87 30       	cpi	r24, 0x07	; 7
    1af8:	a9 f0       	breq	.+42     	; 0x1b24 <turnOffPWM+0x3e>
    1afa:	88 30       	cpi	r24, 0x08	; 8
    1afc:	b9 f0       	breq	.+46     	; 0x1b2c <turnOffPWM+0x46>
    1afe:	84 30       	cpi	r24, 0x04	; 4
    1b00:	d1 f4       	brne	.+52     	; 0x1b36 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1b02:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1b06:	8f 7d       	andi	r24, 0xDF	; 223
    1b08:	03 c0       	rjmp	.+6      	; 0x1b10 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1b0a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1b0e:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1b10:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1b14:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1b16:	84 b5       	in	r24, 0x24	; 36
    1b18:	8f 77       	andi	r24, 0x7F	; 127
    1b1a:	02 c0       	rjmp	.+4      	; 0x1b20 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1b1c:	84 b5       	in	r24, 0x24	; 36
    1b1e:	8f 7d       	andi	r24, 0xDF	; 223
    1b20:	84 bd       	out	0x24, r24	; 36
    1b22:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1b24:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1b28:	8f 77       	andi	r24, 0x7F	; 127
    1b2a:	03 c0       	rjmp	.+6      	; 0x1b32 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1b2c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1b30:	8f 7d       	andi	r24, 0xDF	; 223
    1b32:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1b36:	08 95       	ret

00001b38 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1b38:	cf 93       	push	r28
    1b3a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	fc 01       	movw	r30, r24
    1b40:	ee 54       	subi	r30, 0x4E	; 78
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1b46:	fc 01       	movw	r30, r24
    1b48:	ea 53       	subi	r30, 0x3A	; 58
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1b4e:	88 23       	and	r24, r24
    1b50:	61 f1       	breq	.+88     	; 0x1baa <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	fc 01       	movw	r30, r24
    1b5a:	e2 51       	subi	r30, 0x12	; 18
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	c5 91       	lpm	r28, Z+
    1b60:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1b62:	fc 01       	movw	r30, r24
    1b64:	ec 51       	subi	r30, 0x1C	; 28
    1b66:	ff 4f       	sbci	r31, 0xFF	; 255
    1b68:	a5 91       	lpm	r26, Z+
    1b6a:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1b6c:	61 11       	cpse	r22, r1
    1b6e:	09 c0       	rjmp	.+18     	; 0x1b82 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1b70:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1b72:	f8 94       	cli
		*reg &= ~bit;
    1b74:	88 81       	ld	r24, Y
    1b76:	20 95       	com	r18
    1b78:	82 23       	and	r24, r18
    1b7a:	88 83       	st	Y, r24
		*out &= ~bit;
    1b7c:	ec 91       	ld	r30, X
    1b7e:	2e 23       	and	r18, r30
    1b80:	0b c0       	rjmp	.+22     	; 0x1b98 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1b82:	62 30       	cpi	r22, 0x02	; 2
    1b84:	61 f4       	brne	.+24     	; 0x1b9e <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1b86:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1b88:	f8 94       	cli
		*reg &= ~bit;
    1b8a:	88 81       	ld	r24, Y
    1b8c:	32 2f       	mov	r19, r18
    1b8e:	30 95       	com	r19
    1b90:	83 23       	and	r24, r19
    1b92:	88 83       	st	Y, r24
		*out |= bit;
    1b94:	ec 91       	ld	r30, X
    1b96:	2e 2b       	or	r18, r30
    1b98:	2c 93       	st	X, r18
		SREG = oldSREG;
    1b9a:	9f bf       	out	0x3f, r25	; 63
    1b9c:	06 c0       	rjmp	.+12     	; 0x1baa <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1b9e:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1ba0:	f8 94       	cli
		*reg |= bit;
    1ba2:	e8 81       	ld	r30, Y
    1ba4:	2e 2b       	or	r18, r30
    1ba6:	28 83       	st	Y, r18
		SREG = oldSREG;
    1ba8:	8f bf       	out	0x3f, r24	; 63
	}
}
    1baa:	df 91       	pop	r29
    1bac:	cf 91       	pop	r28
    1bae:	08 95       	ret

00001bb0 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1bb0:	1f 93       	push	r17
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	f9 01       	movw	r30, r18
    1bbc:	e2 56       	subi	r30, 0x62	; 98
    1bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1bc2:	f9 01       	movw	r30, r18
    1bc4:	ee 54       	subi	r30, 0x4E	; 78
    1bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1bca:	f9 01       	movw	r30, r18
    1bcc:	ea 53       	subi	r30, 0x3A	; 58
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1bd2:	cc 23       	and	r28, r28
    1bd4:	c1 f0       	breq	.+48     	; 0x1c06 <digitalWrite+0x56>
    1bd6:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1bd8:	81 11       	cpse	r24, r1
    1bda:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <turnOffPWM>

	out = portOutputRegister(port);
    1bde:	ec 2f       	mov	r30, r28
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	ee 0f       	add	r30, r30
    1be4:	ff 1f       	adc	r31, r31
    1be6:	ec 51       	subi	r30, 0x1C	; 28
    1be8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bea:	a5 91       	lpm	r26, Z+
    1bec:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1bee:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1bf0:	f8 94       	cli

	if (val == LOW) {
    1bf2:	11 11       	cpse	r17, r1
    1bf4:	04 c0       	rjmp	.+8      	; 0x1bfe <digitalWrite+0x4e>
		*out &= ~bit;
    1bf6:	8c 91       	ld	r24, X
    1bf8:	d0 95       	com	r29
    1bfa:	d8 23       	and	r29, r24
    1bfc:	02 c0       	rjmp	.+4      	; 0x1c02 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1bfe:	ec 91       	ld	r30, X
    1c00:	de 2b       	or	r29, r30
    1c02:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1c04:	9f bf       	out	0x3f, r25	; 63
}
    1c06:	df 91       	pop	r29
    1c08:	cf 91       	pop	r28
    1c0a:	1f 91       	pop	r17
    1c0c:	08 95       	ret

00001c0e <_ZN6StringD1Ev>:
{
	init();
	char buf[1 + 8 * sizeof(unsigned int)];
	utoa(value, buf, base);
	*this = buf;
}
    1c0e:	fc 01       	movw	r30, r24
    1c10:	80 81       	ld	r24, Z
    1c12:	91 81       	ldd	r25, Z+1	; 0x01
    1c14:	0c 94 c2 0f 	jmp	0x1f84	; 0x1f84 <free>

00001c18 <_ZN6String10invalidateEv>:
    1c18:	cf 93       	push	r28
    1c1a:	df 93       	push	r29
    1c1c:	ec 01       	movw	r28, r24
    1c1e:	88 81       	ld	r24, Y
    1c20:	99 81       	ldd	r25, Y+1	; 0x01
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	11 f0       	breq	.+4      	; 0x1c2a <_ZN6String10invalidateEv+0x12>
    1c26:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <free>
    1c2a:	19 82       	std	Y+1, r1	; 0x01
    1c2c:	18 82       	st	Y, r1
    1c2e:	1d 82       	std	Y+5, r1	; 0x05
    1c30:	1c 82       	std	Y+4, r1	; 0x04
    1c32:	1b 82       	std	Y+3, r1	; 0x03
    1c34:	1a 82       	std	Y+2, r1	; 0x02
    1c36:	df 91       	pop	r29
    1c38:	cf 91       	pop	r28
    1c3a:	08 95       	ret

00001c3c <_ZN6String12changeBufferEj>:
    1c3c:	0f 93       	push	r16
    1c3e:	1f 93       	push	r17
    1c40:	cf 93       	push	r28
    1c42:	df 93       	push	r29
    1c44:	ec 01       	movw	r28, r24
    1c46:	8b 01       	movw	r16, r22
    1c48:	6f 5f       	subi	r22, 0xFF	; 255
    1c4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4c:	88 81       	ld	r24, Y
    1c4e:	99 81       	ldd	r25, Y+1	; 0x01
    1c50:	0e 94 4b 10 	call	0x2096	; 0x2096 <realloc>
    1c54:	00 97       	sbiw	r24, 0x00	; 0
    1c56:	31 f0       	breq	.+12     	; 0x1c64 <_ZN6String12changeBufferEj+0x28>
    1c58:	99 83       	std	Y+1, r25	; 0x01
    1c5a:	88 83       	st	Y, r24
    1c5c:	1b 83       	std	Y+3, r17	; 0x03
    1c5e:	0a 83       	std	Y+2, r16	; 0x02
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	01 c0       	rjmp	.+2      	; 0x1c66 <_ZN6String12changeBufferEj+0x2a>
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	df 91       	pop	r29
    1c68:	cf 91       	pop	r28
    1c6a:	1f 91       	pop	r17
    1c6c:	0f 91       	pop	r16
    1c6e:	08 95       	ret

00001c70 <_ZN6String7reserveEj>:
    1c70:	cf 93       	push	r28
    1c72:	df 93       	push	r29
    1c74:	ec 01       	movw	r28, r24
    1c76:	88 81       	ld	r24, Y
    1c78:	99 81       	ldd	r25, Y+1	; 0x01
    1c7a:	89 2b       	or	r24, r25
    1c7c:	29 f0       	breq	.+10     	; 0x1c88 <_ZN6String7reserveEj+0x18>
    1c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c80:	9b 81       	ldd	r25, Y+3	; 0x03
    1c82:	86 17       	cp	r24, r22
    1c84:	97 07       	cpc	r25, r23
    1c86:	60 f4       	brcc	.+24     	; 0x1ca0 <_ZN6String7reserveEj+0x30>
    1c88:	ce 01       	movw	r24, r28
    1c8a:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <_ZN6String12changeBufferEj>
    1c8e:	88 23       	and	r24, r24
    1c90:	41 f0       	breq	.+16     	; 0x1ca2 <_ZN6String7reserveEj+0x32>
    1c92:	8c 81       	ldd	r24, Y+4	; 0x04
    1c94:	9d 81       	ldd	r25, Y+5	; 0x05
    1c96:	89 2b       	or	r24, r25
    1c98:	19 f4       	brne	.+6      	; 0x1ca0 <_ZN6String7reserveEj+0x30>
    1c9a:	e8 81       	ld	r30, Y
    1c9c:	f9 81       	ldd	r31, Y+1	; 0x01
    1c9e:	10 82       	st	Z, r1
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	df 91       	pop	r29
    1ca4:	cf 91       	pop	r28
    1ca6:	08 95       	ret

00001ca8 <_ZN6String4copyEPKcj>:
    1ca8:	ef 92       	push	r14
    1caa:	ff 92       	push	r15
    1cac:	0f 93       	push	r16
    1cae:	1f 93       	push	r17
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
    1cb4:	ec 01       	movw	r28, r24
    1cb6:	7b 01       	movw	r14, r22
    1cb8:	8a 01       	movw	r16, r20
    1cba:	ba 01       	movw	r22, r20
    1cbc:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <_ZN6String7reserveEj>
    1cc0:	81 11       	cpse	r24, r1
    1cc2:	04 c0       	rjmp	.+8      	; 0x1ccc <_ZN6String4copyEPKcj+0x24>
    1cc4:	ce 01       	movw	r24, r28
    1cc6:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <_ZN6String10invalidateEv>
    1cca:	07 c0       	rjmp	.+14     	; 0x1cda <_ZN6String4copyEPKcj+0x32>
    1ccc:	1d 83       	std	Y+5, r17	; 0x05
    1cce:	0c 83       	std	Y+4, r16	; 0x04
    1cd0:	b7 01       	movw	r22, r14
    1cd2:	88 81       	ld	r24, Y
    1cd4:	99 81       	ldd	r25, Y+1	; 0x01
    1cd6:	0e 94 4a 11 	call	0x2294	; 0x2294 <strcpy>
    1cda:	ce 01       	movw	r24, r28
    1cdc:	df 91       	pop	r29
    1cde:	cf 91       	pop	r28
    1ce0:	1f 91       	pop	r17
    1ce2:	0f 91       	pop	r16
    1ce4:	ff 90       	pop	r15
    1ce6:	ef 90       	pop	r14
    1ce8:	08 95       	ret

00001cea <_ZN6StringC1EPKc>:
    1cea:	fc 01       	movw	r30, r24
    1cec:	11 82       	std	Z+1, r1	; 0x01
    1cee:	10 82       	st	Z, r1
    1cf0:	13 82       	std	Z+3, r1	; 0x03
    1cf2:	12 82       	std	Z+2, r1	; 0x02
    1cf4:	15 82       	std	Z+5, r1	; 0x05
    1cf6:	14 82       	std	Z+4, r1	; 0x04
    1cf8:	61 15       	cp	r22, r1
    1cfa:	71 05       	cpc	r23, r1
    1cfc:	51 f0       	breq	.+20     	; 0x1d12 <_ZN6StringC1EPKc+0x28>
    1cfe:	fb 01       	movw	r30, r22
    1d00:	01 90       	ld	r0, Z+
    1d02:	00 20       	and	r0, r0
    1d04:	e9 f7       	brne	.-6      	; 0x1d00 <_ZN6StringC1EPKc+0x16>
    1d06:	31 97       	sbiw	r30, 0x01	; 1
    1d08:	af 01       	movw	r20, r30
    1d0a:	46 1b       	sub	r20, r22
    1d0c:	57 0b       	sbc	r21, r23
    1d0e:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <_ZN6String4copyEPKcj>
    1d12:	08 95       	ret

00001d14 <_ZN6StringaSEPKc>:
    1d14:	cf 93       	push	r28
    1d16:	df 93       	push	r29
    1d18:	ec 01       	movw	r28, r24
    1d1a:	61 15       	cp	r22, r1
    1d1c:	71 05       	cpc	r23, r1
    1d1e:	59 f0       	breq	.+22     	; 0x1d36 <_ZN6StringaSEPKc+0x22>
    1d20:	fb 01       	movw	r30, r22
    1d22:	01 90       	ld	r0, Z+
    1d24:	00 20       	and	r0, r0
    1d26:	e9 f7       	brne	.-6      	; 0x1d22 <_ZN6StringaSEPKc+0xe>
    1d28:	31 97       	sbiw	r30, 0x01	; 1
    1d2a:	af 01       	movw	r20, r30
    1d2c:	46 1b       	sub	r20, r22
    1d2e:	57 0b       	sbc	r21, r23
    1d30:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <_ZN6String4copyEPKcj>
    1d34:	02 c0       	rjmp	.+4      	; 0x1d3a <_ZN6StringaSEPKc+0x26>
    1d36:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <_ZN6String10invalidateEv>
    1d3a:	ce 01       	movw	r24, r28
    1d3c:	df 91       	pop	r29
    1d3e:	cf 91       	pop	r28
    1d40:	08 95       	ret

00001d42 <_ZN6StringC1Elh>:

String::String(long value, unsigned char base)
    1d42:	0f 93       	push	r16
    1d44:	1f 93       	push	r17
    1d46:	cf 93       	push	r28
    1d48:	df 93       	push	r29
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
    1d4e:	a2 97       	sbiw	r28, 0x22	; 34
    1d50:	0f b6       	in	r0, 0x3f	; 63
    1d52:	f8 94       	cli
    1d54:	de bf       	out	0x3e, r29	; 62
    1d56:	0f be       	out	0x3f, r0	; 63
    1d58:	cd bf       	out	0x3d, r28	; 61
    1d5a:	8c 01       	movw	r16, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	ba 01       	movw	r22, r20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    1d60:	f8 01       	movw	r30, r16
    1d62:	11 82       	std	Z+1, r1	; 0x01
    1d64:	10 82       	st	Z, r1
	capacity = 0;
    1d66:	13 82       	std	Z+3, r1	; 0x03
    1d68:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    1d6a:	15 82       	std	Z+5, r1	; 0x05
    1d6c:	14 82       	std	Z+4, r1	; 0x04
extern __inline__ __ATTR_GNU_INLINE__
char *ltoa (long __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__ltoa (long, char *, int);
	return __ltoa (__val, __s, __radix);
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	ae 01       	movw	r20, r28
    1d72:	4f 5f       	subi	r20, 0xFF	; 255
    1d74:	5f 4f       	sbci	r21, 0xFF	; 255
    1d76:	0e 94 51 11 	call	0x22a2	; 0x22a2 <ltoa>
String::String(long value, unsigned char base)
{
	init();
	char buf[2 + 8 * sizeof(long)];
	ltoa(value, buf, base);
	*this = buf;
    1d7a:	be 01       	movw	r22, r28
    1d7c:	6f 5f       	subi	r22, 0xFF	; 255
    1d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d80:	c8 01       	movw	r24, r16
    1d82:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <_ZN6StringaSEPKc>
}
    1d86:	a2 96       	adiw	r28, 0x22	; 34
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
    1d92:	df 91       	pop	r29
    1d94:	cf 91       	pop	r28
    1d96:	1f 91       	pop	r17
    1d98:	0f 91       	pop	r16
    1d9a:	08 95       	ret

00001d9c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1d9c:	08 95       	ret

00001d9e <__udivmodhi4>:
    1d9e:	aa 1b       	sub	r26, r26
    1da0:	bb 1b       	sub	r27, r27
    1da2:	51 e1       	ldi	r21, 0x11	; 17
    1da4:	07 c0       	rjmp	.+14     	; 0x1db4 <__udivmodhi4_ep>

00001da6 <__udivmodhi4_loop>:
    1da6:	aa 1f       	adc	r26, r26
    1da8:	bb 1f       	adc	r27, r27
    1daa:	a6 17       	cp	r26, r22
    1dac:	b7 07       	cpc	r27, r23
    1dae:	10 f0       	brcs	.+4      	; 0x1db4 <__udivmodhi4_ep>
    1db0:	a6 1b       	sub	r26, r22
    1db2:	b7 0b       	sbc	r27, r23

00001db4 <__udivmodhi4_ep>:
    1db4:	88 1f       	adc	r24, r24
    1db6:	99 1f       	adc	r25, r25
    1db8:	5a 95       	dec	r21
    1dba:	a9 f7       	brne	.-22     	; 0x1da6 <__udivmodhi4_loop>
    1dbc:	80 95       	com	r24
    1dbe:	90 95       	com	r25
    1dc0:	bc 01       	movw	r22, r24
    1dc2:	cd 01       	movw	r24, r26
    1dc4:	08 95       	ret

00001dc6 <__divmodsi4>:
    1dc6:	05 2e       	mov	r0, r21
    1dc8:	97 fb       	bst	r25, 7
    1dca:	1e f4       	brtc	.+6      	; 0x1dd2 <__divmodsi4+0xc>
    1dcc:	00 94       	com	r0
    1dce:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <__negsi2>
    1dd2:	57 fd       	sbrc	r21, 7
    1dd4:	07 d0       	rcall	.+14     	; 0x1de4 <__divmodsi4_neg2>
    1dd6:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <__udivmodsi4>
    1dda:	07 fc       	sbrc	r0, 7
    1ddc:	03 d0       	rcall	.+6      	; 0x1de4 <__divmodsi4_neg2>
    1dde:	4e f4       	brtc	.+18     	; 0x1df2 <__divmodsi4_exit>
    1de0:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <__negsi2>

00001de4 <__divmodsi4_neg2>:
    1de4:	50 95       	com	r21
    1de6:	40 95       	com	r20
    1de8:	30 95       	com	r19
    1dea:	21 95       	neg	r18
    1dec:	3f 4f       	sbci	r19, 0xFF	; 255
    1dee:	4f 4f       	sbci	r20, 0xFF	; 255
    1df0:	5f 4f       	sbci	r21, 0xFF	; 255

00001df2 <__divmodsi4_exit>:
    1df2:	08 95       	ret

00001df4 <__negsi2>:
    1df4:	90 95       	com	r25
    1df6:	80 95       	com	r24
    1df8:	70 95       	com	r23
    1dfa:	61 95       	neg	r22
    1dfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1dfe:	8f 4f       	sbci	r24, 0xFF	; 255
    1e00:	9f 4f       	sbci	r25, 0xFF	; 255
    1e02:	08 95       	ret

00001e04 <__udivmodsi4>:
    1e04:	a1 e2       	ldi	r26, 0x21	; 33
    1e06:	1a 2e       	mov	r1, r26
    1e08:	aa 1b       	sub	r26, r26
    1e0a:	bb 1b       	sub	r27, r27
    1e0c:	fd 01       	movw	r30, r26
    1e0e:	0d c0       	rjmp	.+26     	; 0x1e2a <__udivmodsi4_ep>

00001e10 <__udivmodsi4_loop>:
    1e10:	aa 1f       	adc	r26, r26
    1e12:	bb 1f       	adc	r27, r27
    1e14:	ee 1f       	adc	r30, r30
    1e16:	ff 1f       	adc	r31, r31
    1e18:	a2 17       	cp	r26, r18
    1e1a:	b3 07       	cpc	r27, r19
    1e1c:	e4 07       	cpc	r30, r20
    1e1e:	f5 07       	cpc	r31, r21
    1e20:	20 f0       	brcs	.+8      	; 0x1e2a <__udivmodsi4_ep>
    1e22:	a2 1b       	sub	r26, r18
    1e24:	b3 0b       	sbc	r27, r19
    1e26:	e4 0b       	sbc	r30, r20
    1e28:	f5 0b       	sbc	r31, r21

00001e2a <__udivmodsi4_ep>:
    1e2a:	66 1f       	adc	r22, r22
    1e2c:	77 1f       	adc	r23, r23
    1e2e:	88 1f       	adc	r24, r24
    1e30:	99 1f       	adc	r25, r25
    1e32:	1a 94       	dec	r1
    1e34:	69 f7       	brne	.-38     	; 0x1e10 <__udivmodsi4_loop>
    1e36:	60 95       	com	r22
    1e38:	70 95       	com	r23
    1e3a:	80 95       	com	r24
    1e3c:	90 95       	com	r25
    1e3e:	9b 01       	movw	r18, r22
    1e40:	ac 01       	movw	r20, r24
    1e42:	bd 01       	movw	r22, r26
    1e44:	cf 01       	movw	r24, r30
    1e46:	08 95       	ret

00001e48 <__tablejump2__>:
    1e48:	ee 0f       	add	r30, r30
    1e4a:	ff 1f       	adc	r31, r31
    1e4c:	05 90       	lpm	r0, Z+
    1e4e:	f4 91       	lpm	r31, Z
    1e50:	e0 2d       	mov	r30, r0
    1e52:	09 94       	ijmp

00001e54 <malloc>:
    1e54:	0f 93       	push	r16
    1e56:	1f 93       	push	r17
    1e58:	cf 93       	push	r28
    1e5a:	df 93       	push	r29
    1e5c:	82 30       	cpi	r24, 0x02	; 2
    1e5e:	91 05       	cpc	r25, r1
    1e60:	10 f4       	brcc	.+4      	; 0x1e66 <malloc+0x12>
    1e62:	82 e0       	ldi	r24, 0x02	; 2
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	e0 91 65 02 	lds	r30, 0x0265	; 0x800265 <__flp>
    1e6a:	f0 91 66 02 	lds	r31, 0x0266	; 0x800266 <__flp+0x1>
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	a0 e0       	ldi	r26, 0x00	; 0
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	30 97       	sbiw	r30, 0x00	; 0
    1e78:	19 f1       	breq	.+70     	; 0x1ec0 <malloc+0x6c>
    1e7a:	40 81       	ld	r20, Z
    1e7c:	51 81       	ldd	r21, Z+1	; 0x01
    1e7e:	02 81       	ldd	r16, Z+2	; 0x02
    1e80:	13 81       	ldd	r17, Z+3	; 0x03
    1e82:	48 17       	cp	r20, r24
    1e84:	59 07       	cpc	r21, r25
    1e86:	c8 f0       	brcs	.+50     	; 0x1eba <malloc+0x66>
    1e88:	84 17       	cp	r24, r20
    1e8a:	95 07       	cpc	r25, r21
    1e8c:	69 f4       	brne	.+26     	; 0x1ea8 <malloc+0x54>
    1e8e:	10 97       	sbiw	r26, 0x00	; 0
    1e90:	31 f0       	breq	.+12     	; 0x1e9e <malloc+0x4a>
    1e92:	12 96       	adiw	r26, 0x02	; 2
    1e94:	0c 93       	st	X, r16
    1e96:	12 97       	sbiw	r26, 0x02	; 2
    1e98:	13 96       	adiw	r26, 0x03	; 3
    1e9a:	1c 93       	st	X, r17
    1e9c:	27 c0       	rjmp	.+78     	; 0x1eec <malloc+0x98>
    1e9e:	00 93 65 02 	sts	0x0265, r16	; 0x800265 <__flp>
    1ea2:	10 93 66 02 	sts	0x0266, r17	; 0x800266 <__flp+0x1>
    1ea6:	22 c0       	rjmp	.+68     	; 0x1eec <malloc+0x98>
    1ea8:	21 15       	cp	r18, r1
    1eaa:	31 05       	cpc	r19, r1
    1eac:	19 f0       	breq	.+6      	; 0x1eb4 <malloc+0x60>
    1eae:	42 17       	cp	r20, r18
    1eb0:	53 07       	cpc	r21, r19
    1eb2:	18 f4       	brcc	.+6      	; 0x1eba <malloc+0x66>
    1eb4:	9a 01       	movw	r18, r20
    1eb6:	bd 01       	movw	r22, r26
    1eb8:	ef 01       	movw	r28, r30
    1eba:	df 01       	movw	r26, r30
    1ebc:	f8 01       	movw	r30, r16
    1ebe:	db cf       	rjmp	.-74     	; 0x1e76 <malloc+0x22>
    1ec0:	21 15       	cp	r18, r1
    1ec2:	31 05       	cpc	r19, r1
    1ec4:	f9 f0       	breq	.+62     	; 0x1f04 <malloc+0xb0>
    1ec6:	28 1b       	sub	r18, r24
    1ec8:	39 0b       	sbc	r19, r25
    1eca:	24 30       	cpi	r18, 0x04	; 4
    1ecc:	31 05       	cpc	r19, r1
    1ece:	80 f4       	brcc	.+32     	; 0x1ef0 <malloc+0x9c>
    1ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed4:	61 15       	cp	r22, r1
    1ed6:	71 05       	cpc	r23, r1
    1ed8:	21 f0       	breq	.+8      	; 0x1ee2 <malloc+0x8e>
    1eda:	fb 01       	movw	r30, r22
    1edc:	93 83       	std	Z+3, r25	; 0x03
    1ede:	82 83       	std	Z+2, r24	; 0x02
    1ee0:	04 c0       	rjmp	.+8      	; 0x1eea <malloc+0x96>
    1ee2:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <__flp+0x1>
    1ee6:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <__flp>
    1eea:	fe 01       	movw	r30, r28
    1eec:	32 96       	adiw	r30, 0x02	; 2
    1eee:	44 c0       	rjmp	.+136    	; 0x1f78 <malloc+0x124>
    1ef0:	fe 01       	movw	r30, r28
    1ef2:	e2 0f       	add	r30, r18
    1ef4:	f3 1f       	adc	r31, r19
    1ef6:	81 93       	st	Z+, r24
    1ef8:	91 93       	st	Z+, r25
    1efa:	22 50       	subi	r18, 0x02	; 2
    1efc:	31 09       	sbc	r19, r1
    1efe:	39 83       	std	Y+1, r19	; 0x01
    1f00:	28 83       	st	Y, r18
    1f02:	3a c0       	rjmp	.+116    	; 0x1f78 <malloc+0x124>
    1f04:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <__brkval>
    1f08:	30 91 64 02 	lds	r19, 0x0264	; 0x800264 <__brkval+0x1>
    1f0c:	23 2b       	or	r18, r19
    1f0e:	41 f4       	brne	.+16     	; 0x1f20 <malloc+0xcc>
    1f10:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1f14:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1f18:	30 93 64 02 	sts	0x0264, r19	; 0x800264 <__brkval+0x1>
    1f1c:	20 93 63 02 	sts	0x0263, r18	; 0x800263 <__brkval>
    1f20:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1f24:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1f28:	21 15       	cp	r18, r1
    1f2a:	31 05       	cpc	r19, r1
    1f2c:	41 f4       	brne	.+16     	; 0x1f3e <malloc+0xea>
    1f2e:	2d b7       	in	r18, 0x3d	; 61
    1f30:	3e b7       	in	r19, 0x3e	; 62
    1f32:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1f36:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1f3a:	24 1b       	sub	r18, r20
    1f3c:	35 0b       	sbc	r19, r21
    1f3e:	e0 91 63 02 	lds	r30, 0x0263	; 0x800263 <__brkval>
    1f42:	f0 91 64 02 	lds	r31, 0x0264	; 0x800264 <__brkval+0x1>
    1f46:	e2 17       	cp	r30, r18
    1f48:	f3 07       	cpc	r31, r19
    1f4a:	a0 f4       	brcc	.+40     	; 0x1f74 <malloc+0x120>
    1f4c:	2e 1b       	sub	r18, r30
    1f4e:	3f 0b       	sbc	r19, r31
    1f50:	28 17       	cp	r18, r24
    1f52:	39 07       	cpc	r19, r25
    1f54:	78 f0       	brcs	.+30     	; 0x1f74 <malloc+0x120>
    1f56:	ac 01       	movw	r20, r24
    1f58:	4e 5f       	subi	r20, 0xFE	; 254
    1f5a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f5c:	24 17       	cp	r18, r20
    1f5e:	35 07       	cpc	r19, r21
    1f60:	48 f0       	brcs	.+18     	; 0x1f74 <malloc+0x120>
    1f62:	4e 0f       	add	r20, r30
    1f64:	5f 1f       	adc	r21, r31
    1f66:	50 93 64 02 	sts	0x0264, r21	; 0x800264 <__brkval+0x1>
    1f6a:	40 93 63 02 	sts	0x0263, r20	; 0x800263 <__brkval>
    1f6e:	81 93       	st	Z+, r24
    1f70:	91 93       	st	Z+, r25
    1f72:	02 c0       	rjmp	.+4      	; 0x1f78 <malloc+0x124>
    1f74:	e0 e0       	ldi	r30, 0x00	; 0
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	cf 01       	movw	r24, r30
    1f7a:	df 91       	pop	r29
    1f7c:	cf 91       	pop	r28
    1f7e:	1f 91       	pop	r17
    1f80:	0f 91       	pop	r16
    1f82:	08 95       	ret

00001f84 <free>:
    1f84:	cf 93       	push	r28
    1f86:	df 93       	push	r29
    1f88:	00 97       	sbiw	r24, 0x00	; 0
    1f8a:	09 f4       	brne	.+2      	; 0x1f8e <free+0xa>
    1f8c:	81 c0       	rjmp	.+258    	; 0x2090 <free+0x10c>
    1f8e:	fc 01       	movw	r30, r24
    1f90:	32 97       	sbiw	r30, 0x02	; 2
    1f92:	13 82       	std	Z+3, r1	; 0x03
    1f94:	12 82       	std	Z+2, r1	; 0x02
    1f96:	a0 91 65 02 	lds	r26, 0x0265	; 0x800265 <__flp>
    1f9a:	b0 91 66 02 	lds	r27, 0x0266	; 0x800266 <__flp+0x1>
    1f9e:	10 97       	sbiw	r26, 0x00	; 0
    1fa0:	81 f4       	brne	.+32     	; 0x1fc2 <free+0x3e>
    1fa2:	20 81       	ld	r18, Z
    1fa4:	31 81       	ldd	r19, Z+1	; 0x01
    1fa6:	82 0f       	add	r24, r18
    1fa8:	93 1f       	adc	r25, r19
    1faa:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <__brkval>
    1fae:	30 91 64 02 	lds	r19, 0x0264	; 0x800264 <__brkval+0x1>
    1fb2:	28 17       	cp	r18, r24
    1fb4:	39 07       	cpc	r19, r25
    1fb6:	51 f5       	brne	.+84     	; 0x200c <free+0x88>
    1fb8:	f0 93 64 02 	sts	0x0264, r31	; 0x800264 <__brkval+0x1>
    1fbc:	e0 93 63 02 	sts	0x0263, r30	; 0x800263 <__brkval>
    1fc0:	67 c0       	rjmp	.+206    	; 0x2090 <free+0x10c>
    1fc2:	ed 01       	movw	r28, r26
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	ce 17       	cp	r28, r30
    1fca:	df 07       	cpc	r29, r31
    1fcc:	40 f4       	brcc	.+16     	; 0x1fde <free+0x5a>
    1fce:	4a 81       	ldd	r20, Y+2	; 0x02
    1fd0:	5b 81       	ldd	r21, Y+3	; 0x03
    1fd2:	9e 01       	movw	r18, r28
    1fd4:	41 15       	cp	r20, r1
    1fd6:	51 05       	cpc	r21, r1
    1fd8:	f1 f0       	breq	.+60     	; 0x2016 <free+0x92>
    1fda:	ea 01       	movw	r28, r20
    1fdc:	f5 cf       	rjmp	.-22     	; 0x1fc8 <free+0x44>
    1fde:	d3 83       	std	Z+3, r29	; 0x03
    1fe0:	c2 83       	std	Z+2, r28	; 0x02
    1fe2:	40 81       	ld	r20, Z
    1fe4:	51 81       	ldd	r21, Z+1	; 0x01
    1fe6:	84 0f       	add	r24, r20
    1fe8:	95 1f       	adc	r25, r21
    1fea:	c8 17       	cp	r28, r24
    1fec:	d9 07       	cpc	r29, r25
    1fee:	59 f4       	brne	.+22     	; 0x2006 <free+0x82>
    1ff0:	88 81       	ld	r24, Y
    1ff2:	99 81       	ldd	r25, Y+1	; 0x01
    1ff4:	84 0f       	add	r24, r20
    1ff6:	95 1f       	adc	r25, r21
    1ff8:	02 96       	adiw	r24, 0x02	; 2
    1ffa:	91 83       	std	Z+1, r25	; 0x01
    1ffc:	80 83       	st	Z, r24
    1ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    2000:	9b 81       	ldd	r25, Y+3	; 0x03
    2002:	93 83       	std	Z+3, r25	; 0x03
    2004:	82 83       	std	Z+2, r24	; 0x02
    2006:	21 15       	cp	r18, r1
    2008:	31 05       	cpc	r19, r1
    200a:	29 f4       	brne	.+10     	; 0x2016 <free+0x92>
    200c:	f0 93 66 02 	sts	0x0266, r31	; 0x800266 <__flp+0x1>
    2010:	e0 93 65 02 	sts	0x0265, r30	; 0x800265 <__flp>
    2014:	3d c0       	rjmp	.+122    	; 0x2090 <free+0x10c>
    2016:	e9 01       	movw	r28, r18
    2018:	fb 83       	std	Y+3, r31	; 0x03
    201a:	ea 83       	std	Y+2, r30	; 0x02
    201c:	49 91       	ld	r20, Y+
    201e:	59 91       	ld	r21, Y+
    2020:	c4 0f       	add	r28, r20
    2022:	d5 1f       	adc	r29, r21
    2024:	ec 17       	cp	r30, r28
    2026:	fd 07       	cpc	r31, r29
    2028:	61 f4       	brne	.+24     	; 0x2042 <free+0xbe>
    202a:	80 81       	ld	r24, Z
    202c:	91 81       	ldd	r25, Z+1	; 0x01
    202e:	84 0f       	add	r24, r20
    2030:	95 1f       	adc	r25, r21
    2032:	02 96       	adiw	r24, 0x02	; 2
    2034:	e9 01       	movw	r28, r18
    2036:	99 83       	std	Y+1, r25	; 0x01
    2038:	88 83       	st	Y, r24
    203a:	82 81       	ldd	r24, Z+2	; 0x02
    203c:	93 81       	ldd	r25, Z+3	; 0x03
    203e:	9b 83       	std	Y+3, r25	; 0x03
    2040:	8a 83       	std	Y+2, r24	; 0x02
    2042:	e0 e0       	ldi	r30, 0x00	; 0
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	12 96       	adiw	r26, 0x02	; 2
    2048:	8d 91       	ld	r24, X+
    204a:	9c 91       	ld	r25, X
    204c:	13 97       	sbiw	r26, 0x03	; 3
    204e:	00 97       	sbiw	r24, 0x00	; 0
    2050:	19 f0       	breq	.+6      	; 0x2058 <free+0xd4>
    2052:	fd 01       	movw	r30, r26
    2054:	dc 01       	movw	r26, r24
    2056:	f7 cf       	rjmp	.-18     	; 0x2046 <free+0xc2>
    2058:	8d 91       	ld	r24, X+
    205a:	9c 91       	ld	r25, X
    205c:	11 97       	sbiw	r26, 0x01	; 1
    205e:	9d 01       	movw	r18, r26
    2060:	2e 5f       	subi	r18, 0xFE	; 254
    2062:	3f 4f       	sbci	r19, 0xFF	; 255
    2064:	82 0f       	add	r24, r18
    2066:	93 1f       	adc	r25, r19
    2068:	20 91 63 02 	lds	r18, 0x0263	; 0x800263 <__brkval>
    206c:	30 91 64 02 	lds	r19, 0x0264	; 0x800264 <__brkval+0x1>
    2070:	28 17       	cp	r18, r24
    2072:	39 07       	cpc	r19, r25
    2074:	69 f4       	brne	.+26     	; 0x2090 <free+0x10c>
    2076:	30 97       	sbiw	r30, 0x00	; 0
    2078:	29 f4       	brne	.+10     	; 0x2084 <free+0x100>
    207a:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <__flp+0x1>
    207e:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <__flp>
    2082:	02 c0       	rjmp	.+4      	; 0x2088 <free+0x104>
    2084:	13 82       	std	Z+3, r1	; 0x03
    2086:	12 82       	std	Z+2, r1	; 0x02
    2088:	b0 93 64 02 	sts	0x0264, r27	; 0x800264 <__brkval+0x1>
    208c:	a0 93 63 02 	sts	0x0263, r26	; 0x800263 <__brkval>
    2090:	df 91       	pop	r29
    2092:	cf 91       	pop	r28
    2094:	08 95       	ret

00002096 <realloc>:
    2096:	a0 e0       	ldi	r26, 0x00	; 0
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	e1 e5       	ldi	r30, 0x51	; 81
    209c:	f0 e1       	ldi	r31, 0x10	; 16
    209e:	0c 94 08 12 	jmp	0x2410	; 0x2410 <__prologue_saves__+0x8>
    20a2:	ec 01       	movw	r28, r24
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	21 f4       	brne	.+8      	; 0x20b0 <realloc+0x1a>
    20a8:	cb 01       	movw	r24, r22
    20aa:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <malloc>
    20ae:	b4 c0       	rjmp	.+360    	; 0x2218 <realloc+0x182>
    20b0:	fc 01       	movw	r30, r24
    20b2:	e6 0f       	add	r30, r22
    20b4:	f7 1f       	adc	r31, r23
    20b6:	9c 01       	movw	r18, r24
    20b8:	22 50       	subi	r18, 0x02	; 2
    20ba:	31 09       	sbc	r19, r1
    20bc:	e2 17       	cp	r30, r18
    20be:	f3 07       	cpc	r31, r19
    20c0:	08 f4       	brcc	.+2      	; 0x20c4 <realloc+0x2e>
    20c2:	a8 c0       	rjmp	.+336    	; 0x2214 <realloc+0x17e>
    20c4:	d9 01       	movw	r26, r18
    20c6:	0d 91       	ld	r16, X+
    20c8:	1c 91       	ld	r17, X
    20ca:	11 97       	sbiw	r26, 0x01	; 1
    20cc:	06 17       	cp	r16, r22
    20ce:	17 07       	cpc	r17, r23
    20d0:	b0 f0       	brcs	.+44     	; 0x20fe <realloc+0x68>
    20d2:	05 30       	cpi	r16, 0x05	; 5
    20d4:	11 05       	cpc	r17, r1
    20d6:	08 f4       	brcc	.+2      	; 0x20da <realloc+0x44>
    20d8:	9b c0       	rjmp	.+310    	; 0x2210 <realloc+0x17a>
    20da:	c8 01       	movw	r24, r16
    20dc:	04 97       	sbiw	r24, 0x04	; 4
    20de:	86 17       	cp	r24, r22
    20e0:	97 07       	cpc	r25, r23
    20e2:	08 f4       	brcc	.+2      	; 0x20e6 <realloc+0x50>
    20e4:	95 c0       	rjmp	.+298    	; 0x2210 <realloc+0x17a>
    20e6:	02 50       	subi	r16, 0x02	; 2
    20e8:	11 09       	sbc	r17, r1
    20ea:	06 1b       	sub	r16, r22
    20ec:	17 0b       	sbc	r17, r23
    20ee:	01 93       	st	Z+, r16
    20f0:	11 93       	st	Z+, r17
    20f2:	6d 93       	st	X+, r22
    20f4:	7c 93       	st	X, r23
    20f6:	cf 01       	movw	r24, r30
    20f8:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <free>
    20fc:	89 c0       	rjmp	.+274    	; 0x2210 <realloc+0x17a>
    20fe:	5b 01       	movw	r10, r22
    2100:	a0 1a       	sub	r10, r16
    2102:	b1 0a       	sbc	r11, r17
    2104:	4c 01       	movw	r8, r24
    2106:	80 0e       	add	r8, r16
    2108:	91 1e       	adc	r9, r17
    210a:	a0 91 65 02 	lds	r26, 0x0265	; 0x800265 <__flp>
    210e:	b0 91 66 02 	lds	r27, 0x0266	; 0x800266 <__flp+0x1>
    2112:	61 2c       	mov	r6, r1
    2114:	71 2c       	mov	r7, r1
    2116:	e1 2c       	mov	r14, r1
    2118:	f1 2c       	mov	r15, r1
    211a:	10 97       	sbiw	r26, 0x00	; 0
    211c:	09 f4       	brne	.+2      	; 0x2120 <realloc+0x8a>
    211e:	46 c0       	rjmp	.+140    	; 0x21ac <realloc+0x116>
    2120:	8d 91       	ld	r24, X+
    2122:	9c 91       	ld	r25, X
    2124:	11 97       	sbiw	r26, 0x01	; 1
    2126:	a8 15       	cp	r26, r8
    2128:	b9 05       	cpc	r27, r9
    212a:	b1 f5       	brne	.+108    	; 0x2198 <realloc+0x102>
    212c:	6c 01       	movw	r12, r24
    212e:	42 e0       	ldi	r20, 0x02	; 2
    2130:	c4 0e       	add	r12, r20
    2132:	d1 1c       	adc	r13, r1
    2134:	ca 14       	cp	r12, r10
    2136:	db 04       	cpc	r13, r11
    2138:	78 f1       	brcs	.+94     	; 0x2198 <realloc+0x102>
    213a:	4c 01       	movw	r8, r24
    213c:	8a 18       	sub	r8, r10
    213e:	9b 08       	sbc	r9, r11
    2140:	64 01       	movw	r12, r8
    2142:	42 e0       	ldi	r20, 0x02	; 2
    2144:	c4 0e       	add	r12, r20
    2146:	d1 1c       	adc	r13, r1
    2148:	12 96       	adiw	r26, 0x02	; 2
    214a:	bc 90       	ld	r11, X
    214c:	12 97       	sbiw	r26, 0x02	; 2
    214e:	13 96       	adiw	r26, 0x03	; 3
    2150:	ac 91       	ld	r26, X
    2152:	b5 e0       	ldi	r27, 0x05	; 5
    2154:	cb 16       	cp	r12, r27
    2156:	d1 04       	cpc	r13, r1
    2158:	40 f0       	brcs	.+16     	; 0x216a <realloc+0xd4>
    215a:	b2 82       	std	Z+2, r11	; 0x02
    215c:	a3 83       	std	Z+3, r26	; 0x03
    215e:	91 82       	std	Z+1, r9	; 0x01
    2160:	80 82       	st	Z, r8
    2162:	d9 01       	movw	r26, r18
    2164:	6d 93       	st	X+, r22
    2166:	7c 93       	st	X, r23
    2168:	09 c0       	rjmp	.+18     	; 0x217c <realloc+0xe6>
    216a:	0e 5f       	subi	r16, 0xFE	; 254
    216c:	1f 4f       	sbci	r17, 0xFF	; 255
    216e:	80 0f       	add	r24, r16
    2170:	91 1f       	adc	r25, r17
    2172:	f9 01       	movw	r30, r18
    2174:	91 83       	std	Z+1, r25	; 0x01
    2176:	80 83       	st	Z, r24
    2178:	eb 2d       	mov	r30, r11
    217a:	fa 2f       	mov	r31, r26
    217c:	e1 14       	cp	r14, r1
    217e:	f1 04       	cpc	r15, r1
    2180:	31 f0       	breq	.+12     	; 0x218e <realloc+0xf8>
    2182:	d7 01       	movw	r26, r14
    2184:	13 96       	adiw	r26, 0x03	; 3
    2186:	fc 93       	st	X, r31
    2188:	ee 93       	st	-X, r30
    218a:	12 97       	sbiw	r26, 0x02	; 2
    218c:	41 c0       	rjmp	.+130    	; 0x2210 <realloc+0x17a>
    218e:	f0 93 66 02 	sts	0x0266, r31	; 0x800266 <__flp+0x1>
    2192:	e0 93 65 02 	sts	0x0265, r30	; 0x800265 <__flp>
    2196:	3c c0       	rjmp	.+120    	; 0x2210 <realloc+0x17a>
    2198:	68 16       	cp	r6, r24
    219a:	79 06       	cpc	r7, r25
    219c:	08 f4       	brcc	.+2      	; 0x21a0 <realloc+0x10a>
    219e:	3c 01       	movw	r6, r24
    21a0:	7d 01       	movw	r14, r26
    21a2:	12 96       	adiw	r26, 0x02	; 2
    21a4:	0d 90       	ld	r0, X+
    21a6:	bc 91       	ld	r27, X
    21a8:	a0 2d       	mov	r26, r0
    21aa:	b7 cf       	rjmp	.-146    	; 0x211a <realloc+0x84>
    21ac:	80 91 63 02 	lds	r24, 0x0263	; 0x800263 <__brkval>
    21b0:	90 91 64 02 	lds	r25, 0x0264	; 0x800264 <__brkval+0x1>
    21b4:	88 16       	cp	r8, r24
    21b6:	99 06       	cpc	r9, r25
    21b8:	e1 f4       	brne	.+56     	; 0x21f2 <realloc+0x15c>
    21ba:	66 16       	cp	r6, r22
    21bc:	77 06       	cpc	r7, r23
    21be:	c8 f4       	brcc	.+50     	; 0x21f2 <realloc+0x15c>
    21c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    21c4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    21c8:	00 97       	sbiw	r24, 0x00	; 0
    21ca:	41 f4       	brne	.+16     	; 0x21dc <realloc+0x146>
    21cc:	8d b7       	in	r24, 0x3d	; 61
    21ce:	9e b7       	in	r25, 0x3e	; 62
    21d0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    21d4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    21d8:	84 1b       	sub	r24, r20
    21da:	95 0b       	sbc	r25, r21
    21dc:	e8 17       	cp	r30, r24
    21de:	f9 07       	cpc	r31, r25
    21e0:	c8 f4       	brcc	.+50     	; 0x2214 <realloc+0x17e>
    21e2:	f0 93 64 02 	sts	0x0264, r31	; 0x800264 <__brkval+0x1>
    21e6:	e0 93 63 02 	sts	0x0263, r30	; 0x800263 <__brkval>
    21ea:	f9 01       	movw	r30, r18
    21ec:	71 83       	std	Z+1, r23	; 0x01
    21ee:	60 83       	st	Z, r22
    21f0:	0f c0       	rjmp	.+30     	; 0x2210 <realloc+0x17a>
    21f2:	cb 01       	movw	r24, r22
    21f4:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <malloc>
    21f8:	7c 01       	movw	r14, r24
    21fa:	00 97       	sbiw	r24, 0x00	; 0
    21fc:	59 f0       	breq	.+22     	; 0x2214 <realloc+0x17e>
    21fe:	a8 01       	movw	r20, r16
    2200:	be 01       	movw	r22, r28
    2202:	0e 94 41 11 	call	0x2282	; 0x2282 <memcpy>
    2206:	ce 01       	movw	r24, r28
    2208:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <free>
    220c:	c7 01       	movw	r24, r14
    220e:	04 c0       	rjmp	.+8      	; 0x2218 <realloc+0x182>
    2210:	ce 01       	movw	r24, r28
    2212:	02 c0       	rjmp	.+4      	; 0x2218 <realloc+0x182>
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
    221c:	ee e0       	ldi	r30, 0x0E	; 14
    221e:	0c 94 24 12 	jmp	0x2448	; 0x2448 <__epilogue_restores__+0x8>

00002222 <atol>:
    2222:	1f 93       	push	r17
    2224:	fc 01       	movw	r30, r24
    2226:	99 27       	eor	r25, r25
    2228:	88 27       	eor	r24, r24
    222a:	bc 01       	movw	r22, r24
    222c:	e8 94       	clt
    222e:	11 91       	ld	r17, Z+
    2230:	10 32       	cpi	r17, 0x20	; 32
    2232:	e9 f3       	breq	.-6      	; 0x222e <atol+0xc>
    2234:	19 30       	cpi	r17, 0x09	; 9
    2236:	10 f0       	brcs	.+4      	; 0x223c <atol+0x1a>
    2238:	1e 30       	cpi	r17, 0x0E	; 14
    223a:	c8 f3       	brcs	.-14     	; 0x222e <atol+0xc>
    223c:	1b 32       	cpi	r17, 0x2B	; 43
    223e:	51 f0       	breq	.+20     	; 0x2254 <atol+0x32>
    2240:	1d 32       	cpi	r17, 0x2D	; 45
    2242:	49 f4       	brne	.+18     	; 0x2256 <atol+0x34>
    2244:	68 94       	set
    2246:	06 c0       	rjmp	.+12     	; 0x2254 <atol+0x32>
    2248:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__mulsi_const_10>
    224c:	61 0f       	add	r22, r17
    224e:	71 1d       	adc	r23, r1
    2250:	81 1d       	adc	r24, r1
    2252:	91 1d       	adc	r25, r1
    2254:	11 91       	ld	r17, Z+
    2256:	10 53       	subi	r17, 0x30	; 48
    2258:	1a 30       	cpi	r17, 0x0A	; 10
    225a:	b0 f3       	brcs	.-20     	; 0x2248 <atol+0x26>
    225c:	3e f4       	brtc	.+14     	; 0x226c <atol+0x4a>
    225e:	90 95       	com	r25
    2260:	80 95       	com	r24
    2262:	70 95       	com	r23
    2264:	61 95       	neg	r22
    2266:	7f 4f       	sbci	r23, 0xFF	; 255
    2268:	8f 4f       	sbci	r24, 0xFF	; 255
    226a:	9f 4f       	sbci	r25, 0xFF	; 255
    226c:	1f 91       	pop	r17
    226e:	08 95       	ret

00002270 <memcpy_P>:
    2270:	fb 01       	movw	r30, r22
    2272:	dc 01       	movw	r26, r24
    2274:	02 c0       	rjmp	.+4      	; 0x227a <memcpy_P+0xa>
    2276:	05 90       	lpm	r0, Z+
    2278:	0d 92       	st	X+, r0
    227a:	41 50       	subi	r20, 0x01	; 1
    227c:	50 40       	sbci	r21, 0x00	; 0
    227e:	d8 f7       	brcc	.-10     	; 0x2276 <memcpy_P+0x6>
    2280:	08 95       	ret

00002282 <memcpy>:
    2282:	fb 01       	movw	r30, r22
    2284:	dc 01       	movw	r26, r24
    2286:	02 c0       	rjmp	.+4      	; 0x228c <memcpy+0xa>
    2288:	01 90       	ld	r0, Z+
    228a:	0d 92       	st	X+, r0
    228c:	41 50       	subi	r20, 0x01	; 1
    228e:	50 40       	sbci	r21, 0x00	; 0
    2290:	d8 f7       	brcc	.-10     	; 0x2288 <memcpy+0x6>
    2292:	08 95       	ret

00002294 <strcpy>:
    2294:	fb 01       	movw	r30, r22
    2296:	dc 01       	movw	r26, r24
    2298:	01 90       	ld	r0, Z+
    229a:	0d 92       	st	X+, r0
    229c:	00 20       	and	r0, r0
    229e:	e1 f7       	brne	.-8      	; 0x2298 <strcpy+0x4>
    22a0:	08 95       	ret

000022a2 <ltoa>:
    22a2:	25 32       	cpi	r18, 0x25	; 37
    22a4:	31 05       	cpc	r19, r1
    22a6:	20 f4       	brcc	.+8      	; 0x22b0 <ltoa+0xe>
    22a8:	22 30       	cpi	r18, 0x02	; 2
    22aa:	10 f0       	brcs	.+4      	; 0x22b0 <ltoa+0xe>
    22ac:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__ltoa_ncheck>
    22b0:	fa 01       	movw	r30, r20
    22b2:	10 82       	st	Z, r1
    22b4:	ca 01       	movw	r24, r20
    22b6:	08 95       	ret

000022b8 <__ltoa_ncheck>:
    22b8:	bb 27       	eor	r27, r27
    22ba:	2a 30       	cpi	r18, 0x0A	; 10
    22bc:	51 f4       	brne	.+20     	; 0x22d2 <__ltoa_ncheck+0x1a>
    22be:	99 23       	and	r25, r25
    22c0:	42 f4       	brpl	.+16     	; 0x22d2 <__ltoa_ncheck+0x1a>
    22c2:	bd e2       	ldi	r27, 0x2D	; 45
    22c4:	90 95       	com	r25
    22c6:	80 95       	com	r24
    22c8:	70 95       	com	r23
    22ca:	61 95       	neg	r22
    22cc:	7f 4f       	sbci	r23, 0xFF	; 255
    22ce:	8f 4f       	sbci	r24, 0xFF	; 255
    22d0:	9f 4f       	sbci	r25, 0xFF	; 255
    22d2:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__ultoa_common>

000022d6 <__mulsi_const_10>:
    22d6:	59 2f       	mov	r21, r25
    22d8:	48 2f       	mov	r20, r24
    22da:	37 2f       	mov	r19, r23
    22dc:	26 2f       	mov	r18, r22
    22de:	66 0f       	add	r22, r22
    22e0:	77 1f       	adc	r23, r23
    22e2:	88 1f       	adc	r24, r24
    22e4:	99 1f       	adc	r25, r25
    22e6:	66 0f       	add	r22, r22
    22e8:	77 1f       	adc	r23, r23
    22ea:	88 1f       	adc	r24, r24
    22ec:	99 1f       	adc	r25, r25
    22ee:	62 0f       	add	r22, r18
    22f0:	73 1f       	adc	r23, r19
    22f2:	84 1f       	adc	r24, r20
    22f4:	95 1f       	adc	r25, r21
    22f6:	66 0f       	add	r22, r22
    22f8:	77 1f       	adc	r23, r23
    22fa:	88 1f       	adc	r24, r24
    22fc:	99 1f       	adc	r25, r25
    22fe:	08 95       	ret

00002300 <__ultoa_ncheck>:
    2300:	bb 27       	eor	r27, r27

00002302 <__ultoa_common>:
    2302:	fa 01       	movw	r30, r20
    2304:	a6 2f       	mov	r26, r22
    2306:	62 17       	cp	r22, r18
    2308:	71 05       	cpc	r23, r1
    230a:	81 05       	cpc	r24, r1
    230c:	91 05       	cpc	r25, r1
    230e:	33 0b       	sbc	r19, r19
    2310:	30 fb       	bst	r19, 0
    2312:	66 f0       	brts	.+24     	; 0x232c <__ultoa_common+0x2a>
    2314:	aa 27       	eor	r26, r26
    2316:	66 0f       	add	r22, r22
    2318:	77 1f       	adc	r23, r23
    231a:	88 1f       	adc	r24, r24
    231c:	99 1f       	adc	r25, r25
    231e:	aa 1f       	adc	r26, r26
    2320:	a2 17       	cp	r26, r18
    2322:	10 f0       	brcs	.+4      	; 0x2328 <__ultoa_common+0x26>
    2324:	a2 1b       	sub	r26, r18
    2326:	63 95       	inc	r22
    2328:	38 50       	subi	r19, 0x08	; 8
    232a:	a9 f7       	brne	.-22     	; 0x2316 <__ultoa_common+0x14>
    232c:	a0 5d       	subi	r26, 0xD0	; 208
    232e:	aa 33       	cpi	r26, 0x3A	; 58
    2330:	08 f0       	brcs	.+2      	; 0x2334 <__ultoa_common+0x32>
    2332:	a9 5d       	subi	r26, 0xD9	; 217
    2334:	a1 93       	st	Z+, r26
    2336:	36 f7       	brtc	.-52     	; 0x2304 <__ultoa_common+0x2>
    2338:	b1 11       	cpse	r27, r1
    233a:	b1 93       	st	Z+, r27
    233c:	10 82       	st	Z, r1
    233e:	ca 01       	movw	r24, r20
    2340:	0c 94 a2 11 	jmp	0x2344	; 0x2344 <strrev>

00002344 <strrev>:
    2344:	dc 01       	movw	r26, r24
    2346:	fc 01       	movw	r30, r24
    2348:	67 2f       	mov	r22, r23
    234a:	71 91       	ld	r23, Z+
    234c:	77 23       	and	r23, r23
    234e:	e1 f7       	brne	.-8      	; 0x2348 <strrev+0x4>
    2350:	32 97       	sbiw	r30, 0x02	; 2
    2352:	04 c0       	rjmp	.+8      	; 0x235c <strrev+0x18>
    2354:	7c 91       	ld	r23, X
    2356:	6d 93       	st	X+, r22
    2358:	70 83       	st	Z, r23
    235a:	62 91       	ld	r22, -Z
    235c:	ae 17       	cp	r26, r30
    235e:	bf 07       	cpc	r27, r31
    2360:	c8 f3       	brcs	.-14     	; 0x2354 <strrev+0x10>
    2362:	08 95       	ret

00002364 <eeprom_read_block>:
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22

00002368 <eeprom_read_blraw>:
    2368:	fc 01       	movw	r30, r24
    236a:	f9 99       	sbic	0x1f, 1	; 31
    236c:	fe cf       	rjmp	.-4      	; 0x236a <eeprom_read_blraw+0x2>
    236e:	06 c0       	rjmp	.+12     	; 0x237c <eeprom_read_blraw+0x14>
    2370:	f2 bd       	out	0x22, r31	; 34
    2372:	e1 bd       	out	0x21, r30	; 33
    2374:	f8 9a       	sbi	0x1f, 0	; 31
    2376:	31 96       	adiw	r30, 0x01	; 1
    2378:	00 b4       	in	r0, 0x20	; 32
    237a:	0d 92       	st	X+, r0
    237c:	41 50       	subi	r20, 0x01	; 1
    237e:	50 40       	sbci	r21, 0x00	; 0
    2380:	b8 f7       	brcc	.-18     	; 0x2370 <eeprom_read_blraw+0x8>
    2382:	08 95       	ret

00002384 <eeprom_read_byte>:
    2384:	f9 99       	sbic	0x1f, 1	; 31
    2386:	fe cf       	rjmp	.-4      	; 0x2384 <eeprom_read_byte>
    2388:	92 bd       	out	0x22, r25	; 34
    238a:	81 bd       	out	0x21, r24	; 33
    238c:	f8 9a       	sbi	0x1f, 0	; 31
    238e:	99 27       	eor	r25, r25
    2390:	80 b5       	in	r24, 0x20	; 32
    2392:	08 95       	ret

00002394 <eeprom_update_block>:
    2394:	dc 01       	movw	r26, r24
    2396:	a4 0f       	add	r26, r20
    2398:	b5 1f       	adc	r27, r21
    239a:	41 50       	subi	r20, 0x01	; 1
    239c:	50 40       	sbci	r21, 0x00	; 0
    239e:	48 f0       	brcs	.+18     	; 0x23b2 <eeprom_update_block+0x1e>
    23a0:	cb 01       	movw	r24, r22
    23a2:	84 0f       	add	r24, r20
    23a4:	95 1f       	adc	r25, r21
    23a6:	2e 91       	ld	r18, -X
    23a8:	0e 94 db 11 	call	0x23b6	; 0x23b6 <eeprom_update_r18>
    23ac:	41 50       	subi	r20, 0x01	; 1
    23ae:	50 40       	sbci	r21, 0x00	; 0
    23b0:	d0 f7       	brcc	.-12     	; 0x23a6 <eeprom_update_block+0x12>
    23b2:	08 95       	ret

000023b4 <eeprom_update_byte>:
    23b4:	26 2f       	mov	r18, r22

000023b6 <eeprom_update_r18>:
    23b6:	f9 99       	sbic	0x1f, 1	; 31
    23b8:	fe cf       	rjmp	.-4      	; 0x23b6 <eeprom_update_r18>
    23ba:	92 bd       	out	0x22, r25	; 34
    23bc:	81 bd       	out	0x21, r24	; 33
    23be:	f8 9a       	sbi	0x1f, 0	; 31
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	00 b4       	in	r0, 0x20	; 32
    23c4:	02 16       	cp	r0, r18
    23c6:	39 f0       	breq	.+14     	; 0x23d6 <eeprom_update_r18+0x20>
    23c8:	1f ba       	out	0x1f, r1	; 31
    23ca:	20 bd       	out	0x20, r18	; 32
    23cc:	0f b6       	in	r0, 0x3f	; 63
    23ce:	f8 94       	cli
    23d0:	fa 9a       	sbi	0x1f, 2	; 31
    23d2:	f9 9a       	sbi	0x1f, 1	; 31
    23d4:	0f be       	out	0x3f, r0	; 63
    23d6:	08 95       	ret

000023d8 <eeprom_write_block>:
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	03 c0       	rjmp	.+6      	; 0x23e4 <eeprom_write_block+0xc>
    23de:	2d 91       	ld	r18, X+
    23e0:	0e 94 f7 11 	call	0x23ee	; 0x23ee <eeprom_write_r18>
    23e4:	41 50       	subi	r20, 0x01	; 1
    23e6:	50 40       	sbci	r21, 0x00	; 0
    23e8:	d0 f7       	brcc	.-12     	; 0x23de <eeprom_write_block+0x6>
    23ea:	08 95       	ret

000023ec <eeprom_write_byte>:
    23ec:	26 2f       	mov	r18, r22

000023ee <eeprom_write_r18>:
    23ee:	f9 99       	sbic	0x1f, 1	; 31
    23f0:	fe cf       	rjmp	.-4      	; 0x23ee <eeprom_write_r18>
    23f2:	1f ba       	out	0x1f, r1	; 31
    23f4:	92 bd       	out	0x22, r25	; 34
    23f6:	81 bd       	out	0x21, r24	; 33
    23f8:	20 bd       	out	0x20, r18	; 32
    23fa:	0f b6       	in	r0, 0x3f	; 63
    23fc:	f8 94       	cli
    23fe:	fa 9a       	sbi	0x1f, 2	; 31
    2400:	f9 9a       	sbi	0x1f, 1	; 31
    2402:	0f be       	out	0x3f, r0	; 63
    2404:	01 96       	adiw	r24, 0x01	; 1
    2406:	08 95       	ret

00002408 <__prologue_saves__>:
    2408:	2f 92       	push	r2
    240a:	3f 92       	push	r3
    240c:	4f 92       	push	r4
    240e:	5f 92       	push	r5
    2410:	6f 92       	push	r6
    2412:	7f 92       	push	r7
    2414:	8f 92       	push	r8
    2416:	9f 92       	push	r9
    2418:	af 92       	push	r10
    241a:	bf 92       	push	r11
    241c:	cf 92       	push	r12
    241e:	df 92       	push	r13
    2420:	ef 92       	push	r14
    2422:	ff 92       	push	r15
    2424:	0f 93       	push	r16
    2426:	1f 93       	push	r17
    2428:	cf 93       	push	r28
    242a:	df 93       	push	r29
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
    2430:	ca 1b       	sub	r28, r26
    2432:	db 0b       	sbc	r29, r27
    2434:	0f b6       	in	r0, 0x3f	; 63
    2436:	f8 94       	cli
    2438:	de bf       	out	0x3e, r29	; 62
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	cd bf       	out	0x3d, r28	; 61
    243e:	09 94       	ijmp

00002440 <__epilogue_restores__>:
    2440:	2a 88       	ldd	r2, Y+18	; 0x12
    2442:	39 88       	ldd	r3, Y+17	; 0x11
    2444:	48 88       	ldd	r4, Y+16	; 0x10
    2446:	5f 84       	ldd	r5, Y+15	; 0x0f
    2448:	6e 84       	ldd	r6, Y+14	; 0x0e
    244a:	7d 84       	ldd	r7, Y+13	; 0x0d
    244c:	8c 84       	ldd	r8, Y+12	; 0x0c
    244e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2450:	aa 84       	ldd	r10, Y+10	; 0x0a
    2452:	b9 84       	ldd	r11, Y+9	; 0x09
    2454:	c8 84       	ldd	r12, Y+8	; 0x08
    2456:	df 80       	ldd	r13, Y+7	; 0x07
    2458:	ee 80       	ldd	r14, Y+6	; 0x06
    245a:	fd 80       	ldd	r15, Y+5	; 0x05
    245c:	0c 81       	ldd	r16, Y+4	; 0x04
    245e:	1b 81       	ldd	r17, Y+3	; 0x03
    2460:	aa 81       	ldd	r26, Y+2	; 0x02
    2462:	b9 81       	ldd	r27, Y+1	; 0x01
    2464:	ce 0f       	add	r28, r30
    2466:	d1 1d       	adc	r29, r1
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	f8 94       	cli
    246c:	de bf       	out	0x3e, r29	; 62
    246e:	0f be       	out	0x3f, r0	; 63
    2470:	cd bf       	out	0x3d, r28	; 61
    2472:	ed 01       	movw	r28, r26
    2474:	08 95       	ret

00002476 <_exit>:
    2476:	f8 94       	cli

00002478 <__stop_program>:
    2478:	ff cf       	rjmp	.-2      	; 0x2478 <__stop_program>
