
low_power_sensor_inside.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800100  00002450  000024e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002450  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e2  00800196  00800196  0000257a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000257a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000025ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000640  00000000  00000000  000025ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ad78  00000000  00000000  00002c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001d8a  00000000  00000000  0000d9a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000377e  00000000  00000000  0000f72e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000015a8  00000000  00000000  00012eac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002a24  00000000  00000000  00014454  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007924  00000000  00000000  00016e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000638  00000000  00000000  0001e79c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__ctors_end>
       4:	0c 94 ec 0b 	jmp	0x17d8	; 0x17d8 <__vector_1>
       8:	0c 94 13 0c 	jmp	0x1826	; 0x1826 <__vector_2>
       c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      10:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      14:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      18:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <__vector_6>
      1c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      20:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      24:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      28:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      2c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      30:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      34:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      38:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      3c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      40:	0c 94 3a 0c 	jmp	0x1874	; 0x1874 <__vector_16>
      44:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      48:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      4c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      50:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      54:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      58:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      5c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      60:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>
      64:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	5e 01       	movw	r10, r28
      6a:	01 1f       	adc	r16, r17
      6c:	01 03       	mulsu	r16, r17
      6e:	03 01       	movw	r0, r6
      70:	00 8a       	std	Z+16, r0	; 0x10
      72:	02 01       	movw	r0, r4
      74:	0a 01       	movw	r0, r20
      76:	02 02       	muls	r16, r18
      78:	01 00       	.word	0x0001	; ????
      7a:	64 00       	.word	0x0064	; ????
      7c:	1e 47       	sbci	r17, 0x7E	; 126
      7e:	04 0b       	sbc	r16, r20
      80:	09 06       	cpc	r0, r25
      82:	00 7c       	andi	r16, 0xC0	; 192
      84:	01 01       	movw	r0, r2
      86:	06 01       	movw	r0, r12
      88:	03 03       	mulsu	r16, r19
      8a:	01 00       	.word	0x0001	; ????
      8c:	f4 01       	movw	r30, r8
      8e:	06 0e       	add	r0, r22
      90:	01 02       	muls	r16, r17
      92:	02 01       	movw	r0, r4
      94:	00 c2       	rjmp	.+1024   	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
      96:	01 17       	cp	r16, r17
      98:	01 01       	movw	r0, r2
      9a:	02 02       	muls	r16, r18
      9c:	01 01       	movw	r0, r2

0000009e <digital_pin_to_timer_PGM>:
      9e:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      ae:	00 00 00 00                                         ....

000000b2 <digital_pin_to_bit_mask_PGM>:
      b2:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      c2:	04 08 10 20                                         ... 

000000c6 <digital_pin_to_port_PGM>:
      c6:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      d6:	03 03 03 03                                         ....

000000da <port_to_input_PGM>:
      da:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000e4 <port_to_output_PGM>:
      e4:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000ee <port_to_mode_PGM>:
      ee:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000f8 <__ctors_start>:
      f8:	4a 05       	cpc	r20, r10

000000fa <__ctors_end>:
      fa:	11 24       	eor	r1, r1
      fc:	1f be       	out	0x3f, r1	; 63
      fe:	cf ef       	ldi	r28, 0xFF	; 255
     100:	d8 e0       	ldi	r29, 0x08	; 8
     102:	de bf       	out	0x3e, r29	; 62
     104:	cd bf       	out	0x3d, r28	; 61

00000106 <__do_copy_data>:
     106:	11 e0       	ldi	r17, 0x01	; 1
     108:	a0 e0       	ldi	r26, 0x00	; 0
     10a:	b1 e0       	ldi	r27, 0x01	; 1
     10c:	e0 e5       	ldi	r30, 0x50	; 80
     10e:	f4 e2       	ldi	r31, 0x24	; 36
     110:	02 c0       	rjmp	.+4      	; 0x116 <__do_copy_data+0x10>
     112:	05 90       	lpm	r0, Z+
     114:	0d 92       	st	X+, r0
     116:	a6 39       	cpi	r26, 0x96	; 150
     118:	b1 07       	cpc	r27, r17
     11a:	d9 f7       	brne	.-10     	; 0x112 <__do_copy_data+0xc>

0000011c <__do_clear_bss>:
     11c:	22 e0       	ldi	r18, 0x02	; 2
     11e:	a6 e9       	ldi	r26, 0x96	; 150
     120:	b1 e0       	ldi	r27, 0x01	; 1
     122:	01 c0       	rjmp	.+2      	; 0x126 <.do_clear_bss_start>

00000124 <.do_clear_bss_loop>:
     124:	1d 92       	st	X+, r1

00000126 <.do_clear_bss_start>:
     126:	a8 37       	cpi	r26, 0x78	; 120
     128:	b2 07       	cpc	r27, r18
     12a:	e1 f7       	brne	.-8      	; 0x124 <.do_clear_bss_loop>

0000012c <__do_global_ctors>:
     12c:	10 e0       	ldi	r17, 0x00	; 0
     12e:	cd e7       	ldi	r28, 0x7D	; 125
     130:	d0 e0       	ldi	r29, 0x00	; 0
     132:	04 c0       	rjmp	.+8      	; 0x13c <__do_global_ctors+0x10>
     134:	21 97       	sbiw	r28, 0x01	; 1
     136:	fe 01       	movw	r30, r28
     138:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <__tablejump2__>
     13c:	cc 37       	cpi	r28, 0x7C	; 124
     13e:	d1 07       	cpc	r29, r17
     140:	c9 f7       	brne	.-14     	; 0x134 <__do_global_ctors+0x8>
     142:	0e 94 aa 0b 	call	0x1754	; 0x1754 <main>
     146:	0c 94 26 12 	jmp	0x244c	; 0x244c <_exit>

0000014a <__bad_interrupt>:
     14a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014e <_Z17setAllPinInputLowv>:
	return result;
}


//trace function
void trc(String msg){
     14e:	cf 93       	push	r28
     150:	c0 e0       	ldi	r28, 0x00	; 0
     152:	60 e0       	ldi	r22, 0x00	; 0
     154:	8c 2f       	mov	r24, r28
     156:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <pinMode>
     15a:	60 e0       	ldi	r22, 0x00	; 0
     15c:	8c 2f       	mov	r24, r28
     15e:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <digitalWrite>
     162:	cf 5f       	subi	r28, 0xFF	; 255
     164:	c4 31       	cpi	r28, 0x14	; 20
     166:	a9 f7       	brne	.-22     	; 0x152 <_Z17setAllPinInputLowv+0x4>
     168:	cf 91       	pop	r28
     16a:	08 95       	ret

0000016c <_Z11ledOneBlinkv>:
     16c:	61 e0       	ldi	r22, 0x01	; 1
     16e:	89 e0       	ldi	r24, 0x09	; 9
     170:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <pinMode>
     174:	61 e0       	ldi	r22, 0x01	; 1
     176:	89 e0       	ldi	r24, 0x09	; 9
     178:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <digitalWrite>
     17c:	68 ec       	ldi	r22, 0xC8	; 200
     17e:	70 e0       	ldi	r23, 0x00	; 0
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	0e 94 b5 0c 	call	0x196a	; 0x196a <delay>
     188:	60 e0       	ldi	r22, 0x00	; 0
     18a:	89 e0       	ldi	r24, 0x09	; 9
     18c:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <digitalWrite>
     190:	60 e0       	ldi	r22, 0x00	; 0
     192:	89 e0       	ldi	r24, 0x09	; 9
     194:	0c 94 5e 0d 	jmp	0x1abc	; 0x1abc <pinMode>

00000198 <_Z10pinPowerOni>:
     198:	cf 93       	push	r28
     19a:	c8 2f       	mov	r28, r24
     19c:	61 e0       	ldi	r22, 0x01	; 1
     19e:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <pinMode>
     1a2:	61 e0       	ldi	r22, 0x01	; 1
     1a4:	8c 2f       	mov	r24, r28
     1a6:	cf 91       	pop	r28
     1a8:	0c 94 9a 0d 	jmp	0x1b34	; 0x1b34 <digitalWrite>

000001ac <_Z11pinPowerOffii>:
     1ac:	cf 93       	push	r28
     1ae:	df 93       	push	r29
     1b0:	d8 2f       	mov	r29, r24
     1b2:	c6 2f       	mov	r28, r22
     1b4:	60 e0       	ldi	r22, 0x00	; 0
     1b6:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <pinMode>
     1ba:	60 e0       	ldi	r22, 0x00	; 0
     1bc:	8d 2f       	mov	r24, r29
     1be:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <digitalWrite>
     1c2:	60 e0       	ldi	r22, 0x00	; 0
     1c4:	8c 2f       	mov	r24, r28
     1c6:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <pinMode>
     1ca:	60 e0       	ldi	r22, 0x00	; 0
     1cc:	8c 2f       	mov	r24, r28
     1ce:	df 91       	pop	r29
     1d0:	cf 91       	pop	r28
     1d2:	0c 94 9a 0d 	jmp	0x1b34	; 0x1b34 <digitalWrite>

000001d6 <setup>:
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	00 d0       	rcall	.+0      	; 0x1dc <setup+0x6>
     1dc:	00 d0       	rcall	.+0      	; 0x1de <setup+0x8>
     1de:	00 d0       	rcall	.+0      	; 0x1e0 <setup+0xa>
     1e0:	cd b7       	in	r28, 0x3d	; 61
     1e2:	de b7       	in	r29, 0x3e	; 62
     1e4:	0e 94 a7 00 	call	0x14e	; 0x14e <_Z17setAllPinInputLowv>
     1e8:	60 e0       	ldi	r22, 0x00	; 0
     1ea:	84 e0       	ldi	r24, 0x04	; 4
     1ec:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <pinMode>
     1f0:	60 e0       	ldi	r22, 0x00	; 0
     1f2:	87 e0       	ldi	r24, 0x07	; 7
     1f4:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <pinMode>
     1f8:	0e 94 b6 00 	call	0x16c	; 0x16c <_Z11ledOneBlinkv>
     1fc:	88 e5       	ldi	r24, 0x58	; 88
     1fe:	92 e0       	ldi	r25, 0x02	; 2
     200:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <SleepTimer+0x1>
     204:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <SleepTimer>
     208:	66 e1       	ldi	r22, 0x16	; 22
     20a:	71 e0       	ldi	r23, 0x01	; 1
     20c:	ce 01       	movw	r24, r28
     20e:	01 96       	adiw	r24, 0x01	; 1
     210:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN6StringC1EPKc>
     214:	ce 01       	movw	r24, r28
     216:	01 96       	adiw	r24, 0x01	; 1
     218:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <_ZN6StringD1Ev>
     21c:	8c e0       	ldi	r24, 0x0C	; 12
     21e:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <__data_end>
     222:	26 96       	adiw	r28, 0x06	; 6
     224:	0f b6       	in	r0, 0x3f	; 63
     226:	f8 94       	cli
     228:	de bf       	out	0x3e, r29	; 62
     22a:	0f be       	out	0x3f, r0	; 63
     22c:	cd bf       	out	0x3d, r28	; 61
     22e:	df 91       	pop	r29
     230:	cf 91       	pop	r28
     232:	08 95       	ret

00000234 <_Z12sleepSecondsi>:
     234:	0f 93       	push	r16
     236:	1f 93       	push	r17
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	97 fd       	sbrc	r25, 7
     23e:	07 96       	adiw	r24, 0x07	; 7
     240:	ec 01       	movw	r28, r24
     242:	83 e0       	ldi	r24, 0x03	; 3
     244:	d5 95       	asr	r29
     246:	c7 95       	ror	r28
     248:	8a 95       	dec	r24
     24a:	e1 f7       	brne	.-8      	; 0x244 <_Z12sleepSecondsi+0x10>
     24c:	00 e0       	ldi	r16, 0x00	; 0
     24e:	10 e0       	ldi	r17, 0x00	; 0
     250:	0c 17       	cp	r16, r28
     252:	1d 07       	cpc	r17, r29
     254:	54 f4       	brge	.+20     	; 0x26a <_Z12sleepSecondsi+0x36>
     256:	20 e0       	ldi	r18, 0x00	; 0
     258:	40 e0       	ldi	r20, 0x00	; 0
     25a:	69 e0       	ldi	r22, 0x09	; 9
     25c:	82 ed       	ldi	r24, 0xD2	; 210
     25e:	91 e0       	ldi	r25, 0x01	; 1
     260:	0e 94 e5 06 	call	0xdca	; 0xdca <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t>
     264:	0f 5f       	subi	r16, 0xFF	; 255
     266:	1f 4f       	sbci	r17, 0xFF	; 255
     268:	f3 cf       	rjmp	.-26     	; 0x250 <_Z12sleepSecondsi+0x1c>
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	1f 91       	pop	r17
     270:	0f 91       	pop	r16
     272:	08 95       	ret

00000274 <_Z19checkForFreshEEpromv>:
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 ad 11 	call	0x235a	; 0x235a <eeprom_read_byte>
     27c:	81 50       	subi	r24, 0x01	; 1
     27e:	8e 3f       	cpi	r24, 0xFE	; 254
     280:	50 f0       	brcs	.+20     	; 0x296 <_Z19checkForFreshEEpromv+0x22>
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ee_address>
     288:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <fresh_eeprom>
     28c:	61 e0       	ldi	r22, 0x01	; 1
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	0c 94 e1 11 	jmp	0x23c2	; 0x23c2 <eeprom_write_byte>
     296:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <__data_end>
     29a:	89 9f       	mul	r24, r25
     29c:	80 2d       	mov	r24, r0
     29e:	11 24       	eor	r1, r1
     2a0:	8f 5f       	subi	r24, 0xFF	; 255
     2a2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ee_address>
     2a6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <fresh_eeprom>
     2aa:	08 95       	ret

000002ac <_Z10readEEDatav>:
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	cd b7       	in	r28, 0x3d	; 61
     2b2:	de b7       	in	r29, 0x3e	; 62
     2b4:	2c 97       	sbiw	r28, 0x0c	; 12
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	f8 94       	cli
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	cd bf       	out	0x3d, r28	; 61
     2c0:	0e 94 3a 01 	call	0x274	; 0x274 <_Z19checkForFreshEEpromv>
     2c4:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <ee_address>
     2c8:	70 e0       	ldi	r23, 0x00	; 0
     2ca:	4c e0       	ldi	r20, 0x0C	; 12
     2cc:	50 e0       	ldi	r21, 0x00	; 0
     2ce:	ce 01       	movw	r24, r28
     2d0:	01 96       	adiw	r24, 0x01	; 1
     2d2:	0e 94 9d 11 	call	0x233a	; 0x233a <eeprom_read_block>
     2d6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <fresh_eeprom>
     2da:	88 23       	and	r24, r24
     2dc:	81 f0       	breq	.+32     	; 0x2fe <_Z10readEEDatav+0x52>
     2de:	1a 82       	std	Y+2, r1	; 0x02
     2e0:	19 82       	std	Y+1, r1	; 0x01
     2e2:	1c 86       	std	Y+12, r1	; 0x0c
     2e4:	1b 86       	std	Y+11, r1	; 0x0b
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	a0 ec       	ldi	r26, 0xC0	; 192
     2ec:	bf e7       	ldi	r27, 0x7F	; 127
     2ee:	8b 83       	std	Y+3, r24	; 0x03
     2f0:	9c 83       	std	Y+4, r25	; 0x04
     2f2:	ad 83       	std	Y+5, r26	; 0x05
     2f4:	be 83       	std	Y+6, r27	; 0x06
     2f6:	8f 83       	std	Y+7, r24	; 0x07
     2f8:	98 87       	std	Y+8, r25	; 0x08
     2fa:	a9 87       	std	Y+9, r26	; 0x09
     2fc:	ba 87       	std	Y+10, r27	; 0x0a
     2fe:	8c e0       	ldi	r24, 0x0C	; 12
     300:	fe 01       	movw	r30, r28
     302:	31 96       	adiw	r30, 0x01	; 1
     304:	a7 e9       	ldi	r26, 0x97	; 151
     306:	b1 e0       	ldi	r27, 0x01	; 1
     308:	01 90       	ld	r0, Z+
     30a:	0d 92       	st	X+, r0
     30c:	8a 95       	dec	r24
     30e:	e1 f7       	brne	.-8      	; 0x308 <_Z10readEEDatav+0x5c>
     310:	2c 96       	adiw	r28, 0x0c	; 12
     312:	0f b6       	in	r0, 0x3f	; 63
     314:	f8 94       	cli
     316:	de bf       	out	0x3e, r29	; 62
     318:	0f be       	out	0x3f, r0	; 63
     31a:	cd bf       	out	0x3d, r28	; 61
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	08 95       	ret

00000322 <_Z11writeEEDatab>:
     322:	1f 93       	push	r17
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	cd b7       	in	r28, 0x3d	; 61
     32a:	de b7       	in	r29, 0x3e	; 62
     32c:	2c 97       	sbiw	r28, 0x0c	; 12
     32e:	0f b6       	in	r0, 0x3f	; 63
     330:	f8 94       	cli
     332:	de bf       	out	0x3e, r29	; 62
     334:	0f be       	out	0x3f, r0	; 63
     336:	cd bf       	out	0x3d, r28	; 61
     338:	88 23       	and	r24, r24
     33a:	49 f0       	breq	.+18     	; 0x34e <_Z11writeEEDatab+0x2c>
     33c:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <ee_data+0xa>
     340:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <ee_data+0xb>
     344:	01 96       	adiw	r24, 0x01	; 1
     346:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <ee_data+0xb>
     34a:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <ee_data+0xa>
     34e:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <ee_data>
     352:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <ee_data+0x1>
     356:	01 96       	adiw	r24, 0x01	; 1
     358:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <ee_data+0x1>
     35c:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <ee_data>
     360:	40 91 96 01 	lds	r20, 0x0196	; 0x800196 <__data_end>
     364:	50 e0       	ldi	r21, 0x00	; 0
     366:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <ee_address>
     36a:	70 e0       	ldi	r23, 0x00	; 0
     36c:	87 e9       	ldi	r24, 0x97	; 151
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	0e 94 b5 11 	call	0x236a	; 0x236a <eeprom_update_block>
     374:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <ee_data>
     378:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <ee_data+0x1>
     37c:	80 33       	cpi	r24, 0x30	; 48
     37e:	95 47       	sbci	r25, 0x75	; 117
     380:	68 f1       	brcs	.+90     	; 0x3dc <_Z11writeEEDatab+0xba>
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	0e 94 ad 11 	call	0x235a	; 0x235a <eeprom_read_byte>
     38a:	18 2f       	mov	r17, r24
     38c:	68 2f       	mov	r22, r24
     38e:	70 e0       	ldi	r23, 0x00	; 0
     390:	6f 5f       	subi	r22, 0xFF	; 255
     392:	7f 4f       	sbci	r23, 0xFF	; 255
     394:	80 e0       	ldi	r24, 0x00	; 0
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	0e 94 c5 11 	call	0x238a	; 0x238a <eeprom_update_byte>
     39c:	40 91 96 01 	lds	r20, 0x0196	; 0x800196 <__data_end>
     3a0:	14 9f       	mul	r17, r20
     3a2:	60 2d       	mov	r22, r0
     3a4:	11 24       	eor	r1, r1
     3a6:	11 e0       	ldi	r17, 0x01	; 1
     3a8:	16 0f       	add	r17, r22
     3aa:	10 93 06 01 	sts	0x0106, r17	; 0x800106 <ee_address>
     3ae:	1a 82       	std	Y+2, r1	; 0x02
     3b0:	19 82       	std	Y+1, r1	; 0x01
     3b2:	1c 86       	std	Y+12, r1	; 0x0c
     3b4:	1b 86       	std	Y+11, r1	; 0x0b
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	a0 ec       	ldi	r26, 0xC0	; 192
     3bc:	bf e7       	ldi	r27, 0x7F	; 127
     3be:	8b 83       	std	Y+3, r24	; 0x03
     3c0:	9c 83       	std	Y+4, r25	; 0x04
     3c2:	ad 83       	std	Y+5, r26	; 0x05
     3c4:	be 83       	std	Y+6, r27	; 0x06
     3c6:	8f 83       	std	Y+7, r24	; 0x07
     3c8:	98 87       	std	Y+8, r25	; 0x08
     3ca:	a9 87       	std	Y+9, r26	; 0x09
     3cc:	ba 87       	std	Y+10, r27	; 0x0a
     3ce:	50 e0       	ldi	r21, 0x00	; 0
     3d0:	61 2f       	mov	r22, r17
     3d2:	70 e0       	ldi	r23, 0x00	; 0
     3d4:	ce 01       	movw	r24, r28
     3d6:	01 96       	adiw	r24, 0x01	; 1
     3d8:	0e 94 d7 11 	call	0x23ae	; 0x23ae <eeprom_write_block>
     3dc:	2c 96       	adiw	r28, 0x0c	; 12
     3de:	0f b6       	in	r0, 0x3f	; 63
     3e0:	f8 94       	cli
     3e2:	de bf       	out	0x3e, r29	; 62
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	cd bf       	out	0x3d, r28	; 61
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	1f 91       	pop	r17
     3ee:	08 95       	ret

000003f0 <_Z23measureTempAndHum_DHT22v>:
     3f0:	8f 92       	push	r8
     3f2:	9f 92       	push	r9
     3f4:	af 92       	push	r10
     3f6:	bf 92       	push	r11
     3f8:	cf 92       	push	r12
     3fa:	df 92       	push	r13
     3fc:	ef 92       	push	r14
     3fe:	ff 92       	push	r15
     400:	0f 93       	push	r16
     402:	1f 93       	push	r17
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
     408:	64 ef       	ldi	r22, 0xF4	; 244
     40a:	71 e0       	ldi	r23, 0x01	; 1
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	0e 94 b5 0c 	call	0x196a	; 0x196a <delay>
     414:	c1 e0       	ldi	r28, 0x01	; 1
     416:	d0 e0       	ldi	r29, 0x00	; 0
     418:	84 ea       	ldi	r24, 0xA4	; 164
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	0e 94 c1 06 	call	0xd82	; 0xd82 <_ZN6DHTNEW4readEv>
     420:	8c 01       	movw	r16, r24
     422:	89 2b       	or	r24, r25
     424:	01 f5       	brne	.+64     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     426:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <dht>
     42a:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <dht+0x1>
     42e:	a0 91 a6 01 	lds	r26, 0x01A6	; 0x8001a6 <dht+0x2>
     432:	b0 91 a7 01 	lds	r27, 0x01A7	; 0x8001a7 <dht+0x3>
     436:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <humidity>
     43a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <humidity+0x1>
     43e:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <humidity+0x2>
     442:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <humidity+0x3>
     446:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <dht+0x4>
     44a:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <dht+0x5>
     44e:	a0 91 aa 01 	lds	r26, 0x01AA	; 0x8001aa <dht+0x6>
     452:	b0 91 ab 01 	lds	r27, 0x01AB	; 0x8001ab <dht+0x7>
     456:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <temperature>
     45a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <temperature+0x1>
     45e:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <temperature+0x2>
     462:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <temperature+0x3>
     466:	80 90 0c 01 	lds	r8, 0x010C	; 0x80010c <humidity>
     46a:	90 90 0d 01 	lds	r9, 0x010D	; 0x80010d <humidity+0x1>
     46e:	a0 90 0e 01 	lds	r10, 0x010E	; 0x80010e <humidity+0x2>
     472:	b0 90 0f 01 	lds	r11, 0x010F	; 0x80010f <humidity+0x3>
     476:	a5 01       	movw	r20, r10
     478:	94 01       	movw	r18, r8
     47a:	c5 01       	movw	r24, r10
     47c:	b4 01       	movw	r22, r8
     47e:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__unordsf2>
     482:	81 11       	cpse	r24, r1
     484:	26 c0       	rjmp	.+76     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     486:	c0 90 08 01 	lds	r12, 0x0108	; 0x800108 <temperature>
     48a:	d0 90 09 01 	lds	r13, 0x0109	; 0x800109 <temperature+0x1>
     48e:	e0 90 0a 01 	lds	r14, 0x010A	; 0x80010a <temperature+0x2>
     492:	f0 90 0b 01 	lds	r15, 0x010B	; 0x80010b <temperature+0x3>
     496:	a7 01       	movw	r20, r14
     498:	96 01       	movw	r18, r12
     49a:	c7 01       	movw	r24, r14
     49c:	b6 01       	movw	r22, r12
     49e:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__unordsf2>
     4a2:	81 11       	cpse	r24, r1
     4a4:	16 c0       	rjmp	.+44     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4a6:	01 2b       	or	r16, r17
     4a8:	a1 f4       	brne	.+40     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	48 ec       	ldi	r20, 0xC8	; 200
     4b0:	52 e4       	ldi	r21, 0x42	; 66
     4b2:	c5 01       	movw	r24, r10
     4b4:	b4 01       	movw	r22, r8
     4b6:	0e 94 32 0b 	call	0x1664	; 0x1664 <__gesf2>
     4ba:	18 16       	cp	r1, r24
     4bc:	54 f0       	brlt	.+20     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	40 ea       	ldi	r20, 0xA0	; 160
     4c4:	52 e4       	ldi	r21, 0x42	; 66
     4c6:	c7 01       	movw	r24, r14
     4c8:	b6 01       	movw	r22, r12
     4ca:	0e 94 32 0b 	call	0x1664	; 0x1664 <__gesf2>
     4ce:	18 16       	cp	r1, r24
     4d0:	5c f4       	brge	.+22     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     4d2:	64 e3       	ldi	r22, 0x34	; 52
     4d4:	78 e0       	ldi	r23, 0x08	; 8
     4d6:	80 e0       	ldi	r24, 0x00	; 0
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	0e 94 b5 0c 	call	0x196a	; 0x196a <delay>
     4de:	21 96       	adiw	r28, 0x01	; 1
     4e0:	c6 30       	cpi	r28, 0x06	; 6
     4e2:	d1 05       	cpc	r29, r1
     4e4:	09 f0       	breq	.+2      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     4e6:	98 cf       	rjmp	.-208    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	1f 91       	pop	r17
     4ee:	0f 91       	pop	r16
     4f0:	ff 90       	pop	r15
     4f2:	ef 90       	pop	r14
     4f4:	df 90       	pop	r13
     4f6:	cf 90       	pop	r12
     4f8:	bf 90       	pop	r11
     4fa:	af 90       	pop	r10
     4fc:	9f 90       	pop	r9
     4fe:	8f 90       	pop	r8
     500:	08 95       	ret

00000502 <_Z8sendDatall>:
     502:	4f 92       	push	r4
     504:	5f 92       	push	r5
     506:	6f 92       	push	r6
     508:	7f 92       	push	r7
     50a:	8f 92       	push	r8
     50c:	9f 92       	push	r9
     50e:	af 92       	push	r10
     510:	bf 92       	push	r11
     512:	cf 92       	push	r12
     514:	df 92       	push	r13
     516:	ef 92       	push	r14
     518:	ff 92       	push	r15
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	00 d0       	rcall	.+0      	; 0x520 <_Z8sendDatall+0x1e>
     520:	00 d0       	rcall	.+0      	; 0x522 <_Z8sendDatall+0x20>
     522:	00 d0       	rcall	.+0      	; 0x524 <_Z8sendDatall+0x22>
     524:	cd b7       	in	r28, 0x3d	; 61
     526:	de b7       	in	r29, 0x3e	; 62
     528:	6b 01       	movw	r12, r22
     52a:	7c 01       	movw	r14, r24
     52c:	49 01       	movw	r8, r18
     52e:	5a 01       	movw	r10, r20
     530:	8b e2       	ldi	r24, 0x2B	; 43
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <atol>
     538:	2b 01       	movw	r4, r22
     53a:	3c 01       	movw	r6, r24
     53c:	62 e3       	ldi	r22, 0x32	; 50
     53e:	71 e0       	ldi	r23, 0x01	; 1
     540:	ce 01       	movw	r24, r28
     542:	01 96       	adiw	r24, 0x01	; 1
     544:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN6StringC1EPKc>
     548:	ce 01       	movw	r24, r28
     54a:	01 96       	adiw	r24, 0x01	; 1
     54c:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <_ZN6StringD1Ev>
     550:	2a e0       	ldi	r18, 0x0A	; 10
     552:	b7 01       	movw	r22, r14
     554:	a6 01       	movw	r20, r12
     556:	ce 01       	movw	r24, r28
     558:	01 96       	adiw	r24, 0x01	; 1
     55a:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <_ZN6StringC1Elh>
     55e:	ce 01       	movw	r24, r28
     560:	01 96       	adiw	r24, 0x01	; 1
     562:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <_ZN6StringD1Ev>
     566:	6d e3       	ldi	r22, 0x3D	; 61
     568:	71 e0       	ldi	r23, 0x01	; 1
     56a:	ce 01       	movw	r24, r28
     56c:	01 96       	adiw	r24, 0x01	; 1
     56e:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN6StringC1EPKc>
     572:	ce 01       	movw	r24, r28
     574:	01 96       	adiw	r24, 0x01	; 1
     576:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <_ZN6StringD1Ev>
     57a:	2a e0       	ldi	r18, 0x0A	; 10
     57c:	b5 01       	movw	r22, r10
     57e:	a4 01       	movw	r20, r8
     580:	ce 01       	movw	r24, r28
     582:	01 96       	adiw	r24, 0x01	; 1
     584:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <_ZN6StringC1Elh>
     588:	ce 01       	movw	r24, r28
     58a:	01 96       	adiw	r24, 0x01	; 1
     58c:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <_ZN6StringD1Ev>
     590:	c4 14       	cp	r12, r4
     592:	d5 04       	cpc	r13, r5
     594:	e6 04       	cpc	r14, r6
     596:	f7 04       	cpc	r15, r7
     598:	24 f4       	brge	.+8      	; 0x5a2 <_Z8sendDatall+0xa0>
     59a:	c8 0c       	add	r12, r8
     59c:	d9 1c       	adc	r13, r9
     59e:	ea 1c       	adc	r14, r10
     5a0:	fb 1c       	adc	r15, r11
     5a2:	66 e4       	ldi	r22, 0x46	; 70
     5a4:	71 e0       	ldi	r23, 0x01	; 1
     5a6:	ce 01       	movw	r24, r28
     5a8:	01 96       	adiw	r24, 0x01	; 1
     5aa:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN6StringC1EPKc>
     5ae:	ce 01       	movw	r24, r28
     5b0:	01 96       	adiw	r24, 0x01	; 1
     5b2:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <_ZN6StringD1Ev>
     5b6:	2a e0       	ldi	r18, 0x0A	; 10
     5b8:	b7 01       	movw	r22, r14
     5ba:	a6 01       	movw	r20, r12
     5bc:	ce 01       	movw	r24, r28
     5be:	01 96       	adiw	r24, 0x01	; 1
     5c0:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <_ZN6StringC1Elh>
     5c4:	ce 01       	movw	r24, r28
     5c6:	01 96       	adiw	r24, 0x01	; 1
     5c8:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <_ZN6StringD1Ev>
     5cc:	28 e1       	ldi	r18, 0x18	; 24
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	b7 01       	movw	r22, r14
     5d2:	a6 01       	movw	r20, r12
     5d4:	83 ec       	ldi	r24, 0xC3	; 195
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	0e 94 ed 07 	call	0xfda	; 0xfda <_ZN8RCSwitch4sendEmj>
     5dc:	26 96       	adiw	r28, 0x06	; 6
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	f8 94       	cli
     5e2:	de bf       	out	0x3e, r29	; 62
     5e4:	0f be       	out	0x3f, r0	; 63
     5e6:	cd bf       	out	0x3d, r28	; 61
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	ff 90       	pop	r15
     5ee:	ef 90       	pop	r14
     5f0:	df 90       	pop	r13
     5f2:	cf 90       	pop	r12
     5f4:	bf 90       	pop	r11
     5f6:	af 90       	pop	r10
     5f8:	9f 90       	pop	r9
     5fa:	8f 90       	pop	r8
     5fc:	7f 90       	pop	r7
     5fe:	6f 90       	pop	r6
     600:	5f 90       	pop	r5
     602:	4f 90       	pop	r4
     604:	08 95       	ret

00000606 <_Z16TempAndHum_DHT22v>:
     606:	4f 92       	push	r4
     608:	5f 92       	push	r5
     60a:	6f 92       	push	r6
     60c:	7f 92       	push	r7
     60e:	8f 92       	push	r8
     610:	9f 92       	push	r9
     612:	af 92       	push	r10
     614:	bf 92       	push	r11
     616:	cf 92       	push	r12
     618:	df 92       	push	r13
     61a:	ef 92       	push	r14
     61c:	ff 92       	push	r15
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	cd b7       	in	r28, 0x3d	; 61
     624:	de b7       	in	r29, 0x3e	; 62
     626:	2c 97       	sbiw	r28, 0x0c	; 12
     628:	0f b6       	in	r0, 0x3f	; 63
     62a:	f8 94       	cli
     62c:	de bf       	out	0x3e, r29	; 62
     62e:	0f be       	out	0x3f, r0	; 63
     630:	cd bf       	out	0x3d, r28	; 61
     632:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <_Z23measureTempAndHum_DHT22v>
     636:	c0 90 0c 01 	lds	r12, 0x010C	; 0x80010c <humidity>
     63a:	d0 90 0d 01 	lds	r13, 0x010D	; 0x80010d <humidity+0x1>
     63e:	e0 90 0e 01 	lds	r14, 0x010E	; 0x80010e <humidity+0x2>
     642:	f0 90 0f 01 	lds	r15, 0x010F	; 0x80010f <humidity+0x3>
     646:	a7 01       	movw	r20, r14
     648:	96 01       	movw	r18, r12
     64a:	c7 01       	movw	r24, r14
     64c:	b6 01       	movw	r22, r12
     64e:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__unordsf2>
     652:	81 11       	cpse	r24, r1
     654:	35 c0       	rjmp	.+106    	; 0x6c0 <_Z16TempAndHum_DHT22v+0xba>
     656:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <temperature>
     65a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <temperature+0x1>
     65e:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <temperature+0x2>
     662:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <temperature+0x3>
     666:	89 87       	std	Y+9, r24	; 0x09
     668:	9a 87       	std	Y+10, r25	; 0x0a
     66a:	ab 87       	std	Y+11, r26	; 0x0b
     66c:	bc 87       	std	Y+12, r27	; 0x0c
     66e:	9c 01       	movw	r18, r24
     670:	ad 01       	movw	r20, r26
     672:	bc 01       	movw	r22, r24
     674:	cd 01       	movw	r24, r26
     676:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__unordsf2>
     67a:	81 11       	cpse	r24, r1
     67c:	21 c0       	rjmp	.+66     	; 0x6c0 <_Z16TempAndHum_DHT22v+0xba>
     67e:	80 90 9d 01 	lds	r8, 0x019D	; 0x80019d <ee_data+0x6>
     682:	90 90 9e 01 	lds	r9, 0x019E	; 0x80019e <ee_data+0x7>
     686:	a0 90 9f 01 	lds	r10, 0x019F	; 0x80019f <ee_data+0x8>
     68a:	b0 90 a0 01 	lds	r11, 0x01A0	; 0x8001a0 <ee_data+0x9>
     68e:	a5 01       	movw	r20, r10
     690:	94 01       	movw	r18, r8
     692:	c5 01       	movw	r24, r10
     694:	b4 01       	movw	r22, r8
     696:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__unordsf2>
     69a:	81 11       	cpse	r24, r1
     69c:	6c c0       	rjmp	.+216    	; 0x776 <_Z16TempAndHum_DHT22v+0x170>
     69e:	40 90 99 01 	lds	r4, 0x0199	; 0x800199 <ee_data+0x2>
     6a2:	50 90 9a 01 	lds	r5, 0x019A	; 0x80019a <ee_data+0x3>
     6a6:	60 90 9b 01 	lds	r6, 0x019B	; 0x80019b <ee_data+0x4>
     6aa:	70 90 9c 01 	lds	r7, 0x019C	; 0x80019c <ee_data+0x5>
     6ae:	a3 01       	movw	r20, r6
     6b0:	92 01       	movw	r18, r4
     6b2:	c3 01       	movw	r24, r6
     6b4:	b2 01       	movw	r22, r4
     6b6:	0e 94 a4 0b 	call	0x1748	; 0x1748 <__unordsf2>
     6ba:	88 23       	and	r24, r24
     6bc:	21 f1       	breq	.+72     	; 0x706 <_Z16TempAndHum_DHT22v+0x100>
     6be:	5b c0       	rjmp	.+182    	; 0x776 <_Z16TempAndHum_DHT22v+0x170>
     6c0:	6f e5       	ldi	r22, 0x5F	; 95
     6c2:	71 e0       	ldi	r23, 0x01	; 1
     6c4:	ce 01       	movw	r24, r28
     6c6:	01 96       	adiw	r24, 0x01	; 1
     6c8:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN6StringC1EPKc>
     6cc:	ce 01       	movw	r24, r28
     6ce:	01 96       	adiw	r24, 0x01	; 1
     6d0:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <_ZN6StringD1Ev>
     6d4:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <temp_short_sleep>
     6d8:	88 23       	and	r24, r24
     6da:	89 f0       	breq	.+34     	; 0x6fe <_Z16TempAndHum_DHT22v+0xf8>
     6dc:	8a e4       	ldi	r24, 0x4A	; 74
     6de:	91 e0       	ldi	r25, 0x01	; 1
     6e0:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <atol>
     6e4:	6b 01       	movw	r12, r22
     6e6:	7c 01       	movw	r14, r24
     6e8:	81 e5       	ldi	r24, 0x51	; 81
     6ea:	91 e0       	ldi	r25, 0x01	; 1
     6ec:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <atol>
     6f0:	a7 01       	movw	r20, r14
     6f2:	96 01       	movw	r18, r12
     6f4:	0e 94 81 02 	call	0x502	; 0x502 <_Z8sendDatall>
     6f8:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <temp_short_sleep>
     6fc:	35 c0       	rjmp	.+106    	; 0x768 <_Z16TempAndHum_DHT22v+0x162>
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <temp_short_sleep>
     704:	31 c0       	rjmp	.+98     	; 0x768 <_Z16TempAndHum_DHT22v+0x162>
     706:	c3 01       	movw	r24, r6
     708:	b2 01       	movw	r22, r4
     70a:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__fixsfsi>
     70e:	2b 01       	movw	r4, r22
     710:	3c 01       	movw	r6, r24
     712:	69 85       	ldd	r22, Y+9	; 0x09
     714:	7a 85       	ldd	r23, Y+10	; 0x0a
     716:	8b 85       	ldd	r24, Y+11	; 0x0b
     718:	9c 85       	ldd	r25, Y+12	; 0x0c
     71a:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__fixsfsi>
     71e:	46 1a       	sub	r4, r22
     720:	57 0a       	sbc	r5, r23
     722:	58 86       	std	Y+8, r5	; 0x08
     724:	4f 82       	std	Y+7, r4	; 0x07
     726:	c5 01       	movw	r24, r10
     728:	b4 01       	movw	r22, r8
     72a:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__fixsfsi>
     72e:	4b 01       	movw	r8, r22
     730:	5c 01       	movw	r10, r24
     732:	c7 01       	movw	r24, r14
     734:	b6 01       	movw	r22, r12
     736:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__fixsfsi>
     73a:	86 1a       	sub	r8, r22
     73c:	97 0a       	sbc	r9, r23
     73e:	9a 82       	std	Y+2, r9	; 0x02
     740:	89 82       	std	Y+1, r8	; 0x01
     742:	8f 81       	ldd	r24, Y+7	; 0x07
     744:	98 85       	ldd	r25, Y+8	; 0x08
     746:	0b 97       	sbiw	r24, 0x0b	; 11
     748:	0c f4       	brge	.+2      	; 0x74c <_Z16TempAndHum_DHT22v+0x146>
     74a:	77 c0       	rjmp	.+238    	; 0x83a <_Z16TempAndHum_DHT22v+0x234>
     74c:	89 81       	ldd	r24, Y+1	; 0x01
     74e:	9a 81       	ldd	r25, Y+2	; 0x02
     750:	0b 97       	sbiw	r24, 0x0b	; 11
     752:	0c f4       	brge	.+2      	; 0x756 <_Z16TempAndHum_DHT22v+0x150>
     754:	72 c0       	rjmp	.+228    	; 0x83a <_Z16TempAndHum_DHT22v+0x234>
     756:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <temp_short_sleep>
     75a:	81 11       	cpse	r24, r1
     75c:	ca c0       	rjmp	.+404    	; 0x8f2 <_Z16TempAndHum_DHT22v+0x2ec>
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <temp_short_sleep>
     764:	0e 94 91 01 	call	0x322	; 0x322 <_Z11writeEEDatab>
     768:	8c e3       	ldi	r24, 0x3C	; 60
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <SleepTimer+0x1>
     770:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <SleepTimer>
     774:	d6 c0       	rjmp	.+428    	; 0x922 <__stack+0x23>
     776:	8a e4       	ldi	r24, 0x4A	; 74
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <atol>
     77e:	4b 01       	movw	r8, r22
     780:	5c 01       	movw	r10, r24
     782:	20 e0       	ldi	r18, 0x00	; 0
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	40 e2       	ldi	r20, 0x20	; 32
     788:	51 e4       	ldi	r21, 0x41	; 65
     78a:	c7 01       	movw	r24, r14
     78c:	b6 01       	movw	r22, r12
     78e:	0e 94 37 0b 	call	0x166e	; 0x166e <__mulsf3>
     792:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__fixsfsi>
     796:	07 2e       	mov	r0, r23
     798:	00 0c       	add	r0, r0
     79a:	88 0b       	sbc	r24, r24
     79c:	99 0b       	sbc	r25, r25
     79e:	a5 01       	movw	r20, r10
     7a0:	94 01       	movw	r18, r8
     7a2:	0e 94 81 02 	call	0x502	; 0x502 <_Z8sendDatall>
     7a6:	88 e5       	ldi	r24, 0x58	; 88
     7a8:	91 e0       	ldi	r25, 0x01	; 1
     7aa:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <atol>
     7ae:	6b 01       	movw	r12, r22
     7b0:	7c 01       	movw	r14, r24
     7b2:	20 e0       	ldi	r18, 0x00	; 0
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	40 e2       	ldi	r20, 0x20	; 32
     7b8:	51 e4       	ldi	r21, 0x41	; 65
     7ba:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <temperature>
     7be:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <temperature+0x1>
     7c2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <temperature+0x2>
     7c6:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <temperature+0x3>
     7ca:	0e 94 37 0b 	call	0x166e	; 0x166e <__mulsf3>
     7ce:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__fixsfsi>
     7d2:	07 2e       	mov	r0, r23
     7d4:	00 0c       	add	r0, r0
     7d6:	88 0b       	sbc	r24, r24
     7d8:	99 0b       	sbc	r25, r25
     7da:	a7 01       	movw	r20, r14
     7dc:	96 01       	movw	r18, r12
     7de:	0e 94 81 02 	call	0x502	; 0x502 <_Z8sendDatall>
     7e2:	88 e5       	ldi	r24, 0x58	; 88
     7e4:	92 e0       	ldi	r25, 0x02	; 2
     7e6:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <SleepTimer+0x1>
     7ea:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <SleepTimer>
     7ee:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <temp_short_sleep>
     7f2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <humidity>
     7f6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <humidity+0x1>
     7fa:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <humidity+0x2>
     7fe:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <humidity+0x3>
     802:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <ee_data+0x6>
     806:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <ee_data+0x7>
     80a:	a0 93 9f 01 	sts	0x019F, r26	; 0x80019f <ee_data+0x8>
     80e:	b0 93 a0 01 	sts	0x01A0, r27	; 0x8001a0 <ee_data+0x9>
     812:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <temperature>
     816:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <temperature+0x1>
     81a:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <temperature+0x2>
     81e:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <temperature+0x3>
     822:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <ee_data+0x2>
     826:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <ee_data+0x3>
     82a:	a0 93 9b 01 	sts	0x019B, r26	; 0x80019b <ee_data+0x4>
     82e:	b0 93 9c 01 	sts	0x019C, r27	; 0x80019c <ee_data+0x5>
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	0e 94 91 01 	call	0x322	; 0x322 <_Z11writeEEDatab>
     838:	74 c0       	rjmp	.+232    	; 0x922 <__stack+0x23>
     83a:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <temp_short_sleep>
     83e:	c0 92 9d 01 	sts	0x019D, r12	; 0x80019d <ee_data+0x6>
     842:	d0 92 9e 01 	sts	0x019E, r13	; 0x80019e <ee_data+0x7>
     846:	e0 92 9f 01 	sts	0x019F, r14	; 0x80019f <ee_data+0x8>
     84a:	f0 92 a0 01 	sts	0x01A0, r15	; 0x8001a0 <ee_data+0x9>
     84e:	89 85       	ldd	r24, Y+9	; 0x09
     850:	9a 85       	ldd	r25, Y+10	; 0x0a
     852:	ab 85       	ldd	r26, Y+11	; 0x0b
     854:	bc 85       	ldd	r27, Y+12	; 0x0c
     856:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <ee_data+0x2>
     85a:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <ee_data+0x3>
     85e:	a0 93 9b 01 	sts	0x019B, r26	; 0x80019b <ee_data+0x4>
     862:	b0 93 9c 01 	sts	0x019C, r27	; 0x80019c <ee_data+0x5>
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	0e 94 91 01 	call	0x322	; 0x322 <_Z11writeEEDatab>
     86c:	8a e4       	ldi	r24, 0x4A	; 74
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <atol>
     874:	6b 01       	movw	r12, r22
     876:	7c 01       	movw	r14, r24
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	40 e2       	ldi	r20, 0x20	; 32
     87e:	51 e4       	ldi	r21, 0x41	; 65
     880:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <humidity>
     884:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <humidity+0x1>
     888:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <humidity+0x2>
     88c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <humidity+0x3>
     890:	0e 94 37 0b 	call	0x166e	; 0x166e <__mulsf3>
     894:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__fixsfsi>
     898:	07 2e       	mov	r0, r23
     89a:	00 0c       	add	r0, r0
     89c:	88 0b       	sbc	r24, r24
     89e:	99 0b       	sbc	r25, r25
     8a0:	a7 01       	movw	r20, r14
     8a2:	96 01       	movw	r18, r12
     8a4:	0e 94 81 02 	call	0x502	; 0x502 <_Z8sendDatall>
     8a8:	88 e5       	ldi	r24, 0x58	; 88
     8aa:	91 e0       	ldi	r25, 0x01	; 1
     8ac:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <atol>
     8b0:	6b 01       	movw	r12, r22
     8b2:	7c 01       	movw	r14, r24
     8b4:	20 e0       	ldi	r18, 0x00	; 0
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	40 e2       	ldi	r20, 0x20	; 32
     8ba:	51 e4       	ldi	r21, 0x41	; 65
     8bc:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <temperature>
     8c0:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <temperature+0x1>
     8c4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <temperature+0x2>
     8c8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <temperature+0x3>
     8cc:	0e 94 37 0b 	call	0x166e	; 0x166e <__mulsf3>
     8d0:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__fixsfsi>
     8d4:	07 2e       	mov	r0, r23
     8d6:	00 0c       	add	r0, r0
     8d8:	88 0b       	sbc	r24, r24
     8da:	99 0b       	sbc	r25, r25
     8dc:	a7 01       	movw	r20, r14
     8de:	96 01       	movw	r18, r12
     8e0:	0e 94 81 02 	call	0x502	; 0x502 <_Z8sendDatall>
     8e4:	88 e5       	ldi	r24, 0x58	; 88
     8e6:	92 e0       	ldi	r25, 0x02	; 2
     8e8:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <SleepTimer+0x1>
     8ec:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <SleepTimer>
     8f0:	18 c0       	rjmp	.+48     	; 0x922 <__stack+0x23>
     8f2:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <temp_short_sleep>
     8f6:	c0 92 9d 01 	sts	0x019D, r12	; 0x80019d <ee_data+0x6>
     8fa:	d0 92 9e 01 	sts	0x019E, r13	; 0x80019e <ee_data+0x7>
     8fe:	e0 92 9f 01 	sts	0x019F, r14	; 0x80019f <ee_data+0x8>
     902:	f0 92 a0 01 	sts	0x01A0, r15	; 0x8001a0 <ee_data+0x9>
     906:	89 85       	ldd	r24, Y+9	; 0x09
     908:	9a 85       	ldd	r25, Y+10	; 0x0a
     90a:	ab 85       	ldd	r26, Y+11	; 0x0b
     90c:	bc 85       	ldd	r27, Y+12	; 0x0c
     90e:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <ee_data+0x2>
     912:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <ee_data+0x3>
     916:	a0 93 9b 01 	sts	0x019B, r26	; 0x80019b <ee_data+0x4>
     91a:	b0 93 9c 01 	sts	0x019C, r27	; 0x80019c <ee_data+0x5>
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	a3 cf       	rjmp	.-186    	; 0x868 <_Z16TempAndHum_DHT22v+0x262>
     922:	2c 96       	adiw	r28, 0x0c	; 12
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	f8 94       	cli
     928:	de bf       	out	0x3e, r29	; 62
     92a:	0f be       	out	0x3f, r0	; 63
     92c:	cd bf       	out	0x3d, r28	; 61
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	ff 90       	pop	r15
     934:	ef 90       	pop	r14
     936:	df 90       	pop	r13
     938:	cf 90       	pop	r12
     93a:	bf 90       	pop	r11
     93c:	af 90       	pop	r10
     93e:	9f 90       	pop	r9
     940:	8f 90       	pop	r8
     942:	7f 90       	pop	r7
     944:	6f 90       	pop	r6
     946:	5f 90       	pop	r5
     948:	4f 90       	pop	r4
     94a:	08 95       	ret

0000094c <_Z10loop_dht22v>:
     94c:	84 e0       	ldi	r24, 0x04	; 4
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	0e 94 cc 00 	call	0x198	; 0x198 <_Z10pinPowerOni>
     954:	64 e6       	ldi	r22, 0x64	; 100
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	0e 94 b5 0c 	call	0x196a	; 0x196a <delay>
     960:	0e 94 03 03 	call	0x606	; 0x606 <_Z16TempAndHum_DHT22v>
     964:	63 e0       	ldi	r22, 0x03	; 3
     966:	70 e0       	ldi	r23, 0x00	; 0
     968:	84 e0       	ldi	r24, 0x04	; 4
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <_Z11pinPowerOffii>

00000970 <_Z10vccVoltagev>:
     970:	8e e4       	ldi	r24, 0x4E	; 78
     972:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
     976:	6a e0       	ldi	r22, 0x0A	; 10
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	0e 94 b5 0c 	call	0x196a	; 0x196a <delay>
     982:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     986:	80 64       	ori	r24, 0x40	; 64
     988:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     98c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     990:	86 fd       	sbrc	r24, 6
     992:	fc cf       	rjmp	.-8      	; 0x98c <_Z10vccVoltagev+0x1c>
     994:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     998:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	32 2f       	mov	r19, r18
     9a0:	22 27       	eor	r18, r18
     9a2:	a9 01       	movw	r20, r18
     9a4:	33 0f       	add	r19, r19
     9a6:	66 0b       	sbc	r22, r22
     9a8:	77 0b       	sbc	r23, r23
     9aa:	9a 01       	movw	r18, r20
     9ac:	ab 01       	movw	r20, r22
     9ae:	28 2b       	or	r18, r24
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	70 e3       	ldi	r23, 0x30	; 48
     9b4:	81 e1       	ldi	r24, 0x11	; 17
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__divmodsi4>
     9bc:	ca 01       	movw	r24, r20
     9be:	b9 01       	movw	r22, r18
     9c0:	08 95       	ret

000009c2 <loop>:
     9c2:	cf 92       	push	r12
     9c4:	df 92       	push	r13
     9c6:	ef 92       	push	r14
     9c8:	ff 92       	push	r15
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	00 d0       	rcall	.+0      	; 0x9d0 <loop+0xe>
     9d0:	00 d0       	rcall	.+0      	; 0x9d2 <loop+0x10>
     9d2:	00 d0       	rcall	.+0      	; 0x9d4 <loop+0x12>
     9d4:	cd b7       	in	r28, 0x3d	; 61
     9d6:	de b7       	in	r29, 0x3e	; 62
     9d8:	87 e0       	ldi	r24, 0x07	; 7
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 cc 00 	call	0x198	; 0x198 <_Z10pinPowerOni>
     9e0:	66 e0       	ldi	r22, 0x06	; 6
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	83 ec       	ldi	r24, 0xC3	; 195
     9e6:	91 e0       	ldi	r25, 0x01	; 1
     9e8:	0e 94 89 07 	call	0xf12	; 0xf12 <_ZN8RCSwitch14enableTransmitEi>
     9ec:	6f e0       	ldi	r22, 0x0F	; 15
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	83 ec       	ldi	r24, 0xC3	; 195
     9f2:	91 e0       	ldi	r25, 0x01	; 1
     9f4:	0e 94 85 07 	call	0xf0a	; 0xf0a <_ZN8RCSwitch17setRepeatTransmitEi>
     9f8:	6f e7       	ldi	r22, 0x7F	; 127
     9fa:	71 e0       	ldi	r23, 0x01	; 1
     9fc:	ce 01       	movw	r24, r28
     9fe:	01 96       	adiw	r24, 0x01	; 1
     a00:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN6StringC1EPKc>
     a04:	ce 01       	movw	r24, r28
     a06:	01 96       	adiw	r24, 0x01	; 1
     a08:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <_ZN6StringD1Ev>
     a0c:	0e 94 b8 04 	call	0x970	; 0x970 <_Z10vccVoltagev>
     a10:	ab 01       	movw	r20, r22
     a12:	bc 01       	movw	r22, r24
     a14:	2a e0       	ldi	r18, 0x0A	; 10
     a16:	ce 01       	movw	r24, r28
     a18:	01 96       	adiw	r24, 0x01	; 1
     a1a:	0e 94 8c 0e 	call	0x1d18	; 0x1d18 <_ZN6StringC1Elh>
     a1e:	ce 01       	movw	r24, r28
     a20:	01 96       	adiw	r24, 0x01	; 1
     a22:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <_ZN6StringD1Ev>
     a26:	89 e8       	ldi	r24, 0x89	; 137
     a28:	91 e0       	ldi	r25, 0x01	; 1
     a2a:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <atol>
     a2e:	6b 01       	movw	r12, r22
     a30:	7c 01       	movw	r14, r24
     a32:	0e 94 b8 04 	call	0x970	; 0x970 <_Z10vccVoltagev>
     a36:	a7 01       	movw	r20, r14
     a38:	96 01       	movw	r18, r12
     a3a:	0e 94 81 02 	call	0x502	; 0x502 <_Z8sendDatall>
     a3e:	0e 94 56 01 	call	0x2ac	; 0x2ac <_Z10readEEDatav>
     a42:	0e 94 a6 04 	call	0x94c	; 0x94c <_Z10loop_dht22v>
     a46:	83 ec       	ldi	r24, 0xC3	; 195
     a48:	91 e0       	ldi	r25, 0x01	; 1
     a4a:	0e 94 90 07 	call	0xf20	; 0xf20 <_ZN8RCSwitch15disableTransmitEv>
     a4e:	66 e0       	ldi	r22, 0x06	; 6
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	87 e0       	ldi	r24, 0x07	; 7
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_Z11pinPowerOffii>
     a5a:	60 e9       	ldi	r22, 0x90	; 144
     a5c:	71 e0       	ldi	r23, 0x01	; 1
     a5e:	ce 01       	movw	r24, r28
     a60:	01 96       	adiw	r24, 0x01	; 1
     a62:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <_ZN6StringC1EPKc>
     a66:	ce 01       	movw	r24, r28
     a68:	01 96       	adiw	r24, 0x01	; 1
     a6a:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <_ZN6StringD1Ev>
     a6e:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <SleepTimer>
     a72:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <SleepTimer+0x1>
     a76:	0e 94 1a 01 	call	0x234	; 0x234 <_Z12sleepSecondsi>
     a7a:	26 96       	adiw	r28, 0x06	; 6
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	f8 94       	cli
     a80:	de bf       	out	0x3e, r29	; 62
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	cd bf       	out	0x3d, r28	; 61
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	ff 90       	pop	r15
     a8c:	ef 90       	pop	r14
     a8e:	df 90       	pop	r13
     a90:	cf 90       	pop	r12
     a92:	08 95       	ret

00000a94 <_GLOBAL__sub_I_mySwitch>:
	float ee_temperature;		// used to store the temperature in eeprom
	float ee_humidity;			// used to store the humidity in eeprom
	uint16_t tempdrop_counter;	// used to store the registered temperatures drops of more then 10 deg!
};
// create the RF Switch, needed for sending values
RCSwitch mySwitch = RCSwitch();
     a94:	83 ec       	ldi	r24, 0xC3	; 195
     a96:	91 e0       	ldi	r25, 0x01	; 1
     a98:	0e 94 5e 07 	call	0xebc	; 0xebc <_ZN8RCSwitchC1Ev>
// No error during measurement: Sleep for TimeToSleep
// Error during measurement: Sleep for TimeToSleepError!
int SleepTimer;

#if DHT22_use == 1
DHTNEW dht(SensorPin); // Setup a DHT sensor with data expected on pin SensorPin
     a9c:	63 e0       	ldi	r22, 0x03	; 3
     a9e:	84 ea       	ldi	r24, 0xA4	; 164
     aa0:	91 e0       	ldi	r25, 0x01	; 1
     aa2:	0c 94 53 05 	jmp	0xaa6	; 0xaa6 <_ZN6DHTNEWC1Eh>

00000aa6 <_ZN6DHTNEWC1Eh>:

/////////////////////////////////////////////////////
//
// PUBLIC
//
DHTNEW::DHTNEW(uint8_t pin) { _pin = pin; };
     aa6:	fc 01       	movw	r30, r24
     aa8:	11 86       	std	Z+9, r1	; 0x09
     aaa:	12 86       	std	Z+10, r1	; 0x0a
     aac:	13 86       	std	Z+11, r1	; 0x0b
     aae:	14 86       	std	Z+12, r1	; 0x0c
     ab0:	15 86       	std	Z+13, r1	; 0x0d
     ab2:	16 86       	std	Z+14, r1	; 0x0e
     ab4:	17 86       	std	Z+15, r1	; 0x0f
     ab6:	10 8a       	std	Z+16, r1	; 0x10
     ab8:	11 8a       	std	Z+17, r1	; 0x11
     aba:	12 8a       	std	Z+18, r1	; 0x12
     abc:	13 8a       	std	Z+19, r1	; 0x13
     abe:	14 8a       	std	Z+20, r1	; 0x14
     ac0:	15 8a       	std	Z+21, r1	; 0x15
     ac2:	16 8a       	std	Z+22, r1	; 0x16
     ac4:	17 8a       	std	Z+23, r1	; 0x17
     ac6:	60 87       	std	Z+8, r22	; 0x08
     ac8:	08 95       	ret

00000aca <_ZN6DHTNEW11_readSensorEv>:

// return values:
// DHTLIB_OK
// DHTLIB_ERROR_TIMEOUT
int DHTNEW::_readSensor()
{
     aca:	8f 92       	push	r8
     acc:	9f 92       	push	r9
     ace:	af 92       	push	r10
     ad0:	bf 92       	push	r11
     ad2:	cf 92       	push	r12
     ad4:	df 92       	push	r13
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	ec 01       	movw	r28, r24
  // INIT BUFFERVAR TO RECEIVE DATA
  uint8_t mask = 128;
  uint8_t idx = 0;

  // EMPTY BUFFER
  for (uint8_t i = 0; i < 5; i++) _bits[i] = 0;
     ae2:	18 8e       	std	Y+24, r1	; 0x18
     ae4:	19 8e       	std	Y+25, r1	; 0x19
     ae6:	1a 8e       	std	Y+26, r1	; 0x1a
     ae8:	1b 8e       	std	Y+27, r1	; 0x1b
     aea:	1c 8e       	std	Y+28, r1	; 0x1c

  // REQUEST SAMPLE
  pinMode(_pin, OUTPUT);
     aec:	61 e0       	ldi	r22, 0x01	; 1
     aee:	88 85       	ldd	r24, Y+8	; 0x08
     af0:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <pinMode>
  digitalWrite(_pin, LOW);
     af4:	60 e0       	ldi	r22, 0x00	; 0
     af6:	88 85       	ldd	r24, Y+8	; 0x08
     af8:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <digitalWrite>
  delay(_wakeupDelay);
     afc:	69 85       	ldd	r22, Y+9	; 0x09
     afe:	70 e0       	ldi	r23, 0x00	; 0
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	0e 94 b5 0c 	call	0x196a	; 0x196a <delay>
  pinMode(_pin, INPUT);
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	88 85       	ldd	r24, Y+8	; 0x08
     b0c:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <pinMode>
  delayMicroseconds(40);
     b10:	88 e2       	ldi	r24, 0x28	; 40
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <delayMicroseconds>
     b18:	08 ec       	ldi	r16, 0xC8	; 200
     b1a:	10 e0       	ldi	r17, 0x00	; 0

  // GET ACKNOWLEDGE or TIMEOUT
  uint16_t loopCnt = DHTLIB_TIMEOUT;
  while(digitalRead(_pin) == LOW)
     b1c:	88 85       	ldd	r24, Y+8	; 0x08
     b1e:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <digitalRead>
     b22:	89 2b       	or	r24, r25
     b24:	31 f4       	brne	.+12     	; 0xb32 <_ZN6DHTNEW11_readSensorEv+0x68>
     b26:	01 50       	subi	r16, 0x01	; 1
     b28:	11 09       	sbc	r17, r1
  {
    if (--loopCnt == 0) return DHTLIB_ERROR_TIMEOUT;
     b2a:	c1 f7       	brne	.-16     	; 0xb1c <_ZN6DHTNEW11_readSensorEv+0x52>
     b2c:	8e ef       	ldi	r24, 0xFE	; 254
     b2e:	9f ef       	ldi	r25, 0xFF	; 255
     b30:	46 c0       	rjmp	.+140    	; 0xbbe <_ZN6DHTNEW11_readSensorEv+0xf4>
     b32:	08 ec       	ldi	r16, 0xC8	; 200
     b34:	10 e0       	ldi	r17, 0x00	; 0
  }

  loopCnt = DHTLIB_TIMEOUT;
  while(digitalRead(_pin) == HIGH)
     b36:	88 85       	ldd	r24, Y+8	; 0x08
     b38:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <digitalRead>
     b3c:	01 97       	sbiw	r24, 0x01	; 1
     b3e:	21 f4       	brne	.+8      	; 0xb48 <_ZN6DHTNEW11_readSensorEv+0x7e>
     b40:	01 50       	subi	r16, 0x01	; 1
     b42:	11 09       	sbc	r17, r1
  {
    if (--loopCnt == 0) return DHTLIB_ERROR_TIMEOUT;
     b44:	c1 f7       	brne	.-16     	; 0xb36 <_ZN6DHTNEW11_readSensorEv+0x6c>
     b46:	f2 cf       	rjmp	.-28     	; 0xb2c <_ZN6DHTNEW11_readSensorEv+0x62>
     b48:	08 e2       	ldi	r16, 0x28	; 40
     b4a:	f1 2c       	mov	r15, r1
     b4c:	10 e8       	ldi	r17, 0x80	; 128
     b4e:	98 ec       	ldi	r25, 0xC8	; 200
     b50:	c9 2e       	mov	r12, r25
     b52:	d1 2c       	mov	r13, r1

  // READ THE OUTPUT - 40 BITS => 5 BYTES
  for (uint8_t i = 40; i != 0; i--)
  {
    loopCnt = DHTLIB_TIMEOUT;
    while(digitalRead(_pin) == LOW)
     b54:	88 85       	ldd	r24, Y+8	; 0x08
     b56:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <digitalRead>
     b5a:	89 2b       	or	r24, r25
     b5c:	29 f4       	brne	.+10     	; 0xb68 <_ZN6DHTNEW11_readSensorEv+0x9e>
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	c8 1a       	sub	r12, r24
     b62:	d1 08       	sbc	r13, r1
    {
      if (--loopCnt == 0) return DHTLIB_ERROR_TIMEOUT;
     b64:	b9 f7       	brne	.-18     	; 0xb54 <_ZN6DHTNEW11_readSensorEv+0x8a>
     b66:	e2 cf       	rjmp	.-60     	; 0xb2c <_ZN6DHTNEW11_readSensorEv+0x62>
    }

    uint32_t t = micros();
     b68:	0e 94 90 0c 	call	0x1920	; 0x1920 <micros>
     b6c:	4b 01       	movw	r8, r22
     b6e:	5c 01       	movw	r10, r24
     b70:	88 ec       	ldi	r24, 0xC8	; 200
     b72:	c8 2e       	mov	r12, r24
     b74:	d1 2c       	mov	r13, r1

    loopCnt = DHTLIB_TIMEOUT;
    while(digitalRead(_pin) == HIGH)
     b76:	88 85       	ldd	r24, Y+8	; 0x08
     b78:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <digitalRead>
     b7c:	01 97       	sbiw	r24, 0x01	; 1
     b7e:	29 f4       	brne	.+10     	; 0xb8a <_ZN6DHTNEW11_readSensorEv+0xc0>
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	c8 1a       	sub	r12, r24
     b84:	d1 08       	sbc	r13, r1
    {
      if (--loopCnt == 0) return DHTLIB_ERROR_TIMEOUT;
     b86:	b9 f7       	brne	.-18     	; 0xb76 <_ZN6DHTNEW11_readSensorEv+0xac>
     b88:	d1 cf       	rjmp	.-94     	; 0xb2c <_ZN6DHTNEW11_readSensorEv+0x62>
    }

    if ((micros() - t) > 40)
     b8a:	0e 94 90 0c 	call	0x1920	; 0x1920 <micros>
     b8e:	dc 01       	movw	r26, r24
     b90:	cb 01       	movw	r24, r22
     b92:	88 19       	sub	r24, r8
     b94:	99 09       	sbc	r25, r9
     b96:	aa 09       	sbc	r26, r10
     b98:	bb 09       	sbc	r27, r11
     b9a:	89 97       	sbiw	r24, 0x29	; 41
     b9c:	a1 05       	cpc	r26, r1
     b9e:	b1 05       	cpc	r27, r1
     ba0:	30 f0       	brcs	.+12     	; 0xbae <_ZN6DHTNEW11_readSensorEv+0xe4>
    {
      _bits[idx] |= mask;
     ba2:	fe 01       	movw	r30, r28
     ba4:	ef 0d       	add	r30, r15
     ba6:	f1 1d       	adc	r31, r1
     ba8:	80 8d       	ldd	r24, Z+24	; 0x18
     baa:	81 2b       	or	r24, r17
     bac:	80 8f       	std	Z+24, r24	; 0x18
    }
    mask >>= 1;
     bae:	16 95       	lsr	r17
    if (mask == 0)   // next byte?
     bb0:	11 f4       	brne	.+4      	; 0xbb6 <_ZN6DHTNEW11_readSensorEv+0xec>
    {
      mask = 128;
      idx++;
     bb2:	f3 94       	inc	r15
      _bits[idx] |= mask;
    }
    mask >>= 1;
    if (mask == 0)   // next byte?
    {
      mask = 128;
     bb4:	10 e8       	ldi	r17, 0x80	; 128
     bb6:	01 50       	subi	r16, 0x01	; 1
  {
    if (--loopCnt == 0) return DHTLIB_ERROR_TIMEOUT;
  }

  // READ THE OUTPUT - 40 BITS => 5 BYTES
  for (uint8_t i = 40; i != 0; i--)
     bb8:	51 f6       	brne	.-108    	; 0xb4e <_ZN6DHTNEW11_readSensorEv+0x84>
      mask = 128;
      idx++;
    }
  }

  return DHTLIB_OK;
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
}
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	1f 91       	pop	r17
     bc4:	0f 91       	pop	r16
     bc6:	ff 90       	pop	r15
     bc8:	df 90       	pop	r13
     bca:	cf 90       	pop	r12
     bcc:	bf 90       	pop	r11
     bce:	af 90       	pop	r10
     bd0:	9f 90       	pop	r9
     bd2:	8f 90       	pop	r8
     bd4:	08 95       	ret

00000bd6 <_ZN6DHTNEW5_readEv>:
// return values:
// DHTLIB_OK
// DHTLIB_ERROR_CHECKSUM
// DHTLIB_ERROR_TIMEOUT
int DHTNEW::_read()
{
     bd6:	8f 92       	push	r8
     bd8:	9f 92       	push	r9
     bda:	af 92       	push	r10
     bdc:	bf 92       	push	r11
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	ec 01       	movw	r28, r24
  _lastRead = millis();
     bec:	0e 94 84 0c 	call	0x1908	; 0x1908 <millis>
     bf0:	6b 8b       	std	Y+19, r22	; 0x13
     bf2:	7c 8b       	std	Y+20, r23	; 0x14
     bf4:	8d 8b       	std	Y+21, r24	; 0x15
     bf6:	9e 8b       	std	Y+22, r25	; 0x16

  // READ VALUES
  if (_disableIRQ) noInterrupts();
     bf8:	8f 89       	ldd	r24, Y+23	; 0x17
     bfa:	88 23       	and	r24, r24
     bfc:	09 f0       	breq	.+2      	; 0xc00 <_ZN6DHTNEW5_readEv+0x2a>
     bfe:	f8 94       	cli
  int rv = _readSensor();
     c00:	ce 01       	movw	r24, r28
     c02:	0e 94 65 05 	call	0xaca	; 0xaca <_ZN6DHTNEW11_readSensorEv>
  if (_disableIRQ) interrupts();
     c06:	2f 89       	ldd	r18, Y+23	; 0x17
     c08:	22 23       	and	r18, r18
     c0a:	09 f0       	breq	.+2      	; 0xc0e <_ZN6DHTNEW5_readEv+0x38>
     c0c:	78 94       	sei

  if (rv != DHTLIB_OK)
     c0e:	00 97       	sbiw	r24, 0x00	; 0
     c10:	69 f0       	breq	.+26     	; 0xc2c <_ZN6DHTNEW5_readEv+0x56>
  {
    humidity    = DHTLIB_INVALID_VALUE;
     c12:	40 e0       	ldi	r20, 0x00	; 0
     c14:	50 ec       	ldi	r21, 0xC0	; 192
     c16:	69 e7       	ldi	r22, 0x79	; 121
     c18:	74 ec       	ldi	r23, 0xC4	; 196
     c1a:	48 83       	st	Y, r20
     c1c:	59 83       	std	Y+1, r21	; 0x01
     c1e:	6a 83       	std	Y+2, r22	; 0x02
     c20:	7b 83       	std	Y+3, r23	; 0x03
    temperature = DHTLIB_INVALID_VALUE;
     c22:	4c 83       	std	Y+4, r20	; 0x04
     c24:	5d 83       	std	Y+5, r21	; 0x05
     c26:	6e 83       	std	Y+6, r22	; 0x06
     c28:	7f 83       	std	Y+7, r23	; 0x07
    return rv; // propagate error value
     c2a:	a0 c0       	rjmp	.+320    	; 0xd6c <_ZN6DHTNEW5_readEv+0x196>
  }

  if (_type == 22) // DHT22, DHT33, DHT44, compatible
     c2c:	8a 85       	ldd	r24, Y+10	; 0x0a
     c2e:	f8 8c       	ldd	r15, Y+24	; 0x18
     c30:	09 8d       	ldd	r16, Y+25	; 0x19
     c32:	ea 8c       	ldd	r14, Y+26	; 0x1a
     c34:	1b 8d       	ldd	r17, Y+27	; 0x1b
     c36:	86 31       	cpi	r24, 0x16	; 22
     c38:	49 f5       	brne	.+82     	; 0xc8c <_ZN6DHTNEW5_readEv+0xb6>
  {
    humidity =    (_bits[0] * 256 + _bits[1]) * 0.1;
     c3a:	6f 2d       	mov	r22, r15
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	76 2f       	mov	r23, r22
     c40:	66 27       	eor	r22, r22
     c42:	60 0f       	add	r22, r16
     c44:	71 1d       	adc	r23, r1
     c46:	07 2e       	mov	r0, r23
     c48:	00 0c       	add	r0, r0
     c4a:	88 0b       	sbc	r24, r24
     c4c:	99 0b       	sbc	r25, r25
     c4e:	0e 94 82 0a 	call	0x1504	; 0x1504 <__floatsisf>
     c52:	2d ec       	ldi	r18, 0xCD	; 205
     c54:	3c ec       	ldi	r19, 0xCC	; 204
     c56:	4c ec       	ldi	r20, 0xCC	; 204
     c58:	5d e3       	ldi	r21, 0x3D	; 61
     c5a:	0e 94 37 0b 	call	0x166e	; 0x166e <__mulsf3>
     c5e:	68 83       	st	Y, r22
     c60:	79 83       	std	Y+1, r23	; 0x01
     c62:	8a 83       	std	Y+2, r24	; 0x02
     c64:	9b 83       	std	Y+3, r25	; 0x03
    temperature = (_bits[2] * 256 + _bits[3]) * 0.1;
     c66:	6e 2d       	mov	r22, r14
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	76 2f       	mov	r23, r22
     c6c:	66 27       	eor	r22, r22
     c6e:	61 0f       	add	r22, r17
     c70:	71 1d       	adc	r23, r1
     c72:	07 2e       	mov	r0, r23
     c74:	00 0c       	add	r0, r0
     c76:	88 0b       	sbc	r24, r24
     c78:	99 0b       	sbc	r25, r25
     c7a:	0e 94 82 0a 	call	0x1504	; 0x1504 <__floatsisf>
     c7e:	2d ec       	ldi	r18, 0xCD	; 205
     c80:	3c ec       	ldi	r19, 0xCC	; 204
     c82:	4c ec       	ldi	r20, 0xCC	; 204
     c84:	5d e3       	ldi	r21, 0x3D	; 61
     c86:	0e 94 37 0b 	call	0x166e	; 0x166e <__mulsf3>
     c8a:	38 c0       	rjmp	.+112    	; 0xcfc <_ZN6DHTNEW5_readEv+0x126>
  }
  else // if (_type == 11)  // DHT11, DH12, compatible
  {
    humidity = _bits[0] + _bits[1] * 0.1;
     c8c:	60 2f       	mov	r22, r16
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	0e 94 82 0a 	call	0x1504	; 0x1504 <__floatsisf>
     c98:	2d ec       	ldi	r18, 0xCD	; 205
     c9a:	3c ec       	ldi	r19, 0xCC	; 204
     c9c:	4c ec       	ldi	r20, 0xCC	; 204
     c9e:	5d e3       	ldi	r21, 0x3D	; 61
     ca0:	0e 94 37 0b 	call	0x166e	; 0x166e <__mulsf3>
     ca4:	4b 01       	movw	r8, r22
     ca6:	5c 01       	movw	r10, r24
     ca8:	6f 2d       	mov	r22, r15
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	0e 94 82 0a 	call	0x1504	; 0x1504 <__floatsisf>
     cb4:	9b 01       	movw	r18, r22
     cb6:	ac 01       	movw	r20, r24
     cb8:	c5 01       	movw	r24, r10
     cba:	b4 01       	movw	r22, r8
     cbc:	0e 94 de 09 	call	0x13bc	; 0x13bc <__addsf3>
     cc0:	68 83       	st	Y, r22
     cc2:	79 83       	std	Y+1, r23	; 0x01
     cc4:	8a 83       	std	Y+2, r24	; 0x02
     cc6:	9b 83       	std	Y+3, r25	; 0x03
    temperature = _bits[2] + _bits[3] * 0.1;
     cc8:	61 2f       	mov	r22, r17
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	0e 94 82 0a 	call	0x1504	; 0x1504 <__floatsisf>
     cd4:	2d ec       	ldi	r18, 0xCD	; 205
     cd6:	3c ec       	ldi	r19, 0xCC	; 204
     cd8:	4c ec       	ldi	r20, 0xCC	; 204
     cda:	5d e3       	ldi	r21, 0x3D	; 61
     cdc:	0e 94 37 0b 	call	0x166e	; 0x166e <__mulsf3>
     ce0:	4b 01       	movw	r8, r22
     ce2:	5c 01       	movw	r10, r24
     ce4:	6e 2d       	mov	r22, r14
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	0e 94 82 0a 	call	0x1504	; 0x1504 <__floatsisf>
     cf0:	9b 01       	movw	r18, r22
     cf2:	ac 01       	movw	r20, r24
     cf4:	c5 01       	movw	r24, r10
     cf6:	b4 01       	movw	r22, r8
     cf8:	0e 94 de 09 	call	0x13bc	; 0x13bc <__addsf3>
     cfc:	6c 83       	std	Y+4, r22	; 0x04
     cfe:	7d 83       	std	Y+5, r23	; 0x05
     d00:	8e 83       	std	Y+6, r24	; 0x06
     d02:	9f 83       	std	Y+7, r25	; 0x07
  }

  if (_bits[2] & 0x80)  // negative temperature
     d04:	e7 fe       	sbrs	r14, 7
     d06:	09 c0       	rjmp	.+18     	; 0xd1a <_ZN6DHTNEW5_readEv+0x144>
  {
    temperature = -temperature;
     d08:	8c 81       	ldd	r24, Y+4	; 0x04
     d0a:	9d 81       	ldd	r25, Y+5	; 0x05
     d0c:	ae 81       	ldd	r26, Y+6	; 0x06
     d0e:	bf 81       	ldd	r27, Y+7	; 0x07
     d10:	b0 58       	subi	r27, 0x80	; 128
     d12:	8c 83       	std	Y+4, r24	; 0x04
     d14:	9d 83       	std	Y+5, r25	; 0x05
     d16:	ae 83       	std	Y+6, r26	; 0x06
     d18:	bf 83       	std	Y+7, r27	; 0x07
  }
  humidity += _humOffset;       // check overflow ???
     d1a:	2b 85       	ldd	r18, Y+11	; 0x0b
     d1c:	3c 85       	ldd	r19, Y+12	; 0x0c
     d1e:	4d 85       	ldd	r20, Y+13	; 0x0d
     d20:	5e 85       	ldd	r21, Y+14	; 0x0e
     d22:	68 81       	ld	r22, Y
     d24:	79 81       	ldd	r23, Y+1	; 0x01
     d26:	8a 81       	ldd	r24, Y+2	; 0x02
     d28:	9b 81       	ldd	r25, Y+3	; 0x03
     d2a:	0e 94 de 09 	call	0x13bc	; 0x13bc <__addsf3>
     d2e:	68 83       	st	Y, r22
     d30:	79 83       	std	Y+1, r23	; 0x01
     d32:	8a 83       	std	Y+2, r24	; 0x02
     d34:	9b 83       	std	Y+3, r25	; 0x03
  temperature += _tempOffset;
     d36:	2f 85       	ldd	r18, Y+15	; 0x0f
     d38:	38 89       	ldd	r19, Y+16	; 0x10
     d3a:	49 89       	ldd	r20, Y+17	; 0x11
     d3c:	5a 89       	ldd	r21, Y+18	; 0x12
     d3e:	6c 81       	ldd	r22, Y+4	; 0x04
     d40:	7d 81       	ldd	r23, Y+5	; 0x05
     d42:	8e 81       	ldd	r24, Y+6	; 0x06
     d44:	9f 81       	ldd	r25, Y+7	; 0x07
     d46:	0e 94 de 09 	call	0x13bc	; 0x13bc <__addsf3>
     d4a:	6c 83       	std	Y+4, r22	; 0x04
     d4c:	7d 83       	std	Y+5, r23	; 0x05
     d4e:	8e 83       	std	Y+6, r24	; 0x06
     d50:	9f 83       	std	Y+7, r25	; 0x07

  // TEST CHECKSUM
  uint8_t sum = _bits[0] + _bits[1] + _bits[2] + _bits[3];
  if (_bits[4] != sum)
     d52:	fe 0c       	add	r15, r14
     d54:	0f 0d       	add	r16, r15
     d56:	10 0f       	add	r17, r16
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	2c 8d       	ldd	r18, Y+28	; 0x1c
     d5e:	12 13       	cpse	r17, r18
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <_ZN6DHTNEW5_readEv+0x190>
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	91 95       	neg	r25
     d68:	81 95       	neg	r24
     d6a:	91 09       	sbc	r25, r1
  {
    return DHTLIB_ERROR_CHECKSUM;
  }
  return DHTLIB_OK;
}
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	ff 90       	pop	r15
     d76:	ef 90       	pop	r14
     d78:	bf 90       	pop	r11
     d7a:	af 90       	pop	r10
     d7c:	9f 90       	pop	r9
     d7e:	8f 90       	pop	r8
     d80:	08 95       	ret

00000d82 <_ZN6DHTNEW4readEv>:
// return values:
// DHTLIB_OK
// DHTLIB_ERROR_CHECKSUM
// DHTLIB_ERROR_TIMEOUT
int DHTNEW::read()
{
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
  if (_type != 0) return _read();
     d86:	fc 01       	movw	r30, r24
     d88:	22 85       	ldd	r18, Z+10	; 0x0a
     d8a:	22 23       	and	r18, r18
     d8c:	21 f0       	breq	.+8      	; 0xd96 <_ZN6DHTNEW4readEv+0x14>
  rv = _read();
  if (rv == DHTLIB_OK) return rv;

  _type = 0; // retry next time
  return rv;
}
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
// DHTLIB_OK
// DHTLIB_ERROR_CHECKSUM
// DHTLIB_ERROR_TIMEOUT
int DHTNEW::read()
{
  if (_type != 0) return _read();
     d92:	0c 94 eb 05 	jmp	0xbd6	; 0xbd6 <_ZN6DHTNEW5_readEv>
     d96:	ec 01       	movw	r28, r24

  _type = 22;
     d98:	86 e1       	ldi	r24, 0x16	; 22
     d9a:	82 87       	std	Z+10, r24	; 0x0a
  _wakeupDelay = DHTLIB_DHT_WAKEUP;
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	81 87       	std	Z+9, r24	; 0x09
  int rv = _read();
     da0:	cf 01       	movw	r24, r30
     da2:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <_ZN6DHTNEW5_readEv>
  if (rv == DHTLIB_OK) return rv;
     da6:	89 2b       	or	r24, r25
     da8:	59 f0       	breq	.+22     	; 0xdc0 <_ZN6DHTNEW4readEv+0x3e>

  _type = 11;
     daa:	8b e0       	ldi	r24, 0x0B	; 11
     dac:	8a 87       	std	Y+10, r24	; 0x0a
  _wakeupDelay = DHTLIB_DHT11_WAKEUP;
     dae:	82 e1       	ldi	r24, 0x12	; 18
     db0:	89 87       	std	Y+9, r24	; 0x09
  rv = _read();
     db2:	ce 01       	movw	r24, r28
     db4:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <_ZN6DHTNEW5_readEv>
  if (rv == DHTLIB_OK) return rv;
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	11 f0       	breq	.+4      	; 0xdc0 <_ZN6DHTNEW4readEv+0x3e>

  _type = 0; // retry next time
     dbc:	1a 86       	std	Y+10, r1	; 0x0a
  return rv;
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <_ZN6DHTNEW4readEv+0x42>
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	90 e0       	ldi	r25, 0x00	; 0
}
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	08 95       	ret

00000dca <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t>:
		if (clockSource & CS22) TCCR2B |= (1 << CS22);
		if (clockSource & CS21) TCCR2B |= (1 << CS21);
		if (clockSource & CS20) TCCR2B |= (1 << CS20);	
	}
	#endif
}
     dca:	41 11       	cpse	r20, r1
     dcc:	05 c0       	rjmp	.+10     	; 0xdd8 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0xe>
     dce:	ea e7       	ldi	r30, 0x7A	; 122
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	8f 77       	andi	r24, 0x7F	; 127
     dd6:	80 83       	st	Z, r24
     dd8:	6a 30       	cpi	r22, 0x0A	; 10
     dda:	a9 f0       	breq	.+42     	; 0xe06 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x3c>
     ddc:	63 fd       	sbrc	r22, 3
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x1a>
     de0:	88 e0       	ldi	r24, 0x08	; 8
     de2:	01 c0       	rjmp	.+2      	; 0xde6 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x1c>
     de4:	88 e2       	ldi	r24, 0x28	; 40
     de6:	67 70       	andi	r22, 0x07	; 7
     de8:	68 2b       	or	r22, r24
     dea:	88 e1       	ldi	r24, 0x18	; 24
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	f8 94       	cli
     df0:	a8 95       	wdr
     df2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     dfc:	e0 e6       	ldi	r30, 0x60	; 96
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	80 64       	ori	r24, 0x40	; 64
     e04:	80 83       	st	Z, r24
     e06:	21 11       	cpse	r18, r1
     e08:	14 c0       	rjmp	.+40     	; 0xe32 <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x68>
     e0a:	83 b7       	in	r24, 0x33	; 51
     e0c:	81 7f       	andi	r24, 0xF1	; 241
     e0e:	84 60       	ori	r24, 0x04	; 4
     e10:	83 bf       	out	0x33, r24	; 51
     e12:	f8 94       	cli
     e14:	83 b7       	in	r24, 0x33	; 51
     e16:	81 60       	ori	r24, 0x01	; 1
     e18:	83 bf       	out	0x33, r24	; 51
     e1a:	85 b7       	in	r24, 0x35	; 53
     e1c:	80 66       	ori	r24, 0x60	; 96
     e1e:	85 bf       	out	0x35, r24	; 53
     e20:	8f 7d       	andi	r24, 0xDF	; 223
     e22:	85 bf       	out	0x35, r24	; 53
     e24:	78 94       	sei
     e26:	88 95       	sleep
     e28:	83 b7       	in	r24, 0x33	; 51
     e2a:	8e 7f       	andi	r24, 0xFE	; 254
     e2c:	83 bf       	out	0x33, r24	; 51
     e2e:	78 94       	sei
     e30:	0e c0       	rjmp	.+28     	; 0xe4e <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x84>
     e32:	83 b7       	in	r24, 0x33	; 51
     e34:	81 7f       	andi	r24, 0xF1	; 241
     e36:	84 60       	ori	r24, 0x04	; 4
     e38:	83 bf       	out	0x33, r24	; 51
     e3a:	f8 94       	cli
     e3c:	83 b7       	in	r24, 0x33	; 51
     e3e:	81 60       	ori	r24, 0x01	; 1
     e40:	83 bf       	out	0x33, r24	; 51
     e42:	78 94       	sei
     e44:	88 95       	sleep
     e46:	83 b7       	in	r24, 0x33	; 51
     e48:	8e 7f       	andi	r24, 0xFE	; 254
     e4a:	83 bf       	out	0x33, r24	; 51
     e4c:	78 94       	sei
     e4e:	41 11       	cpse	r20, r1
     e50:	05 c0       	rjmp	.+10     	; 0xe5c <_ZN13LowPowerClass9powerDownE8period_t5adc_t5bod_t+0x92>
     e52:	ea e7       	ldi	r30, 0x7A	; 122
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	80 68       	ori	r24, 0x80	; 128
     e5a:	80 83       	st	Z, r24
     e5c:	08 95       	ret

00000e5e <__vector_6>:
*		       required to allow automatic WDIF and WDIE bit clearance in 
*			   hardware.
*
*******************************************************************************/
ISR (WDT_vect)
{
     e5e:	1f 92       	push	r1
     e60:	0f 92       	push	r0
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	0f 92       	push	r0
     e66:	11 24       	eor	r1, r1
     e68:	8f 93       	push	r24
				"out __SREG__,__tmp_reg__"   "\n\t"
				: [TEMPREG] "=d" (temp_reg)
				: [WDTREG]  "n"  (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
				[WDCE_WDE]  "n"  ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE)))
				: "r0"
		);
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	f8 94       	cli
     e6e:	a8 95       	wdr
     e70:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     e74:	88 61       	ori	r24, 0x18	; 24
     e76:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     e7a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     e7e:	0f be       	out	0x3f, r0	; 63
	// WDIE & WDIF is cleared in hardware upon entering this ISR
	wdt_disable();
}
     e80:	8f 91       	pop	r24
     e82:	0f 90       	pop	r0
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	0f 90       	pop	r0
     e88:	1f 90       	pop	r1
     e8a:	18 95       	reti

00000e8c <_ZN8RCSwitch11setProtocolEi>:
  return RCSwitch::nReceivedProtocol;
}

unsigned int* RCSwitch::getReceivedRawdata() {
  return RCSwitch::timings;
}
     e8c:	9b 01       	movw	r18, r22
     e8e:	21 50       	subi	r18, 0x01	; 1
     e90:	31 09       	sbc	r19, r1
     e92:	26 30       	cpi	r18, 0x06	; 6
     e94:	31 05       	cpc	r19, r1
     e96:	10 f0       	brcs	.+4      	; 0xe9c <_ZN8RCSwitch11setProtocolEi+0x10>
     e98:	61 e0       	ldi	r22, 0x01	; 1
     e9a:	70 e0       	ldi	r23, 0x00	; 0
     e9c:	61 50       	subi	r22, 0x01	; 1
     e9e:	71 09       	sbc	r23, r1
     ea0:	49 e0       	ldi	r20, 0x09	; 9
     ea2:	46 9f       	mul	r20, r22
     ea4:	90 01       	movw	r18, r0
     ea6:	47 9f       	mul	r20, r23
     ea8:	30 0d       	add	r19, r0
     eaa:	11 24       	eor	r1, r1
     eac:	b9 01       	movw	r22, r18
     eae:	68 59       	subi	r22, 0x98	; 152
     eb0:	7f 4f       	sbci	r23, 0xFF	; 255
     eb2:	49 e0       	ldi	r20, 0x09	; 9
     eb4:	50 e0       	ldi	r21, 0x00	; 0
     eb6:	06 96       	adiw	r24, 0x06	; 6
     eb8:	0c 94 23 11 	jmp	0x2246	; 0x2246 <memcpy_P>

00000ebc <_ZN8RCSwitchC1Ev>:
     ebc:	0f 93       	push	r16
     ebe:	1f 93       	push	r17
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
     ec4:	ec 01       	movw	r28, r24
     ec6:	0f ef       	ldi	r16, 0xFF	; 255
     ec8:	1f ef       	ldi	r17, 0xFF	; 255
     eca:	1b 83       	std	Y+3, r17	; 0x03
     ecc:	0a 83       	std	Y+2, r16	; 0x02
     ece:	8a e0       	ldi	r24, 0x0A	; 10
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	9d 83       	std	Y+5, r25	; 0x05
     ed4:	8c 83       	std	Y+4, r24	; 0x04
     ed6:	61 e0       	ldi	r22, 0x01	; 1
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	ce 01       	movw	r24, r28
     edc:	0e 94 46 07 	call	0xe8c	; 0xe8c <_ZN8RCSwitch11setProtocolEi>
     ee0:	19 83       	std	Y+1, r17	; 0x01
     ee2:	08 83       	st	Y, r16
     ee4:	8c e3       	ldi	r24, 0x3C	; 60
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_ZN8RCSwitch17nReceiveToleranceE+0x1>
     eec:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_ZN8RCSwitch17nReceiveToleranceE>
     ef0:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <_ZN8RCSwitch14nReceivedValueE>
     ef4:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <_ZN8RCSwitch14nReceivedValueE+0x1>
     ef8:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <_ZN8RCSwitch14nReceivedValueE+0x2>
     efc:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <_ZN8RCSwitch14nReceivedValueE+0x3>
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	08 95       	ret

00000f0a <_ZN8RCSwitch17setRepeatTransmitEi>:
     f0a:	fc 01       	movw	r30, r24
     f0c:	75 83       	std	Z+5, r23	; 0x05
     f0e:	64 83       	std	Z+4, r22	; 0x04
     f10:	08 95       	ret

00000f12 <_ZN8RCSwitch14enableTransmitEi>:
     f12:	fc 01       	movw	r30, r24
     f14:	86 2f       	mov	r24, r22
     f16:	62 83       	std	Z+2, r22	; 0x02
     f18:	73 83       	std	Z+3, r23	; 0x03
     f1a:	61 e0       	ldi	r22, 0x01	; 1
     f1c:	0c 94 5e 0d 	jmp	0x1abc	; 0x1abc <pinMode>

00000f20 <_ZN8RCSwitch15disableTransmitEv>:
     f20:	2f ef       	ldi	r18, 0xFF	; 255
     f22:	3f ef       	ldi	r19, 0xFF	; 255
     f24:	fc 01       	movw	r30, r24
     f26:	33 83       	std	Z+3, r19	; 0x03
     f28:	22 83       	std	Z+2, r18	; 0x02
     f2a:	08 95       	ret

00000f2c <_ZN8RCSwitch8transmitENS_7HighLowE>:
     f2c:	ff 92       	push	r15
     f2e:	0f 93       	push	r16
     f30:	1f 93       	push	r17
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
     f36:	ec 01       	movw	r28, r24
     f38:	f6 2e       	mov	r15, r22
     f3a:	07 2f       	mov	r16, r23
     f3c:	8e 85       	ldd	r24, Y+14	; 0x0e
     f3e:	88 23       	and	r24, r24
     f40:	19 f0       	breq	.+6      	; 0xf48 <_ZN8RCSwitch8transmitENS_7HighLowE+0x1c>
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	11 e0       	ldi	r17, 0x01	; 1
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <_ZN8RCSwitch8transmitENS_7HighLowE+0x20>
     f48:	61 e0       	ldi	r22, 0x01	; 1
     f4a:	10 e0       	ldi	r17, 0x00	; 0
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <digitalWrite>
     f52:	8e 81       	ldd	r24, Y+6	; 0x06
     f54:	9f 81       	ldd	r25, Y+7	; 0x07
     f56:	9c 01       	movw	r18, r24
     f58:	f2 9e       	mul	r15, r18
     f5a:	c0 01       	movw	r24, r0
     f5c:	f3 9e       	mul	r15, r19
     f5e:	90 0d       	add	r25, r0
     f60:	11 24       	eor	r1, r1
     f62:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <delayMicroseconds>
     f66:	61 2f       	mov	r22, r17
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <digitalWrite>
     f6e:	8e 81       	ldd	r24, Y+6	; 0x06
     f70:	9f 81       	ldd	r25, Y+7	; 0x07
     f72:	9c 01       	movw	r18, r24
     f74:	02 9f       	mul	r16, r18
     f76:	c0 01       	movw	r24, r0
     f78:	03 9f       	mul	r16, r19
     f7a:	90 0d       	add	r25, r0
     f7c:	11 24       	eor	r1, r1
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	1f 91       	pop	r17
     f84:	0f 91       	pop	r16
     f86:	ff 90       	pop	r15
     f88:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <delayMicroseconds>

00000f8c <_ZN8RCSwitch13enableReceiveEv>:
     f8c:	fc 01       	movw	r30, r24
     f8e:	80 81       	ld	r24, Z
     f90:	91 81       	ldd	r25, Z+1	; 0x01
     f92:	8f 3f       	cpi	r24, 0xFF	; 255
     f94:	ff ef       	ldi	r31, 0xFF	; 255
     f96:	9f 07       	cpc	r25, r31
     f98:	91 f0       	breq	.+36     	; 0xfbe <_ZN8RCSwitch13enableReceiveEv+0x32>
     f9a:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <_ZN8RCSwitch14nReceivedValueE>
     f9e:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <_ZN8RCSwitch14nReceivedValueE+0x1>
     fa2:	10 92 69 02 	sts	0x0269, r1	; 0x800269 <_ZN8RCSwitch14nReceivedValueE+0x2>
     fa6:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <_ZN8RCSwitch14nReceivedValueE+0x3>
     faa:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <_ZN8RCSwitch18nReceivedBitlengthE+0x1>
     fae:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <_ZN8RCSwitch18nReceivedBitlengthE>
     fb2:	41 e0       	ldi	r20, 0x01	; 1
     fb4:	50 e0       	ldi	r21, 0x00	; 0
     fb6:	62 e6       	ldi	r22, 0x62	; 98
     fb8:	79 e0       	ldi	r23, 0x09	; 9
     fba:	0c 94 ba 0b 	jmp	0x1774	; 0x1774 <attachInterrupt>
     fbe:	08 95       	ret

00000fc0 <_ZN8RCSwitch14disableReceiveEv>:
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	ec 01       	movw	r28, r24
     fc6:	88 81       	ld	r24, Y
     fc8:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <detachInterrupt>
     fcc:	8f ef       	ldi	r24, 0xFF	; 255
     fce:	9f ef       	ldi	r25, 0xFF	; 255
     fd0:	99 83       	std	Y+1, r25	; 0x01
     fd2:	88 83       	st	Y, r24
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	08 95       	ret

00000fda <_ZN8RCSwitch4sendEmj>:
     fda:	2f 92       	push	r2
     fdc:	3f 92       	push	r3
     fde:	4f 92       	push	r4
     fe0:	5f 92       	push	r5
     fe2:	6f 92       	push	r6
     fe4:	7f 92       	push	r7
     fe6:	8f 92       	push	r8
     fe8:	9f 92       	push	r9
     fea:	af 92       	push	r10
     fec:	bf 92       	push	r11
     fee:	cf 92       	push	r12
     ff0:	df 92       	push	r13
     ff2:	ef 92       	push	r14
     ff4:	ff 92       	push	r15
     ff6:	0f 93       	push	r16
     ff8:	1f 93       	push	r17
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29
     ffe:	dc 01       	movw	r26, r24
    1000:	12 96       	adiw	r26, 0x02	; 2
    1002:	ed 91       	ld	r30, X+
    1004:	fc 91       	ld	r31, X
    1006:	13 97       	sbiw	r26, 0x03	; 3
    1008:	31 96       	adiw	r30, 0x01	; 1
    100a:	09 f4       	brne	.+2      	; 0x100e <_ZN8RCSwitch4sendEmj+0x34>
    100c:	5c c0       	rjmp	.+184    	; 0x10c6 <_ZN8RCSwitch4sendEmj+0xec>
    100e:	19 01       	movw	r2, r18
    1010:	6a 01       	movw	r12, r20
    1012:	7b 01       	movw	r14, r22
    1014:	ec 01       	movw	r28, r24
    1016:	48 80       	ld	r4, Y
    1018:	59 80       	ldd	r5, Y+1	; 0x01
    101a:	8f ef       	ldi	r24, 0xFF	; 255
    101c:	48 16       	cp	r4, r24
    101e:	58 06       	cpc	r5, r24
    1020:	19 f0       	breq	.+6      	; 0x1028 <_ZN8RCSwitch4sendEmj+0x4e>
    1022:	ce 01       	movw	r24, r28
    1024:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <_ZN8RCSwitch14disableReceiveEv>
    1028:	61 2c       	mov	r6, r1
    102a:	71 2c       	mov	r7, r1
    102c:	81 2c       	mov	r8, r1
    102e:	91 2c       	mov	r9, r1
    1030:	54 01       	movw	r10, r8
    1032:	83 94       	inc	r8
    1034:	8c 81       	ldd	r24, Y+4	; 0x04
    1036:	9d 81       	ldd	r25, Y+5	; 0x05
    1038:	68 16       	cp	r6, r24
    103a:	79 06       	cpc	r7, r25
    103c:	4c f5       	brge	.+82     	; 0x1090 <_ZN8RCSwitch4sendEmj+0xb6>
    103e:	81 01       	movw	r16, r2
    1040:	01 50       	subi	r16, 0x01	; 1
    1042:	11 09       	sbc	r17, r1
    1044:	17 fd       	sbrc	r17, 7
    1046:	1b c0       	rjmp	.+54     	; 0x107e <_ZN8RCSwitch4sendEmj+0xa4>
    1048:	d5 01       	movw	r26, r10
    104a:	c4 01       	movw	r24, r8
    104c:	00 2e       	mov	r0, r16
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <_ZN8RCSwitch4sendEmj+0x7e>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	aa 1f       	adc	r26, r26
    1056:	bb 1f       	adc	r27, r27
    1058:	0a 94       	dec	r0
    105a:	d2 f7       	brpl	.-12     	; 0x1050 <_ZN8RCSwitch4sendEmj+0x76>
    105c:	8c 21       	and	r24, r12
    105e:	9d 21       	and	r25, r13
    1060:	ae 21       	and	r26, r14
    1062:	bf 21       	and	r27, r15
    1064:	89 2b       	or	r24, r25
    1066:	8a 2b       	or	r24, r26
    1068:	8b 2b       	or	r24, r27
    106a:	19 f0       	breq	.+6      	; 0x1072 <_ZN8RCSwitch4sendEmj+0x98>
    106c:	6c 85       	ldd	r22, Y+12	; 0x0c
    106e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <_ZN8RCSwitch4sendEmj+0x9c>
    1072:	6a 85       	ldd	r22, Y+10	; 0x0a
    1074:	7b 85       	ldd	r23, Y+11	; 0x0b
    1076:	ce 01       	movw	r24, r28
    1078:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN8RCSwitch8transmitENS_7HighLowE>
    107c:	e1 cf       	rjmp	.-62     	; 0x1040 <_ZN8RCSwitch4sendEmj+0x66>
    107e:	68 85       	ldd	r22, Y+8	; 0x08
    1080:	79 85       	ldd	r23, Y+9	; 0x09
    1082:	ce 01       	movw	r24, r28
    1084:	0e 94 96 07 	call	0xf2c	; 0xf2c <_ZN8RCSwitch8transmitENS_7HighLowE>
    1088:	af ef       	ldi	r26, 0xFF	; 255
    108a:	6a 1a       	sub	r6, r26
    108c:	7a 0a       	sbc	r7, r26
    108e:	d2 cf       	rjmp	.-92     	; 0x1034 <_ZN8RCSwitch4sendEmj+0x5a>
    1090:	bf ef       	ldi	r27, 0xFF	; 255
    1092:	4b 16       	cp	r4, r27
    1094:	5b 06       	cpc	r5, r27
    1096:	b9 f0       	breq	.+46     	; 0x10c6 <_ZN8RCSwitch4sendEmj+0xec>
    1098:	59 82       	std	Y+1, r5	; 0x01
    109a:	48 82       	st	Y, r4
    109c:	ce 01       	movw	r24, r28
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	1f 91       	pop	r17
    10a4:	0f 91       	pop	r16
    10a6:	ff 90       	pop	r15
    10a8:	ef 90       	pop	r14
    10aa:	df 90       	pop	r13
    10ac:	cf 90       	pop	r12
    10ae:	bf 90       	pop	r11
    10b0:	af 90       	pop	r10
    10b2:	9f 90       	pop	r9
    10b4:	8f 90       	pop	r8
    10b6:	7f 90       	pop	r7
    10b8:	6f 90       	pop	r6
    10ba:	5f 90       	pop	r5
    10bc:	4f 90       	pop	r4
    10be:	3f 90       	pop	r3
    10c0:	2f 90       	pop	r2
    10c2:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <_ZN8RCSwitch13enableReceiveEv>
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	1f 91       	pop	r17
    10cc:	0f 91       	pop	r16
    10ce:	ff 90       	pop	r15
    10d0:	ef 90       	pop	r14
    10d2:	df 90       	pop	r13
    10d4:	cf 90       	pop	r12
    10d6:	bf 90       	pop	r11
    10d8:	af 90       	pop	r10
    10da:	9f 90       	pop	r9
    10dc:	8f 90       	pop	r8
    10de:	7f 90       	pop	r7
    10e0:	6f 90       	pop	r6
    10e2:	5f 90       	pop	r5
    10e4:	4f 90       	pop	r4
    10e6:	3f 90       	pop	r3
    10e8:	2f 90       	pop	r2
    10ea:	08 95       	ret

000010ec <_ZN8RCSwitch15receiveProtocolEij>:
}

/**
 *
 */
bool RECEIVE_ATTR RCSwitch::receiveProtocol(const int p, unsigned int changeCount) {
    10ec:	2f 92       	push	r2
    10ee:	3f 92       	push	r3
    10f0:	4f 92       	push	r4
    10f2:	5f 92       	push	r5
    10f4:	6f 92       	push	r6
    10f6:	7f 92       	push	r7
    10f8:	8f 92       	push	r8
    10fa:	9f 92       	push	r9
    10fc:	af 92       	push	r10
    10fe:	bf 92       	push	r11
    1100:	cf 92       	push	r12
    1102:	df 92       	push	r13
    1104:	ef 92       	push	r14
    1106:	ff 92       	push	r15
    1108:	0f 93       	push	r16
    110a:	1f 93       	push	r17
    110c:	cf 93       	push	r28
    110e:	df 93       	push	r29
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
    1114:	2d 97       	sbiw	r28, 0x0d	; 13
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	f8 94       	cli
    111a:	de bf       	out	0x3e, r29	; 62
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	cd bf       	out	0x3d, r28	; 61
    1120:	8c 01       	movw	r16, r24
    1122:	7b 01       	movw	r14, r22
#ifdef ESP8266
    const Protocol &pro = proto[p-1];
#else
    Protocol pro;
    memcpy_P(&pro, &proto[p-1], sizeof(Protocol));
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	29 e0       	ldi	r18, 0x09	; 9
    1128:	28 9f       	mul	r18, r24
    112a:	b0 01       	movw	r22, r0
    112c:	29 9f       	mul	r18, r25
    112e:	70 0d       	add	r23, r0
    1130:	11 24       	eor	r1, r1
    1132:	68 59       	subi	r22, 0x98	; 152
    1134:	7f 4f       	sbci	r23, 0xFF	; 255
    1136:	49 e0       	ldi	r20, 0x09	; 9
    1138:	50 e0       	ldi	r21, 0x00	; 0
    113a:	ce 01       	movw	r24, r28
    113c:	01 96       	adiw	r24, 0x01	; 1
    113e:	0e 94 23 11 	call	0x2246	; 0x2246 <memcpy_P>
#endif

    unsigned long code = 0;
    //Assuming the longer pulse length is the pulse captured in timings[0]
    const unsigned int syncLengthInPulses =  ((pro.syncFactor.low) > (pro.syncFactor.high)) ? (pro.syncFactor.low) : (pro.syncFactor.high);
    const unsigned int delay = RCSwitch::timings[0] / syncLengthInPulses;
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	6c 81       	ldd	r22, Y+4	; 0x04
    1146:	68 17       	cp	r22, r24
    1148:	08 f4       	brcc	.+2      	; 0x114c <_ZN8RCSwitch15receiveProtocolEij+0x60>
    114a:	68 2f       	mov	r22, r24
    114c:	70 e0       	ldi	r23, 0x00	; 0
    114e:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <_ZN8RCSwitch7timingsE>
    1152:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <_ZN8RCSwitch7timingsE+0x1>
    1156:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__udivmodhi4>
    115a:	9b 01       	movw	r18, r22
    const unsigned int delayTolerance = delay * RCSwitch::nReceiveTolerance / 100;
    115c:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <_ZN8RCSwitch17nReceiveToleranceE>
    1160:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <_ZN8RCSwitch17nReceiveToleranceE+0x1>
    1164:	64 9f       	mul	r22, r20
    1166:	c0 01       	movw	r24, r0
    1168:	65 9f       	mul	r22, r21
    116a:	90 0d       	add	r25, r0
    116c:	74 9f       	mul	r23, r20
    116e:	90 0d       	add	r25, r0
    1170:	11 24       	eor	r1, r1
    1172:	64 e6       	ldi	r22, 0x64	; 100
    1174:	70 e0       	ldi	r23, 0x00	; 0
    1176:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <__udivmodhi4>
     *
     * |-filtered out-|--1st dur--|--Start data--|
     *
     * The 2nd saved duration starts the data
     */
    const unsigned int firstDataTiming = (pro.invertedSignal) ? (2) : (1);
    117a:	89 85       	ldd	r24, Y+9	; 0x09
    117c:	81 11       	cpse	r24, r1
    117e:	03 c0       	rjmp	.+6      	; 0x1186 <_ZN8RCSwitch15receiveProtocolEij+0x9a>
    1180:	a1 e0       	ldi	r26, 0x01	; 1
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	02 c0       	rjmp	.+4      	; 0x118a <_ZN8RCSwitch15receiveProtocolEij+0x9e>
    1186:	a2 e0       	ldi	r26, 0x02	; 2
    1188:	b0 e0       	ldi	r27, 0x00	; 0

    for (unsigned int i = firstDataTiming; i < changeCount - 1; i += 2) {
        code <<= 1;
        if (diff(RCSwitch::timings[i], delay * pro.zero.high) < delayTolerance &&
    118a:	8d 81       	ldd	r24, Y+5	; 0x05
    118c:	82 9f       	mul	r24, r18
    118e:	30 01       	movw	r6, r0
    1190:	83 9f       	mul	r24, r19
    1192:	70 0c       	add	r7, r0
    1194:	11 24       	eor	r1, r1
    1196:	7b 86       	std	Y+11, r7	; 0x0b
    1198:	6a 86       	std	Y+10, r6	; 0x0a
            diff(RCSwitch::timings[i + 1], delay * pro.zero.low) < delayTolerance) {
    119a:	8e 81       	ldd	r24, Y+6	; 0x06
    119c:	82 9f       	mul	r24, r18
    119e:	10 01       	movw	r2, r0
    11a0:	83 9f       	mul	r24, r19
    11a2:	30 0c       	add	r3, r0
    11a4:	11 24       	eor	r1, r1
            // zero
        } else if (diff(RCSwitch::timings[i], delay * pro.one.high) < delayTolerance &&
    11a6:	8f 81       	ldd	r24, Y+7	; 0x07
    11a8:	82 9f       	mul	r24, r18
    11aa:	20 01       	movw	r4, r0
    11ac:	83 9f       	mul	r24, r19
    11ae:	50 0c       	add	r5, r0
    11b0:	11 24       	eor	r1, r1
                   diff(RCSwitch::timings[i + 1], delay * pro.one.low) < delayTolerance) {
    11b2:	88 85       	ldd	r24, Y+8	; 0x08
    11b4:	82 9f       	mul	r24, r18
    11b6:	a0 01       	movw	r20, r0
    11b8:	83 9f       	mul	r24, r19
    11ba:	50 0d       	add	r21, r0
    11bc:	11 24       	eor	r1, r1
    11be:	5d 87       	std	Y+13, r21	; 0x0d
    11c0:	4c 87       	std	Y+12, r20	; 0x0c
    11c2:	fd 01       	movw	r30, r26
    11c4:	ee 0f       	add	r30, r30
    11c6:	ff 1f       	adc	r31, r31
    11c8:	e5 52       	subi	r30, 0x25	; 37
    11ca:	fe 4f       	sbci	r31, 0xFE	; 254
    11cc:	81 2c       	mov	r8, r1
    11ce:	91 2c       	mov	r9, r1
    11d0:	54 01       	movw	r10, r8
     *
     * The 2nd saved duration starts the data
     */
    const unsigned int firstDataTiming = (pro.invertedSignal) ? (2) : (1);

    for (unsigned int i = firstDataTiming; i < changeCount - 1; i += 2) {
    11d2:	67 01       	movw	r12, r14
    11d4:	51 e0       	ldi	r21, 0x01	; 1
    11d6:	c5 1a       	sub	r12, r21
    11d8:	d1 08       	sbc	r13, r1
    11da:	ac 15       	cp	r26, r12
    11dc:	bd 05       	cpc	r27, r13
    11de:	e0 f5       	brcc	.+120    	; 0x1258 <_ZN8RCSwitch15receiveProtocolEij+0x16c>
        code <<= 1;
    11e0:	88 0c       	add	r8, r8
    11e2:	99 1c       	adc	r9, r9
    11e4:	aa 1c       	adc	r10, r10
    11e6:	bb 1c       	adc	r11, r11
        if (diff(RCSwitch::timings[i], delay * pro.zero.high) < delayTolerance &&
    11e8:	80 81       	ld	r24, Z
    11ea:	91 81       	ldd	r25, Z+1	; 0x01
    11ec:	ac 01       	movw	r20, r24
    11ee:	6a 84       	ldd	r6, Y+10	; 0x0a
    11f0:	7b 84       	ldd	r7, Y+11	; 0x0b
    11f2:	46 19       	sub	r20, r6
    11f4:	57 09       	sbc	r21, r7
    11f6:	57 ff       	sbrs	r21, 7
    11f8:	03 c0       	rjmp	.+6      	; 0x1200 <_ZN8RCSwitch15receiveProtocolEij+0x114>
    11fa:	51 95       	neg	r21
    11fc:	41 95       	neg	r20
    11fe:	51 09       	sbc	r21, r1
    1200:	46 17       	cp	r20, r22
    1202:	57 07       	cpc	r21, r23
    1204:	60 f4       	brcc	.+24     	; 0x121e <_ZN8RCSwitch15receiveProtocolEij+0x132>
    1206:	42 81       	ldd	r20, Z+2	; 0x02
    1208:	53 81       	ldd	r21, Z+3	; 0x03
    120a:	42 19       	sub	r20, r2
    120c:	53 09       	sbc	r21, r3
    120e:	57 ff       	sbrs	r21, 7
    1210:	03 c0       	rjmp	.+6      	; 0x1218 <_ZN8RCSwitch15receiveProtocolEij+0x12c>
    1212:	51 95       	neg	r21
    1214:	41 95       	neg	r20
    1216:	51 09       	sbc	r21, r1
    1218:	46 17       	cp	r20, r22
    121a:	57 07       	cpc	r21, r23
    121c:	d0 f0       	brcs	.+52     	; 0x1252 <_ZN8RCSwitch15receiveProtocolEij+0x166>
            diff(RCSwitch::timings[i + 1], delay * pro.zero.low) < delayTolerance) {
            // zero
        } else if (diff(RCSwitch::timings[i], delay * pro.one.high) < delayTolerance &&
    121e:	84 19       	sub	r24, r4
    1220:	95 09       	sbc	r25, r5
    1222:	97 ff       	sbrs	r25, 7
    1224:	03 c0       	rjmp	.+6      	; 0x122c <_ZN8RCSwitch15receiveProtocolEij+0x140>
    1226:	91 95       	neg	r25
    1228:	81 95       	neg	r24
    122a:	91 09       	sbc	r25, r1
    122c:	86 17       	cp	r24, r22
    122e:	97 07       	cpc	r25, r23
    1230:	78 f5       	brcc	.+94     	; 0x1290 <_ZN8RCSwitch15receiveProtocolEij+0x1a4>
    1232:	82 81       	ldd	r24, Z+2	; 0x02
    1234:	93 81       	ldd	r25, Z+3	; 0x03
    1236:	4c 85       	ldd	r20, Y+12	; 0x0c
    1238:	5d 85       	ldd	r21, Y+13	; 0x0d
    123a:	84 1b       	sub	r24, r20
    123c:	95 0b       	sbc	r25, r21
    123e:	97 ff       	sbrs	r25, 7
    1240:	03 c0       	rjmp	.+6      	; 0x1248 <_ZN8RCSwitch15receiveProtocolEij+0x15c>
    1242:	91 95       	neg	r25
    1244:	81 95       	neg	r24
    1246:	91 09       	sbc	r25, r1
    1248:	86 17       	cp	r24, r22
    124a:	97 07       	cpc	r25, r23
    124c:	08 f5       	brcc	.+66     	; 0x1290 <_ZN8RCSwitch15receiveProtocolEij+0x1a4>
                   diff(RCSwitch::timings[i + 1], delay * pro.one.low) < delayTolerance) {
            // one
            code |= 1;
    124e:	68 94       	set
    1250:	80 f8       	bld	r8, 0
     *
     * The 2nd saved duration starts the data
     */
    const unsigned int firstDataTiming = (pro.invertedSignal) ? (2) : (1);

    for (unsigned int i = firstDataTiming; i < changeCount - 1; i += 2) {
    1252:	12 96       	adiw	r26, 0x02	; 2
    1254:	34 96       	adiw	r30, 0x04	; 4
    1256:	c1 cf       	rjmp	.-126    	; 0x11da <_ZN8RCSwitch15receiveProtocolEij+0xee>
            // Failed
            return false;
        }
    }

    if (changeCount > 7) {    // ignore very short transmissions: no device sends them, so this must be noise
    1258:	58 e0       	ldi	r21, 0x08	; 8
    125a:	e5 16       	cp	r14, r21
    125c:	f1 04       	cpc	r15, r1
    125e:	c0 f0       	brcs	.+48     	; 0x1290 <_ZN8RCSwitch15receiveProtocolEij+0x1a4>
        RCSwitch::nReceivedValue = code;
    1260:	80 92 67 02 	sts	0x0267, r8	; 0x800267 <_ZN8RCSwitch14nReceivedValueE>
    1264:	90 92 68 02 	sts	0x0268, r9	; 0x800268 <_ZN8RCSwitch14nReceivedValueE+0x1>
    1268:	a0 92 69 02 	sts	0x0269, r10	; 0x800269 <_ZN8RCSwitch14nReceivedValueE+0x2>
    126c:	b0 92 6a 02 	sts	0x026A, r11	; 0x80026a <_ZN8RCSwitch14nReceivedValueE+0x3>
        RCSwitch::nReceivedBitlength = (changeCount - 1) / 2;
    1270:	d6 94       	lsr	r13
    1272:	c7 94       	ror	r12
    1274:	d0 92 66 02 	sts	0x0266, r13	; 0x800266 <_ZN8RCSwitch18nReceivedBitlengthE+0x1>
    1278:	c0 92 65 02 	sts	0x0265, r12	; 0x800265 <_ZN8RCSwitch18nReceivedBitlengthE>
        RCSwitch::nReceivedDelay = delay;
    127c:	30 93 64 02 	sts	0x0264, r19	; 0x800264 <_ZN8RCSwitch14nReceivedDelayE+0x1>
    1280:	20 93 63 02 	sts	0x0263, r18	; 0x800263 <_ZN8RCSwitch14nReceivedDelayE>
        RCSwitch::nReceivedProtocol = p;
    1284:	10 93 62 02 	sts	0x0262, r17	; 0x800262 <_ZN8RCSwitch17nReceivedProtocolE+0x1>
    1288:	00 93 61 02 	sts	0x0261, r16	; 0x800261 <_ZN8RCSwitch17nReceivedProtocolE>
        return true;
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	01 c0       	rjmp	.+2      	; 0x1292 <_ZN8RCSwitch15receiveProtocolEij+0x1a6>
                   diff(RCSwitch::timings[i + 1], delay * pro.one.low) < delayTolerance) {
            // one
            code |= 1;
        } else {
            // Failed
            return false;
    1290:	80 e0       	ldi	r24, 0x00	; 0
        RCSwitch::nReceivedProtocol = p;
        return true;
    }

    return false;
}
    1292:	2d 96       	adiw	r28, 0x0d	; 13
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	1f 91       	pop	r17
    12a4:	0f 91       	pop	r16
    12a6:	ff 90       	pop	r15
    12a8:	ef 90       	pop	r14
    12aa:	df 90       	pop	r13
    12ac:	cf 90       	pop	r12
    12ae:	bf 90       	pop	r11
    12b0:	af 90       	pop	r10
    12b2:	9f 90       	pop	r9
    12b4:	8f 90       	pop	r8
    12b6:	7f 90       	pop	r7
    12b8:	6f 90       	pop	r6
    12ba:	5f 90       	pop	r5
    12bc:	4f 90       	pop	r4
    12be:	3f 90       	pop	r3
    12c0:	2f 90       	pop	r2
    12c2:	08 95       	ret

000012c4 <_ZN8RCSwitch15handleInterruptEv>:

void RECEIVE_ATTR RCSwitch::handleInterrupt() {
    12c4:	cf 92       	push	r12
    12c6:	df 92       	push	r13
    12c8:	ef 92       	push	r14
    12ca:	ff 92       	push	r15
    12cc:	0f 93       	push	r16
    12ce:	1f 93       	push	r17
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29

  static unsigned int changeCount = 0;
  static unsigned long lastTime = 0;
  static unsigned int repeatCount = 0;

  const long time = micros();
    12d4:	0e 94 90 0c 	call	0x1920	; 0x1920 <micros>
    12d8:	6b 01       	movw	r12, r22
    12da:	7c 01       	movw	r14, r24
  const unsigned int duration = time - lastTime;
    12dc:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <_ZZN8RCSwitch15handleInterruptEvE8lastTime>
    12e0:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <_ZZN8RCSwitch15handleInterruptEvE8lastTime+0x1>
    12e4:	86 01       	movw	r16, r12
    12e6:	08 1b       	sub	r16, r24
    12e8:	19 0b       	sbc	r17, r25

  if (duration > RCSwitch::nSeparationLimit) {
    12ea:	0d 3c       	cpi	r16, 0xCD	; 205
    12ec:	20 e1       	ldi	r18, 0x10	; 16
    12ee:	12 07       	cpc	r17, r18
    12f0:	90 f1       	brcs	.+100    	; 0x1356 <_ZN8RCSwitch15handleInterruptEv+0x92>
    // A long stretch without signal level change occurred. This could
    // be the gap between two transmission.
    if (diff(duration, RCSwitch::timings[0]) < 200) {
    12f2:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <_ZN8RCSwitch7timingsE>
    12f6:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <_ZN8RCSwitch7timingsE+0x1>
    12fa:	98 01       	movw	r18, r16
    12fc:	28 1b       	sub	r18, r24
    12fe:	39 0b       	sbc	r19, r25
    1300:	c9 01       	movw	r24, r18
    1302:	37 ff       	sbrs	r19, 7
    1304:	03 c0       	rjmp	.+6      	; 0x130c <_ZN8RCSwitch15handleInterruptEv+0x48>
    1306:	91 95       	neg	r25
    1308:	81 95       	neg	r24
    130a:	91 09       	sbc	r25, r1
    130c:	88 3c       	cpi	r24, 0xC8	; 200
    130e:	91 05       	cpc	r25, r1
    1310:	f4 f4       	brge	.+60     	; 0x134e <_ZN8RCSwitch15handleInterruptEv+0x8a>
      // This long signal is close in length to the long signal which
      // started the previously recorded timings; this suggests that
      // it may indeed by a a gap between two transmissions (we assume
      // here that a sender will send the signal multiple times,
      // with roughly the same gap between them).
      repeatCount++;
    1312:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount>
    1316:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount+0x1>
    131a:	01 96       	adiw	r24, 0x01	; 1
    131c:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount+0x1>
    1320:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount>
      if (repeatCount == 2) {
    1324:	02 97       	sbiw	r24, 0x02	; 2
    1326:	99 f4       	brne	.+38     	; 0x134e <_ZN8RCSwitch15handleInterruptEv+0x8a>
    1328:	c1 e0       	ldi	r28, 0x01	; 1
    132a:	d0 e0       	ldi	r29, 0x00	; 0
        for(unsigned int i = 1; i <= numProto; i++) {
          if (receiveProtocol(i, changeCount)) {
    132c:	60 91 d3 01 	lds	r22, 0x01D3	; 0x8001d3 <_ZZN8RCSwitch15handleInterruptEvE11changeCount>
    1330:	70 91 d4 01 	lds	r23, 0x01D4	; 0x8001d4 <_ZZN8RCSwitch15handleInterruptEvE11changeCount+0x1>
    1334:	ce 01       	movw	r24, r28
    1336:	0e 94 76 08 	call	0x10ec	; 0x10ec <_ZN8RCSwitch15receiveProtocolEij>
    133a:	81 11       	cpse	r24, r1
    133c:	04 c0       	rjmp	.+8      	; 0x1346 <_ZN8RCSwitch15handleInterruptEv+0x82>
      // it may indeed by a a gap between two transmissions (we assume
      // here that a sender will send the signal multiple times,
      // with roughly the same gap between them).
      repeatCount++;
      if (repeatCount == 2) {
        for(unsigned int i = 1; i <= numProto; i++) {
    133e:	21 96       	adiw	r28, 0x01	; 1
    1340:	c7 30       	cpi	r28, 0x07	; 7
    1342:	d1 05       	cpc	r29, r1
    1344:	99 f7       	brne	.-26     	; 0x132c <_ZN8RCSwitch15handleInterruptEv+0x68>
          if (receiveProtocol(i, changeCount)) {
            // receive succeeded for protocol i
            break;
          }
        }
        repeatCount = 0;
    1346:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount+0x1>
    134a:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount>
      }
    }
    changeCount = 0;
    134e:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <_ZZN8RCSwitch15handleInterruptEvE11changeCount+0x1>
    1352:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <_ZZN8RCSwitch15handleInterruptEvE11changeCount>
  }
 
  // detect overflow
  if (changeCount >= RCSWITCH_MAX_CHANGES) {
    1356:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <_ZZN8RCSwitch15handleInterruptEvE11changeCount>
    135a:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <_ZZN8RCSwitch15handleInterruptEvE11changeCount+0x1>
    135e:	83 34       	cpi	r24, 0x43	; 67
    1360:	91 05       	cpc	r25, r1
    1362:	40 f0       	brcs	.+16     	; 0x1374 <_ZN8RCSwitch15handleInterruptEv+0xb0>
    changeCount = 0;
    1364:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <_ZZN8RCSwitch15handleInterruptEvE11changeCount+0x1>
    1368:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <_ZZN8RCSwitch15handleInterruptEvE11changeCount>
    repeatCount = 0;
    136c:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount+0x1>
    1370:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <_ZZN8RCSwitch15handleInterruptEvE11repeatCount>
  }

  RCSwitch::timings[changeCount++] = duration;
    1374:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <_ZZN8RCSwitch15handleInterruptEvE11changeCount>
    1378:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <_ZZN8RCSwitch15handleInterruptEvE11changeCount+0x1>
    137c:	9c 01       	movw	r18, r24
    137e:	2f 5f       	subi	r18, 0xFF	; 255
    1380:	3f 4f       	sbci	r19, 0xFF	; 255
    1382:	30 93 d4 01 	sts	0x01D4, r19	; 0x8001d4 <_ZZN8RCSwitch15handleInterruptEvE11changeCount+0x1>
    1386:	20 93 d3 01 	sts	0x01D3, r18	; 0x8001d3 <_ZZN8RCSwitch15handleInterruptEvE11changeCount>
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	fc 01       	movw	r30, r24
    1390:	e5 52       	subi	r30, 0x25	; 37
    1392:	fe 4f       	sbci	r31, 0xFE	; 254
    1394:	11 83       	std	Z+1, r17	; 0x01
    1396:	00 83       	st	Z, r16
  lastTime = time;  
    1398:	c0 92 d7 01 	sts	0x01D7, r12	; 0x8001d7 <_ZZN8RCSwitch15handleInterruptEvE8lastTime>
    139c:	d0 92 d8 01 	sts	0x01D8, r13	; 0x8001d8 <_ZZN8RCSwitch15handleInterruptEvE8lastTime+0x1>
    13a0:	e0 92 d9 01 	sts	0x01D9, r14	; 0x8001d9 <_ZZN8RCSwitch15handleInterruptEvE8lastTime+0x2>
    13a4:	f0 92 da 01 	sts	0x01DA, r15	; 0x8001da <_ZZN8RCSwitch15handleInterruptEvE8lastTime+0x3>
}
    13a8:	df 91       	pop	r29
    13aa:	cf 91       	pop	r28
    13ac:	1f 91       	pop	r17
    13ae:	0f 91       	pop	r16
    13b0:	ff 90       	pop	r15
    13b2:	ef 90       	pop	r14
    13b4:	df 90       	pop	r13
    13b6:	cf 90       	pop	r12
    13b8:	08 95       	ret

000013ba <__subsf3>:
    13ba:	50 58       	subi	r21, 0x80	; 128

000013bc <__addsf3>:
    13bc:	bb 27       	eor	r27, r27
    13be:	aa 27       	eor	r26, r26
    13c0:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__addsf3x>
    13c4:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__fp_round>
    13c8:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__fp_pscA>
    13cc:	38 f0       	brcs	.+14     	; 0x13dc <__addsf3+0x20>
    13ce:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__fp_pscB>
    13d2:	20 f0       	brcs	.+8      	; 0x13dc <__addsf3+0x20>
    13d4:	39 f4       	brne	.+14     	; 0x13e4 <__addsf3+0x28>
    13d6:	9f 3f       	cpi	r25, 0xFF	; 255
    13d8:	19 f4       	brne	.+6      	; 0x13e0 <__addsf3+0x24>
    13da:	26 f4       	brtc	.+8      	; 0x13e4 <__addsf3+0x28>
    13dc:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__fp_nan>
    13e0:	0e f4       	brtc	.+2      	; 0x13e4 <__addsf3+0x28>
    13e2:	e0 95       	com	r30
    13e4:	e7 fb       	bst	r30, 7
    13e6:	0c 94 e1 0a 	jmp	0x15c2	; 0x15c2 <__fp_inf>

000013ea <__addsf3x>:
    13ea:	e9 2f       	mov	r30, r25
    13ec:	0e 94 09 0b 	call	0x1612	; 0x1612 <__fp_split3>
    13f0:	58 f3       	brcs	.-42     	; 0x13c8 <__addsf3+0xc>
    13f2:	ba 17       	cp	r27, r26
    13f4:	62 07       	cpc	r22, r18
    13f6:	73 07       	cpc	r23, r19
    13f8:	84 07       	cpc	r24, r20
    13fa:	95 07       	cpc	r25, r21
    13fc:	20 f0       	brcs	.+8      	; 0x1406 <__addsf3x+0x1c>
    13fe:	79 f4       	brne	.+30     	; 0x141e <__addsf3x+0x34>
    1400:	a6 f5       	brtc	.+104    	; 0x146a <__addsf3x+0x80>
    1402:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_zero>
    1406:	0e f4       	brtc	.+2      	; 0x140a <__addsf3x+0x20>
    1408:	e0 95       	com	r30
    140a:	0b 2e       	mov	r0, r27
    140c:	ba 2f       	mov	r27, r26
    140e:	a0 2d       	mov	r26, r0
    1410:	0b 01       	movw	r0, r22
    1412:	b9 01       	movw	r22, r18
    1414:	90 01       	movw	r18, r0
    1416:	0c 01       	movw	r0, r24
    1418:	ca 01       	movw	r24, r20
    141a:	a0 01       	movw	r20, r0
    141c:	11 24       	eor	r1, r1
    141e:	ff 27       	eor	r31, r31
    1420:	59 1b       	sub	r21, r25
    1422:	99 f0       	breq	.+38     	; 0x144a <__addsf3x+0x60>
    1424:	59 3f       	cpi	r21, 0xF9	; 249
    1426:	50 f4       	brcc	.+20     	; 0x143c <__addsf3x+0x52>
    1428:	50 3e       	cpi	r21, 0xE0	; 224
    142a:	68 f1       	brcs	.+90     	; 0x1486 <__addsf3x+0x9c>
    142c:	1a 16       	cp	r1, r26
    142e:	f0 40       	sbci	r31, 0x00	; 0
    1430:	a2 2f       	mov	r26, r18
    1432:	23 2f       	mov	r18, r19
    1434:	34 2f       	mov	r19, r20
    1436:	44 27       	eor	r20, r20
    1438:	58 5f       	subi	r21, 0xF8	; 248
    143a:	f3 cf       	rjmp	.-26     	; 0x1422 <__addsf3x+0x38>
    143c:	46 95       	lsr	r20
    143e:	37 95       	ror	r19
    1440:	27 95       	ror	r18
    1442:	a7 95       	ror	r26
    1444:	f0 40       	sbci	r31, 0x00	; 0
    1446:	53 95       	inc	r21
    1448:	c9 f7       	brne	.-14     	; 0x143c <__addsf3x+0x52>
    144a:	7e f4       	brtc	.+30     	; 0x146a <__addsf3x+0x80>
    144c:	1f 16       	cp	r1, r31
    144e:	ba 0b       	sbc	r27, r26
    1450:	62 0b       	sbc	r22, r18
    1452:	73 0b       	sbc	r23, r19
    1454:	84 0b       	sbc	r24, r20
    1456:	ba f0       	brmi	.+46     	; 0x1486 <__addsf3x+0x9c>
    1458:	91 50       	subi	r25, 0x01	; 1
    145a:	a1 f0       	breq	.+40     	; 0x1484 <__addsf3x+0x9a>
    145c:	ff 0f       	add	r31, r31
    145e:	bb 1f       	adc	r27, r27
    1460:	66 1f       	adc	r22, r22
    1462:	77 1f       	adc	r23, r23
    1464:	88 1f       	adc	r24, r24
    1466:	c2 f7       	brpl	.-16     	; 0x1458 <__addsf3x+0x6e>
    1468:	0e c0       	rjmp	.+28     	; 0x1486 <__addsf3x+0x9c>
    146a:	ba 0f       	add	r27, r26
    146c:	62 1f       	adc	r22, r18
    146e:	73 1f       	adc	r23, r19
    1470:	84 1f       	adc	r24, r20
    1472:	48 f4       	brcc	.+18     	; 0x1486 <__addsf3x+0x9c>
    1474:	87 95       	ror	r24
    1476:	77 95       	ror	r23
    1478:	67 95       	ror	r22
    147a:	b7 95       	ror	r27
    147c:	f7 95       	ror	r31
    147e:	9e 3f       	cpi	r25, 0xFE	; 254
    1480:	08 f0       	brcs	.+2      	; 0x1484 <__addsf3x+0x9a>
    1482:	b0 cf       	rjmp	.-160    	; 0x13e4 <__addsf3+0x28>
    1484:	93 95       	inc	r25
    1486:	88 0f       	add	r24, r24
    1488:	08 f0       	brcs	.+2      	; 0x148c <__addsf3x+0xa2>
    148a:	99 27       	eor	r25, r25
    148c:	ee 0f       	add	r30, r30
    148e:	97 95       	ror	r25
    1490:	87 95       	ror	r24
    1492:	08 95       	ret

00001494 <__fixsfsi>:
    1494:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__fixunssfsi>
    1498:	68 94       	set
    149a:	b1 11       	cpse	r27, r1
    149c:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__fp_szero>
    14a0:	08 95       	ret

000014a2 <__fixunssfsi>:
    14a2:	0e 94 11 0b 	call	0x1622	; 0x1622 <__fp_splitA>
    14a6:	88 f0       	brcs	.+34     	; 0x14ca <__fixunssfsi+0x28>
    14a8:	9f 57       	subi	r25, 0x7F	; 127
    14aa:	98 f0       	brcs	.+38     	; 0x14d2 <__fixunssfsi+0x30>
    14ac:	b9 2f       	mov	r27, r25
    14ae:	99 27       	eor	r25, r25
    14b0:	b7 51       	subi	r27, 0x17	; 23
    14b2:	b0 f0       	brcs	.+44     	; 0x14e0 <__fixunssfsi+0x3e>
    14b4:	e1 f0       	breq	.+56     	; 0x14ee <__fixunssfsi+0x4c>
    14b6:	66 0f       	add	r22, r22
    14b8:	77 1f       	adc	r23, r23
    14ba:	88 1f       	adc	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	1a f0       	brmi	.+6      	; 0x14c6 <__fixunssfsi+0x24>
    14c0:	ba 95       	dec	r27
    14c2:	c9 f7       	brne	.-14     	; 0x14b6 <__fixunssfsi+0x14>
    14c4:	14 c0       	rjmp	.+40     	; 0x14ee <__fixunssfsi+0x4c>
    14c6:	b1 30       	cpi	r27, 0x01	; 1
    14c8:	91 f0       	breq	.+36     	; 0x14ee <__fixunssfsi+0x4c>
    14ca:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__fp_zero>
    14ce:	b1 e0       	ldi	r27, 0x01	; 1
    14d0:	08 95       	ret
    14d2:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__fp_zero>
    14d6:	67 2f       	mov	r22, r23
    14d8:	78 2f       	mov	r23, r24
    14da:	88 27       	eor	r24, r24
    14dc:	b8 5f       	subi	r27, 0xF8	; 248
    14de:	39 f0       	breq	.+14     	; 0x14ee <__fixunssfsi+0x4c>
    14e0:	b9 3f       	cpi	r27, 0xF9	; 249
    14e2:	cc f3       	brlt	.-14     	; 0x14d6 <__fixunssfsi+0x34>
    14e4:	86 95       	lsr	r24
    14e6:	77 95       	ror	r23
    14e8:	67 95       	ror	r22
    14ea:	b3 95       	inc	r27
    14ec:	d9 f7       	brne	.-10     	; 0x14e4 <__fixunssfsi+0x42>
    14ee:	3e f4       	brtc	.+14     	; 0x14fe <__fixunssfsi+0x5c>
    14f0:	90 95       	com	r25
    14f2:	80 95       	com	r24
    14f4:	70 95       	com	r23
    14f6:	61 95       	neg	r22
    14f8:	7f 4f       	sbci	r23, 0xFF	; 255
    14fa:	8f 4f       	sbci	r24, 0xFF	; 255
    14fc:	9f 4f       	sbci	r25, 0xFF	; 255
    14fe:	08 95       	ret

00001500 <__floatunsisf>:
    1500:	e8 94       	clt
    1502:	09 c0       	rjmp	.+18     	; 0x1516 <__floatsisf+0x12>

00001504 <__floatsisf>:
    1504:	97 fb       	bst	r25, 7
    1506:	3e f4       	brtc	.+14     	; 0x1516 <__floatsisf+0x12>
    1508:	90 95       	com	r25
    150a:	80 95       	com	r24
    150c:	70 95       	com	r23
    150e:	61 95       	neg	r22
    1510:	7f 4f       	sbci	r23, 0xFF	; 255
    1512:	8f 4f       	sbci	r24, 0xFF	; 255
    1514:	9f 4f       	sbci	r25, 0xFF	; 255
    1516:	99 23       	and	r25, r25
    1518:	a9 f0       	breq	.+42     	; 0x1544 <__floatsisf+0x40>
    151a:	f9 2f       	mov	r31, r25
    151c:	96 e9       	ldi	r25, 0x96	; 150
    151e:	bb 27       	eor	r27, r27
    1520:	93 95       	inc	r25
    1522:	f6 95       	lsr	r31
    1524:	87 95       	ror	r24
    1526:	77 95       	ror	r23
    1528:	67 95       	ror	r22
    152a:	b7 95       	ror	r27
    152c:	f1 11       	cpse	r31, r1
    152e:	f8 cf       	rjmp	.-16     	; 0x1520 <__floatsisf+0x1c>
    1530:	fa f4       	brpl	.+62     	; 0x1570 <__floatsisf+0x6c>
    1532:	bb 0f       	add	r27, r27
    1534:	11 f4       	brne	.+4      	; 0x153a <__floatsisf+0x36>
    1536:	60 ff       	sbrs	r22, 0
    1538:	1b c0       	rjmp	.+54     	; 0x1570 <__floatsisf+0x6c>
    153a:	6f 5f       	subi	r22, 0xFF	; 255
    153c:	7f 4f       	sbci	r23, 0xFF	; 255
    153e:	8f 4f       	sbci	r24, 0xFF	; 255
    1540:	9f 4f       	sbci	r25, 0xFF	; 255
    1542:	16 c0       	rjmp	.+44     	; 0x1570 <__floatsisf+0x6c>
    1544:	88 23       	and	r24, r24
    1546:	11 f0       	breq	.+4      	; 0x154c <__floatsisf+0x48>
    1548:	96 e9       	ldi	r25, 0x96	; 150
    154a:	11 c0       	rjmp	.+34     	; 0x156e <__floatsisf+0x6a>
    154c:	77 23       	and	r23, r23
    154e:	21 f0       	breq	.+8      	; 0x1558 <__floatsisf+0x54>
    1550:	9e e8       	ldi	r25, 0x8E	; 142
    1552:	87 2f       	mov	r24, r23
    1554:	76 2f       	mov	r23, r22
    1556:	05 c0       	rjmp	.+10     	; 0x1562 <__floatsisf+0x5e>
    1558:	66 23       	and	r22, r22
    155a:	71 f0       	breq	.+28     	; 0x1578 <__floatsisf+0x74>
    155c:	96 e8       	ldi	r25, 0x86	; 134
    155e:	86 2f       	mov	r24, r22
    1560:	70 e0       	ldi	r23, 0x00	; 0
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	2a f0       	brmi	.+10     	; 0x1570 <__floatsisf+0x6c>
    1566:	9a 95       	dec	r25
    1568:	66 0f       	add	r22, r22
    156a:	77 1f       	adc	r23, r23
    156c:	88 1f       	adc	r24, r24
    156e:	da f7       	brpl	.-10     	; 0x1566 <__floatsisf+0x62>
    1570:	88 0f       	add	r24, r24
    1572:	96 95       	lsr	r25
    1574:	87 95       	ror	r24
    1576:	97 f9       	bld	r25, 7
    1578:	08 95       	ret

0000157a <__fp_cmp>:
    157a:	99 0f       	add	r25, r25
    157c:	00 08       	sbc	r0, r0
    157e:	55 0f       	add	r21, r21
    1580:	aa 0b       	sbc	r26, r26
    1582:	e0 e8       	ldi	r30, 0x80	; 128
    1584:	fe ef       	ldi	r31, 0xFE	; 254
    1586:	16 16       	cp	r1, r22
    1588:	17 06       	cpc	r1, r23
    158a:	e8 07       	cpc	r30, r24
    158c:	f9 07       	cpc	r31, r25
    158e:	c0 f0       	brcs	.+48     	; 0x15c0 <__fp_cmp+0x46>
    1590:	12 16       	cp	r1, r18
    1592:	13 06       	cpc	r1, r19
    1594:	e4 07       	cpc	r30, r20
    1596:	f5 07       	cpc	r31, r21
    1598:	98 f0       	brcs	.+38     	; 0x15c0 <__fp_cmp+0x46>
    159a:	62 1b       	sub	r22, r18
    159c:	73 0b       	sbc	r23, r19
    159e:	84 0b       	sbc	r24, r20
    15a0:	95 0b       	sbc	r25, r21
    15a2:	39 f4       	brne	.+14     	; 0x15b2 <__fp_cmp+0x38>
    15a4:	0a 26       	eor	r0, r26
    15a6:	61 f0       	breq	.+24     	; 0x15c0 <__fp_cmp+0x46>
    15a8:	23 2b       	or	r18, r19
    15aa:	24 2b       	or	r18, r20
    15ac:	25 2b       	or	r18, r21
    15ae:	21 f4       	brne	.+8      	; 0x15b8 <__fp_cmp+0x3e>
    15b0:	08 95       	ret
    15b2:	0a 26       	eor	r0, r26
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <__fp_cmp+0x3e>
    15b6:	a1 40       	sbci	r26, 0x01	; 1
    15b8:	a6 95       	lsr	r26
    15ba:	8f ef       	ldi	r24, 0xFF	; 255
    15bc:	81 1d       	adc	r24, r1
    15be:	81 1d       	adc	r24, r1
    15c0:	08 95       	ret

000015c2 <__fp_inf>:
    15c2:	97 f9       	bld	r25, 7
    15c4:	9f 67       	ori	r25, 0x7F	; 127
    15c6:	80 e8       	ldi	r24, 0x80	; 128
    15c8:	70 e0       	ldi	r23, 0x00	; 0
    15ca:	60 e0       	ldi	r22, 0x00	; 0
    15cc:	08 95       	ret

000015ce <__fp_nan>:
    15ce:	9f ef       	ldi	r25, 0xFF	; 255
    15d0:	80 ec       	ldi	r24, 0xC0	; 192
    15d2:	08 95       	ret

000015d4 <__fp_pscA>:
    15d4:	00 24       	eor	r0, r0
    15d6:	0a 94       	dec	r0
    15d8:	16 16       	cp	r1, r22
    15da:	17 06       	cpc	r1, r23
    15dc:	18 06       	cpc	r1, r24
    15de:	09 06       	cpc	r0, r25
    15e0:	08 95       	ret

000015e2 <__fp_pscB>:
    15e2:	00 24       	eor	r0, r0
    15e4:	0a 94       	dec	r0
    15e6:	12 16       	cp	r1, r18
    15e8:	13 06       	cpc	r1, r19
    15ea:	14 06       	cpc	r1, r20
    15ec:	05 06       	cpc	r0, r21
    15ee:	08 95       	ret

000015f0 <__fp_round>:
    15f0:	09 2e       	mov	r0, r25
    15f2:	03 94       	inc	r0
    15f4:	00 0c       	add	r0, r0
    15f6:	11 f4       	brne	.+4      	; 0x15fc <__fp_round+0xc>
    15f8:	88 23       	and	r24, r24
    15fa:	52 f0       	brmi	.+20     	; 0x1610 <__fp_round+0x20>
    15fc:	bb 0f       	add	r27, r27
    15fe:	40 f4       	brcc	.+16     	; 0x1610 <__fp_round+0x20>
    1600:	bf 2b       	or	r27, r31
    1602:	11 f4       	brne	.+4      	; 0x1608 <__fp_round+0x18>
    1604:	60 ff       	sbrs	r22, 0
    1606:	04 c0       	rjmp	.+8      	; 0x1610 <__fp_round+0x20>
    1608:	6f 5f       	subi	r22, 0xFF	; 255
    160a:	7f 4f       	sbci	r23, 0xFF	; 255
    160c:	8f 4f       	sbci	r24, 0xFF	; 255
    160e:	9f 4f       	sbci	r25, 0xFF	; 255
    1610:	08 95       	ret

00001612 <__fp_split3>:
    1612:	57 fd       	sbrc	r21, 7
    1614:	90 58       	subi	r25, 0x80	; 128
    1616:	44 0f       	add	r20, r20
    1618:	55 1f       	adc	r21, r21
    161a:	59 f0       	breq	.+22     	; 0x1632 <__fp_splitA+0x10>
    161c:	5f 3f       	cpi	r21, 0xFF	; 255
    161e:	71 f0       	breq	.+28     	; 0x163c <__fp_splitA+0x1a>
    1620:	47 95       	ror	r20

00001622 <__fp_splitA>:
    1622:	88 0f       	add	r24, r24
    1624:	97 fb       	bst	r25, 7
    1626:	99 1f       	adc	r25, r25
    1628:	61 f0       	breq	.+24     	; 0x1642 <__fp_splitA+0x20>
    162a:	9f 3f       	cpi	r25, 0xFF	; 255
    162c:	79 f0       	breq	.+30     	; 0x164c <__fp_splitA+0x2a>
    162e:	87 95       	ror	r24
    1630:	08 95       	ret
    1632:	12 16       	cp	r1, r18
    1634:	13 06       	cpc	r1, r19
    1636:	14 06       	cpc	r1, r20
    1638:	55 1f       	adc	r21, r21
    163a:	f2 cf       	rjmp	.-28     	; 0x1620 <__fp_split3+0xe>
    163c:	46 95       	lsr	r20
    163e:	f1 df       	rcall	.-30     	; 0x1622 <__fp_splitA>
    1640:	08 c0       	rjmp	.+16     	; 0x1652 <__fp_splitA+0x30>
    1642:	16 16       	cp	r1, r22
    1644:	17 06       	cpc	r1, r23
    1646:	18 06       	cpc	r1, r24
    1648:	99 1f       	adc	r25, r25
    164a:	f1 cf       	rjmp	.-30     	; 0x162e <__fp_splitA+0xc>
    164c:	86 95       	lsr	r24
    164e:	71 05       	cpc	r23, r1
    1650:	61 05       	cpc	r22, r1
    1652:	08 94       	sec
    1654:	08 95       	ret

00001656 <__fp_zero>:
    1656:	e8 94       	clt

00001658 <__fp_szero>:
    1658:	bb 27       	eor	r27, r27
    165a:	66 27       	eor	r22, r22
    165c:	77 27       	eor	r23, r23
    165e:	cb 01       	movw	r24, r22
    1660:	97 f9       	bld	r25, 7
    1662:	08 95       	ret

00001664 <__gesf2>:
    1664:	0e 94 bd 0a 	call	0x157a	; 0x157a <__fp_cmp>
    1668:	08 f4       	brcc	.+2      	; 0x166c <__gesf2+0x8>
    166a:	8f ef       	ldi	r24, 0xFF	; 255
    166c:	08 95       	ret

0000166e <__mulsf3>:
    166e:	0e 94 4a 0b 	call	0x1694	; 0x1694 <__mulsf3x>
    1672:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__fp_round>
    1676:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__fp_pscA>
    167a:	38 f0       	brcs	.+14     	; 0x168a <__mulsf3+0x1c>
    167c:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__fp_pscB>
    1680:	20 f0       	brcs	.+8      	; 0x168a <__mulsf3+0x1c>
    1682:	95 23       	and	r25, r21
    1684:	11 f0       	breq	.+4      	; 0x168a <__mulsf3+0x1c>
    1686:	0c 94 e1 0a 	jmp	0x15c2	; 0x15c2 <__fp_inf>
    168a:	0c 94 e7 0a 	jmp	0x15ce	; 0x15ce <__fp_nan>
    168e:	11 24       	eor	r1, r1
    1690:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__fp_szero>

00001694 <__mulsf3x>:
    1694:	0e 94 09 0b 	call	0x1612	; 0x1612 <__fp_split3>
    1698:	70 f3       	brcs	.-36     	; 0x1676 <__mulsf3+0x8>

0000169a <__mulsf3_pse>:
    169a:	95 9f       	mul	r25, r21
    169c:	c1 f3       	breq	.-16     	; 0x168e <__mulsf3+0x20>
    169e:	95 0f       	add	r25, r21
    16a0:	50 e0       	ldi	r21, 0x00	; 0
    16a2:	55 1f       	adc	r21, r21
    16a4:	62 9f       	mul	r22, r18
    16a6:	f0 01       	movw	r30, r0
    16a8:	72 9f       	mul	r23, r18
    16aa:	bb 27       	eor	r27, r27
    16ac:	f0 0d       	add	r31, r0
    16ae:	b1 1d       	adc	r27, r1
    16b0:	63 9f       	mul	r22, r19
    16b2:	aa 27       	eor	r26, r26
    16b4:	f0 0d       	add	r31, r0
    16b6:	b1 1d       	adc	r27, r1
    16b8:	aa 1f       	adc	r26, r26
    16ba:	64 9f       	mul	r22, r20
    16bc:	66 27       	eor	r22, r22
    16be:	b0 0d       	add	r27, r0
    16c0:	a1 1d       	adc	r26, r1
    16c2:	66 1f       	adc	r22, r22
    16c4:	82 9f       	mul	r24, r18
    16c6:	22 27       	eor	r18, r18
    16c8:	b0 0d       	add	r27, r0
    16ca:	a1 1d       	adc	r26, r1
    16cc:	62 1f       	adc	r22, r18
    16ce:	73 9f       	mul	r23, r19
    16d0:	b0 0d       	add	r27, r0
    16d2:	a1 1d       	adc	r26, r1
    16d4:	62 1f       	adc	r22, r18
    16d6:	83 9f       	mul	r24, r19
    16d8:	a0 0d       	add	r26, r0
    16da:	61 1d       	adc	r22, r1
    16dc:	22 1f       	adc	r18, r18
    16de:	74 9f       	mul	r23, r20
    16e0:	33 27       	eor	r19, r19
    16e2:	a0 0d       	add	r26, r0
    16e4:	61 1d       	adc	r22, r1
    16e6:	23 1f       	adc	r18, r19
    16e8:	84 9f       	mul	r24, r20
    16ea:	60 0d       	add	r22, r0
    16ec:	21 1d       	adc	r18, r1
    16ee:	82 2f       	mov	r24, r18
    16f0:	76 2f       	mov	r23, r22
    16f2:	6a 2f       	mov	r22, r26
    16f4:	11 24       	eor	r1, r1
    16f6:	9f 57       	subi	r25, 0x7F	; 127
    16f8:	50 40       	sbci	r21, 0x00	; 0
    16fa:	9a f0       	brmi	.+38     	; 0x1722 <__mulsf3_pse+0x88>
    16fc:	f1 f0       	breq	.+60     	; 0x173a <__mulsf3_pse+0xa0>
    16fe:	88 23       	and	r24, r24
    1700:	4a f0       	brmi	.+18     	; 0x1714 <__mulsf3_pse+0x7a>
    1702:	ee 0f       	add	r30, r30
    1704:	ff 1f       	adc	r31, r31
    1706:	bb 1f       	adc	r27, r27
    1708:	66 1f       	adc	r22, r22
    170a:	77 1f       	adc	r23, r23
    170c:	88 1f       	adc	r24, r24
    170e:	91 50       	subi	r25, 0x01	; 1
    1710:	50 40       	sbci	r21, 0x00	; 0
    1712:	a9 f7       	brne	.-22     	; 0x16fe <__mulsf3_pse+0x64>
    1714:	9e 3f       	cpi	r25, 0xFE	; 254
    1716:	51 05       	cpc	r21, r1
    1718:	80 f0       	brcs	.+32     	; 0x173a <__mulsf3_pse+0xa0>
    171a:	0c 94 e1 0a 	jmp	0x15c2	; 0x15c2 <__fp_inf>
    171e:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__fp_szero>
    1722:	5f 3f       	cpi	r21, 0xFF	; 255
    1724:	e4 f3       	brlt	.-8      	; 0x171e <__mulsf3_pse+0x84>
    1726:	98 3e       	cpi	r25, 0xE8	; 232
    1728:	d4 f3       	brlt	.-12     	; 0x171e <__mulsf3_pse+0x84>
    172a:	86 95       	lsr	r24
    172c:	77 95       	ror	r23
    172e:	67 95       	ror	r22
    1730:	b7 95       	ror	r27
    1732:	f7 95       	ror	r31
    1734:	e7 95       	ror	r30
    1736:	9f 5f       	subi	r25, 0xFF	; 255
    1738:	c1 f7       	brne	.-16     	; 0x172a <__mulsf3_pse+0x90>
    173a:	fe 2b       	or	r31, r30
    173c:	88 0f       	add	r24, r24
    173e:	91 1d       	adc	r25, r1
    1740:	96 95       	lsr	r25
    1742:	87 95       	ror	r24
    1744:	97 f9       	bld	r25, 7
    1746:	08 95       	ret

00001748 <__unordsf2>:
    1748:	0e 94 bd 0a 	call	0x157a	; 0x157a <__fp_cmp>
    174c:	88 0b       	sbc	r24, r24
    174e:	99 0b       	sbc	r25, r25
    1750:	08 95       	ret

00001752 <initVariant>:
    1752:	08 95       	ret

00001754 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1754:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <init>

	initVariant();
    1758:	0e 94 a9 0b 	call	0x1752	; 0x1752 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    175c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1760:	c0 e0       	ldi	r28, 0x00	; 0
    1762:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    1764:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <loop>
		if (serialEventRun) serialEventRun();
    1768:	20 97       	sbiw	r28, 0x00	; 0
    176a:	e1 f3       	breq	.-8      	; 0x1764 <main+0x10>
    176c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    1770:	f9 cf       	rjmp	.-14     	; 0x1764 <main+0x10>

00001772 <nothing>:
#include <avr/pgmspace.h>
#include <stdio.h>

#include "wiring_private.h"

static void nothing(void) {
    1772:	08 95       	ret

00001774 <attachInterrupt>:
#endif
};
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    1774:	82 30       	cpi	r24, 0x02	; 2
    1776:	e8 f4       	brcc	.+58     	; 0x17b2 <attachInterrupt+0x3e>
    intFunc[interruptNum] = userFunc;
    1778:	e8 2f       	mov	r30, r24
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	ee 0f       	add	r30, r30
    177e:	ff 1f       	adc	r31, r31
    1780:	ee 5e       	subi	r30, 0xEE	; 238
    1782:	fe 4f       	sbci	r31, 0xFE	; 254
    1784:	71 83       	std	Z+1, r23	; 0x01
    1786:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
    1788:	81 30       	cpi	r24, 0x01	; 1
    178a:	41 f0       	breq	.+16     	; 0x179c <attachInterrupt+0x28>
      EIMSK |= (1 << INT7);
      break;
#else		
    case 0:
    #if defined(EICRA) && defined(ISC00) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
    178c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    1790:	8c 7f       	andi	r24, 0xFC	; 252
    1792:	48 2b       	or	r20, r24
    1794:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
      EIMSK |= (1 << INT0);
    1798:	e8 9a       	sbi	0x1d, 0	; 29
      MCUCR = (MCUCR & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
      GIMSK |= (1 << INT0);
    #else
      #error attachInterrupt not finished for this CPU (case 0)
    #endif
      break;
    179a:	08 95       	ret

    case 1:
    #if defined(EICRA) && defined(ISC10) && defined(ISC11) && defined(EIMSK)
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
    179c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
    17a0:	83 7f       	andi	r24, 0xF3	; 243
    17a2:	44 0f       	add	r20, r20
    17a4:	55 1f       	adc	r21, r21
    17a6:	44 0f       	add	r20, r20
    17a8:	55 1f       	adc	r21, r21
    17aa:	48 2b       	or	r20, r24
    17ac:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
      EIMSK |= (1 << INT1);
    17b0:	e9 9a       	sbi	0x1d, 1	; 29
    17b2:	08 95       	ret

000017b4 <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
    17b4:	82 30       	cpi	r24, 0x02	; 2
    17b6:	78 f4       	brcc	.+30     	; 0x17d6 <detachInterrupt+0x22>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
    17b8:	81 30       	cpi	r24, 0x01	; 1
    17ba:	11 f0       	breq	.+4      	; 0x17c0 <detachInterrupt+0xc>
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
    #if defined(EIMSK) && defined(INT0)
      EIMSK &= ~(1 << INT0);
    17bc:	e8 98       	cbi	0x1d, 0	; 29
    #elif defined(GIMSK) && defined(INT0)
      GIMSK &= ~(1 << INT0);
    #else
      #error detachInterrupt not finished for this cpu
    #endif
      break;
    17be:	01 c0       	rjmp	.+2      	; 0x17c2 <detachInterrupt+0xe>

    case 1:
    #if defined(EIMSK) && defined(INT1)
      EIMSK &= ~(1 << INT1);
    17c0:	e9 98       	cbi	0x1d, 1	; 29
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    17c2:	e8 2f       	mov	r30, r24
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	ee 0f       	add	r30, r30
    17c8:	ff 1f       	adc	r31, r31
    17ca:	ee 5e       	subi	r30, 0xEE	; 238
    17cc:	fe 4f       	sbci	r31, 0xFE	; 254
    17ce:	89 eb       	ldi	r24, 0xB9	; 185
    17d0:	9b e0       	ldi	r25, 0x0B	; 11
    17d2:	91 83       	std	Z+1, r25	; 0x01
    17d4:	80 83       	st	Z, r24
    17d6:	08 95       	ret

000017d8 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    17d8:	1f 92       	push	r1
    17da:	0f 92       	push	r0
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	0f 92       	push	r0
    17e0:	11 24       	eor	r1, r1
    17e2:	2f 93       	push	r18
    17e4:	3f 93       	push	r19
    17e6:	4f 93       	push	r20
    17e8:	5f 93       	push	r21
    17ea:	6f 93       	push	r22
    17ec:	7f 93       	push	r23
    17ee:	8f 93       	push	r24
    17f0:	9f 93       	push	r25
    17f2:	af 93       	push	r26
    17f4:	bf 93       	push	r27
    17f6:	ef 93       	push	r30
    17f8:	ff 93       	push	r31
    17fa:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <intFunc>
    17fe:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <intFunc+0x1>
    1802:	09 95       	icall
    1804:	ff 91       	pop	r31
    1806:	ef 91       	pop	r30
    1808:	bf 91       	pop	r27
    180a:	af 91       	pop	r26
    180c:	9f 91       	pop	r25
    180e:	8f 91       	pop	r24
    1810:	7f 91       	pop	r23
    1812:	6f 91       	pop	r22
    1814:	5f 91       	pop	r21
    1816:	4f 91       	pop	r20
    1818:	3f 91       	pop	r19
    181a:	2f 91       	pop	r18
    181c:	0f 90       	pop	r0
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	0f 90       	pop	r0
    1822:	1f 90       	pop	r1
    1824:	18 95       	reti

00001826 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    1826:	1f 92       	push	r1
    1828:	0f 92       	push	r0
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	0f 92       	push	r0
    182e:	11 24       	eor	r1, r1
    1830:	2f 93       	push	r18
    1832:	3f 93       	push	r19
    1834:	4f 93       	push	r20
    1836:	5f 93       	push	r21
    1838:	6f 93       	push	r22
    183a:	7f 93       	push	r23
    183c:	8f 93       	push	r24
    183e:	9f 93       	push	r25
    1840:	af 93       	push	r26
    1842:	bf 93       	push	r27
    1844:	ef 93       	push	r30
    1846:	ff 93       	push	r31
    1848:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <intFunc+0x2>
    184c:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <intFunc+0x3>
    1850:	09 95       	icall
    1852:	ff 91       	pop	r31
    1854:	ef 91       	pop	r30
    1856:	bf 91       	pop	r27
    1858:	af 91       	pop	r26
    185a:	9f 91       	pop	r25
    185c:	8f 91       	pop	r24
    185e:	7f 91       	pop	r23
    1860:	6f 91       	pop	r22
    1862:	5f 91       	pop	r21
    1864:	4f 91       	pop	r20
    1866:	3f 91       	pop	r19
    1868:	2f 91       	pop	r18
    186a:	0f 90       	pop	r0
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	0f 90       	pop	r0
    1870:	1f 90       	pop	r1
    1872:	18 95       	reti

00001874 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1874:	1f 92       	push	r1
    1876:	0f 92       	push	r0
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	0f 92       	push	r0
    187c:	11 24       	eor	r1, r1
    187e:	2f 93       	push	r18
    1880:	3f 93       	push	r19
    1882:	8f 93       	push	r24
    1884:	9f 93       	push	r25
    1886:	af 93       	push	r26
    1888:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    188a:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <timer0_millis>
    188e:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <timer0_millis+0x1>
    1892:	a0 91 6e 02 	lds	r26, 0x026E	; 0x80026e <timer0_millis+0x2>
    1896:	b0 91 6f 02 	lds	r27, 0x026F	; 0x80026f <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    189a:	30 91 6b 02 	lds	r19, 0x026B	; 0x80026b <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    189e:	26 e0       	ldi	r18, 0x06	; 6
    18a0:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    18a2:	2d 37       	cpi	r18, 0x7D	; 125
    18a4:	20 f4       	brcc	.+8      	; 0x18ae <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    18a6:	02 96       	adiw	r24, 0x02	; 2
    18a8:	a1 1d       	adc	r26, r1
    18aa:	b1 1d       	adc	r27, r1
    18ac:	05 c0       	rjmp	.+10     	; 0x18b8 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    18ae:	29 e8       	ldi	r18, 0x89	; 137
    18b0:	23 0f       	add	r18, r19
		m += 1;
    18b2:	03 96       	adiw	r24, 0x03	; 3
    18b4:	a1 1d       	adc	r26, r1
    18b6:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    18b8:	20 93 6b 02 	sts	0x026B, r18	; 0x80026b <timer0_fract>
	timer0_millis = m;
    18bc:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <timer0_millis>
    18c0:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <timer0_millis+0x1>
    18c4:	a0 93 6e 02 	sts	0x026E, r26	; 0x80026e <timer0_millis+0x2>
    18c8:	b0 93 6f 02 	sts	0x026F, r27	; 0x80026f <timer0_millis+0x3>
	timer0_overflow_count++;
    18cc:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <timer0_overflow_count>
    18d0:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <timer0_overflow_count+0x1>
    18d4:	a0 91 72 02 	lds	r26, 0x0272	; 0x800272 <timer0_overflow_count+0x2>
    18d8:	b0 91 73 02 	lds	r27, 0x0273	; 0x800273 <timer0_overflow_count+0x3>
    18dc:	01 96       	adiw	r24, 0x01	; 1
    18de:	a1 1d       	adc	r26, r1
    18e0:	b1 1d       	adc	r27, r1
    18e2:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <timer0_overflow_count>
    18e6:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <timer0_overflow_count+0x1>
    18ea:	a0 93 72 02 	sts	0x0272, r26	; 0x800272 <timer0_overflow_count+0x2>
    18ee:	b0 93 73 02 	sts	0x0273, r27	; 0x800273 <timer0_overflow_count+0x3>
}
    18f2:	bf 91       	pop	r27
    18f4:	af 91       	pop	r26
    18f6:	9f 91       	pop	r25
    18f8:	8f 91       	pop	r24
    18fa:	3f 91       	pop	r19
    18fc:	2f 91       	pop	r18
    18fe:	0f 90       	pop	r0
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	0f 90       	pop	r0
    1904:	1f 90       	pop	r1
    1906:	18 95       	reti

00001908 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    1908:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    190a:	f8 94       	cli
	m = timer0_millis;
    190c:	60 91 6c 02 	lds	r22, 0x026C	; 0x80026c <timer0_millis>
    1910:	70 91 6d 02 	lds	r23, 0x026D	; 0x80026d <timer0_millis+0x1>
    1914:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <timer0_millis+0x2>
    1918:	90 91 6f 02 	lds	r25, 0x026F	; 0x80026f <timer0_millis+0x3>
	SREG = oldSREG;
    191c:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    191e:	08 95       	ret

00001920 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1920:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    1922:	f8 94       	cli
	m = timer0_overflow_count;
    1924:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <timer0_overflow_count>
    1928:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <timer0_overflow_count+0x1>
    192c:	a0 91 72 02 	lds	r26, 0x0272	; 0x800272 <timer0_overflow_count+0x2>
    1930:	b0 91 73 02 	lds	r27, 0x0273	; 0x800273 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    1934:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1936:	a8 9b       	sbis	0x15, 0	; 21
    1938:	05 c0       	rjmp	.+10     	; 0x1944 <micros+0x24>
    193a:	2f 3f       	cpi	r18, 0xFF	; 255
    193c:	19 f0       	breq	.+6      	; 0x1944 <micros+0x24>
		m++;
    193e:	01 96       	adiw	r24, 0x01	; 1
    1940:	a1 1d       	adc	r26, r1
    1942:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1944:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1946:	ba 2f       	mov	r27, r26
    1948:	a9 2f       	mov	r26, r25
    194a:	98 2f       	mov	r25, r24
    194c:	88 27       	eor	r24, r24
    194e:	82 0f       	add	r24, r18
    1950:	91 1d       	adc	r25, r1
    1952:	a1 1d       	adc	r26, r1
    1954:	b1 1d       	adc	r27, r1
    1956:	bc 01       	movw	r22, r24
    1958:	cd 01       	movw	r24, r26
    195a:	43 e0       	ldi	r20, 0x03	; 3
    195c:	66 0f       	add	r22, r22
    195e:	77 1f       	adc	r23, r23
    1960:	88 1f       	adc	r24, r24
    1962:	99 1f       	adc	r25, r25
    1964:	4a 95       	dec	r20
    1966:	d1 f7       	brne	.-12     	; 0x195c <micros+0x3c>
}
    1968:	08 95       	ret

0000196a <delay>:

void delay(unsigned long ms)
{
    196a:	8f 92       	push	r8
    196c:	9f 92       	push	r9
    196e:	af 92       	push	r10
    1970:	bf 92       	push	r11
    1972:	cf 92       	push	r12
    1974:	df 92       	push	r13
    1976:	ef 92       	push	r14
    1978:	ff 92       	push	r15
    197a:	6b 01       	movw	r12, r22
    197c:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    197e:	0e 94 90 0c 	call	0x1920	; 0x1920 <micros>
    1982:	4b 01       	movw	r8, r22
    1984:	5c 01       	movw	r10, r24

	while (ms > 0) {
    1986:	c1 14       	cp	r12, r1
    1988:	d1 04       	cpc	r13, r1
    198a:	e1 04       	cpc	r14, r1
    198c:	f1 04       	cpc	r15, r1
    198e:	01 f1       	breq	.+64     	; 0x19d0 <delay+0x66>
		yield();
    1990:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    1994:	0e 94 90 0c 	call	0x1920	; 0x1920 <micros>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	88 19       	sub	r24, r8
    199e:	99 09       	sbc	r25, r9
    19a0:	aa 09       	sbc	r26, r10
    19a2:	bb 09       	sbc	r27, r11
    19a4:	88 3e       	cpi	r24, 0xE8	; 232
    19a6:	93 40       	sbci	r25, 0x03	; 3
    19a8:	a1 05       	cpc	r26, r1
    19aa:	b1 05       	cpc	r27, r1
    19ac:	60 f3       	brcs	.-40     	; 0x1986 <delay+0x1c>
			ms--;
    19ae:	21 e0       	ldi	r18, 0x01	; 1
    19b0:	c2 1a       	sub	r12, r18
    19b2:	d1 08       	sbc	r13, r1
    19b4:	e1 08       	sbc	r14, r1
    19b6:	f1 08       	sbc	r15, r1
			start += 1000;
    19b8:	88 ee       	ldi	r24, 0xE8	; 232
    19ba:	88 0e       	add	r8, r24
    19bc:	83 e0       	ldi	r24, 0x03	; 3
    19be:	98 1e       	adc	r9, r24
    19c0:	a1 1c       	adc	r10, r1
    19c2:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    19c4:	c1 14       	cp	r12, r1
    19c6:	d1 04       	cpc	r13, r1
    19c8:	e1 04       	cpc	r14, r1
    19ca:	f1 04       	cpc	r15, r1
    19cc:	19 f7       	brne	.-58     	; 0x1994 <delay+0x2a>
    19ce:	db cf       	rjmp	.-74     	; 0x1986 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    19d0:	ff 90       	pop	r15
    19d2:	ef 90       	pop	r14
    19d4:	df 90       	pop	r13
    19d6:	cf 90       	pop	r12
    19d8:	bf 90       	pop	r11
    19da:	af 90       	pop	r10
    19dc:	9f 90       	pop	r9
    19de:	8f 90       	pop	r8
    19e0:	08 95       	ret

000019e2 <delayMicroseconds>:
#elif F_CPU >= 8000000L
	// for the 8 MHz internal clock

	// for a 1 and 2 microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 2us
	if (us <= 2) return; //  = 3 cycles, (4 when true)
    19e2:	83 30       	cpi	r24, 0x03	; 3
    19e4:	91 05       	cpc	r25, r1
    19e6:	28 f0       	brcs	.+10     	; 0x19f2 <delayMicroseconds+0x10>

	// the following loop takes 1/2 of a microsecond (4 cycles)
	// per iteration, so execute it twice for each microsecond of
	// delay requested.
	us <<= 1; //x2 us, = 2 cycles
    19e8:	88 0f       	add	r24, r24
    19ea:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 17 (19) cycles above, remove 4, (4*4=16)
	// us is at least 6 so we can substract 4
	us -= 4; // = 2 cycles
    19ec:	04 97       	sbiw	r24, 0x04	; 4
	

#endif

	// busy wait
	__asm__ __volatile__ (
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	f1 f7       	brne	.-4      	; 0x19ee <delayMicroseconds+0xc>
    19f2:	08 95       	ret

000019f4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    19f4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    19f6:	84 b5       	in	r24, 0x24	; 36
    19f8:	82 60       	ori	r24, 0x02	; 2
    19fa:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    19fc:	84 b5       	in	r24, 0x24	; 36
    19fe:	81 60       	ori	r24, 0x01	; 1
    1a00:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1a02:	85 b5       	in	r24, 0x25	; 37
    1a04:	82 60       	ori	r24, 0x02	; 2
    1a06:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1a08:	85 b5       	in	r24, 0x25	; 37
    1a0a:	81 60       	ori	r24, 0x01	; 1
    1a0c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1a0e:	ee e6       	ldi	r30, 0x6E	; 110
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	81 60       	ori	r24, 0x01	; 1
    1a16:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1a18:	e1 e8       	ldi	r30, 0x81	; 129
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1a1e:	80 81       	ld	r24, Z
    1a20:	82 60       	ori	r24, 0x02	; 2
    1a22:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1a24:	80 81       	ld	r24, Z
    1a26:	81 60       	ori	r24, 0x01	; 1
    1a28:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1a2a:	e0 e8       	ldi	r30, 0x80	; 128
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	81 60       	ori	r24, 0x01	; 1
    1a32:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1a34:	e1 eb       	ldi	r30, 0xB1	; 177
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	84 60       	ori	r24, 0x04	; 4
    1a3c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1a3e:	e0 eb       	ldi	r30, 0xB0	; 176
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	81 60       	ori	r24, 0x01	; 1
    1a46:	80 83       	st	Z, r24
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
		sbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1a48:	ea e7       	ldi	r30, 0x7A	; 122
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	84 60       	ori	r24, 0x04	; 4
    1a50:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1a52:	80 81       	ld	r24, Z
    1a54:	82 60       	ori	r24, 0x02	; 2
    1a56:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS0);
    1a58:	80 81       	ld	r24, Z
    1a5a:	8e 7f       	andi	r24, 0xFE	; 254
    1a5c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1a5e:	80 81       	ld	r24, Z
    1a60:	80 68       	ori	r24, 0x80	; 128
    1a62:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1a64:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1a68:	08 95       	ret

00001a6a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1a6a:	83 30       	cpi	r24, 0x03	; 3
    1a6c:	81 f0       	breq	.+32     	; 0x1a8e <turnOffPWM+0x24>
    1a6e:	28 f4       	brcc	.+10     	; 0x1a7a <turnOffPWM+0x10>
    1a70:	81 30       	cpi	r24, 0x01	; 1
    1a72:	99 f0       	breq	.+38     	; 0x1a9a <turnOffPWM+0x30>
    1a74:	82 30       	cpi	r24, 0x02	; 2
    1a76:	a1 f0       	breq	.+40     	; 0x1aa0 <turnOffPWM+0x36>
    1a78:	08 95       	ret
    1a7a:	87 30       	cpi	r24, 0x07	; 7
    1a7c:	a9 f0       	breq	.+42     	; 0x1aa8 <turnOffPWM+0x3e>
    1a7e:	88 30       	cpi	r24, 0x08	; 8
    1a80:	b9 f0       	breq	.+46     	; 0x1ab0 <turnOffPWM+0x46>
    1a82:	84 30       	cpi	r24, 0x04	; 4
    1a84:	d1 f4       	brne	.+52     	; 0x1aba <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1a86:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1a8a:	8f 7d       	andi	r24, 0xDF	; 223
    1a8c:	03 c0       	rjmp	.+6      	; 0x1a94 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1a8e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1a92:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1a94:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1a98:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1a9a:	84 b5       	in	r24, 0x24	; 36
    1a9c:	8f 77       	andi	r24, 0x7F	; 127
    1a9e:	02 c0       	rjmp	.+4      	; 0x1aa4 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1aa0:	84 b5       	in	r24, 0x24	; 36
    1aa2:	8f 7d       	andi	r24, 0xDF	; 223
    1aa4:	84 bd       	out	0x24, r24	; 36
    1aa6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1aa8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1aac:	8f 77       	andi	r24, 0x7F	; 127
    1aae:	03 c0       	rjmp	.+6      	; 0x1ab6 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1ab0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1ab4:	8f 7d       	andi	r24, 0xDF	; 223
    1ab6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1aba:	08 95       	ret

00001abc <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1abc:	cf 93       	push	r28
    1abe:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	fc 01       	movw	r30, r24
    1ac4:	ee 54       	subi	r30, 0x4E	; 78
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1aca:	fc 01       	movw	r30, r24
    1acc:	ea 53       	subi	r30, 0x3A	; 58
    1ace:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1ad2:	88 23       	and	r24, r24
    1ad4:	61 f1       	breq	.+88     	; 0x1b2e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	88 0f       	add	r24, r24
    1ada:	99 1f       	adc	r25, r25
    1adc:	fc 01       	movw	r30, r24
    1ade:	e2 51       	subi	r30, 0x12	; 18
    1ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae2:	c5 91       	lpm	r28, Z+
    1ae4:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	ec 51       	subi	r30, 0x1C	; 28
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	a5 91       	lpm	r26, Z+
    1aee:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1af0:	61 11       	cpse	r22, r1
    1af2:	09 c0       	rjmp	.+18     	; 0x1b06 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1af4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1af6:	f8 94       	cli
		*reg &= ~bit;
    1af8:	88 81       	ld	r24, Y
    1afa:	20 95       	com	r18
    1afc:	82 23       	and	r24, r18
    1afe:	88 83       	st	Y, r24
		*out &= ~bit;
    1b00:	ec 91       	ld	r30, X
    1b02:	2e 23       	and	r18, r30
    1b04:	0b c0       	rjmp	.+22     	; 0x1b1c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1b06:	62 30       	cpi	r22, 0x02	; 2
    1b08:	61 f4       	brne	.+24     	; 0x1b22 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1b0a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1b0c:	f8 94       	cli
		*reg &= ~bit;
    1b0e:	88 81       	ld	r24, Y
    1b10:	32 2f       	mov	r19, r18
    1b12:	30 95       	com	r19
    1b14:	83 23       	and	r24, r19
    1b16:	88 83       	st	Y, r24
		*out |= bit;
    1b18:	ec 91       	ld	r30, X
    1b1a:	2e 2b       	or	r18, r30
    1b1c:	2c 93       	st	X, r18
		SREG = oldSREG;
    1b1e:	9f bf       	out	0x3f, r25	; 63
    1b20:	06 c0       	rjmp	.+12     	; 0x1b2e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1b22:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1b24:	f8 94       	cli
		*reg |= bit;
    1b26:	e8 81       	ld	r30, Y
    1b28:	2e 2b       	or	r18, r30
    1b2a:	28 83       	st	Y, r18
		SREG = oldSREG;
    1b2c:	8f bf       	out	0x3f, r24	; 63
	}
}
    1b2e:	df 91       	pop	r29
    1b30:	cf 91       	pop	r28
    1b32:	08 95       	ret

00001b34 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1b34:	1f 93       	push	r17
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	f9 01       	movw	r30, r18
    1b40:	e2 56       	subi	r30, 0x62	; 98
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1b46:	f9 01       	movw	r30, r18
    1b48:	ee 54       	subi	r30, 0x4E	; 78
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1b4e:	f9 01       	movw	r30, r18
    1b50:	ea 53       	subi	r30, 0x3A	; 58
    1b52:	ff 4f       	sbci	r31, 0xFF	; 255
    1b54:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1b56:	cc 23       	and	r28, r28
    1b58:	c1 f0       	breq	.+48     	; 0x1b8a <digitalWrite+0x56>
    1b5a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1b5c:	81 11       	cpse	r24, r1
    1b5e:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <turnOffPWM>

	out = portOutputRegister(port);
    1b62:	ec 2f       	mov	r30, r28
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	ee 0f       	add	r30, r30
    1b68:	ff 1f       	adc	r31, r31
    1b6a:	ec 51       	subi	r30, 0x1C	; 28
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	a5 91       	lpm	r26, Z+
    1b70:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1b72:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1b74:	f8 94       	cli

	if (val == LOW) {
    1b76:	11 11       	cpse	r17, r1
    1b78:	04 c0       	rjmp	.+8      	; 0x1b82 <digitalWrite+0x4e>
		*out &= ~bit;
    1b7a:	8c 91       	ld	r24, X
    1b7c:	d0 95       	com	r29
    1b7e:	d8 23       	and	r29, r24
    1b80:	02 c0       	rjmp	.+4      	; 0x1b86 <digitalWrite+0x52>
	} else {
		*out |= bit;
    1b82:	ec 91       	ld	r30, X
    1b84:	de 2b       	or	r29, r30
    1b86:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1b88:	9f bf       	out	0x3f, r25	; 63
}
    1b8a:	df 91       	pop	r29
    1b8c:	cf 91       	pop	r28
    1b8e:	1f 91       	pop	r17
    1b90:	08 95       	ret

00001b92 <digitalRead>:

int digitalRead(uint8_t pin)
{
    1b92:	cf 93       	push	r28
    1b94:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1b96:	28 2f       	mov	r18, r24
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	f9 01       	movw	r30, r18
    1b9c:	e2 56       	subi	r30, 0x62	; 98
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1ba2:	f9 01       	movw	r30, r18
    1ba4:	ee 54       	subi	r30, 0x4E	; 78
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1baa:	f9 01       	movw	r30, r18
    1bac:	ea 53       	subi	r30, 0x3A	; 58
    1bae:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb0:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1bb2:	cc 23       	and	r28, r28
    1bb4:	91 f0       	breq	.+36     	; 0x1bda <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1bb6:	81 11       	cpse	r24, r1
    1bb8:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    1bbc:	ec 2f       	mov	r30, r28
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	ee 0f       	add	r30, r30
    1bc2:	ff 1f       	adc	r31, r31
    1bc4:	e6 52       	subi	r30, 0x26	; 38
    1bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc8:	a5 91       	lpm	r26, Z+
    1bca:	b4 91       	lpm	r27, Z
    1bcc:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    1bce:	ed 23       	and	r30, r29
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	21 f4       	brne	.+8      	; 0x1bde <digitalRead+0x4c>
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	02 c0       	rjmp	.+4      	; 0x1bde <digitalRead+0x4c>
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    1bde:	df 91       	pop	r29
    1be0:	cf 91       	pop	r28
    1be2:	08 95       	ret

00001be4 <_ZN6StringD1Ev>:
{
	init();
	char buf[1 + 8 * sizeof(unsigned int)];
	utoa(value, buf, base);
	*this = buf;
}
    1be4:	fc 01       	movw	r30, r24
    1be6:	80 81       	ld	r24, Z
    1be8:	91 81       	ldd	r25, Z+1	; 0x01
    1bea:	0c 94 ad 0f 	jmp	0x1f5a	; 0x1f5a <free>

00001bee <_ZN6String10invalidateEv>:
    1bee:	cf 93       	push	r28
    1bf0:	df 93       	push	r29
    1bf2:	ec 01       	movw	r28, r24
    1bf4:	88 81       	ld	r24, Y
    1bf6:	99 81       	ldd	r25, Y+1	; 0x01
    1bf8:	00 97       	sbiw	r24, 0x00	; 0
    1bfa:	11 f0       	breq	.+4      	; 0x1c00 <_ZN6String10invalidateEv+0x12>
    1bfc:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <free>
    1c00:	19 82       	std	Y+1, r1	; 0x01
    1c02:	18 82       	st	Y, r1
    1c04:	1d 82       	std	Y+5, r1	; 0x05
    1c06:	1c 82       	std	Y+4, r1	; 0x04
    1c08:	1b 82       	std	Y+3, r1	; 0x03
    1c0a:	1a 82       	std	Y+2, r1	; 0x02
    1c0c:	df 91       	pop	r29
    1c0e:	cf 91       	pop	r28
    1c10:	08 95       	ret

00001c12 <_ZN6String12changeBufferEj>:
    1c12:	0f 93       	push	r16
    1c14:	1f 93       	push	r17
    1c16:	cf 93       	push	r28
    1c18:	df 93       	push	r29
    1c1a:	ec 01       	movw	r28, r24
    1c1c:	8b 01       	movw	r16, r22
    1c1e:	6f 5f       	subi	r22, 0xFF	; 255
    1c20:	7f 4f       	sbci	r23, 0xFF	; 255
    1c22:	88 81       	ld	r24, Y
    1c24:	99 81       	ldd	r25, Y+1	; 0x01
    1c26:	0e 94 36 10 	call	0x206c	; 0x206c <realloc>
    1c2a:	00 97       	sbiw	r24, 0x00	; 0
    1c2c:	31 f0       	breq	.+12     	; 0x1c3a <_ZN6String12changeBufferEj+0x28>
    1c2e:	99 83       	std	Y+1, r25	; 0x01
    1c30:	88 83       	st	Y, r24
    1c32:	1b 83       	std	Y+3, r17	; 0x03
    1c34:	0a 83       	std	Y+2, r16	; 0x02
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	01 c0       	rjmp	.+2      	; 0x1c3c <_ZN6String12changeBufferEj+0x2a>
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	1f 91       	pop	r17
    1c42:	0f 91       	pop	r16
    1c44:	08 95       	ret

00001c46 <_ZN6String7reserveEj>:
    1c46:	cf 93       	push	r28
    1c48:	df 93       	push	r29
    1c4a:	ec 01       	movw	r28, r24
    1c4c:	88 81       	ld	r24, Y
    1c4e:	99 81       	ldd	r25, Y+1	; 0x01
    1c50:	89 2b       	or	r24, r25
    1c52:	29 f0       	breq	.+10     	; 0x1c5e <_ZN6String7reserveEj+0x18>
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	9b 81       	ldd	r25, Y+3	; 0x03
    1c58:	86 17       	cp	r24, r22
    1c5a:	97 07       	cpc	r25, r23
    1c5c:	60 f4       	brcc	.+24     	; 0x1c76 <_ZN6String7reserveEj+0x30>
    1c5e:	ce 01       	movw	r24, r28
    1c60:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <_ZN6String12changeBufferEj>
    1c64:	88 23       	and	r24, r24
    1c66:	41 f0       	breq	.+16     	; 0x1c78 <_ZN6String7reserveEj+0x32>
    1c68:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c6c:	89 2b       	or	r24, r25
    1c6e:	19 f4       	brne	.+6      	; 0x1c76 <_ZN6String7reserveEj+0x30>
    1c70:	e8 81       	ld	r30, Y
    1c72:	f9 81       	ldd	r31, Y+1	; 0x01
    1c74:	10 82       	st	Z, r1
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	df 91       	pop	r29
    1c7a:	cf 91       	pop	r28
    1c7c:	08 95       	ret

00001c7e <_ZN6String4copyEPKcj>:
    1c7e:	ef 92       	push	r14
    1c80:	ff 92       	push	r15
    1c82:	0f 93       	push	r16
    1c84:	1f 93       	push	r17
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
    1c8a:	ec 01       	movw	r28, r24
    1c8c:	7b 01       	movw	r14, r22
    1c8e:	8a 01       	movw	r16, r20
    1c90:	ba 01       	movw	r22, r20
    1c92:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <_ZN6String7reserveEj>
    1c96:	81 11       	cpse	r24, r1
    1c98:	04 c0       	rjmp	.+8      	; 0x1ca2 <_ZN6String4copyEPKcj+0x24>
    1c9a:	ce 01       	movw	r24, r28
    1c9c:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <_ZN6String10invalidateEv>
    1ca0:	07 c0       	rjmp	.+14     	; 0x1cb0 <_ZN6String4copyEPKcj+0x32>
    1ca2:	1d 83       	std	Y+5, r17	; 0x05
    1ca4:	0c 83       	std	Y+4, r16	; 0x04
    1ca6:	b7 01       	movw	r22, r14
    1ca8:	88 81       	ld	r24, Y
    1caa:	99 81       	ldd	r25, Y+1	; 0x01
    1cac:	0e 94 35 11 	call	0x226a	; 0x226a <strcpy>
    1cb0:	ce 01       	movw	r24, r28
    1cb2:	df 91       	pop	r29
    1cb4:	cf 91       	pop	r28
    1cb6:	1f 91       	pop	r17
    1cb8:	0f 91       	pop	r16
    1cba:	ff 90       	pop	r15
    1cbc:	ef 90       	pop	r14
    1cbe:	08 95       	ret

00001cc0 <_ZN6StringC1EPKc>:
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	11 82       	std	Z+1, r1	; 0x01
    1cc4:	10 82       	st	Z, r1
    1cc6:	13 82       	std	Z+3, r1	; 0x03
    1cc8:	12 82       	std	Z+2, r1	; 0x02
    1cca:	15 82       	std	Z+5, r1	; 0x05
    1ccc:	14 82       	std	Z+4, r1	; 0x04
    1cce:	61 15       	cp	r22, r1
    1cd0:	71 05       	cpc	r23, r1
    1cd2:	51 f0       	breq	.+20     	; 0x1ce8 <_ZN6StringC1EPKc+0x28>
    1cd4:	fb 01       	movw	r30, r22
    1cd6:	01 90       	ld	r0, Z+
    1cd8:	00 20       	and	r0, r0
    1cda:	e9 f7       	brne	.-6      	; 0x1cd6 <_ZN6StringC1EPKc+0x16>
    1cdc:	31 97       	sbiw	r30, 0x01	; 1
    1cde:	af 01       	movw	r20, r30
    1ce0:	46 1b       	sub	r20, r22
    1ce2:	57 0b       	sbc	r21, r23
    1ce4:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <_ZN6String4copyEPKcj>
    1ce8:	08 95       	ret

00001cea <_ZN6StringaSEPKc>:
    1cea:	cf 93       	push	r28
    1cec:	df 93       	push	r29
    1cee:	ec 01       	movw	r28, r24
    1cf0:	61 15       	cp	r22, r1
    1cf2:	71 05       	cpc	r23, r1
    1cf4:	59 f0       	breq	.+22     	; 0x1d0c <_ZN6StringaSEPKc+0x22>
    1cf6:	fb 01       	movw	r30, r22
    1cf8:	01 90       	ld	r0, Z+
    1cfa:	00 20       	and	r0, r0
    1cfc:	e9 f7       	brne	.-6      	; 0x1cf8 <_ZN6StringaSEPKc+0xe>
    1cfe:	31 97       	sbiw	r30, 0x01	; 1
    1d00:	af 01       	movw	r20, r30
    1d02:	46 1b       	sub	r20, r22
    1d04:	57 0b       	sbc	r21, r23
    1d06:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <_ZN6String4copyEPKcj>
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <_ZN6StringaSEPKc+0x26>
    1d0c:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <_ZN6String10invalidateEv>
    1d10:	ce 01       	movw	r24, r28
    1d12:	df 91       	pop	r29
    1d14:	cf 91       	pop	r28
    1d16:	08 95       	ret

00001d18 <_ZN6StringC1Elh>:

String::String(long value, unsigned char base)
    1d18:	0f 93       	push	r16
    1d1a:	1f 93       	push	r17
    1d1c:	cf 93       	push	r28
    1d1e:	df 93       	push	r29
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62
    1d24:	a2 97       	sbiw	r28, 0x22	; 34
    1d26:	0f b6       	in	r0, 0x3f	; 63
    1d28:	f8 94       	cli
    1d2a:	de bf       	out	0x3e, r29	; 62
    1d2c:	0f be       	out	0x3f, r0	; 63
    1d2e:	cd bf       	out	0x3d, r28	; 61
    1d30:	8c 01       	movw	r16, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	ba 01       	movw	r22, r20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    1d36:	f8 01       	movw	r30, r16
    1d38:	11 82       	std	Z+1, r1	; 0x01
    1d3a:	10 82       	st	Z, r1
	capacity = 0;
    1d3c:	13 82       	std	Z+3, r1	; 0x03
    1d3e:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    1d40:	15 82       	std	Z+5, r1	; 0x05
    1d42:	14 82       	std	Z+4, r1	; 0x04
extern __inline__ __ATTR_GNU_INLINE__
char *ltoa (long __val, char *__s, int __radix)
{
    if (!__builtin_constant_p (__radix)) {
	extern char *__ltoa (long, char *, int);
	return __ltoa (__val, __s, __radix);
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	ae 01       	movw	r20, r28
    1d48:	4f 5f       	subi	r20, 0xFF	; 255
    1d4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d4c:	0e 94 3c 11 	call	0x2278	; 0x2278 <ltoa>
String::String(long value, unsigned char base)
{
	init();
	char buf[2 + 8 * sizeof(long)];
	ltoa(value, buf, base);
	*this = buf;
    1d50:	be 01       	movw	r22, r28
    1d52:	6f 5f       	subi	r22, 0xFF	; 255
    1d54:	7f 4f       	sbci	r23, 0xFF	; 255
    1d56:	c8 01       	movw	r24, r16
    1d58:	0e 94 75 0e 	call	0x1cea	; 0x1cea <_ZN6StringaSEPKc>
}
    1d5c:	a2 96       	adiw	r28, 0x22	; 34
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	f8 94       	cli
    1d62:	de bf       	out	0x3e, r29	; 62
    1d64:	0f be       	out	0x3f, r0	; 63
    1d66:	cd bf       	out	0x3d, r28	; 61
    1d68:	df 91       	pop	r29
    1d6a:	cf 91       	pop	r28
    1d6c:	1f 91       	pop	r17
    1d6e:	0f 91       	pop	r16
    1d70:	08 95       	ret

00001d72 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1d72:	08 95       	ret

00001d74 <__udivmodhi4>:
    1d74:	aa 1b       	sub	r26, r26
    1d76:	bb 1b       	sub	r27, r27
    1d78:	51 e1       	ldi	r21, 0x11	; 17
    1d7a:	07 c0       	rjmp	.+14     	; 0x1d8a <__udivmodhi4_ep>

00001d7c <__udivmodhi4_loop>:
    1d7c:	aa 1f       	adc	r26, r26
    1d7e:	bb 1f       	adc	r27, r27
    1d80:	a6 17       	cp	r26, r22
    1d82:	b7 07       	cpc	r27, r23
    1d84:	10 f0       	brcs	.+4      	; 0x1d8a <__udivmodhi4_ep>
    1d86:	a6 1b       	sub	r26, r22
    1d88:	b7 0b       	sbc	r27, r23

00001d8a <__udivmodhi4_ep>:
    1d8a:	88 1f       	adc	r24, r24
    1d8c:	99 1f       	adc	r25, r25
    1d8e:	5a 95       	dec	r21
    1d90:	a9 f7       	brne	.-22     	; 0x1d7c <__udivmodhi4_loop>
    1d92:	80 95       	com	r24
    1d94:	90 95       	com	r25
    1d96:	bc 01       	movw	r22, r24
    1d98:	cd 01       	movw	r24, r26
    1d9a:	08 95       	ret

00001d9c <__divmodsi4>:
    1d9c:	05 2e       	mov	r0, r21
    1d9e:	97 fb       	bst	r25, 7
    1da0:	1e f4       	brtc	.+6      	; 0x1da8 <__divmodsi4+0xc>
    1da2:	00 94       	com	r0
    1da4:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__negsi2>
    1da8:	57 fd       	sbrc	r21, 7
    1daa:	07 d0       	rcall	.+14     	; 0x1dba <__divmodsi4_neg2>
    1dac:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__udivmodsi4>
    1db0:	07 fc       	sbrc	r0, 7
    1db2:	03 d0       	rcall	.+6      	; 0x1dba <__divmodsi4_neg2>
    1db4:	4e f4       	brtc	.+18     	; 0x1dc8 <__divmodsi4_exit>
    1db6:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <__negsi2>

00001dba <__divmodsi4_neg2>:
    1dba:	50 95       	com	r21
    1dbc:	40 95       	com	r20
    1dbe:	30 95       	com	r19
    1dc0:	21 95       	neg	r18
    1dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    1dc4:	4f 4f       	sbci	r20, 0xFF	; 255
    1dc6:	5f 4f       	sbci	r21, 0xFF	; 255

00001dc8 <__divmodsi4_exit>:
    1dc8:	08 95       	ret

00001dca <__negsi2>:
    1dca:	90 95       	com	r25
    1dcc:	80 95       	com	r24
    1dce:	70 95       	com	r23
    1dd0:	61 95       	neg	r22
    1dd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd4:	8f 4f       	sbci	r24, 0xFF	; 255
    1dd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd8:	08 95       	ret

00001dda <__udivmodsi4>:
    1dda:	a1 e2       	ldi	r26, 0x21	; 33
    1ddc:	1a 2e       	mov	r1, r26
    1dde:	aa 1b       	sub	r26, r26
    1de0:	bb 1b       	sub	r27, r27
    1de2:	fd 01       	movw	r30, r26
    1de4:	0d c0       	rjmp	.+26     	; 0x1e00 <__udivmodsi4_ep>

00001de6 <__udivmodsi4_loop>:
    1de6:	aa 1f       	adc	r26, r26
    1de8:	bb 1f       	adc	r27, r27
    1dea:	ee 1f       	adc	r30, r30
    1dec:	ff 1f       	adc	r31, r31
    1dee:	a2 17       	cp	r26, r18
    1df0:	b3 07       	cpc	r27, r19
    1df2:	e4 07       	cpc	r30, r20
    1df4:	f5 07       	cpc	r31, r21
    1df6:	20 f0       	brcs	.+8      	; 0x1e00 <__udivmodsi4_ep>
    1df8:	a2 1b       	sub	r26, r18
    1dfa:	b3 0b       	sbc	r27, r19
    1dfc:	e4 0b       	sbc	r30, r20
    1dfe:	f5 0b       	sbc	r31, r21

00001e00 <__udivmodsi4_ep>:
    1e00:	66 1f       	adc	r22, r22
    1e02:	77 1f       	adc	r23, r23
    1e04:	88 1f       	adc	r24, r24
    1e06:	99 1f       	adc	r25, r25
    1e08:	1a 94       	dec	r1
    1e0a:	69 f7       	brne	.-38     	; 0x1de6 <__udivmodsi4_loop>
    1e0c:	60 95       	com	r22
    1e0e:	70 95       	com	r23
    1e10:	80 95       	com	r24
    1e12:	90 95       	com	r25
    1e14:	9b 01       	movw	r18, r22
    1e16:	ac 01       	movw	r20, r24
    1e18:	bd 01       	movw	r22, r26
    1e1a:	cf 01       	movw	r24, r30
    1e1c:	08 95       	ret

00001e1e <__tablejump2__>:
    1e1e:	ee 0f       	add	r30, r30
    1e20:	ff 1f       	adc	r31, r31
    1e22:	05 90       	lpm	r0, Z+
    1e24:	f4 91       	lpm	r31, Z
    1e26:	e0 2d       	mov	r30, r0
    1e28:	09 94       	ijmp

00001e2a <malloc>:
    1e2a:	0f 93       	push	r16
    1e2c:	1f 93       	push	r17
    1e2e:	cf 93       	push	r28
    1e30:	df 93       	push	r29
    1e32:	82 30       	cpi	r24, 0x02	; 2
    1e34:	91 05       	cpc	r25, r1
    1e36:	10 f4       	brcc	.+4      	; 0x1e3c <malloc+0x12>
    1e38:	82 e0       	ldi	r24, 0x02	; 2
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	e0 91 76 02 	lds	r30, 0x0276	; 0x800276 <__flp>
    1e40:	f0 91 77 02 	lds	r31, 0x0277	; 0x800277 <__flp+0x1>
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	a0 e0       	ldi	r26, 0x00	; 0
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	30 97       	sbiw	r30, 0x00	; 0
    1e4e:	19 f1       	breq	.+70     	; 0x1e96 <malloc+0x6c>
    1e50:	40 81       	ld	r20, Z
    1e52:	51 81       	ldd	r21, Z+1	; 0x01
    1e54:	02 81       	ldd	r16, Z+2	; 0x02
    1e56:	13 81       	ldd	r17, Z+3	; 0x03
    1e58:	48 17       	cp	r20, r24
    1e5a:	59 07       	cpc	r21, r25
    1e5c:	c8 f0       	brcs	.+50     	; 0x1e90 <malloc+0x66>
    1e5e:	84 17       	cp	r24, r20
    1e60:	95 07       	cpc	r25, r21
    1e62:	69 f4       	brne	.+26     	; 0x1e7e <malloc+0x54>
    1e64:	10 97       	sbiw	r26, 0x00	; 0
    1e66:	31 f0       	breq	.+12     	; 0x1e74 <malloc+0x4a>
    1e68:	12 96       	adiw	r26, 0x02	; 2
    1e6a:	0c 93       	st	X, r16
    1e6c:	12 97       	sbiw	r26, 0x02	; 2
    1e6e:	13 96       	adiw	r26, 0x03	; 3
    1e70:	1c 93       	st	X, r17
    1e72:	27 c0       	rjmp	.+78     	; 0x1ec2 <malloc+0x98>
    1e74:	00 93 76 02 	sts	0x0276, r16	; 0x800276 <__flp>
    1e78:	10 93 77 02 	sts	0x0277, r17	; 0x800277 <__flp+0x1>
    1e7c:	22 c0       	rjmp	.+68     	; 0x1ec2 <malloc+0x98>
    1e7e:	21 15       	cp	r18, r1
    1e80:	31 05       	cpc	r19, r1
    1e82:	19 f0       	breq	.+6      	; 0x1e8a <malloc+0x60>
    1e84:	42 17       	cp	r20, r18
    1e86:	53 07       	cpc	r21, r19
    1e88:	18 f4       	brcc	.+6      	; 0x1e90 <malloc+0x66>
    1e8a:	9a 01       	movw	r18, r20
    1e8c:	bd 01       	movw	r22, r26
    1e8e:	ef 01       	movw	r28, r30
    1e90:	df 01       	movw	r26, r30
    1e92:	f8 01       	movw	r30, r16
    1e94:	db cf       	rjmp	.-74     	; 0x1e4c <malloc+0x22>
    1e96:	21 15       	cp	r18, r1
    1e98:	31 05       	cpc	r19, r1
    1e9a:	f9 f0       	breq	.+62     	; 0x1eda <malloc+0xb0>
    1e9c:	28 1b       	sub	r18, r24
    1e9e:	39 0b       	sbc	r19, r25
    1ea0:	24 30       	cpi	r18, 0x04	; 4
    1ea2:	31 05       	cpc	r19, r1
    1ea4:	80 f4       	brcc	.+32     	; 0x1ec6 <malloc+0x9c>
    1ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eaa:	61 15       	cp	r22, r1
    1eac:	71 05       	cpc	r23, r1
    1eae:	21 f0       	breq	.+8      	; 0x1eb8 <malloc+0x8e>
    1eb0:	fb 01       	movw	r30, r22
    1eb2:	93 83       	std	Z+3, r25	; 0x03
    1eb4:	82 83       	std	Z+2, r24	; 0x02
    1eb6:	04 c0       	rjmp	.+8      	; 0x1ec0 <malloc+0x96>
    1eb8:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <__flp+0x1>
    1ebc:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <__flp>
    1ec0:	fe 01       	movw	r30, r28
    1ec2:	32 96       	adiw	r30, 0x02	; 2
    1ec4:	44 c0       	rjmp	.+136    	; 0x1f4e <malloc+0x124>
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	e2 0f       	add	r30, r18
    1eca:	f3 1f       	adc	r31, r19
    1ecc:	81 93       	st	Z+, r24
    1ece:	91 93       	st	Z+, r25
    1ed0:	22 50       	subi	r18, 0x02	; 2
    1ed2:	31 09       	sbc	r19, r1
    1ed4:	39 83       	std	Y+1, r19	; 0x01
    1ed6:	28 83       	st	Y, r18
    1ed8:	3a c0       	rjmp	.+116    	; 0x1f4e <malloc+0x124>
    1eda:	20 91 74 02 	lds	r18, 0x0274	; 0x800274 <__brkval>
    1ede:	30 91 75 02 	lds	r19, 0x0275	; 0x800275 <__brkval+0x1>
    1ee2:	23 2b       	or	r18, r19
    1ee4:	41 f4       	brne	.+16     	; 0x1ef6 <malloc+0xcc>
    1ee6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1eea:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1eee:	30 93 75 02 	sts	0x0275, r19	; 0x800275 <__brkval+0x1>
    1ef2:	20 93 74 02 	sts	0x0274, r18	; 0x800274 <__brkval>
    1ef6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1efa:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1efe:	21 15       	cp	r18, r1
    1f00:	31 05       	cpc	r19, r1
    1f02:	41 f4       	brne	.+16     	; 0x1f14 <malloc+0xea>
    1f04:	2d b7       	in	r18, 0x3d	; 61
    1f06:	3e b7       	in	r19, 0x3e	; 62
    1f08:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1f0c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1f10:	24 1b       	sub	r18, r20
    1f12:	35 0b       	sbc	r19, r21
    1f14:	e0 91 74 02 	lds	r30, 0x0274	; 0x800274 <__brkval>
    1f18:	f0 91 75 02 	lds	r31, 0x0275	; 0x800275 <__brkval+0x1>
    1f1c:	e2 17       	cp	r30, r18
    1f1e:	f3 07       	cpc	r31, r19
    1f20:	a0 f4       	brcc	.+40     	; 0x1f4a <malloc+0x120>
    1f22:	2e 1b       	sub	r18, r30
    1f24:	3f 0b       	sbc	r19, r31
    1f26:	28 17       	cp	r18, r24
    1f28:	39 07       	cpc	r19, r25
    1f2a:	78 f0       	brcs	.+30     	; 0x1f4a <malloc+0x120>
    1f2c:	ac 01       	movw	r20, r24
    1f2e:	4e 5f       	subi	r20, 0xFE	; 254
    1f30:	5f 4f       	sbci	r21, 0xFF	; 255
    1f32:	24 17       	cp	r18, r20
    1f34:	35 07       	cpc	r19, r21
    1f36:	48 f0       	brcs	.+18     	; 0x1f4a <malloc+0x120>
    1f38:	4e 0f       	add	r20, r30
    1f3a:	5f 1f       	adc	r21, r31
    1f3c:	50 93 75 02 	sts	0x0275, r21	; 0x800275 <__brkval+0x1>
    1f40:	40 93 74 02 	sts	0x0274, r20	; 0x800274 <__brkval>
    1f44:	81 93       	st	Z+, r24
    1f46:	91 93       	st	Z+, r25
    1f48:	02 c0       	rjmp	.+4      	; 0x1f4e <malloc+0x124>
    1f4a:	e0 e0       	ldi	r30, 0x00	; 0
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	cf 01       	movw	r24, r30
    1f50:	df 91       	pop	r29
    1f52:	cf 91       	pop	r28
    1f54:	1f 91       	pop	r17
    1f56:	0f 91       	pop	r16
    1f58:	08 95       	ret

00001f5a <free>:
    1f5a:	cf 93       	push	r28
    1f5c:	df 93       	push	r29
    1f5e:	00 97       	sbiw	r24, 0x00	; 0
    1f60:	09 f4       	brne	.+2      	; 0x1f64 <free+0xa>
    1f62:	81 c0       	rjmp	.+258    	; 0x2066 <free+0x10c>
    1f64:	fc 01       	movw	r30, r24
    1f66:	32 97       	sbiw	r30, 0x02	; 2
    1f68:	13 82       	std	Z+3, r1	; 0x03
    1f6a:	12 82       	std	Z+2, r1	; 0x02
    1f6c:	a0 91 76 02 	lds	r26, 0x0276	; 0x800276 <__flp>
    1f70:	b0 91 77 02 	lds	r27, 0x0277	; 0x800277 <__flp+0x1>
    1f74:	10 97       	sbiw	r26, 0x00	; 0
    1f76:	81 f4       	brne	.+32     	; 0x1f98 <free+0x3e>
    1f78:	20 81       	ld	r18, Z
    1f7a:	31 81       	ldd	r19, Z+1	; 0x01
    1f7c:	82 0f       	add	r24, r18
    1f7e:	93 1f       	adc	r25, r19
    1f80:	20 91 74 02 	lds	r18, 0x0274	; 0x800274 <__brkval>
    1f84:	30 91 75 02 	lds	r19, 0x0275	; 0x800275 <__brkval+0x1>
    1f88:	28 17       	cp	r18, r24
    1f8a:	39 07       	cpc	r19, r25
    1f8c:	51 f5       	brne	.+84     	; 0x1fe2 <free+0x88>
    1f8e:	f0 93 75 02 	sts	0x0275, r31	; 0x800275 <__brkval+0x1>
    1f92:	e0 93 74 02 	sts	0x0274, r30	; 0x800274 <__brkval>
    1f96:	67 c0       	rjmp	.+206    	; 0x2066 <free+0x10c>
    1f98:	ed 01       	movw	r28, r26
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	ce 17       	cp	r28, r30
    1fa0:	df 07       	cpc	r29, r31
    1fa2:	40 f4       	brcc	.+16     	; 0x1fb4 <free+0x5a>
    1fa4:	4a 81       	ldd	r20, Y+2	; 0x02
    1fa6:	5b 81       	ldd	r21, Y+3	; 0x03
    1fa8:	9e 01       	movw	r18, r28
    1faa:	41 15       	cp	r20, r1
    1fac:	51 05       	cpc	r21, r1
    1fae:	f1 f0       	breq	.+60     	; 0x1fec <free+0x92>
    1fb0:	ea 01       	movw	r28, r20
    1fb2:	f5 cf       	rjmp	.-22     	; 0x1f9e <free+0x44>
    1fb4:	d3 83       	std	Z+3, r29	; 0x03
    1fb6:	c2 83       	std	Z+2, r28	; 0x02
    1fb8:	40 81       	ld	r20, Z
    1fba:	51 81       	ldd	r21, Z+1	; 0x01
    1fbc:	84 0f       	add	r24, r20
    1fbe:	95 1f       	adc	r25, r21
    1fc0:	c8 17       	cp	r28, r24
    1fc2:	d9 07       	cpc	r29, r25
    1fc4:	59 f4       	brne	.+22     	; 0x1fdc <free+0x82>
    1fc6:	88 81       	ld	r24, Y
    1fc8:	99 81       	ldd	r25, Y+1	; 0x01
    1fca:	84 0f       	add	r24, r20
    1fcc:	95 1f       	adc	r25, r21
    1fce:	02 96       	adiw	r24, 0x02	; 2
    1fd0:	91 83       	std	Z+1, r25	; 0x01
    1fd2:	80 83       	st	Z, r24
    1fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd8:	93 83       	std	Z+3, r25	; 0x03
    1fda:	82 83       	std	Z+2, r24	; 0x02
    1fdc:	21 15       	cp	r18, r1
    1fde:	31 05       	cpc	r19, r1
    1fe0:	29 f4       	brne	.+10     	; 0x1fec <free+0x92>
    1fe2:	f0 93 77 02 	sts	0x0277, r31	; 0x800277 <__flp+0x1>
    1fe6:	e0 93 76 02 	sts	0x0276, r30	; 0x800276 <__flp>
    1fea:	3d c0       	rjmp	.+122    	; 0x2066 <free+0x10c>
    1fec:	e9 01       	movw	r28, r18
    1fee:	fb 83       	std	Y+3, r31	; 0x03
    1ff0:	ea 83       	std	Y+2, r30	; 0x02
    1ff2:	49 91       	ld	r20, Y+
    1ff4:	59 91       	ld	r21, Y+
    1ff6:	c4 0f       	add	r28, r20
    1ff8:	d5 1f       	adc	r29, r21
    1ffa:	ec 17       	cp	r30, r28
    1ffc:	fd 07       	cpc	r31, r29
    1ffe:	61 f4       	brne	.+24     	; 0x2018 <free+0xbe>
    2000:	80 81       	ld	r24, Z
    2002:	91 81       	ldd	r25, Z+1	; 0x01
    2004:	84 0f       	add	r24, r20
    2006:	95 1f       	adc	r25, r21
    2008:	02 96       	adiw	r24, 0x02	; 2
    200a:	e9 01       	movw	r28, r18
    200c:	99 83       	std	Y+1, r25	; 0x01
    200e:	88 83       	st	Y, r24
    2010:	82 81       	ldd	r24, Z+2	; 0x02
    2012:	93 81       	ldd	r25, Z+3	; 0x03
    2014:	9b 83       	std	Y+3, r25	; 0x03
    2016:	8a 83       	std	Y+2, r24	; 0x02
    2018:	e0 e0       	ldi	r30, 0x00	; 0
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	12 96       	adiw	r26, 0x02	; 2
    201e:	8d 91       	ld	r24, X+
    2020:	9c 91       	ld	r25, X
    2022:	13 97       	sbiw	r26, 0x03	; 3
    2024:	00 97       	sbiw	r24, 0x00	; 0
    2026:	19 f0       	breq	.+6      	; 0x202e <free+0xd4>
    2028:	fd 01       	movw	r30, r26
    202a:	dc 01       	movw	r26, r24
    202c:	f7 cf       	rjmp	.-18     	; 0x201c <free+0xc2>
    202e:	8d 91       	ld	r24, X+
    2030:	9c 91       	ld	r25, X
    2032:	11 97       	sbiw	r26, 0x01	; 1
    2034:	9d 01       	movw	r18, r26
    2036:	2e 5f       	subi	r18, 0xFE	; 254
    2038:	3f 4f       	sbci	r19, 0xFF	; 255
    203a:	82 0f       	add	r24, r18
    203c:	93 1f       	adc	r25, r19
    203e:	20 91 74 02 	lds	r18, 0x0274	; 0x800274 <__brkval>
    2042:	30 91 75 02 	lds	r19, 0x0275	; 0x800275 <__brkval+0x1>
    2046:	28 17       	cp	r18, r24
    2048:	39 07       	cpc	r19, r25
    204a:	69 f4       	brne	.+26     	; 0x2066 <free+0x10c>
    204c:	30 97       	sbiw	r30, 0x00	; 0
    204e:	29 f4       	brne	.+10     	; 0x205a <free+0x100>
    2050:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <__flp+0x1>
    2054:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <__flp>
    2058:	02 c0       	rjmp	.+4      	; 0x205e <free+0x104>
    205a:	13 82       	std	Z+3, r1	; 0x03
    205c:	12 82       	std	Z+2, r1	; 0x02
    205e:	b0 93 75 02 	sts	0x0275, r27	; 0x800275 <__brkval+0x1>
    2062:	a0 93 74 02 	sts	0x0274, r26	; 0x800274 <__brkval>
    2066:	df 91       	pop	r29
    2068:	cf 91       	pop	r28
    206a:	08 95       	ret

0000206c <realloc>:
    206c:	a0 e0       	ldi	r26, 0x00	; 0
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	ec e3       	ldi	r30, 0x3C	; 60
    2072:	f0 e1       	ldi	r31, 0x10	; 16
    2074:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__prologue_saves__+0x8>
    2078:	ec 01       	movw	r28, r24
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	21 f4       	brne	.+8      	; 0x2086 <realloc+0x1a>
    207e:	cb 01       	movw	r24, r22
    2080:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <malloc>
    2084:	b4 c0       	rjmp	.+360    	; 0x21ee <realloc+0x182>
    2086:	fc 01       	movw	r30, r24
    2088:	e6 0f       	add	r30, r22
    208a:	f7 1f       	adc	r31, r23
    208c:	9c 01       	movw	r18, r24
    208e:	22 50       	subi	r18, 0x02	; 2
    2090:	31 09       	sbc	r19, r1
    2092:	e2 17       	cp	r30, r18
    2094:	f3 07       	cpc	r31, r19
    2096:	08 f4       	brcc	.+2      	; 0x209a <realloc+0x2e>
    2098:	a8 c0       	rjmp	.+336    	; 0x21ea <realloc+0x17e>
    209a:	d9 01       	movw	r26, r18
    209c:	0d 91       	ld	r16, X+
    209e:	1c 91       	ld	r17, X
    20a0:	11 97       	sbiw	r26, 0x01	; 1
    20a2:	06 17       	cp	r16, r22
    20a4:	17 07       	cpc	r17, r23
    20a6:	b0 f0       	brcs	.+44     	; 0x20d4 <realloc+0x68>
    20a8:	05 30       	cpi	r16, 0x05	; 5
    20aa:	11 05       	cpc	r17, r1
    20ac:	08 f4       	brcc	.+2      	; 0x20b0 <realloc+0x44>
    20ae:	9b c0       	rjmp	.+310    	; 0x21e6 <realloc+0x17a>
    20b0:	c8 01       	movw	r24, r16
    20b2:	04 97       	sbiw	r24, 0x04	; 4
    20b4:	86 17       	cp	r24, r22
    20b6:	97 07       	cpc	r25, r23
    20b8:	08 f4       	brcc	.+2      	; 0x20bc <realloc+0x50>
    20ba:	95 c0       	rjmp	.+298    	; 0x21e6 <realloc+0x17a>
    20bc:	02 50       	subi	r16, 0x02	; 2
    20be:	11 09       	sbc	r17, r1
    20c0:	06 1b       	sub	r16, r22
    20c2:	17 0b       	sbc	r17, r23
    20c4:	01 93       	st	Z+, r16
    20c6:	11 93       	st	Z+, r17
    20c8:	6d 93       	st	X+, r22
    20ca:	7c 93       	st	X, r23
    20cc:	cf 01       	movw	r24, r30
    20ce:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <free>
    20d2:	89 c0       	rjmp	.+274    	; 0x21e6 <realloc+0x17a>
    20d4:	5b 01       	movw	r10, r22
    20d6:	a0 1a       	sub	r10, r16
    20d8:	b1 0a       	sbc	r11, r17
    20da:	4c 01       	movw	r8, r24
    20dc:	80 0e       	add	r8, r16
    20de:	91 1e       	adc	r9, r17
    20e0:	a0 91 76 02 	lds	r26, 0x0276	; 0x800276 <__flp>
    20e4:	b0 91 77 02 	lds	r27, 0x0277	; 0x800277 <__flp+0x1>
    20e8:	61 2c       	mov	r6, r1
    20ea:	71 2c       	mov	r7, r1
    20ec:	e1 2c       	mov	r14, r1
    20ee:	f1 2c       	mov	r15, r1
    20f0:	10 97       	sbiw	r26, 0x00	; 0
    20f2:	09 f4       	brne	.+2      	; 0x20f6 <realloc+0x8a>
    20f4:	46 c0       	rjmp	.+140    	; 0x2182 <realloc+0x116>
    20f6:	8d 91       	ld	r24, X+
    20f8:	9c 91       	ld	r25, X
    20fa:	11 97       	sbiw	r26, 0x01	; 1
    20fc:	a8 15       	cp	r26, r8
    20fe:	b9 05       	cpc	r27, r9
    2100:	b1 f5       	brne	.+108    	; 0x216e <realloc+0x102>
    2102:	6c 01       	movw	r12, r24
    2104:	42 e0       	ldi	r20, 0x02	; 2
    2106:	c4 0e       	add	r12, r20
    2108:	d1 1c       	adc	r13, r1
    210a:	ca 14       	cp	r12, r10
    210c:	db 04       	cpc	r13, r11
    210e:	78 f1       	brcs	.+94     	; 0x216e <realloc+0x102>
    2110:	4c 01       	movw	r8, r24
    2112:	8a 18       	sub	r8, r10
    2114:	9b 08       	sbc	r9, r11
    2116:	64 01       	movw	r12, r8
    2118:	42 e0       	ldi	r20, 0x02	; 2
    211a:	c4 0e       	add	r12, r20
    211c:	d1 1c       	adc	r13, r1
    211e:	12 96       	adiw	r26, 0x02	; 2
    2120:	bc 90       	ld	r11, X
    2122:	12 97       	sbiw	r26, 0x02	; 2
    2124:	13 96       	adiw	r26, 0x03	; 3
    2126:	ac 91       	ld	r26, X
    2128:	b5 e0       	ldi	r27, 0x05	; 5
    212a:	cb 16       	cp	r12, r27
    212c:	d1 04       	cpc	r13, r1
    212e:	40 f0       	brcs	.+16     	; 0x2140 <realloc+0xd4>
    2130:	b2 82       	std	Z+2, r11	; 0x02
    2132:	a3 83       	std	Z+3, r26	; 0x03
    2134:	91 82       	std	Z+1, r9	; 0x01
    2136:	80 82       	st	Z, r8
    2138:	d9 01       	movw	r26, r18
    213a:	6d 93       	st	X+, r22
    213c:	7c 93       	st	X, r23
    213e:	09 c0       	rjmp	.+18     	; 0x2152 <realloc+0xe6>
    2140:	0e 5f       	subi	r16, 0xFE	; 254
    2142:	1f 4f       	sbci	r17, 0xFF	; 255
    2144:	80 0f       	add	r24, r16
    2146:	91 1f       	adc	r25, r17
    2148:	f9 01       	movw	r30, r18
    214a:	91 83       	std	Z+1, r25	; 0x01
    214c:	80 83       	st	Z, r24
    214e:	eb 2d       	mov	r30, r11
    2150:	fa 2f       	mov	r31, r26
    2152:	e1 14       	cp	r14, r1
    2154:	f1 04       	cpc	r15, r1
    2156:	31 f0       	breq	.+12     	; 0x2164 <realloc+0xf8>
    2158:	d7 01       	movw	r26, r14
    215a:	13 96       	adiw	r26, 0x03	; 3
    215c:	fc 93       	st	X, r31
    215e:	ee 93       	st	-X, r30
    2160:	12 97       	sbiw	r26, 0x02	; 2
    2162:	41 c0       	rjmp	.+130    	; 0x21e6 <realloc+0x17a>
    2164:	f0 93 77 02 	sts	0x0277, r31	; 0x800277 <__flp+0x1>
    2168:	e0 93 76 02 	sts	0x0276, r30	; 0x800276 <__flp>
    216c:	3c c0       	rjmp	.+120    	; 0x21e6 <realloc+0x17a>
    216e:	68 16       	cp	r6, r24
    2170:	79 06       	cpc	r7, r25
    2172:	08 f4       	brcc	.+2      	; 0x2176 <realloc+0x10a>
    2174:	3c 01       	movw	r6, r24
    2176:	7d 01       	movw	r14, r26
    2178:	12 96       	adiw	r26, 0x02	; 2
    217a:	0d 90       	ld	r0, X+
    217c:	bc 91       	ld	r27, X
    217e:	a0 2d       	mov	r26, r0
    2180:	b7 cf       	rjmp	.-146    	; 0x20f0 <realloc+0x84>
    2182:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <__brkval>
    2186:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <__brkval+0x1>
    218a:	88 16       	cp	r8, r24
    218c:	99 06       	cpc	r9, r25
    218e:	e1 f4       	brne	.+56     	; 0x21c8 <realloc+0x15c>
    2190:	66 16       	cp	r6, r22
    2192:	77 06       	cpc	r7, r23
    2194:	c8 f4       	brcc	.+50     	; 0x21c8 <realloc+0x15c>
    2196:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    219a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    219e:	00 97       	sbiw	r24, 0x00	; 0
    21a0:	41 f4       	brne	.+16     	; 0x21b2 <realloc+0x146>
    21a2:	8d b7       	in	r24, 0x3d	; 61
    21a4:	9e b7       	in	r25, 0x3e	; 62
    21a6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    21aa:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    21ae:	84 1b       	sub	r24, r20
    21b0:	95 0b       	sbc	r25, r21
    21b2:	e8 17       	cp	r30, r24
    21b4:	f9 07       	cpc	r31, r25
    21b6:	c8 f4       	brcc	.+50     	; 0x21ea <realloc+0x17e>
    21b8:	f0 93 75 02 	sts	0x0275, r31	; 0x800275 <__brkval+0x1>
    21bc:	e0 93 74 02 	sts	0x0274, r30	; 0x800274 <__brkval>
    21c0:	f9 01       	movw	r30, r18
    21c2:	71 83       	std	Z+1, r23	; 0x01
    21c4:	60 83       	st	Z, r22
    21c6:	0f c0       	rjmp	.+30     	; 0x21e6 <realloc+0x17a>
    21c8:	cb 01       	movw	r24, r22
    21ca:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <malloc>
    21ce:	7c 01       	movw	r14, r24
    21d0:	00 97       	sbiw	r24, 0x00	; 0
    21d2:	59 f0       	breq	.+22     	; 0x21ea <realloc+0x17e>
    21d4:	a8 01       	movw	r20, r16
    21d6:	be 01       	movw	r22, r28
    21d8:	0e 94 2c 11 	call	0x2258	; 0x2258 <memcpy>
    21dc:	ce 01       	movw	r24, r28
    21de:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <free>
    21e2:	c7 01       	movw	r24, r14
    21e4:	04 c0       	rjmp	.+8      	; 0x21ee <realloc+0x182>
    21e6:	ce 01       	movw	r24, r28
    21e8:	02 c0       	rjmp	.+4      	; 0x21ee <realloc+0x182>
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62
    21f2:	ee e0       	ldi	r30, 0x0E	; 14
    21f4:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__epilogue_restores__+0x8>

000021f8 <atol>:
    21f8:	1f 93       	push	r17
    21fa:	fc 01       	movw	r30, r24
    21fc:	99 27       	eor	r25, r25
    21fe:	88 27       	eor	r24, r24
    2200:	bc 01       	movw	r22, r24
    2202:	e8 94       	clt
    2204:	11 91       	ld	r17, Z+
    2206:	10 32       	cpi	r17, 0x20	; 32
    2208:	e9 f3       	breq	.-6      	; 0x2204 <atol+0xc>
    220a:	19 30       	cpi	r17, 0x09	; 9
    220c:	10 f0       	brcs	.+4      	; 0x2212 <atol+0x1a>
    220e:	1e 30       	cpi	r17, 0x0E	; 14
    2210:	c8 f3       	brcs	.-14     	; 0x2204 <atol+0xc>
    2212:	1b 32       	cpi	r17, 0x2B	; 43
    2214:	51 f0       	breq	.+20     	; 0x222a <atol+0x32>
    2216:	1d 32       	cpi	r17, 0x2D	; 45
    2218:	49 f4       	brne	.+18     	; 0x222c <atol+0x34>
    221a:	68 94       	set
    221c:	06 c0       	rjmp	.+12     	; 0x222a <atol+0x32>
    221e:	0e 94 56 11 	call	0x22ac	; 0x22ac <__mulsi_const_10>
    2222:	61 0f       	add	r22, r17
    2224:	71 1d       	adc	r23, r1
    2226:	81 1d       	adc	r24, r1
    2228:	91 1d       	adc	r25, r1
    222a:	11 91       	ld	r17, Z+
    222c:	10 53       	subi	r17, 0x30	; 48
    222e:	1a 30       	cpi	r17, 0x0A	; 10
    2230:	b0 f3       	brcs	.-20     	; 0x221e <atol+0x26>
    2232:	3e f4       	brtc	.+14     	; 0x2242 <atol+0x4a>
    2234:	90 95       	com	r25
    2236:	80 95       	com	r24
    2238:	70 95       	com	r23
    223a:	61 95       	neg	r22
    223c:	7f 4f       	sbci	r23, 0xFF	; 255
    223e:	8f 4f       	sbci	r24, 0xFF	; 255
    2240:	9f 4f       	sbci	r25, 0xFF	; 255
    2242:	1f 91       	pop	r17
    2244:	08 95       	ret

00002246 <memcpy_P>:
    2246:	fb 01       	movw	r30, r22
    2248:	dc 01       	movw	r26, r24
    224a:	02 c0       	rjmp	.+4      	; 0x2250 <memcpy_P+0xa>
    224c:	05 90       	lpm	r0, Z+
    224e:	0d 92       	st	X+, r0
    2250:	41 50       	subi	r20, 0x01	; 1
    2252:	50 40       	sbci	r21, 0x00	; 0
    2254:	d8 f7       	brcc	.-10     	; 0x224c <memcpy_P+0x6>
    2256:	08 95       	ret

00002258 <memcpy>:
    2258:	fb 01       	movw	r30, r22
    225a:	dc 01       	movw	r26, r24
    225c:	02 c0       	rjmp	.+4      	; 0x2262 <memcpy+0xa>
    225e:	01 90       	ld	r0, Z+
    2260:	0d 92       	st	X+, r0
    2262:	41 50       	subi	r20, 0x01	; 1
    2264:	50 40       	sbci	r21, 0x00	; 0
    2266:	d8 f7       	brcc	.-10     	; 0x225e <memcpy+0x6>
    2268:	08 95       	ret

0000226a <strcpy>:
    226a:	fb 01       	movw	r30, r22
    226c:	dc 01       	movw	r26, r24
    226e:	01 90       	ld	r0, Z+
    2270:	0d 92       	st	X+, r0
    2272:	00 20       	and	r0, r0
    2274:	e1 f7       	brne	.-8      	; 0x226e <strcpy+0x4>
    2276:	08 95       	ret

00002278 <ltoa>:
    2278:	25 32       	cpi	r18, 0x25	; 37
    227a:	31 05       	cpc	r19, r1
    227c:	20 f4       	brcc	.+8      	; 0x2286 <ltoa+0xe>
    227e:	22 30       	cpi	r18, 0x02	; 2
    2280:	10 f0       	brcs	.+4      	; 0x2286 <ltoa+0xe>
    2282:	0c 94 47 11 	jmp	0x228e	; 0x228e <__ltoa_ncheck>
    2286:	fa 01       	movw	r30, r20
    2288:	10 82       	st	Z, r1
    228a:	ca 01       	movw	r24, r20
    228c:	08 95       	ret

0000228e <__ltoa_ncheck>:
    228e:	bb 27       	eor	r27, r27
    2290:	2a 30       	cpi	r18, 0x0A	; 10
    2292:	51 f4       	brne	.+20     	; 0x22a8 <__ltoa_ncheck+0x1a>
    2294:	99 23       	and	r25, r25
    2296:	42 f4       	brpl	.+16     	; 0x22a8 <__ltoa_ncheck+0x1a>
    2298:	bd e2       	ldi	r27, 0x2D	; 45
    229a:	90 95       	com	r25
    229c:	80 95       	com	r24
    229e:	70 95       	com	r23
    22a0:	61 95       	neg	r22
    22a2:	7f 4f       	sbci	r23, 0xFF	; 255
    22a4:	8f 4f       	sbci	r24, 0xFF	; 255
    22a6:	9f 4f       	sbci	r25, 0xFF	; 255
    22a8:	0c 94 6c 11 	jmp	0x22d8	; 0x22d8 <__ultoa_common>

000022ac <__mulsi_const_10>:
    22ac:	59 2f       	mov	r21, r25
    22ae:	48 2f       	mov	r20, r24
    22b0:	37 2f       	mov	r19, r23
    22b2:	26 2f       	mov	r18, r22
    22b4:	66 0f       	add	r22, r22
    22b6:	77 1f       	adc	r23, r23
    22b8:	88 1f       	adc	r24, r24
    22ba:	99 1f       	adc	r25, r25
    22bc:	66 0f       	add	r22, r22
    22be:	77 1f       	adc	r23, r23
    22c0:	88 1f       	adc	r24, r24
    22c2:	99 1f       	adc	r25, r25
    22c4:	62 0f       	add	r22, r18
    22c6:	73 1f       	adc	r23, r19
    22c8:	84 1f       	adc	r24, r20
    22ca:	95 1f       	adc	r25, r21
    22cc:	66 0f       	add	r22, r22
    22ce:	77 1f       	adc	r23, r23
    22d0:	88 1f       	adc	r24, r24
    22d2:	99 1f       	adc	r25, r25
    22d4:	08 95       	ret

000022d6 <__ultoa_ncheck>:
    22d6:	bb 27       	eor	r27, r27

000022d8 <__ultoa_common>:
    22d8:	fa 01       	movw	r30, r20
    22da:	a6 2f       	mov	r26, r22
    22dc:	62 17       	cp	r22, r18
    22de:	71 05       	cpc	r23, r1
    22e0:	81 05       	cpc	r24, r1
    22e2:	91 05       	cpc	r25, r1
    22e4:	33 0b       	sbc	r19, r19
    22e6:	30 fb       	bst	r19, 0
    22e8:	66 f0       	brts	.+24     	; 0x2302 <__ultoa_common+0x2a>
    22ea:	aa 27       	eor	r26, r26
    22ec:	66 0f       	add	r22, r22
    22ee:	77 1f       	adc	r23, r23
    22f0:	88 1f       	adc	r24, r24
    22f2:	99 1f       	adc	r25, r25
    22f4:	aa 1f       	adc	r26, r26
    22f6:	a2 17       	cp	r26, r18
    22f8:	10 f0       	brcs	.+4      	; 0x22fe <__ultoa_common+0x26>
    22fa:	a2 1b       	sub	r26, r18
    22fc:	63 95       	inc	r22
    22fe:	38 50       	subi	r19, 0x08	; 8
    2300:	a9 f7       	brne	.-22     	; 0x22ec <__ultoa_common+0x14>
    2302:	a0 5d       	subi	r26, 0xD0	; 208
    2304:	aa 33       	cpi	r26, 0x3A	; 58
    2306:	08 f0       	brcs	.+2      	; 0x230a <__ultoa_common+0x32>
    2308:	a9 5d       	subi	r26, 0xD9	; 217
    230a:	a1 93       	st	Z+, r26
    230c:	36 f7       	brtc	.-52     	; 0x22da <__ultoa_common+0x2>
    230e:	b1 11       	cpse	r27, r1
    2310:	b1 93       	st	Z+, r27
    2312:	10 82       	st	Z, r1
    2314:	ca 01       	movw	r24, r20
    2316:	0c 94 8d 11 	jmp	0x231a	; 0x231a <strrev>

0000231a <strrev>:
    231a:	dc 01       	movw	r26, r24
    231c:	fc 01       	movw	r30, r24
    231e:	67 2f       	mov	r22, r23
    2320:	71 91       	ld	r23, Z+
    2322:	77 23       	and	r23, r23
    2324:	e1 f7       	brne	.-8      	; 0x231e <strrev+0x4>
    2326:	32 97       	sbiw	r30, 0x02	; 2
    2328:	04 c0       	rjmp	.+8      	; 0x2332 <strrev+0x18>
    232a:	7c 91       	ld	r23, X
    232c:	6d 93       	st	X+, r22
    232e:	70 83       	st	Z, r23
    2330:	62 91       	ld	r22, -Z
    2332:	ae 17       	cp	r26, r30
    2334:	bf 07       	cpc	r27, r31
    2336:	c8 f3       	brcs	.-14     	; 0x232a <strrev+0x10>
    2338:	08 95       	ret

0000233a <eeprom_read_block>:
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22

0000233e <eeprom_read_blraw>:
    233e:	fc 01       	movw	r30, r24
    2340:	f9 99       	sbic	0x1f, 1	; 31
    2342:	fe cf       	rjmp	.-4      	; 0x2340 <eeprom_read_blraw+0x2>
    2344:	06 c0       	rjmp	.+12     	; 0x2352 <eeprom_read_blraw+0x14>
    2346:	f2 bd       	out	0x22, r31	; 34
    2348:	e1 bd       	out	0x21, r30	; 33
    234a:	f8 9a       	sbi	0x1f, 0	; 31
    234c:	31 96       	adiw	r30, 0x01	; 1
    234e:	00 b4       	in	r0, 0x20	; 32
    2350:	0d 92       	st	X+, r0
    2352:	41 50       	subi	r20, 0x01	; 1
    2354:	50 40       	sbci	r21, 0x00	; 0
    2356:	b8 f7       	brcc	.-18     	; 0x2346 <eeprom_read_blraw+0x8>
    2358:	08 95       	ret

0000235a <eeprom_read_byte>:
    235a:	f9 99       	sbic	0x1f, 1	; 31
    235c:	fe cf       	rjmp	.-4      	; 0x235a <eeprom_read_byte>
    235e:	92 bd       	out	0x22, r25	; 34
    2360:	81 bd       	out	0x21, r24	; 33
    2362:	f8 9a       	sbi	0x1f, 0	; 31
    2364:	99 27       	eor	r25, r25
    2366:	80 b5       	in	r24, 0x20	; 32
    2368:	08 95       	ret

0000236a <eeprom_update_block>:
    236a:	dc 01       	movw	r26, r24
    236c:	a4 0f       	add	r26, r20
    236e:	b5 1f       	adc	r27, r21
    2370:	41 50       	subi	r20, 0x01	; 1
    2372:	50 40       	sbci	r21, 0x00	; 0
    2374:	48 f0       	brcs	.+18     	; 0x2388 <eeprom_update_block+0x1e>
    2376:	cb 01       	movw	r24, r22
    2378:	84 0f       	add	r24, r20
    237a:	95 1f       	adc	r25, r21
    237c:	2e 91       	ld	r18, -X
    237e:	0e 94 c6 11 	call	0x238c	; 0x238c <eeprom_update_r18>
    2382:	41 50       	subi	r20, 0x01	; 1
    2384:	50 40       	sbci	r21, 0x00	; 0
    2386:	d0 f7       	brcc	.-12     	; 0x237c <eeprom_update_block+0x12>
    2388:	08 95       	ret

0000238a <eeprom_update_byte>:
    238a:	26 2f       	mov	r18, r22

0000238c <eeprom_update_r18>:
    238c:	f9 99       	sbic	0x1f, 1	; 31
    238e:	fe cf       	rjmp	.-4      	; 0x238c <eeprom_update_r18>
    2390:	92 bd       	out	0x22, r25	; 34
    2392:	81 bd       	out	0x21, r24	; 33
    2394:	f8 9a       	sbi	0x1f, 0	; 31
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	00 b4       	in	r0, 0x20	; 32
    239a:	02 16       	cp	r0, r18
    239c:	39 f0       	breq	.+14     	; 0x23ac <eeprom_update_r18+0x20>
    239e:	1f ba       	out	0x1f, r1	; 31
    23a0:	20 bd       	out	0x20, r18	; 32
    23a2:	0f b6       	in	r0, 0x3f	; 63
    23a4:	f8 94       	cli
    23a6:	fa 9a       	sbi	0x1f, 2	; 31
    23a8:	f9 9a       	sbi	0x1f, 1	; 31
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	08 95       	ret

000023ae <eeprom_write_block>:
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	03 c0       	rjmp	.+6      	; 0x23ba <eeprom_write_block+0xc>
    23b4:	2d 91       	ld	r18, X+
    23b6:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <eeprom_write_r18>
    23ba:	41 50       	subi	r20, 0x01	; 1
    23bc:	50 40       	sbci	r21, 0x00	; 0
    23be:	d0 f7       	brcc	.-12     	; 0x23b4 <eeprom_write_block+0x6>
    23c0:	08 95       	ret

000023c2 <eeprom_write_byte>:
    23c2:	26 2f       	mov	r18, r22

000023c4 <eeprom_write_r18>:
    23c4:	f9 99       	sbic	0x1f, 1	; 31
    23c6:	fe cf       	rjmp	.-4      	; 0x23c4 <eeprom_write_r18>
    23c8:	1f ba       	out	0x1f, r1	; 31
    23ca:	92 bd       	out	0x22, r25	; 34
    23cc:	81 bd       	out	0x21, r24	; 33
    23ce:	20 bd       	out	0x20, r18	; 32
    23d0:	0f b6       	in	r0, 0x3f	; 63
    23d2:	f8 94       	cli
    23d4:	fa 9a       	sbi	0x1f, 2	; 31
    23d6:	f9 9a       	sbi	0x1f, 1	; 31
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	01 96       	adiw	r24, 0x01	; 1
    23dc:	08 95       	ret

000023de <__prologue_saves__>:
    23de:	2f 92       	push	r2
    23e0:	3f 92       	push	r3
    23e2:	4f 92       	push	r4
    23e4:	5f 92       	push	r5
    23e6:	6f 92       	push	r6
    23e8:	7f 92       	push	r7
    23ea:	8f 92       	push	r8
    23ec:	9f 92       	push	r9
    23ee:	af 92       	push	r10
    23f0:	bf 92       	push	r11
    23f2:	cf 92       	push	r12
    23f4:	df 92       	push	r13
    23f6:	ef 92       	push	r14
    23f8:	ff 92       	push	r15
    23fa:	0f 93       	push	r16
    23fc:	1f 93       	push	r17
    23fe:	cf 93       	push	r28
    2400:	df 93       	push	r29
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
    2406:	ca 1b       	sub	r28, r26
    2408:	db 0b       	sbc	r29, r27
    240a:	0f b6       	in	r0, 0x3f	; 63
    240c:	f8 94       	cli
    240e:	de bf       	out	0x3e, r29	; 62
    2410:	0f be       	out	0x3f, r0	; 63
    2412:	cd bf       	out	0x3d, r28	; 61
    2414:	09 94       	ijmp

00002416 <__epilogue_restores__>:
    2416:	2a 88       	ldd	r2, Y+18	; 0x12
    2418:	39 88       	ldd	r3, Y+17	; 0x11
    241a:	48 88       	ldd	r4, Y+16	; 0x10
    241c:	5f 84       	ldd	r5, Y+15	; 0x0f
    241e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2420:	7d 84       	ldd	r7, Y+13	; 0x0d
    2422:	8c 84       	ldd	r8, Y+12	; 0x0c
    2424:	9b 84       	ldd	r9, Y+11	; 0x0b
    2426:	aa 84       	ldd	r10, Y+10	; 0x0a
    2428:	b9 84       	ldd	r11, Y+9	; 0x09
    242a:	c8 84       	ldd	r12, Y+8	; 0x08
    242c:	df 80       	ldd	r13, Y+7	; 0x07
    242e:	ee 80       	ldd	r14, Y+6	; 0x06
    2430:	fd 80       	ldd	r15, Y+5	; 0x05
    2432:	0c 81       	ldd	r16, Y+4	; 0x04
    2434:	1b 81       	ldd	r17, Y+3	; 0x03
    2436:	aa 81       	ldd	r26, Y+2	; 0x02
    2438:	b9 81       	ldd	r27, Y+1	; 0x01
    243a:	ce 0f       	add	r28, r30
    243c:	d1 1d       	adc	r29, r1
    243e:	0f b6       	in	r0, 0x3f	; 63
    2440:	f8 94       	cli
    2442:	de bf       	out	0x3e, r29	; 62
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	cd bf       	out	0x3d, r28	; 61
    2448:	ed 01       	movw	r28, r26
    244a:	08 95       	ret

0000244c <_exit>:
    244c:	f8 94       	cli

0000244e <__stop_program>:
    244e:	ff cf       	rjmp	.-2      	; 0x244e <__stop_program>
